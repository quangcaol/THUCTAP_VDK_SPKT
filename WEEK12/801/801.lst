CCS PCH C Compiler, Version 5.078, 43599               14-Dec-20 16:32

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK12\801\801.lst

               ROM used:   6168 bytes (19%)
                           Largest free fragment is 26600
               RAM used:   1178 (58%) at main() level
                           1199 (59%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   1412
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
0024:  DATA 7F,00
0026:  CLRF   FF7
0028:  ADDLW  36
002A:  MOVWF  FF6
002C:  MOVLW  00
002E:  ADDWFC FF7,F
0030:  TBLRD*+
0032:  MOVF   FF5,W
0034:  RETURN 0
0036:  DATA 7F,BF
0038:  DATA DF,EF
003A:  DATA F7,FB
003C:  DATA FD,FE
003E:  CLRF   FF7
0040:  ADDLW  4E
0042:  MOVWF  FF6
0044:  MOVLW  00
0046:  ADDWFC FF7,F
0048:  TBLRD*+
004A:  MOVF   FF5,W
004C:  RETURN 0
004E:  DATA 07,0F
0050:  DATA 1F,1F
0052:  DATA 1F,1F
0054:  DATA 1F,1F
0056:  DATA 1F,1F
0058:  DATA 1F,00
005A:  DATA 00,00
005C:  DATA 00,00
005E:  DATA 1C,1E
0060:  DATA 1F,1F
0062:  DATA 1F,1F
0064:  DATA 1F,1F
0066:  DATA 00,00
0068:  DATA 00,00
006A:  DATA 00,1F
006C:  DATA 1F,1F
006E:  DATA 1F,1F
0070:  DATA 1F,1F
0072:  DATA 1F,1F
0074:  DATA 1E,1C
0076:  DATA 1F,1F
0078:  DATA 1F,1F
007A:  DATA 1F,1F
007C:  DATA 0F,07
007E:  DATA 1F,1F
0080:  DATA 1F,00
0082:  DATA 00,00
0084:  DATA 1F,1F
0086:  DATA 1F,1F
0088:  DATA 1F,1F
008A:  DATA 1F,1F
008C:  DATA 1F,1F
*
020A:  CLRF   01
020C:  CLRF   02
020E:  CLRF   00
0210:  CLRF   03
0212:  MOVLB  4
0214:  MOVF   x9D,W
0216:  BNZ   021C
0218:  MOVF   x9C,W
021A:  BZ    024C
021C:  MOVLW  10
021E:  MOVWF  x9E
0220:  BCF    FD8.0
0222:  RLCF   x9A,F
0224:  RLCF   x9B,F
0226:  RLCF   00,F
0228:  RLCF   03,F
022A:  MOVF   x9D,W
022C:  SUBWF  03,W
022E:  BNZ   0234
0230:  MOVF   x9C,W
0232:  SUBWF  00,W
0234:  BNC   0244
0236:  MOVF   x9C,W
0238:  SUBWF  00,F
023A:  BTFSS  FD8.0
023C:  DECF   03,F
023E:  MOVF   x9D,W
0240:  SUBWF  03,F
0242:  BSF    FD8.0
0244:  RLCF   01,F
0246:  RLCF   02,F
0248:  DECFSZ x9E,F
024A:  BRA    0220
024C:  MOVLB  0
024E:  RETURN 0
*
06EA:  MOVLB  4
06EC:  MOVF   x96,W
06EE:  XORWF  x97,W
06F0:  ANDLW  80
06F2:  MOVWF  x99
06F4:  BTFSS  x96.7
06F6:  BRA    06FC
06F8:  COMF   x96,F
06FA:  INCF   x96,F
06FC:  BTFSS  x97.7
06FE:  BRA    0704
0700:  COMF   x97,F
0702:  INCF   x97,F
0704:  MOVF   x97,W
0706:  CLRF   01
0708:  SUBWF  x96,W
070A:  BC    0712
070C:  MOVFF  496,00
0710:  BRA    072A
0712:  CLRF   00
0714:  MOVLW  08
0716:  MOVWF  x98
0718:  RLCF   x96,F
071A:  RLCF   00,F
071C:  MOVF   x97,W
071E:  SUBWF  00,W
0720:  BTFSC  FD8.0
0722:  MOVWF  00
0724:  RLCF   01,F
0726:  DECFSZ x98,F
0728:  BRA    0718
072A:  BTFSS  x99.7
072C:  BRA    0732
072E:  COMF   01,F
0730:  INCF   01,F
0732:  MOVLB  0
0734:  RETURN 0
*
08A6:  MOVLB  4
08A8:  MOVF   x9A,W
08AA:  CLRF   01
08AC:  SUBWF  x99,W
08AE:  BC    08B6
08B0:  MOVFF  499,00
08B4:  BRA    08CE
08B6:  CLRF   00
08B8:  MOVLW  08
08BA:  MOVWF  x9B
08BC:  RLCF   x99,F
08BE:  RLCF   00,F
08C0:  MOVF   x9A,W
08C2:  SUBWF  00,W
08C4:  BTFSC  FD8.0
08C6:  MOVWF  00
08C8:  RLCF   01,F
08CA:  DECFSZ x9B,F
08CC:  BRA    08BC
08CE:  MOVLB  0
08D0:  RETURN 0
*
0A86:  MOVLW  8E
0A88:  MOVWF  00
0A8A:  MOVFF  499,01
0A8E:  MOVFF  498,02
0A92:  CLRF   03
0A94:  MOVF   01,F
0A96:  BNZ   0AAA
0A98:  MOVFF  02,01
0A9C:  CLRF   02
0A9E:  MOVLW  08
0AA0:  SUBWF  00,F
0AA2:  MOVF   01,F
0AA4:  BNZ   0AAA
0AA6:  CLRF   00
0AA8:  BRA    0ABA
0AAA:  BCF    FD8.0
0AAC:  BTFSC  01.7
0AAE:  BRA    0AB8
0AB0:  RLCF   02,F
0AB2:  RLCF   01,F
0AB4:  DECF   00,F
0AB6:  BRA    0AAA
0AB8:  BCF    01.7
0ABA:  RETURN 0
0ABC:  MOVLB  4
0ABE:  MOVF   x98,W
0AC0:  BTFSC  FD8.2
0AC2:  BRA    0C0E
0AC4:  MOVWF  xA4
0AC6:  MOVF   x9C,W
0AC8:  BTFSC  FD8.2
0ACA:  BRA    0C0E
0ACC:  SUBWF  xA4,F
0ACE:  BNC   0ADA
0AD0:  MOVLW  7F
0AD2:  ADDWF  xA4,F
0AD4:  BTFSC  FD8.0
0AD6:  BRA    0C0E
0AD8:  BRA    0AE6
0ADA:  MOVLW  81
0ADC:  SUBWF  xA4,F
0ADE:  BTFSS  FD8.0
0AE0:  BRA    0C0E
0AE2:  BTFSC  FD8.2
0AE4:  BRA    0C0E
0AE6:  MOVFF  4A4,00
0AEA:  CLRF   01
0AEC:  CLRF   02
0AEE:  CLRF   03
0AF0:  CLRF   xA3
0AF2:  MOVFF  499,4A2
0AF6:  BSF    xA2.7
0AF8:  MOVFF  49A,4A1
0AFC:  MOVFF  49B,4A0
0B00:  MOVLW  19
0B02:  MOVWF  xA4
0B04:  MOVF   x9F,W
0B06:  SUBWF  xA0,F
0B08:  BC    0B24
0B0A:  MOVLW  01
0B0C:  SUBWF  xA1,F
0B0E:  BC    0B24
0B10:  SUBWF  xA2,F
0B12:  BC    0B24
0B14:  SUBWF  xA3,F
0B16:  BC    0B24
0B18:  INCF   xA3,F
0B1A:  INCF   xA2,F
0B1C:  INCF   xA1,F
0B1E:  MOVF   x9F,W
0B20:  ADDWF  xA0,F
0B22:  BRA    0B74
0B24:  MOVF   x9E,W
0B26:  SUBWF  xA1,F
0B28:  BC    0B4E
0B2A:  MOVLW  01
0B2C:  SUBWF  xA2,F
0B2E:  BC    0B4E
0B30:  SUBWF  xA3,F
0B32:  BC    0B4E
0B34:  INCF   xA3,F
0B36:  INCF   xA2,F
0B38:  MOVF   x9E,W
0B3A:  ADDWF  xA1,F
0B3C:  MOVF   x9F,W
0B3E:  ADDWF  xA0,F
0B40:  BNC   0B74
0B42:  INCF   xA1,F
0B44:  BNZ   0B74
0B46:  INCF   xA2,F
0B48:  BNZ   0B74
0B4A:  INCF   xA3,F
0B4C:  BRA    0B74
0B4E:  MOVF   x9D,W
0B50:  IORLW  80
0B52:  SUBWF  xA2,F
0B54:  BC    0B72
0B56:  MOVLW  01
0B58:  SUBWF  xA3,F
0B5A:  BC    0B72
0B5C:  INCF   xA3,F
0B5E:  MOVF   x9D,W
0B60:  IORLW  80
0B62:  ADDWF  xA2,F
0B64:  MOVF   x9E,W
0B66:  ADDWF  xA1,F
0B68:  BNC   0B3C
0B6A:  INCF   xA2,F
0B6C:  BNZ   0B3C
0B6E:  INCF   xA3,F
0B70:  BRA    0B3C
0B72:  BSF    03.0
0B74:  DECFSZ xA4,F
0B76:  BRA    0B7A
0B78:  BRA    0B90
0B7A:  BCF    FD8.0
0B7C:  RLCF   xA0,F
0B7E:  RLCF   xA1,F
0B80:  RLCF   xA2,F
0B82:  RLCF   xA3,F
0B84:  BCF    FD8.0
0B86:  RLCF   03,F
0B88:  RLCF   02,F
0B8A:  RLCF   01,F
0B8C:  RLCF   xA5,F
0B8E:  BRA    0B04
0B90:  BTFSS  xA5.0
0B92:  BRA    0BA0
0B94:  BCF    FD8.0
0B96:  RRCF   01,F
0B98:  RRCF   02,F
0B9A:  RRCF   03,F
0B9C:  RRCF   xA5,F
0B9E:  BRA    0BA4
0BA0:  DECF   00,F
0BA2:  BZ    0C0E
0BA4:  BTFSC  xA5.7
0BA6:  BRA    0BE4
0BA8:  BCF    FD8.0
0BAA:  RLCF   xA0,F
0BAC:  RLCF   xA1,F
0BAE:  RLCF   xA2,F
0BB0:  RLCF   xA3,F
0BB2:  MOVF   x9F,W
0BB4:  SUBWF  xA0,F
0BB6:  BC    0BC6
0BB8:  MOVLW  01
0BBA:  SUBWF  xA1,F
0BBC:  BC    0BC6
0BBE:  SUBWF  xA2,F
0BC0:  BC    0BC6
0BC2:  SUBWF  xA3,F
0BC4:  BNC   0BFA
0BC6:  MOVF   x9E,W
0BC8:  SUBWF  xA1,F
0BCA:  BC    0BD6
0BCC:  MOVLW  01
0BCE:  SUBWF  xA2,F
0BD0:  BC    0BD6
0BD2:  SUBWF  xA3,F
0BD4:  BNC   0BFA
0BD6:  MOVF   x9D,W
0BD8:  IORLW  80
0BDA:  SUBWF  xA2,F
0BDC:  BC    0BE4
0BDE:  MOVLW  01
0BE0:  SUBWF  xA3,F
0BE2:  BNC   0BFA
0BE4:  INCF   03,F
0BE6:  BNZ   0BFA
0BE8:  INCF   02,F
0BEA:  BNZ   0BFA
0BEC:  INCF   01,F
0BEE:  BNZ   0BFA
0BF0:  INCF   00,F
0BF2:  BZ    0C0E
0BF4:  RRCF   01,F
0BF6:  RRCF   02,F
0BF8:  RRCF   03,F
0BFA:  MOVFF  499,4A4
0BFE:  MOVF   x9D,W
0C00:  XORWF  xA4,F
0C02:  BTFSS  xA4.7
0C04:  BRA    0C0A
0C06:  BSF    01.7
0C08:  BRA    0C16
0C0A:  BCF    01.7
0C0C:  BRA    0C16
0C0E:  CLRF   00
0C10:  CLRF   01
0C12:  CLRF   02
0C14:  CLRF   03
0C16:  MOVLB  0
0C18:  RETURN 0
0C1A:  MOVLW  8E
0C1C:  MOVWF  00
0C1E:  MOVLB  4
0C20:  MOVF   x96,W
0C22:  SUBWF  00,F
0C24:  MOVFF  497,02
0C28:  MOVFF  498,01
0C2C:  BSF    02.7
0C2E:  MOVF   00,F
0C30:  BZ    0C44
0C32:  BCF    FD8.0
0C34:  MOVF   02,F
0C36:  BNZ   0C3C
0C38:  MOVF   01,F
0C3A:  BZ    0C44
0C3C:  RRCF   02,F
0C3E:  RRCF   01,F
0C40:  DECFSZ 00,F
0C42:  BRA    0C32
0C44:  BTFSS  x97.7
0C46:  BRA    0C52
0C48:  COMF   01,F
0C4A:  COMF   02,F
0C4C:  INCF   01,F
0C4E:  BTFSC  FD8.2
0C50:  INCF   02,F
0C52:  MOVLB  0
0C54:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
00AC:  MOVLW  03
00AE:  MOVLB  4
00B0:  SUBWF  x98,F
00B2:  BNC   00C8
00B4:  MOVLW  04
00B6:  MOVWF  FEA
00B8:  MOVLW  98
00BA:  MOVWF  FE9
00BC:  MOVF   FEF,W
00BE:  BZ    00C8
00C0:  BRA    00C4
00C2:  BRA    00C4
00C4:  DECFSZ FEF,F
00C6:  BRA    00C2
00C8:  MOVLB  0
00CA:  RETURN 0
*
0478:  MOVLW  04
047A:  MOVWF  FEA
047C:  MOVLW  9B
047E:  MOVWF  FE9
0480:  MOVF   FEF,W
0482:  BZ    049E
0484:  MOVLW  06
0486:  MOVWF  01
0488:  CLRF   00
048A:  DECFSZ 00,F
048C:  BRA    048A
048E:  DECFSZ 01,F
0490:  BRA    0488
0492:  MOVLW  7B
0494:  MOVWF  00
0496:  DECFSZ 00,F
0498:  BRA    0496
049A:  DECFSZ FEF,F
049C:  BRA    0484
049E:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
*
05A6:  BCF    FC6.7
05A8:  BCF    F9E.3
05AA:  MOVFF  496,FC9
05AE:  MOVLW  02
05B0:  BTFSC  FC6.7
05B2:  BRA    05BE
05B4:  BTFSS  F9E.3
05B6:  BRA    05B4
05B8:  MOVLW  00
05BA:  BTFSC  FC5.6
05BC:  MOVLW  01
05BE:  MOVWF  01
05C0:  RETURN 0
05C2:  BCF    FC6.6
05C4:  BSF    FC5.3
05C6:  BTFSC  FC5.3
05C8:  BRA    05C6
05CA:  BTFSC  00.0
05CC:  BCF    FC5.5
05CE:  BTFSS  00.0
05D0:  BSF    FC5.5
05D2:  BSF    FC5.4
05D4:  BTFSC  FC5.4
05D6:  BRA    05D4
05D8:  MOVFF  FC9,01
05DC:  RETURN 0
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
0250:  MOVFF  4AC,4AE
....................    for (sb=0;sb<8;sb++) 
0254:  MOVLB  4
0256:  CLRF   xAD
0258:  MOVF   xAD,W
025A:  SUBLW  07
025C:  BNC   027A
....................       {                                                  
....................          output_bit(ssdo,bseri);     
025E:  BTFSC  xAE.7
0260:  BRA    0266
0262:  BCF    F8D.2
0264:  BRA    0268
0266:  BSF    F8D.2
0268:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
026A:  BCF    F96.0
026C:  BCF    F8D.0
026E:  BCF    F96.0
0270:  BSF    F8D.0
....................          x= x<<1;          
0272:  BCF    FD8.0
0274:  RLCF   xAE,F
0276:  INCF   xAD,F
0278:  BRA    0258
....................      } 
027A:  MOVLB  0
027C:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
0E6E:  MOVFF  4A8,4AC
0E72:  CALL   0250
....................       xuat_1byte(bld2); 
0E76:  MOVFF  4A9,4AC
0E7A:  CALL   0250
....................       xuat_1byte(bld1);           
0E7E:  MOVFF  4AA,4AC
0E82:  CALL   0250
....................       xuat_1byte(bld0);             
0E86:  MOVFF  4AB,4AC
0E8A:  CALL   0250
....................       mo_32_led_don;       
0E8E:  BCF    04.4
....................       mo_ic_74573_a_thong_dl();             
0E90:  CALL   027E
....................       output_high(rck_32led);    output_low(rck_32led); 
0E94:  BCF    F95.5
0E96:  BSF    F8C.5
0E98:  BCF    F95.5
0E9A:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
0E9C:  BCF    F95.1
0E9E:  BCF    F8C.1
0EA0:  GOTO   0EC6 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
0EA4:  MOVFF  4A1,4A4
0EA8:  MOVFF  4A0,4A5
....................      b1 = wld0>>8;  b0 = wld0; 
0EAC:  MOVFF  4A3,4A6
0EB0:  MOVFF  4A2,4A7
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0EB4:  MOVFF  4A4,4A8
0EB8:  MOVFF  4A5,4A9
0EBC:  MOVFF  4A6,4AA
0EC0:  MOVFF  4A7,4AB
0EC4:  BRA    0E6E
0EC6:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
0EC8:  MOVFF  49A,49C
0ECC:  MOVFF  49B,49D
0ED0:  MOVFF  499,49F
0ED4:  MOVFF  498,49E
....................      xuat_32led_don_2word(wd1,wd0); 
0ED8:  MOVFF  49D,4A1
0EDC:  MOVFF  49C,4A0
0EE0:  MOVFF  49F,4A3
0EE4:  MOVFF  49E,4A2
0EE8:  RCALL  0EA4
0EEA:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
008E:  MOVLW  00
0090:  MOVWF  F95
....................       set_tris_e(0x00); 
0092:  MOVWF  F96
....................       output_d(0xff); 
0094:  CLRF   F95
0096:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0098:  SETF   04
....................       tin_hieu_dk_74573_b=0xff;       
009A:  SETF   05
....................       chot_ic_74573_a_goi_du_lieu; 
009C:  BCF    F95.1
009E:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
00A0:  BCF    F95.0
00A2:  BCF    F8C.0
....................       rbdc=0; 
00A4:  CLRF   08
00A6:  CLRF   07
00A8:  GOTO   150E (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
027E:  CLRF   F95
0280:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
0282:  BTFSC  04.4
0284:  BRA    028A
0286:  BCF    F8C.4
0288:  BRA    028C
028A:  BSF    F8C.4
028C:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
028E:  BTFSC  04.6
0290:  BRA    0296
0292:  BCF    F8C.6
0294:  BRA    0298
0296:  BSF    F8C.6
0298:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
029A:  BTFSC  04.2
029C:  BRA    02A2
029E:  BCF    F8C.2
02A0:  BRA    02A4
02A2:  BSF    F8C.2
02A4:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
02A6:  BCF    F95.1
02A8:  BSF    F8C.1
02AA:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
07C6:  CLRF   F95
07C8:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
07CA:  BTFSC  05.6
07CC:  BRA    07D2
07CE:  BCF    F8C.6
07D0:  BRA    07D4
07D2:  BSF    F8C.6
07D4:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
07D6:  BTFSC  05.4
07D8:  BRA    07DE
07DA:  BCF    F8C.4
07DC:  BRA    07E0
07DE:  BSF    F8C.4
07E0:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
07E2:  BTFSC  05.2
07E4:  BRA    07EA
07E6:  BCF    F8C.2
07E8:  BRA    07EC
07EA:  BSF    F8C.2
07EC:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
07EE:  BCF    F95.0
07F0:  BSF    F8C.0
07F2:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
02AC:  MOVFF  49D,4AC
02B0:  RCALL  0250
02B2:  MOVFF  49C,4AC
02B6:  RCALL  0250
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
02B8:  MOVFF  49B,4AC
02BC:  RCALL  0250
02BE:  MOVFF  49A,4AC
02C2:  RCALL  0250
....................        
....................       mo_4_led_7doan; 
02C4:  BCF    04.6
....................       mo_ic_74573_a_thong_dl(); 
02C6:  RCALL  027E
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
02C8:  BCF    F95.7
02CA:  BCF    F8C.7
02CC:  BCF    F95.7
02CE:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
02D0:  BCF    F95.1
02D2:  BCF    F8C.1
02D4:  RETURN 0
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
02D6:  MOVFF  497,49B
02DA:  MOVFF  496,49A
02DE:  MOVLB  4
02E0:  CLRF   x9D
02E2:  MOVLW  0A
02E4:  MOVWF  x9C
02E6:  MOVLB  0
02E8:  RCALL  020A
02EA:  MOVFF  00,498
02EE:  MOVLB  4
02F0:  MOVFF  03,499
02F4:  MOVFF  03,03
02F8:  MOVF   00,W
02FA:  MOVLB  0
02FC:  RCALL  0004
02FE:  MOVWF  09
....................       chuc4  = ma7doan[tam/10%10]; 
0300:  MOVFF  497,49B
0304:  MOVFF  496,49A
0308:  MOVLB  4
030A:  CLRF   x9D
030C:  MOVLW  0A
030E:  MOVWF  x9C
0310:  MOVLB  0
0312:  RCALL  020A
0314:  MOVFF  02,499
0318:  MOVFF  01,498
031C:  MOVFF  02,49B
0320:  MOVFF  01,49A
0324:  MOVLB  4
0326:  CLRF   x9D
0328:  MOVLW  0A
032A:  MOVWF  x9C
032C:  MOVLB  0
032E:  RCALL  020A
0330:  MOVFF  00,498
0334:  MOVLB  4
0336:  MOVFF  03,499
033A:  MOVFF  03,03
033E:  MOVF   00,W
0340:  MOVLB  0
0342:  RCALL  0004
0344:  MOVWF  0A
....................       tram4  = ma7doan[tam/100%10];  
0346:  MOVFF  497,49B
034A:  MOVFF  496,49A
034E:  MOVLB  4
0350:  CLRF   x9D
0352:  MOVLW  64
0354:  MOVWF  x9C
0356:  MOVLB  0
0358:  RCALL  020A
035A:  MOVFF  02,499
035E:  MOVFF  01,498
0362:  MOVFF  02,49B
0366:  MOVFF  01,49A
036A:  MOVLB  4
036C:  CLRF   x9D
036E:  MOVLW  0A
0370:  MOVWF  x9C
0372:  MOVLB  0
0374:  RCALL  020A
0376:  MOVFF  00,498
037A:  MOVLB  4
037C:  MOVFF  03,499
0380:  MOVFF  03,03
0384:  MOVF   00,W
0386:  MOVLB  0
0388:  RCALL  0004
038A:  MOVWF  0B
....................       ngan4  = ma7doan[tam/1000%10];        
038C:  MOVFF  497,49B
0390:  MOVFF  496,49A
0394:  MOVLW  03
0396:  MOVLB  4
0398:  MOVWF  x9D
039A:  MOVLW  E8
039C:  MOVWF  x9C
039E:  MOVLB  0
03A0:  RCALL  020A
03A2:  MOVFF  02,499
03A6:  MOVFF  01,498
03AA:  MOVFF  02,49B
03AE:  MOVFF  01,49A
03B2:  MOVLB  4
03B4:  CLRF   x9D
03B6:  MOVLW  0A
03B8:  MOVWF  x9C
03BA:  MOVLB  0
03BC:  RCALL  020A
03BE:  MOVFF  00,498
03C2:  MOVLB  4
03C4:  MOVFF  03,499
03C8:  MOVFF  03,03
03CC:  MOVF   00,W
03CE:  MOVLB  0
03D0:  RCALL  0004
03D2:  MOVWF  0C
....................       if (ngan4==0xc0) 
03D4:  MOVF   0C,W
03D6:  SUBLW  C0
03D8:  BNZ   03EC
....................       { 
....................          ngan4=0xff; 
03DA:  SETF   0C
....................          if (tram4==0xc0) 
03DC:  MOVF   0B,W
03DE:  SUBLW  C0
03E0:  BNZ   03EC
....................          { 
....................             tram4=0xff; 
03E2:  SETF   0B
....................             if (chuc4==0xc0)   chuc4=0xff; 
03E4:  MOVF   0A,W
03E6:  SUBLW  C0
03E8:  BNZ   03EC
03EA:  SETF   0A
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
03EC:  MOVFF  0C,49A
03F0:  MOVFF  0B,49B
03F4:  MOVFF  0A,49C
03F8:  MOVFF  09,49D
03FC:  RCALL  02AC
03FE:  GOTO   1520 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
0402:  MOVFF  10,4AC
0406:  RCALL  0250
....................     xuat_1byte(glcddata); 
0408:  MOVFF  0F,4AC
040C:  RCALL  0250
....................     xuat_1byte(lcdcontrol);        
040E:  MOVFF  0E,4AC
0412:  RCALL  0250
....................     xuat_1byte(lcddata);       
0414:  MOVFF  0D,4AC
0418:  RCALL  0250
....................        
....................     mo_glcd_lcd; 
041A:  BCF    04.2
....................     mo_ic_74573_a_thong_dl();             
041C:  RCALL  027E
....................     output_high(rck_lcd20x4);      
041E:  BCF    F95.3
0420:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
0422:  BCF    F95.3
0424:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0426:  BCF    F95.1
0428:  BCF    F8C.1
042A:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
042C:  MOVLB  4
042E:  MOVFF  499,0E
0432:  COMF   0E,F
....................     lcddata    = ~lcd_ins_hthi;       
0434:  MOVFF  49A,0D
0438:  COMF   0D,F
....................     xuat_glcd_lcd(); 
043A:  MOVLB  0
043C:  RCALL  0402
043E:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
04FC:  MOVLB  4
04FE:  MOVFF  499,10
0502:  COMF   10,F
....................     glcddata    = ~glcd_ins_hthi;      
0504:  MOVFF  49A,0F
0508:  COMF   0F,F
....................     xuat_glcd_lcd(); 
050A:  MOVLB  0
050C:  RCALL  0402
050E:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0832:  MOVLB  4
0834:  MOVFF  49C,49E
0838:  COMF   x9E,F
083A:  MOVFF  49E,4AC
083E:  MOVLB  0
0840:  RCALL  0250
0842:  MOVLB  4
0844:  MOVFF  49D,49E
0848:  COMF   x9E,F
084A:  MOVFF  49E,4AC
084E:  MOVLB  0
0850:  RCALL  0250
....................        
....................       mo_8_led_quet; 
0852:  BCF    05.4
....................       mo_ic_74573_b_thong_dl(); 
0854:  RCALL  07C6
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0856:  BCF    F95.5
0858:  BSF    F8C.5
085A:  BCF    F95.5
085C:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
085E:  BCF    F95.0
0860:  BCF    F8C.0
0862:  GOTO   0870 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0866:  MOVLB  4
0868:  SETF   x9C
086A:  SETF   x9D
086C:  MOVLB  0
086E:  BRA    0832
0870:  GOTO   08A0 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
07F4:  CLRF   03
07F6:  MOVLB  4
07F8:  MOVF   x9D,W
07FA:  MOVLB  0
07FC:  RCALL  0026
07FE:  MOVWF  01
0800:  MOVLB  4
0802:  MOVWF  x9F
0804:  COMF   x9F,F
0806:  MOVFF  49F,4AC
080A:  MOVLB  0
080C:  RCALL  0250
080E:  MOVLB  4
0810:  MOVFF  49E,49F
0814:  COMF   x9F,F
0816:  MOVFF  49F,4AC
081A:  MOVLB  0
081C:  RCALL  0250
....................       mo_8_led_quet; 
081E:  BCF    05.4
....................       mo_ic_74573_b_thong_dl(); 
0820:  RCALL  07C6
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0822:  BCF    F95.5
0824:  BSF    F8C.5
0826:  BCF    F95.5
0828:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
082A:  BCF    F95.0
082C:  BCF    F8C.0
082E:  GOTO   0894 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0874:  CLRF   19
0876:  MOVF   19,W
0878:  SUBLW  07
087A:  BNC   08A4
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
087C:  CLRF   03
087E:  MOVF   19,W
0880:  ADDLW  11
0882:  MOVWF  FE9
0884:  MOVLW  00
0886:  ADDWFC 03,W
0888:  MOVWF  FEA
088A:  MOVFF  FEF,49E
088E:  MOVFF  19,49D
0892:  BRA    07F4
....................             delay_us(100); 
0894:  MOVLW  A6
0896:  MOVWF  00
0898:  DECFSZ 00,F
089A:  BRA    0898
089C:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
089E:  BRA    0866
08A0:  INCF   19,F
08A2:  BRA    0876
....................             } 
08A4:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
0A22:  MOVFF  07,496
0A26:  MOVFF  08,497
....................       xuat_1byte(rbdc2);       
0A2A:  MOVFF  497,4AC
0A2E:  RCALL  0250
....................       xuat_1byte(rbdc1); 
0A30:  MOVFF  496,4AC
0A34:  RCALL  0250
....................       mo_relay_buzzer_dc; 
0A36:  BCF    05.2
....................       mo_ic_74573_b_thong_dl(); 
0A38:  RCALL  07C6
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
0A3A:  BCF    F95.3
0A3C:  BSF    F8C.3
0A3E:  BCF    F95.3
0A40:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
0A42:  BCF    F95.0
0A44:  BCF    F8C.0
0A46:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
*
0A50:  BSF    08.2
....................       xuat_buzzer_relay();          
0A52:  RCALL  0A22
0A54:  GOTO   0A7E (RETURN)
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
*
0A48:  BCF    08.2
....................       xuat_buzzer_relay();          
0A4A:  RCALL  0A22
0A4C:  GOTO   0A6A (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0F08:  INCF   41,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0F0A:  CLRF   1F
0F0C:  CLRF   1E
0F0E:  CLRF   1D
0F10:  CLRF   1C
0F12:  CLRF   23
0F14:  CLRF   22
0F16:  CLRF   21
0F18:  MOVLW  01
0F1A:  MOVWF  20
0F1C:  MOVLW  80
0F1E:  MOVWF  27
0F20:  CLRF   26
0F22:  CLRF   25
0F24:  CLRF   24
0F26:  CLRF   2B
0F28:  CLRF   2A
0F2A:  CLRF   29
0F2C:  CLRF   28
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
0F2E:  MOVWF  2F
0F30:  CLRF   2E
0F32:  CLRF   31
0F34:  MOVLW  01
0F36:  MOVWF  30
0F38:  CLRF   33
0F3A:  CLRF   32
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
0F3C:  MOVLW  80
0F3E:  MOVWF  37
0F40:  CLRF   36
0F42:  CLRF   39
0F44:  MOVLW  01
0F46:  MOVWF  38
0F48:  CLRF   3B
0F4A:  CLRF   3A
....................       zt=zp=0; 
0F4C:  CLRF   35
0F4E:  CLRF   34
0F50:  MOVFF  35,2D
0F54:  MOVFF  34,2C
....................       i32=32;j32=0;i16=16,j16=0; 
0F58:  MOVLW  20
0F5A:  MOVWF  3F
0F5C:  CLRF   40
0F5E:  MOVLW  10
0F60:  MOVWF  42
0F62:  CLRF   43
....................       dem_led=0; 
0F64:  CLRF   3E
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
0F66:  CLRF   47
0F68:  CLRF   46
0F6A:  CLRF   45
0F6C:  MOVLW  01
0F6E:  MOVWF  44
0F70:  CLRF   4B
0F72:  CLRF   4A
0F74:  CLRF   49
0F76:  MOVWF  48
0F78:  SETF   4F
0F7A:  SETF   4E
0F7C:  SETF   4D
0F7E:  MOVLW  FE
0F80:  MOVWF  4C
0F82:  MOVLW  01
0F84:  MOVWF  5C
0F86:  MOVWF  5D
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
0F88:  MOVLW  80
0F8A:  MOVWF  53
0F8C:  CLRF   52
0F8E:  CLRF   51
0F90:  CLRF   50
0F92:  MOVWF  57
0F94:  CLRF   56
0F96:  CLRF   55
0F98:  CLRF   54
0F9A:  MOVLW  7F
0F9C:  MOVWF  5B
0F9E:  SETF   5A
0FA0:  SETF   59
0FA2:  SETF   58
....................      tgdlay = 0; 
0FA4:  CLRF   3D
0FA6:  CLRF   3C
0FA8:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0FC4:  MOVLB  4
0FC6:  CLRF   x9B
0FC8:  MOVF   x9A,W
0FCA:  SUBWF  x9B,W
0FCC:  BC    0FD8
....................       hien_thi_8led_7doan_quet_all(); 
0FCE:  MOVLB  0
0FD0:  RCALL  0874
0FD2:  MOVLB  4
0FD4:  INCF   x9B,F
0FD6:  BRA    0FC8
....................       dem_led++; 
0FD8:  INCF   3E,F
0FDA:  MOVLB  0
0FDC:  GOTO   0FFA (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
0FAA:  MOVLB  4
0FAC:  MOVF   x9A,F
0FAE:  BZ    0FBC
0FB0:  MOVFF  49A,49B
0FB4:  MOVLB  0
0FB6:  CALL   0478
0FBA:  MOVLB  4
....................       dem_led++; 
0FBC:  INCF   3E,F
0FBE:  MOVLB  0
0FC0:  GOTO   0FFA (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
0FE0:  MOVLB  4
0FE2:  MOVF   x99,F
0FE4:  BNZ   0FF2
0FE6:  MOVFF  498,49A
0FEA:  MOVLB  0
0FEC:  BRA    0FAA
0FEE:  MOVLB  0
0FF0:  BRA    0FFA
....................    else              tang_dem_led_delay_1(dl); 
0FF2:  MOVFF  498,49A
0FF6:  MOVLB  0
0FF8:  BRA    0FC4
0FFA:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
0EEC:  COMF   1C,F
0EEE:  COMF   1D,F
0EF0:  COMF   1E,F
0EF2:  COMF   1F,F
....................    xuat_32led_don_1dw(y);  
0EF4:  MOVFF  1F,49B
0EF8:  MOVFF  1E,49A
0EFC:  MOVFF  1D,499
0F00:  MOVFF  1C,498
0F04:  RCALL  0EC8
0F06:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
0FFC:  DECFSZ 3C,W
0FFE:  BRA    1018
1000:  MOVF   3D,F
1002:  BNZ   1018
1004:  MOVFF  1F,49B
1008:  MOVFF  1E,49A
100C:  MOVFF  1D,499
1010:  MOVFF  1C,498
1014:  RCALL  0EC8
1016:  BRA    104E
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
1018:  MOVF   3C,W
101A:  SUBLW  32
101C:  BNZ   1026
101E:  MOVF   3D,F
1020:  BNZ   1026
1022:  RCALL  0EEC
1024:  BRA    104E
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
1026:  MOVF   3C,W
1028:  SUBLW  64
102A:  BNZ   1034
102C:  MOVF   3D,F
102E:  BNZ   1034
1030:  RCALL  0EEC
1032:  BRA    104E
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
1034:  MOVF   3C,W
1036:  SUBLW  96
1038:  BNZ   1042
103A:  MOVF   3D,F
103C:  BNZ   1042
103E:  RCALL  0EEC
1040:  BRA    104E
....................       else if (tgdlay==200)   
1042:  MOVF   3C,W
1044:  SUBLW  C8
1046:  BNZ   104E
1048:  MOVF   3D,F
104A:  BNZ   104E
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
104C:  RCALL  0F08
....................       } 
....................       tgdlay++; 
104E:  INCF   3C,F
1050:  BTFSC  FD8.2
1052:  INCF   3D,F
....................       delay_chon(dl,chondelay); 
1054:  MOVFF  496,498
1058:  MOVFF  497,499
105C:  RCALL  0FE0
105E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
1060:  MOVF   3E,W
1062:  SUBLW  0F
1064:  BNC   10AE
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
1066:  MOVFF  35,4A1
106A:  MOVFF  34,4A0
106E:  MOVFF  2D,4A3
1072:  MOVFF  2C,4A2
1076:  RCALL  0EA4
....................       zp= (zp<<1)+1;  
1078:  BCF    FD8.0
107A:  RLCF   34,W
107C:  MOVLB  4
107E:  MOVWF  x98
1080:  RLCF   35,W
1082:  MOVWF  x99
1084:  MOVLW  01
1086:  ADDWF  x98,W
1088:  MOVWF  34
108A:  MOVLW  00
108C:  ADDWFC x99,W
108E:  MOVWF  35
....................       zt= (zt>>1)+0x8000; 
1090:  BCF    FD8.0
1092:  RRCF   2D,W
1094:  MOVWF  x99
1096:  RRCF   2C,W
1098:  MOVWF  2C
109A:  MOVLW  80
109C:  ADDWF  x99,W
109E:  MOVWF  2D
....................       delay_chon(dl,chondelay); 
10A0:  MOVFF  496,498
10A4:  MOVFF  497,499
10A8:  MOVLB  0
10AA:  RCALL  0FE0
....................    } 
10AC:  BRA    10E0
....................    else  if (dem_led<32) 
10AE:  MOVF   3E,W
10B0:  SUBLW  1F
10B2:  BNC   10DE
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
10B4:  MOVFF  35,4A1
10B8:  MOVFF  34,4A0
10BC:  MOVFF  2D,4A3
10C0:  MOVFF  2C,4A2
10C4:  RCALL  0EA4
....................       zp= (zp<<1);  
10C6:  BCF    FD8.0
10C8:  RLCF   34,F
10CA:  RLCF   35,F
....................       zt= (zt>>1); 
10CC:  BCF    FD8.0
10CE:  RRCF   2D,F
10D0:  RRCF   2C,F
....................       delay_chon(dl,chondelay); 
10D2:  MOVFF  496,498
10D6:  MOVFF  497,499
10DA:  RCALL  0FE0
....................    } 
10DC:  BRA    10E0
....................    else reset_toan_bo_bien(); 
10DE:  RCALL  0F08
10E0:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
11E8:  MOVF   3E,W
11EA:  SUBLW  0F
11EC:  BNC   1220
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
11EE:  MOVFF  35,4A1
11F2:  MOVFF  34,4A0
11F6:  MOVFF  35,4A3
11FA:  MOVFF  34,4A2
11FE:  RCALL  0EA4
....................       zp= (zp>>1)+0x8000; 
1200:  BCF    FD8.0
1202:  RRCF   35,W
1204:  MOVLB  4
1206:  MOVWF  x99
1208:  RRCF   34,W
120A:  MOVWF  34
120C:  MOVLW  80
120E:  ADDWF  x99,W
1210:  MOVWF  35
....................       delay_chon(dl,chondelay); 
1212:  MOVFF  496,498
1216:  MOVFF  497,499
121A:  MOVLB  0
121C:  RCALL  0FE0
....................    } 
121E:  BRA    124C
....................    else  if (dem_led<32) 
1220:  MOVF   3E,W
1222:  SUBLW  1F
1224:  BNC   124A
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
1226:  MOVFF  35,4A1
122A:  MOVFF  34,4A0
122E:  MOVFF  35,4A3
1232:  MOVFF  34,4A2
1236:  RCALL  0EA4
....................       zp= (zp>>1); 
1238:  BCF    FD8.0
123A:  RRCF   35,F
123C:  RRCF   34,F
....................       delay_chon(dl,chondelay); 
123E:  MOVFF  496,498
1242:  MOVFF  497,499
1246:  RCALL  0FE0
....................     } 
1248:  BRA    124C
....................    else reset_toan_bo_bien(); 
124A:  RCALL  0F08
124C:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
1164:  MOVF   3E,W
1166:  SUBLW  1F
1168:  BNC   11B6
....................    {   
....................       xuat_32led_don_1dw(y); 
116A:  MOVFF  1F,49B
116E:  MOVFF  1E,49A
1172:  MOVFF  1D,499
1176:  MOVFF  1C,498
117A:  RCALL  0EC8
....................       y= (y<<1)+1; 
117C:  BCF    FD8.0
117E:  RLCF   1C,W
1180:  MOVLB  4
1182:  MOVWF  x99
1184:  RLCF   1D,W
1186:  MOVWF  x9A
1188:  RLCF   1E,W
118A:  MOVWF  x9B
118C:  RLCF   1F,W
118E:  MOVWF  x9C
1190:  MOVLW  01
1192:  ADDWF  x99,W
1194:  MOVWF  1C
1196:  MOVLW  00
1198:  ADDWFC x9A,W
119A:  MOVWF  1D
119C:  MOVLW  00
119E:  ADDWFC x9B,W
11A0:  MOVWF  1E
11A2:  MOVLW  00
11A4:  ADDWFC x9C,W
11A6:  MOVWF  1F
....................       delay_chon(dl,chondelay); 
11A8:  MOVFF  496,498
11AC:  MOVFF  497,499
11B0:  MOVLB  0
11B2:  RCALL  0FE0
....................    } 
11B4:  BRA    11E6
....................    else  if (dem_led<64) 
11B6:  MOVF   3E,W
11B8:  SUBLW  3F
11BA:  BNC   11E4
....................    {   
....................       xuat_32led_don_1dw(y);    
11BC:  MOVFF  1F,49B
11C0:  MOVFF  1E,49A
11C4:  MOVFF  1D,499
11C8:  MOVFF  1C,498
11CC:  RCALL  0EC8
....................       y= (y<<1);  
11CE:  BCF    FD8.0
11D0:  RLCF   1C,F
11D2:  RLCF   1D,F
11D4:  RLCF   1E,F
11D6:  RLCF   1F,F
....................       delay_chon(dl,chondelay); 
11D8:  MOVFF  496,498
11DC:  MOVFF  497,499
11E0:  RCALL  0FE0
....................    }  
11E2:  BRA    11E6
....................    else reset_toan_bo_bien(); 
11E4:  RCALL  0F08
11E6:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
124E:  MOVF   3E,W
1250:  SUBLW  1F
1252:  BNC   1296
....................       {   
....................          xuat_32led_don_1dw(y); 
1254:  MOVFF  1F,49B
1258:  MOVFF  1E,49A
125C:  MOVFF  1D,499
1260:  MOVFF  1C,498
1264:  RCALL  0EC8
....................          y= (y>>1)+0x80000000;  
1266:  BCF    FD8.0
1268:  RRCF   1F,W
126A:  MOVLB  4
126C:  MOVWF  x9C
126E:  RRCF   1E,W
1270:  MOVWF  x9B
1272:  RRCF   1D,W
1274:  MOVWF  x9A
1276:  RRCF   1C,W
1278:  MOVWF  1C
127A:  MOVFF  49A,1D
127E:  MOVFF  49B,1E
1282:  MOVLW  80
1284:  ADDWF  x9C,W
1286:  MOVWF  1F
....................          delay_chon(dl,chondelay);       
1288:  MOVFF  496,498
128C:  MOVFF  497,499
1290:  MOVLB  0
1292:  RCALL  0FE0
....................       } 
1294:  BRA    12C6
....................       else 
....................       if (dem_led<64) 
1296:  MOVF   3E,W
1298:  SUBLW  3F
129A:  BNC   12C4
....................       {   
....................          xuat_32led_don_1dw(y);  
129C:  MOVFF  1F,49B
12A0:  MOVFF  1E,49A
12A4:  MOVFF  1D,499
12A8:  MOVFF  1C,498
12AC:  RCALL  0EC8
....................          y= (y>>1); 
12AE:  BCF    FD8.0
12B0:  RRCF   1F,F
12B2:  RRCF   1E,F
12B4:  RRCF   1D,F
12B6:  RRCF   1C,F
....................          delay_chon(dl,chondelay); 
12B8:  MOVFF  496,498
12BC:  MOVFF  497,499
12C0:  RCALL  0FE0
....................       }  
12C2:  BRA    12C6
....................       else reset_toan_bo_bien(); 
12C4:  RCALL  0F08
12C6:  GOTO   17AE (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
10E2:  BTFSC  3F.7
10E4:  BRA    1160
10E6:  MOVF   3F,W
10E8:  SUBLW  00
10EA:  BC    1160
....................    { 
....................       if(j32<i32) 
10EC:  MOVF   40,W
10EE:  XORLW  80
10F0:  MOVWF  00
10F2:  MOVF   3F,W
10F4:  XORLW  80
10F6:  SUBWF  00,W
10F8:  BC    113A
....................       { 
....................          y = y_codinh|yp_chay; 
10FA:  MOVF   28,W
10FC:  IORWF  20,W
10FE:  MOVWF  1C
1100:  MOVF   29,W
1102:  IORWF  21,W
1104:  MOVWF  1D
1106:  MOVF   2A,W
1108:  IORWF  22,W
110A:  MOVWF  1E
110C:  MOVF   2B,W
110E:  IORWF  23,W
1110:  MOVWF  1F
....................          xuat_32led_don_1dw(y); 
1112:  MOVFF  1F,49B
1116:  MOVFF  1E,49A
111A:  MOVFF  1D,499
111E:  MOVFF  1C,498
1122:  RCALL  0EC8
....................          delay_chon(dl,chondelay);        
1124:  MOVFF  496,498
1128:  MOVFF  497,499
112C:  RCALL  0FE0
....................          yp_chay = yp_chay <<1; 
112E:  BCF    FD8.0
1130:  RLCF   20,F
1132:  RLCF   21,F
1134:  RLCF   22,F
1136:  RLCF   23,F
....................          j32++; 
1138:  INCF   40,F
....................       } 
....................       if (j32==i32)  
113A:  MOVF   3F,W
113C:  SUBWF  40,W
113E:  BNZ   115E
....................       { 
....................          i32--; 
1140:  DECF   3F,F
....................          j32=0;          
1142:  CLRF   40
....................          y_codinh=y; 
1144:  MOVFF  1F,2B
1148:  MOVFF  1E,2A
114C:  MOVFF  1D,29
1150:  MOVFF  1C,28
....................          yp_chay = 1; 
1154:  CLRF   23
1156:  CLRF   22
1158:  CLRF   21
115A:  MOVLW  01
115C:  MOVWF  20
....................       } 
....................    } 
115E:  BRA    1162
....................    else reset_toan_bo_bien(); 
1160:  RCALL  0F08
1162:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... //#include "TV_PICKIT2_SHIFT_LCD.c" 
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0510:  BSF    5E.2
0512:  MOVFF  5E,499
0516:  MOVFF  498,49A
051A:  RCALL  04FC
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
051C:  BCF    5E.2
051E:  MOVFF  5E,499
0522:  MOVFF  498,49A
0526:  RCALL  04FC
0528:  GOTO   0534 (RETURN)
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
052C:  BCF    5E.4
....................       glcd_xuat_8bit(glcd_data2);       
052E:  MOVFF  497,498
0532:  BRA    0510
0534:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(glcd_data3);      
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
0536:  BSF    5E.0
....................          glcd_cs2 = 1; 
0538:  BSF    5E.1
....................          glcd_e  = 0; 
053A:  BCF    5E.2
....................          glcd_rw = 0;           
053C:  BCF    5E.3
....................          glcd_p =0;          
053E:  BCF    5E.5
....................          glcd_command(glcd_function_set_mode);          
0540:  MOVFF  496,497
0544:  RCALL  052C
....................          delay_us(10); 
0546:  MOVLW  10
0548:  MOVWF  00
054A:  DECFSZ 00,F
054C:  BRA    054A
054E:  NOP   
....................          glcd_command(glcd_cursor_display);        
0550:  MOVLW  0C
0552:  MOVLB  4
0554:  MOVWF  x97
0556:  MOVLB  0
0558:  RCALL  052C
....................          delay_us(10);     
055A:  MOVLW  10
055C:  MOVWF  00
055E:  DECFSZ 00,F
0560:  BRA    055E
0562:  NOP   
....................          glcd_command(glcd_clear_display);       
0564:  MOVLW  01
0566:  MOVLB  4
0568:  MOVWF  x97
056A:  MOVLB  0
056C:  RCALL  052C
....................          delay_ms(2); 
056E:  MOVLW  02
0570:  MOVLB  4
0572:  MOVWF  x9B
0574:  MOVLB  0
0576:  RCALL  0478
....................          glcd_command(glcd_entry_mode);       
0578:  MOVLW  06
057A:  MOVLB  4
057C:  MOVWF  x97
057E:  MOVLB  0
0580:  RCALL  052C
....................          delay_us(10);                           
0582:  MOVLW  10
0584:  MOVWF  00
0586:  DECFSZ 00,F
0588:  BRA    0586
058A:  NOP   
058C:  GOTO   1530 (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
....................   for (doc=0; doc < glcd_doc; doc++)  
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
....................     }  
....................   }  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
....................   doc = y;  
....................   ngang = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
....................       }  
....................     }  
....................     gdram_vdk.refresh = false;  
....................   }  
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "TV_PICKIT2_SHIFT_DS18B20.c" 
.................... #define     touch_pin pin_a5 
.................... #include    <touch.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
*
08D2:  BCF    F92.5
08D4:  BCF    F92.5
08D6:  BCF    F89.5
....................    delay_us(14); 
08D8:  MOVLW  17
08DA:  MOVWF  00
08DC:  DECFSZ 00,F
08DE:  BRA    08DC
....................    TOUCH_PIN_FLOAT(); 
08E0:  BSF    F92.5
....................    delay_us(5); 
08E2:  MOVLW  08
08E4:  MOVWF  00
08E6:  DECFSZ 00,F
08E8:  BRA    08E6
....................    data = TOUCH_PIN_READ(); 
08EA:  MOVLB  4
08EC:  BCF    x98.0
08EE:  BTFSC  F80.5
08F0:  BSF    x98.0
....................    delay_us(100); 
08F2:  MOVLW  A6
08F4:  MOVWF  00
08F6:  DECFSZ 00,F
08F8:  BRA    08F6
08FA:  NOP   
....................  
....................    return data; 
08FC:  MOVLW  00
08FE:  BTFSC  x98.0
0900:  MOVLW  01
0902:  MOVWF  01
0904:  MOVLB  0
0906:  GOTO   091A (RETURN)
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
090A:  MOVLW  01
090C:  MOVLB  4
090E:  MOVWF  x96
0910:  MOVF   x96,W
0912:  SUBLW  08
0914:  BNC   092C
....................       shift_right(&data, 1, touch_read_bit()); 
0916:  MOVLB  0
0918:  BRA    08D2
091A:  MOVF   01,F
091C:  BNZ   0922
091E:  BCF    FD8.0
0920:  BRA    0924
0922:  BSF    FD8.0
0924:  MOVLB  4
0926:  RRCF   x97,F
0928:  INCF   x96,F
092A:  BRA    0910
....................  
....................    return data; 
092C:  MOVFF  497,01
0930:  MOVLB  0
0932:  RETURN 0
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
*
011E:  BCF    F92.5
0120:  BCF    F92.5
0122:  BCF    F89.5
....................    delay_us(10); 
0124:  MOVLW  10
0126:  MOVWF  00
0128:  DECFSZ 00,F
012A:  BRA    0128
012C:  NOP   
....................    if(data) 
012E:  MOVLB  4
0130:  MOVF   x99,F
0132:  BZ    0150
....................    { 
....................       TOUCH_PIN_HIGH(); 
0134:  BCF    F92.5
0136:  BCF    F92.5
0138:  BSF    F89.5
....................       delay_us(10); 
013A:  MOVLW  10
013C:  MOVWF  00
013E:  DECFSZ 00,F
0140:  BRA    013E
0142:  NOP   
....................       if(!TOUCH_PIN_READ()) 
0144:  BTFSC  F80.5
0146:  BRA    014E
....................          return FALSE; 
0148:  MOVLW  00
014A:  MOVWF  01
014C:  BRA    0184
....................    } 
014E:  BRA    016A
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
0150:  BCF    F92.5
0152:  BCF    F92.5
0154:  BCF    F89.5
....................       delay_us(10); 
0156:  MOVLW  10
0158:  MOVWF  00
015A:  DECFSZ 00,F
015C:  BRA    015A
015E:  NOP   
....................       if(TOUCH_PIN_READ()) 
0160:  BTFSS  F80.5
0162:  BRA    016A
....................          return FALSE; 
0164:  MOVLW  00
0166:  MOVWF  01
0168:  BRA    0184
....................    } 
....................    delay_us(50); 
016A:  MOVLW  53
016C:  MOVWF  00
016E:  DECFSZ 00,F
0170:  BRA    016E
....................    TOUCH_PIN_HIGH(); 
0172:  BCF    F92.5
0174:  BCF    F92.5
0176:  BSF    F89.5
....................    delay_us(50); 
0178:  MOVLW  53
017A:  MOVWF  00
017C:  DECFSZ 00,F
017E:  BRA    017C
....................    return TRUE; 
0180:  MOVLW  01
0182:  MOVWF  01
0184:  MOVLB  0
0186:  GOTO   01A8 (RETURN)
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
018A:  MOVLW  01
018C:  MOVLB  4
018E:  MOVWF  x97
0190:  MOVF   x97,W
0192:  SUBLW  08
0194:  BNC   01B8
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
0196:  BCF    FD8.0
0198:  RRCF   x96,F
019A:  MOVLW  00
019C:  BTFSC  FD8.0
019E:  MOVLW  01
01A0:  MOVWF  x98
01A2:  MOVWF  x99
01A4:  MOVLB  0
01A6:  BRA    011E
01A8:  MOVF   01,F
01AA:  BNZ   01B2
....................          return FALSE; 
01AC:  MOVLW  00
01AE:  MOVWF  01
01B0:  BRA    01BE
01B2:  MOVLB  4
01B4:  INCF   x97,F
01B6:  BRA    0190
....................  
....................    return TRUE; 
01B8:  MOVLW  01
01BA:  MOVWF  01
01BC:  MOVLB  0
01BE:  RETURN 0
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
*
00CC:  BCF    F92.5
00CE:  BCF    F92.5
00D0:  BCF    F89.5
....................    delay_us(500); 
00D2:  MOVLW  02
00D4:  MOVLB  4
00D6:  MOVWF  x97
00D8:  MOVLW  F9
00DA:  MOVWF  x98
00DC:  MOVLB  0
00DE:  RCALL  00AC
00E0:  MOVLB  4
00E2:  DECFSZ x97,F
00E4:  BRA    00D8
....................    TOUCH_PIN_FLOAT(); 
00E6:  BSF    F92.5
....................    delay_us(5); 
00E8:  MOVLW  08
00EA:  MOVWF  00
00EC:  DECFSZ 00,F
00EE:  BRA    00EC
....................  
....................    if(!TOUCH_PIN_READ()) 
00F0:  BTFSC  F80.5
00F2:  BRA    00FA
....................       return FALSE; 
00F4:  MOVLW  00
00F6:  MOVWF  01
00F8:  BRA    011A
....................  
....................    delay_us(65); 
00FA:  MOVLW  6C
00FC:  MOVWF  00
00FE:  DECFSZ 00,F
0100:  BRA    00FE
....................    present = !TOUCH_PIN_READ(); 
0102:  BCF    x96.0
0104:  BTFSS  F80.5
0106:  BSF    x96.0
....................    delay_us(240); 
0108:  MOVLW  F0
010A:  MOVWF  x98
010C:  MOVLB  0
010E:  RCALL  00AC
....................    return present; 
0110:  MOVLW  00
0112:  MOVLB  4
0114:  BTFSC  x96.0
0116:  MOVLW  01
0118:  MOVWF  01
011A:  MOVLB  0
011C:  RETURN 0
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define       skip_rom              0xcc 
.................... #define       convert_t             0x44 
.................... #define       read_scratchpad       0xbe 
.................... #define       write_scratchpad      0x4e 
.................... #define       copy_scratchpad       0x48     
.................... unsigned int8     ds18al, ds18ah, ds18a_tam; 
.................... unsigned int16    ds18a; 
.................... void  khoi_tao_ds18b20() 
.................... {                          
....................       touch_present(); 
*
01C0:  RCALL  00CC
....................       touch_write_byte(skip_rom);       
01C2:  MOVLW  CC
01C4:  MOVLB  4
01C6:  MOVWF  x96
01C8:  MOVLB  0
01CA:  RCALL  018A
....................       touch_write_byte(write_scratchpad);     
01CC:  MOVLW  4E
01CE:  MOVLB  4
01D0:  MOVWF  x96
01D2:  MOVLB  0
01D4:  RCALL  018A
....................       touch_write_byte(0x0);       // ghi 2 byte rong 
01D6:  MOVLB  4
01D8:  CLRF   x96
01DA:  MOVLB  0
01DC:  RCALL  018A
....................       touch_write_byte(0x0);       // 
01DE:  MOVLB  4
01E0:  CLRF   x96
01E2:  MOVLB  0
01E4:  RCALL  018A
....................       touch_write_byte(0x1f);      //cau hinh do phan giai 9 bit 
01E6:  MOVLW  1F
01E8:  MOVLB  4
01EA:  MOVWF  x96
01EC:  MOVLB  0
01EE:  RCALL  018A
....................  
....................       touch_present(); 
01F0:  RCALL  00CC
....................       touch_write_byte(skip_rom);       
01F2:  MOVLW  CC
01F4:  MOVLB  4
01F6:  MOVWF  x96
01F8:  MOVLB  0
01FA:  RCALL  018A
....................       touch_write_byte(copy_scratchpad);  
01FC:  MOVLW  48
01FE:  MOVLB  4
0200:  MOVWF  x96
0202:  MOVLB  0
0204:  RCALL  018A
0206:  GOTO   1512 (RETURN)
.................... } 
.................... void  doc_giatri_ds18b20() 
.................... {  
....................       touch_write_byte(skip_rom); 
*
0934:  MOVLW  CC
0936:  MOVLB  4
0938:  MOVWF  x96
093A:  MOVLB  0
093C:  RCALL  018A
....................       touch_write_byte (convert_t);    
093E:  MOVLW  44
0940:  MOVLB  4
0942:  MOVWF  x96
0944:  MOVLB  0
0946:  RCALL  018A
....................       touch_present(); 
0948:  CALL   00CC
....................       touch_write_byte(skip_rom); 
094C:  MOVLW  CC
094E:  MOVLB  4
0950:  MOVWF  x96
0952:  MOVLB  0
0954:  RCALL  018A
....................       touch_write_byte(read_scratchpad);   
0956:  MOVLW  BE
0958:  MOVLB  4
095A:  MOVWF  x96
095C:  MOVLB  0
095E:  RCALL  018A
....................       ds18al = touch_read_byte(); 
0960:  RCALL  090A
0962:  MOVFF  01,462
....................       ds18ah = touch_read_byte();       
0966:  RCALL  090A
0968:  MOVFF  01,463
....................       ds18a   =  make16(ds18ah,ds18al);         
096C:  MOVFF  463,466
0970:  MOVFF  462,465
0974:  GOTO   0982 (RETURN)
.................... } 
....................              
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_DS1307_I2C.c" 
.................... #include <tv_pickit2_shift_lcd.c> 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
0440:  MOVLB  4
0442:  BSF    x67.0
0444:  MOVFF  467,499
0448:  MOVFF  498,49A
044C:  MOVLB  0
044E:  RCALL  042C
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
0450:  MOVLB  4
0452:  BCF    x67.0
0454:  MOVFF  467,499
0458:  MOVFF  498,49A
045C:  MOVLB  0
045E:  RCALL  042C
0460:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0462:  MOVLB  4
0464:  BCF    x67.2
....................       lcd_xuat_8bit(lcd_data_x); 
0466:  MOVFF  496,498
046A:  MOVLB  0
046C:  RCALL  0440
....................       delay_us(20); 
046E:  MOVLW  21
0470:  MOVWF  00
0472:  DECFSZ 00,F
0474:  BRA    0472
0476:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0590:  MOVLB  4
0592:  BSF    x67.2
....................       lcd_xuat_8bit(lcd_data_x); 
0594:  MOVFF  497,498
0598:  MOVLB  0
059A:  RCALL  0440
....................       delay_us(20); 
059C:  MOVLW  21
059E:  MOVWF  00
05A0:  DECFSZ 00,F
05A2:  BRA    05A0
05A4:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
04A0:  MOVLB  4
04A2:  BCF    x67.0
....................          lcd_rw = 0;  
04A4:  BCF    x67.1
....................          lcd_rs = 1;  
04A6:  BSF    x67.2
....................          lcd_p =0; 
04A8:  BCF    x67.3
....................          lcd_command(lcd_function_set);          
04AA:  MOVLW  38
04AC:  MOVWF  x96
04AE:  MOVLB  0
04B0:  RCALL  0462
....................          delay_us(40); 
04B2:  MOVLW  42
04B4:  MOVWF  00
04B6:  DECFSZ 00,F
04B8:  BRA    04B6
04BA:  NOP   
....................          lcd_command(lcd_display_control);    
04BC:  MOVLW  0C
04BE:  MOVLB  4
04C0:  MOVWF  x96
04C2:  MOVLB  0
04C4:  RCALL  0462
....................          delay_us(40); 
04C6:  MOVLW  42
04C8:  MOVWF  00
04CA:  DECFSZ 00,F
04CC:  BRA    04CA
04CE:  NOP   
....................          lcd_command(lcd_clear_display);       
04D0:  MOVLW  01
04D2:  MOVLB  4
04D4:  MOVWF  x96
04D6:  MOVLB  0
04D8:  RCALL  0462
....................          delay_ms(2); 
04DA:  MOVLW  02
04DC:  MOVLB  4
04DE:  MOVWF  x9B
04E0:  MOVLB  0
04E2:  RCALL  0478
....................          lcd_command(lcd_entry_mode);        
04E4:  MOVLW  06
04E6:  MOVLB  4
04E8:  MOVWF  x96
04EA:  MOVLB  0
04EC:  RCALL  0462
....................          delay_us(40);                 
04EE:  MOVLW  42
04F0:  MOVWF  00
04F2:  DECFSZ 00,F
04F4:  BRA    04F2
04F6:  NOP   
04F8:  GOTO   1524 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #define   giay_htai      0x55 
.................... #define   phut_htai      0x37 
.................... #define   gio_htai       0x15 
.................... #define   thu_htai       2 
.................... #define   ngay_htai      0x14 
.................... #define   thang_htai     0x12 
.................... #define   nam_htai       0x20       
.................... #define   ma_ds          0x91 
....................  
.................... #define  addr_wr_13b07   0xd0 
.................... #define  addr_rd_13b07   0xd1 
.................... #define  addr_mem        0x00 
....................  
.................... unsigned  char    nam_ds13,thang_ds13,ngay_ds13,thu_ds13,gio_ds13, 
....................                   phut_ds13,giay_ds13,ma_ds13,control_ds13,giaytam; 
....................                                 
.................... void thiet_lap_thoi_gian_hien_tai() 
.................... {     giay_ds13   =   giay_htai;       phut_ds13  =    phut_htai;    
*
0666:  MOVLW  55
0668:  MOVLB  4
066A:  MOVWF  x6E
066C:  MOVLW  37
066E:  MOVWF  x6D
....................       gio_ds13    =   gio_htai;        thu_ds13   =    thu_htai; 
0670:  MOVLW  15
0672:  MOVWF  x6C
0674:  MOVLW  02
0676:  MOVWF  x6B
....................       ngay_ds13   =   ngay_htai;       thang_ds13 =    thang_htai;    
0678:  MOVLW  14
067A:  MOVWF  x6A
067C:  MOVLW  12
067E:  MOVWF  x69
....................       nam_ds13    =   nam_htai;    
0680:  MOVLW  20
0682:  MOVWF  x68
....................       control_ds13 = 0x90;             ma_ds13      =   ma_ds; 
0684:  MOVLW  90
0686:  MOVWF  x70
0688:  MOVLW  91
068A:  MOVWF  x6F
068C:  MOVLB  0
068E:  GOTO   1576 (RETURN)
.................... } 
....................   
.................... void nap_thoi_gian_htai_vao_ds13b07() 
.................... {     i2c_start();          
0692:  BSF    FC5.0
0694:  BTFSC  FC5.0
0696:  BRA    0694
....................       i2c_write(addr_wr_13b07);     
0698:  MOVLW  D0
069A:  MOVLB  4
069C:  MOVWF  x96
069E:  MOVLB  0
06A0:  RCALL  05A6
....................       i2c_write(0x00); 
06A2:  MOVLB  4
06A4:  CLRF   x96
06A6:  MOVLB  0
06A8:  RCALL  05A6
....................       i2c_write(giay_ds13);        i2c_write(phut_ds13);       
06AA:  MOVFF  46E,496
06AE:  RCALL  05A6
06B0:  MOVFF  46D,496
06B4:  RCALL  05A6
....................       i2c_write(gio_ds13);         i2c_write(thu_ds13);       
06B6:  MOVFF  46C,496
06BA:  RCALL  05A6
06BC:  MOVFF  46B,496
06C0:  RCALL  05A6
....................       i2c_write(ngay_ds13);        i2c_write(thang_ds13);             
06C2:  MOVFF  46A,496
06C6:  RCALL  05A6
06C8:  MOVFF  469,496
06CC:  RCALL  05A6
....................       i2c_write(nam_ds13);         i2c_write(control_ds13);    
06CE:  MOVFF  468,496
06D2:  RCALL  05A6
06D4:  MOVFF  470,496
06D8:  RCALL  05A6
....................       i2c_write(ma_ds13); 
06DA:  MOVFF  46F,496
06DE:  RCALL  05A6
....................       i2c_stop(); 
06E0:  BSF    FC5.2
06E2:  BTFSC  FC5.2
06E4:  BRA    06E2
06E6:  GOTO   157A (RETURN)
.................... } 
....................      
.................... void doc_thoi_gian_tu_realtime() 
.................... {    
....................       i2c_start(); 
*
05DE:  BSF    FC5.0
05E0:  BTFSC  FC5.0
05E2:  BRA    05E0
....................       i2c_write(addr_wr_13b07); 
05E4:  MOVLW  D0
05E6:  MOVLB  4
05E8:  MOVWF  x96
05EA:  MOVLB  0
05EC:  RCALL  05A6
....................       i2c_write(addr_mem);                      
05EE:  MOVLB  4
05F0:  CLRF   x96
05F2:  MOVLB  0
05F4:  RCALL  05A6
....................       i2c_start();                 
05F6:  BSF    FC5.1
05F8:  BTFSC  FC5.1
05FA:  BRA    05F8
....................                  
....................       i2c_write(addr_rd_13b07); 
05FC:  MOVLW  D1
05FE:  MOVLB  4
0600:  MOVWF  x96
0602:  MOVLB  0
0604:  RCALL  05A6
....................       giay_ds13      =  i2c_read();               
0606:  MOVLW  01
0608:  MOVWF  00
060A:  RCALL  05C2
060C:  MOVFF  01,46E
....................       phut_ds13      =  i2c_read();              
0610:  MOVLW  01
0612:  MOVWF  00
0614:  RCALL  05C2
0616:  MOVFF  01,46D
....................       gio_ds13       =  i2c_read();              
061A:  MOVLW  01
061C:  MOVWF  00
061E:  RCALL  05C2
0620:  MOVFF  01,46C
....................       thu_ds13       =  i2c_read();  
0624:  MOVLW  01
0626:  MOVWF  00
0628:  RCALL  05C2
062A:  MOVFF  01,46B
....................       ngay_ds13      =  i2c_read();  
062E:  MOVLW  01
0630:  MOVWF  00
0632:  RCALL  05C2
0634:  MOVFF  01,46A
....................       thang_ds13     =  i2c_read();  
0638:  MOVLW  01
063A:  MOVWF  00
063C:  RCALL  05C2
063E:  MOVFF  01,469
....................       nam_ds13       =  i2c_read();  
0642:  MOVLW  01
0644:  MOVWF  00
0646:  RCALL  05C2
0648:  MOVFF  01,468
....................       control_ds13   =  i2c_read();           
064C:  MOVLW  01
064E:  MOVWF  00
0650:  RCALL  05C2
0652:  MOVFF  01,470
....................       ma_ds13        =  i2c_read(0);     //not ack 
0656:  CLRF   00
0658:  RCALL  05C2
065A:  MOVFF  01,46F
....................       i2c_stop(); 
065E:  BSF    FC5.2
0660:  BTFSC  FC5.2
0662:  BRA    0660
0664:  RETURN 0
.................... }     
....................  
....................     
.................... void doc_giay_tu_realtime() 
.................... {    
....................       i2c_start(); 
....................       i2c_write(addr_wr_13b07); 
....................       i2c_write(addr_mem);                      
....................       i2c_start();                 
....................                  
....................       i2c_write(addr_rd_13b07); 
....................       giay_ds13      =  i2c_read(0);               
....................       i2c_stop(); 
.................... }   
....................          
....................   
.................... void hien_thi_thoi_gian_ds13b07 ( ) 
.................... {     lcd_command (0x8c);    
*
12CA:  MOVLW  8C
12CC:  MOVLB  4
12CE:  MOVWF  x96
12D0:  MOVLB  0
12D2:  CALL   0462
....................       lcd_data(gio_ds13/16  +0x30);    lcd_data(gio_ds13%16  +0x30); 
12D6:  MOVLB  4
12D8:  SWAPF  x6C,W
12DA:  MOVWF  00
12DC:  MOVLW  0F
12DE:  ANDWF  00,F
12E0:  MOVF   00,W
12E2:  ADDLW  30
12E4:  MOVWF  x96
12E6:  MOVWF  x97
12E8:  MOVLB  0
12EA:  CALL   0590
12EE:  MOVLB  4
12F0:  MOVF   x6C,W
12F2:  ANDLW  0F
12F4:  ADDLW  30
12F6:  MOVWF  x96
12F8:  MOVWF  x97
12FA:  MOVLB  0
12FC:  CALL   0590
....................       lcd_data(' '); 
1300:  MOVLW  20
1302:  MOVLB  4
1304:  MOVWF  x97
1306:  MOVLB  0
1308:  CALL   0590
....................       lcd_data(phut_ds13/16 +0x30);    lcd_data(phut_ds13%16 +0x30); 
130C:  MOVLB  4
130E:  SWAPF  x6D,W
1310:  MOVWF  00
1312:  MOVLW  0F
1314:  ANDWF  00,F
1316:  MOVF   00,W
1318:  ADDLW  30
131A:  MOVWF  x96
131C:  MOVWF  x97
131E:  MOVLB  0
1320:  CALL   0590
1324:  MOVLB  4
1326:  MOVF   x6D,W
1328:  ANDLW  0F
132A:  ADDLW  30
132C:  MOVWF  x96
132E:  MOVWF  x97
1330:  MOVLB  0
1332:  CALL   0590
....................       lcd_data(' '); 
1336:  MOVLW  20
1338:  MOVLB  4
133A:  MOVWF  x97
133C:  MOVLB  0
133E:  CALL   0590
....................       lcd_data(giay_ds13/16 +0x30);    lcd_data(giay_ds13%16 +0x30); 
1342:  MOVLB  4
1344:  SWAPF  x6E,W
1346:  MOVWF  00
1348:  MOVLW  0F
134A:  ANDWF  00,F
134C:  MOVF   00,W
134E:  ADDLW  30
1350:  MOVWF  x96
1352:  MOVWF  x97
1354:  MOVLB  0
1356:  CALL   0590
135A:  MOVLB  4
135C:  MOVF   x6E,W
135E:  ANDLW  0F
1360:  ADDLW  30
1362:  MOVWF  x96
1364:  MOVWF  x97
1366:  MOVLB  0
1368:  CALL   0590
....................       lcd_command (0xcc);   
136C:  MOVLW  CC
136E:  MOVLB  4
1370:  MOVWF  x96
1372:  MOVLB  0
1374:  CALL   0462
....................       lcd_data(ngay_ds13/16 +0x30);    lcd_data(ngay_ds13%16 +0x30); 
1378:  MOVLB  4
137A:  SWAPF  x6A,W
137C:  MOVWF  00
137E:  MOVLW  0F
1380:  ANDWF  00,F
1382:  MOVF   00,W
1384:  ADDLW  30
1386:  MOVWF  x96
1388:  MOVWF  x97
138A:  MOVLB  0
138C:  CALL   0590
1390:  MOVLB  4
1392:  MOVF   x6A,W
1394:  ANDLW  0F
1396:  ADDLW  30
1398:  MOVWF  x96
139A:  MOVWF  x97
139C:  MOVLB  0
139E:  CALL   0590
....................       lcd_data(' '); 
13A2:  MOVLW  20
13A4:  MOVLB  4
13A6:  MOVWF  x97
13A8:  MOVLB  0
13AA:  CALL   0590
....................       lcd_data(thang_ds13/16 +0x30);   lcd_data(thang_ds13%16 +0x30); 
13AE:  MOVLB  4
13B0:  SWAPF  x69,W
13B2:  MOVWF  00
13B4:  MOVLW  0F
13B6:  ANDWF  00,F
13B8:  MOVF   00,W
13BA:  ADDLW  30
13BC:  MOVWF  x96
13BE:  MOVWF  x97
13C0:  MOVLB  0
13C2:  CALL   0590
13C6:  MOVLB  4
13C8:  MOVF   x69,W
13CA:  ANDLW  0F
13CC:  ADDLW  30
13CE:  MOVWF  x96
13D0:  MOVWF  x97
13D2:  MOVLB  0
13D4:  CALL   0590
....................       lcd_data(' '); 
13D8:  MOVLW  20
13DA:  MOVLB  4
13DC:  MOVWF  x97
13DE:  MOVLB  0
13E0:  CALL   0590
....................       lcd_data(nam_ds13/16 +0x30);     lcd_data(nam_ds13%16 +0x30);  
13E4:  MOVLB  4
13E6:  SWAPF  x68,W
13E8:  MOVWF  00
13EA:  MOVLW  0F
13EC:  ANDWF  00,F
13EE:  MOVF   00,W
13F0:  ADDLW  30
13F2:  MOVWF  x96
13F4:  MOVWF  x97
13F6:  MOVLB  0
13F8:  CALL   0590
13FC:  MOVLB  4
13FE:  MOVF   x68,W
1400:  ANDLW  0F
1402:  ADDLW  30
1404:  MOVWF  x96
1406:  MOVWF  x97
1408:  MOVLB  0
140A:  CALL   0590
140E:  GOTO   1812 (RETURN)
.................... } 
....................  
....................  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
.................... unsigned int8 you = 33; 
.................... signed int8 giay,bdn,phut,gio; 
.................... int8 dem = 0; 
.................... int16 lm35a = 0,lm35b = 0; 
.................... int1 ttqn = 0; 
.................... signed int8 max = 100,D,C,E; 
.................... int8 maxT = 40; 
.................... unsigned int8 count = 0,countT = 0,temp; 
.................... unsigned int8 donvi = 0, j; 
.................... unsigned int16 kqadc; 
.................... float k_cach, clk_cach, kcs; 
....................  
.................... /*#int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
....................    set_timer1(3036); //3036 
.................... }*/ 
....................  
....................  
.................... void BaoChay(){ 
....................    if (temp > maxT && ttqn == 1){ 
*
0A58:  MOVLB  4
0A5A:  MOVF   x84,W
0A5C:  SUBWF  x81,W
0A5E:  BC    0A6E
0A60:  BTFSS  x7C.0
0A62:  BRA    0A6E
....................       ttqn = 0; 
0A64:  BCF    x7C.0
....................       triac_2_off(); 
0A66:  MOVLB  0
0A68:  BRA    0A48
....................    } 
0A6A:  BRA    0A7E
0A6C:  MOVLB  4
....................    else if (temp < maxT && ttqn == 0){ 
0A6E:  MOVF   x81,W
0A70:  SUBWF  x84,W
0A72:  BC    0A80
0A74:  BTFSC  x7C.0
0A76:  BRA    0A80
....................       ttqn = 1; 
0A78:  BSF    x7C.0
....................       triac_2_on(); 
0A7A:  MOVLB  0
0A7C:  BRA    0A50
0A7E:  MOVLB  4
....................    } 
0A80:  MOVLB  0
0A82:  GOTO   168C (RETURN)
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
....................    for (int i = 0; i<6;i++){ 
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
....................       lcd_data(lcd_so_x[lcd_so][i]); 
....................    } 
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0736:  MOVFF  473,496
073A:  MOVLW  0A
073C:  MOVLB  4
073E:  MOVWF  x97
0740:  MOVLB  0
0742:  RCALL  06EA
0744:  CLRF   03
0746:  MOVF   00,W
0748:  RCALL  0004
074A:  MOVWF  11
....................    led_7dq[1] = ma7doan[giay/10]; 
074C:  MOVFF  473,496
0750:  MOVLW  0A
0752:  MOVLB  4
0754:  MOVWF  x97
0756:  MOVLB  0
0758:  RCALL  06EA
075A:  CLRF   03
075C:  MOVF   01,W
075E:  RCALL  0004
0760:  MOVWF  12
....................    led_7dq[3] = ma7doan[phut%10]; 
0762:  MOVFF  475,496
0766:  MOVLW  0A
0768:  MOVLB  4
076A:  MOVWF  x97
076C:  MOVLB  0
076E:  RCALL  06EA
0770:  CLRF   03
0772:  MOVF   00,W
0774:  RCALL  0004
0776:  MOVWF  14
....................    led_7dq[4] = ma7doan[phut/10]; 
0778:  MOVFF  475,496
077C:  MOVLW  0A
077E:  MOVLB  4
0780:  MOVWF  x97
0782:  MOVLB  0
0784:  RCALL  06EA
0786:  CLRF   03
0788:  MOVF   01,W
078A:  RCALL  0004
078C:  MOVWF  15
....................    led_7dq[6] = ma7doan[gio%10]; 
078E:  MOVFF  476,496
0792:  MOVLW  0A
0794:  MOVLB  4
0796:  MOVWF  x97
0798:  MOVLB  0
079A:  RCALL  06EA
079C:  CLRF   03
079E:  MOVF   00,W
07A0:  RCALL  0004
07A2:  MOVWF  17
....................    led_7dq[7] = ma7doan[gio/10]; 
07A4:  MOVFF  476,496
07A8:  MOVLW  0A
07AA:  MOVLB  4
07AC:  MOVWF  x97
07AE:  MOVLB  0
07B0:  RCALL  06EA
07B2:  CLRF   03
07B4:  MOVF   01,W
07B6:  RCALL  0004
07B8:  MOVWF  18
....................    lcd_command(lcd_addr_line1); 
07BA:  MOVLW  80
07BC:  MOVLB  4
07BE:  MOVWF  x96
07C0:  MOVLB  0
07C2:  RCALL  0462
07C4:  RETURN 0
.................... } 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    unsigned int8 DM = (unsigned int8)kcs; 
....................    D = DM/100; 
....................    C = DM/10%10; 
....................    E = DM%10; 
....................    LCD_SO_LON(D,2,0); 
....................    LCD_SO_LON(C,2,3); 
....................    LCD_SO_LON(E,2,7); 
.................... }*/ 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    lcd_command(lcd_addr_line3); 
....................    printf(lcd_data,"DEM SAN PHAM: %d",count); 
.................... }*/ 
....................  
.................... void read_temp(){ 
....................    set_adc_channel(0);  
*
0C56:  MOVLW  00
0C58:  MOVWF  01
0C5A:  MOVF   FC2,W
0C5C:  ANDLW  C3
0C5E:  IORWF  01,W
0C60:  MOVWF  FC2
....................    lm35a = read_adc()/2.046; 
0C62:  BSF    FC2.1
0C64:  BTFSC  FC2.1
0C66:  BRA    0C64
0C68:  MOVFF  FC4,497
0C6C:  MOVFF  FC3,496
0C70:  MOVFF  FC4,499
0C74:  MOVFF  FC3,498
0C78:  MOVLB  0
0C7A:  RCALL  0A86
0C7C:  MOVFF  03,49B
0C80:  MOVFF  02,49A
0C84:  MOVFF  01,499
0C88:  MOVFF  00,498
0C8C:  MOVLW  AA
0C8E:  MOVLB  4
0C90:  MOVWF  x9F
0C92:  MOVLW  F1
0C94:  MOVWF  x9E
0C96:  MOVLW  02
0C98:  MOVWF  x9D
0C9A:  MOVLW  80
0C9C:  MOVWF  x9C
0C9E:  MOVLB  0
0CA0:  RCALL  0ABC
0CA2:  MOVFF  03,499
0CA6:  MOVFF  02,498
0CAA:  MOVFF  01,497
0CAE:  MOVFF  00,496
0CB2:  RCALL  0C1A
0CB4:  MOVFF  02,479
0CB8:  MOVFF  01,478
....................    set_adc_channel(1); 
0CBC:  MOVLW  04
0CBE:  MOVWF  01
0CC0:  MOVF   FC2,W
0CC2:  ANDLW  C3
0CC4:  IORWF  01,W
0CC6:  MOVWF  FC2
....................    lm35b = read_adc()/2.046; 
0CC8:  BSF    FC2.1
0CCA:  BTFSC  FC2.1
0CCC:  BRA    0CCA
0CCE:  MOVFF  FC4,497
0CD2:  MOVFF  FC3,496
0CD6:  MOVFF  FC4,499
0CDA:  MOVFF  FC3,498
0CDE:  MOVLB  0
0CE0:  RCALL  0A86
0CE2:  MOVFF  03,49B
0CE6:  MOVFF  02,49A
0CEA:  MOVFF  01,499
0CEE:  MOVFF  00,498
0CF2:  MOVLW  AA
0CF4:  MOVLB  4
0CF6:  MOVWF  x9F
0CF8:  MOVLW  F1
0CFA:  MOVWF  x9E
0CFC:  MOVLW  02
0CFE:  MOVWF  x9D
0D00:  MOVLW  80
0D02:  MOVWF  x9C
0D04:  MOVLB  0
0D06:  RCALL  0ABC
0D08:  MOVFF  03,499
0D0C:  MOVFF  02,498
0D10:  MOVFF  01,497
0D14:  MOVFF  00,496
0D18:  RCALL  0C1A
0D1A:  MOVFF  02,47B
0D1E:  MOVFF  01,47A
0D22:  GOTO   1690 (RETURN)
.................... } 
....................  
.................... void phim_up() { 
....................    if (!input(up)) { 
0D26:  BSF    F93.5
0D28:  BTFSC  F81.5
0D2A:  BRA    0DC6
....................       delay_ms(5); 
0D2C:  MOVLW  05
0D2E:  MOVLB  4
0D30:  MOVWF  x9B
0D32:  MOVLB  0
0D34:  CALL   0478
....................       if (!input(up)) 
0D38:  BSF    F93.5
0D3A:  BTFSC  F81.5
0D3C:  BRA    0DC6
....................       { 
....................          maxT++; 
0D3E:  MOVLB  4
0D40:  INCF   x81,F
....................          if (maxT > 60) maxT = 60; 
0D42:  MOVF   x81,W
0D44:  SUBLW  3C
0D46:  BC    0D4C
0D48:  MOVLW  3C
0D4A:  MOVWF  x81
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[temp/10],ma7doan[temp%10]); 
0D4C:  MOVFF  481,499
0D50:  MOVLW  0A
0D52:  MOVWF  x9A
0D54:  MOVLB  0
0D56:  RCALL  08A6
0D58:  CLRF   03
0D5A:  MOVF   01,W
0D5C:  CALL   0004
0D60:  MOVLB  4
0D62:  MOVWF  x96
0D64:  MOVFF  481,499
0D68:  MOVLW  0A
0D6A:  MOVWF  x9A
0D6C:  MOVLB  0
0D6E:  RCALL  08A6
0D70:  CLRF   03
0D72:  MOVF   00,W
0D74:  CALL   0004
0D78:  MOVLB  4
0D7A:  MOVWF  x97
0D7C:  MOVFF  484,499
0D80:  MOVLW  0A
0D82:  MOVWF  x9A
0D84:  MOVLB  0
0D86:  RCALL  08A6
0D88:  CLRF   03
0D8A:  MOVF   01,W
0D8C:  CALL   0004
0D90:  MOVLB  4
0D92:  MOVWF  x98
0D94:  MOVFF  484,499
0D98:  MOVLW  0A
0D9A:  MOVWF  x9A
0D9C:  MOVLB  0
0D9E:  RCALL  08A6
0DA0:  CLRF   03
0DA2:  MOVF   00,W
0DA4:  CALL   0004
0DA8:  MOVLB  4
0DAA:  MOVWF  x99
0DAC:  MOVFF  496,49A
0DB0:  MOVFF  497,49B
0DB4:  MOVFF  498,49C
0DB8:  MOVWF  x9D
0DBA:  MOVLB  0
0DBC:  CALL   02AC
....................          while(!input(up)); 
0DC0:  BSF    F93.5
0DC2:  BTFSS  F81.5
0DC4:  BRA    0DC0
....................       } 
....................    } 
0DC6:  GOTO   1694 (RETURN)
.................... } 
.................... void phim_dw() { 
....................    if (!input(dw)) { 
0DCA:  BSF    F93.4
0DCC:  BTFSC  F81.4
0DCE:  BRA    0E6A
....................       delay_ms(5); 
0DD0:  MOVLW  05
0DD2:  MOVLB  4
0DD4:  MOVWF  x9B
0DD6:  MOVLB  0
0DD8:  CALL   0478
....................       if (!input(dw)) 
0DDC:  BSF    F93.4
0DDE:  BTFSC  F81.4
0DE0:  BRA    0E6A
....................       { 
....................          maxT--; 
0DE2:  MOVLB  4
0DE4:  DECF   x81,F
....................          if (maxT < 35) maxT = 35; 
0DE6:  MOVF   x81,W
0DE8:  SUBLW  22
0DEA:  BNC   0DF0
0DEC:  MOVLW  23
0DEE:  MOVWF  x81
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[temp/10],ma7doan[temp%10]); 
0DF0:  MOVFF  481,499
0DF4:  MOVLW  0A
0DF6:  MOVWF  x9A
0DF8:  MOVLB  0
0DFA:  RCALL  08A6
0DFC:  CLRF   03
0DFE:  MOVF   01,W
0E00:  CALL   0004
0E04:  MOVLB  4
0E06:  MOVWF  x96
0E08:  MOVFF  481,499
0E0C:  MOVLW  0A
0E0E:  MOVWF  x9A
0E10:  MOVLB  0
0E12:  RCALL  08A6
0E14:  CLRF   03
0E16:  MOVF   00,W
0E18:  CALL   0004
0E1C:  MOVLB  4
0E1E:  MOVWF  x97
0E20:  MOVFF  484,499
0E24:  MOVLW  0A
0E26:  MOVWF  x9A
0E28:  MOVLB  0
0E2A:  RCALL  08A6
0E2C:  CLRF   03
0E2E:  MOVF   01,W
0E30:  CALL   0004
0E34:  MOVLB  4
0E36:  MOVWF  x98
0E38:  MOVFF  484,499
0E3C:  MOVLW  0A
0E3E:  MOVWF  x9A
0E40:  MOVLB  0
0E42:  RCALL  08A6
0E44:  CLRF   03
0E46:  MOVF   00,W
0E48:  CALL   0004
0E4C:  MOVLB  4
0E4E:  MOVWF  x99
0E50:  MOVFF  496,49A
0E54:  MOVFF  497,49B
0E58:  MOVFF  498,49C
0E5C:  MOVWF  x9D
0E5E:  MOVLB  0
0E60:  CALL   02AC
....................          while (!input(dw)); 
0E64:  BSF    F93.4
0E66:  BTFSS  F81.4
0E68:  BRA    0E64
....................       } 
....................    } 
0E6A:  GOTO   1698 (RETURN)
.................... } 
....................  
....................  
.................... void readSR_04() { 
....................    set_timer1(0); 
....................    delay_ms(10); 
....................    output_high(trigger); 
....................    delay_ms(15); 
....................    output_low(trigger); 
....................  
....................    while (!(input(echo))); 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_4); 
....................  
....................    while(input(echo)); 
....................    kcs = get_timer1(); 
....................    set_timer1(T1_DISABLED); 
....................    set_timer1(0); 
....................    kcs = kcs*0.8; 
....................    kcs = (kcs/58); 
....................  
.................... } 
....................  
.................... void readGP2D12() { 
....................    set_adc_channel(2); 
....................    kqadc = 0; 
....................    for (j = 0; j<30; j++){ 
....................       kqadc = kqadc + read_adc(); 
....................       delay_quet_8led(1); 
....................    } 
....................    kqadc = kqadc /30; 
....................    k_cach = pow(4277/kqadc,1.106); 
....................    if (k_cach >80) k_cach = 80; 
.................... } 
....................  
.................... void readDS() { 
....................       if(touch_present()) {doc_giatri_ds18b20();} 
*
0978:  CALL   00CC
097C:  MOVF   01,F
097E:  BTFSS  FD8.2
0980:  BRA    0934
....................       if (ds18al != ds18a_tam) { 
0982:  MOVLB  4
0984:  MOVF   x64,W
0986:  SUBWF  x62,W
0988:  BZ    0A1C
....................          ds18a_tam = ds18al; 
098A:  MOVFF  462,464
....................          ds18a = ds18a>>4; 
098E:  RRCF   x66,F
0990:  RRCF   x65,F
0992:  RRCF   x66,F
0994:  RRCF   x65,F
0996:  RRCF   x66,F
0998:  RRCF   x65,F
099A:  RRCF   x66,F
099C:  RRCF   x65,F
099E:  MOVLW  0F
09A0:  ANDWF  x66,F
....................          ds18a = ds18a & 0x0ff; 
09A2:  CLRF   x66
....................          temp = ds18a; 
09A4:  MOVFF  465,484
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[temp/10],ma7doan[temp%10]); 
09A8:  MOVFF  481,499
09AC:  MOVLW  0A
09AE:  MOVWF  x9A
09B0:  MOVLB  0
09B2:  RCALL  08A6
09B4:  CLRF   03
09B6:  MOVF   01,W
09B8:  CALL   0004
09BC:  MOVLB  4
09BE:  MOVWF  x96
09C0:  MOVFF  481,499
09C4:  MOVLW  0A
09C6:  MOVWF  x9A
09C8:  MOVLB  0
09CA:  RCALL  08A6
09CC:  CLRF   03
09CE:  MOVF   00,W
09D0:  CALL   0004
09D4:  MOVLB  4
09D6:  MOVWF  x97
09D8:  MOVFF  484,499
09DC:  MOVLW  0A
09DE:  MOVWF  x9A
09E0:  MOVLB  0
09E2:  RCALL  08A6
09E4:  CLRF   03
09E6:  MOVF   01,W
09E8:  CALL   0004
09EC:  MOVLB  4
09EE:  MOVWF  x98
09F0:  MOVFF  484,499
09F4:  MOVLW  0A
09F6:  MOVWF  x9A
09F8:  MOVLB  0
09FA:  RCALL  08A6
09FC:  CLRF   03
09FE:  MOVF   00,W
0A00:  CALL   0004
0A04:  MOVLB  4
0A06:  MOVWF  x99
0A08:  MOVFF  496,49A
0A0C:  MOVFF  497,49B
0A10:  MOVFF  498,49C
0A14:  MOVWF  x9D
0A16:  MOVLB  0
0A18:  RCALL  02AC
0A1A:  MOVLB  4
....................       } 
0A1C:  MOVLB  0
0A1E:  GOTO   1688 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
1412:  CLRF   FF8
1414:  BCF    FD0.7
1416:  BSF    F93.1
1418:  BSF    F93.0
141A:  MOVLW  31
141C:  MOVWF  FC8
141E:  MOVLW  28
1420:  MOVWF  FC6
1422:  BSF    FC7.7
1424:  BCF    FC7.6
1426:  CLRF   06
1428:  CLRF   0D
142A:  CLRF   0E
142C:  CLRF   0F
142E:  CLRF   10
1430:  CLRF   19
1432:  CLRF   1A
1434:  CLRF   1B
1436:  CLRF   1F
1438:  CLRF   1E
143A:  CLRF   1D
143C:  CLRF   1C
143E:  CLRF   23
1440:  CLRF   22
1442:  CLRF   21
1444:  MOVLW  01
1446:  MOVWF  20
1448:  MOVLW  80
144A:  MOVWF  27
144C:  CLRF   26
144E:  CLRF   25
1450:  CLRF   24
1452:  CLRF   2B
1454:  CLRF   2A
1456:  CLRF   29
1458:  CLRF   28
145A:  MOVWF  2F
145C:  CLRF   2E
145E:  CLRF   31
1460:  MOVLW  01
1462:  MOVWF  30
1464:  CLRF   33
1466:  CLRF   32
1468:  MOVLW  80
146A:  MOVWF  37
146C:  CLRF   36
146E:  CLRF   39
1470:  MOVLW  01
1472:  MOVWF  38
1474:  CLRF   3B
1476:  CLRF   3A
1478:  CLRF   3D
147A:  CLRF   3C
147C:  CLRF   3E
147E:  MOVLW  20
1480:  MOVWF  3F
1482:  CLRF   40
1484:  MOVLW  01
1486:  MOVWF  41
1488:  MOVLW  10
148A:  MOVWF  42
148C:  CLRF   43
148E:  CLRF   47
1490:  CLRF   46
1492:  CLRF   45
1494:  MOVLW  01
1496:  MOVWF  44
1498:  CLRF   4B
149A:  CLRF   4A
149C:  CLRF   49
149E:  MOVWF  48
14A0:  SETF   4F
14A2:  SETF   4E
14A4:  SETF   4D
14A6:  MOVLW  FE
14A8:  MOVWF  4C
14AA:  MOVLW  80
14AC:  MOVWF  53
14AE:  CLRF   52
14B0:  CLRF   51
14B2:  CLRF   50
14B4:  MOVWF  57
14B6:  CLRF   56
14B8:  CLRF   55
14BA:  CLRF   54
14BC:  MOVLW  7F
14BE:  MOVWF  5B
14C0:  SETF   5A
14C2:  SETF   59
14C4:  SETF   58
14C6:  MOVLW  01
14C8:  MOVWF  5C
14CA:  MOVWF  5D
14CC:  MOVLW  21
14CE:  MOVLB  4
14D0:  MOVWF  x72
14D2:  CLRF   x77
14D4:  CLRF   x79
14D6:  CLRF   x78
14D8:  CLRF   x7B
14DA:  CLRF   x7A
14DC:  BCF    x7C.0
14DE:  MOVLW  64
14E0:  MOVWF  x7D
14E2:  MOVLW  28
14E4:  MOVWF  x81
14E6:  CLRF   x82
14E8:  CLRF   x83
14EA:  CLRF   x85
14EC:  MOVF   FC1,W
14EE:  ANDLW  C0
14F0:  IORLW  0F
14F2:  MOVWF  FC1
14F4:  MOVLW  07
14F6:  MOVWF  FB4
14F8:  SETF   11
14FA:  SETF   12
14FC:  SETF   13
14FE:  SETF   14
1500:  SETF   15
1502:  SETF   16
1504:  SETF   17
1506:  SETF   18
.................... { 
....................    set_up_port_ic_chot(); 
1508:  MOVLB  0
150A:  GOTO   008E
....................    khoi_tao_ds18b20(); 
150E:  GOTO   01C0
....................    ds18a_tam = 0; 
1512:  MOVLB  4
1514:  CLRF   x64
....................    xuat_4led_7doan_giaima_xoa_so0(0); 
1516:  CLRF   x97
1518:  CLRF   x96
151A:  MOVLB  0
151C:  GOTO   02D6
....................    setup_lcd(); 
1520:  GOTO   04A0
....................    setup_glcd(glcd_graphic_mode); 
1524:  MOVLW  36
1526:  MOVLB  4
1528:  MOVWF  x96
152A:  MOVLB  0
152C:  GOTO   0536
....................  
....................  
....................  
....................    lcd_command(0x40); 
1530:  MOVLW  40
1532:  MOVLB  4
1534:  MOVWF  x96
1536:  MOVLB  0
1538:  CALL   0462
....................    for (int i = 0; i<64;i++){ 
153C:  MOVLB  4
153E:  CLRF   x95
1540:  MOVF   x95,W
1542:  SUBLW  3F
1544:  BNC   1562
....................       lcd_data(lcd_ma_8doan[i]); 
1546:  CLRF   03
1548:  MOVF   x95,W
154A:  MOVLB  0
154C:  CALL   003E
1550:  MOVLB  4
1552:  MOVWF  x96
1554:  MOVWF  x97
1556:  MOVLB  0
1558:  CALL   0590
155C:  MOVLB  4
155E:  INCF   x95,F
1560:  BRA    1540
....................    } 
....................  
....................    doc_thoi_gian_tu_realtime(); 
1562:  MOVLB  0
1564:  CALL   05DE
....................    if (ma_ds13 != ma_ds) { 
1568:  MOVLB  4
156A:  MOVF   x6F,W
156C:  SUBLW  91
156E:  BZ    157C
....................       thiet_lap_thoi_gian_hien_tai(); 
1570:  MOVLB  0
1572:  GOTO   0666
....................       nap_thoi_gian_htai_vao_ds13b07(); 
1576:  GOTO   0692
157A:  MOVLB  4
....................    } 
....................    doc_thoi_gian_tu_realtime(); 
157C:  MOVLB  0
157E:  CALL   05DE
....................    giaytam = giay_ds13; 
1582:  MOVFF  46E,471
....................  
....................  
....................    setup_adc(ADC_CLOCK_DIV_32); 
1586:  MOVF   FC0,W
1588:  ANDLW  C0
158A:  IORLW  02
158C:  MOVWF  FC0
158E:  BSF    FC0.7
1590:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN2|VSS_VDD); 
1592:  MOVF   FC1,W
1594:  ANDLW  C0
1596:  IORLW  0C
1598:  MOVWF  FC1
....................    set_adc_channel(2); 
159A:  MOVLW  08
159C:  MOVWF  01
159E:  MOVF   FC2,W
15A0:  ANDLW  C3
15A2:  IORWF  01,W
15A4:  MOVWF  FC2
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
15A6:  MOVLW  A8
15A8:  MOVWF  FD5
....................    set_timer0(0);    
15AA:  CLRF   FD7
15AC:  CLRF   FD6
....................    setup_timer_1(T1_DISABLED); 
15AE:  CLRF   FCD
....................    //set_timer1(3036); // 3036 
....................    enable_interrupts(GLOBAL); 
15B0:  MOVLW  C0
15B2:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
15B4:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
15B6:  MOVLB  4
15B8:  CLRF   x73
....................    bdn = 0; 
15BA:  CLRF   x74
....................    phut = 29; 
15BC:  MOVLW  1D
15BE:  MOVWF  x75
....................    gio = 15; 
15C0:  MOVLW  0F
15C2:  MOVWF  x76
....................    giai_ma(); 
15C4:  MOVLB  0
15C6:  CALL   0736
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
15CA:  MOVLB  4
15CC:  BTFSC  x74.7
15CE:  BRA    15D8
15D0:  MOVF   x74,W
15D2:  SUBLW  09
15D4:  BTFSS  FD8.0
15D6:  BRA    17D6
....................          hien_thi_8led_7doan_quet_all();      
15D8:  MOVLB  0
15DA:  CALL   0874
....................          count = get_timer0(); 
15DE:  MOVF   FD6,W
15E0:  MOVLB  4
15E2:  MOVWF  x82
....................          if (count != countT) { 
15E4:  MOVF   x83,W
15E6:  SUBWF  x82,W
15E8:  BZ    1682
....................             countT = count; 
15EA:  MOVFF  482,483
....................             xuat_4led_7doan_4so(ma7doan[temp/10],ma7doan[temp%10],ma7doan[count/10],ma7doan[count%10]);          
15EE:  MOVFF  484,499
15F2:  MOVLW  0A
15F4:  MOVWF  x9A
15F6:  MOVLB  0
15F8:  CALL   08A6
15FC:  CLRF   03
15FE:  MOVF   01,W
1600:  CALL   0004
1604:  MOVLB  4
1606:  MOVWF  x96
1608:  MOVFF  484,499
160C:  MOVLW  0A
160E:  MOVWF  x9A
1610:  MOVLB  0
1612:  CALL   08A6
1616:  CLRF   03
1618:  MOVF   00,W
161A:  CALL   0004
161E:  MOVLB  4
1620:  MOVWF  x97
1622:  MOVFF  482,499
1626:  MOVLW  0A
1628:  MOVWF  x9A
162A:  MOVLB  0
162C:  CALL   08A6
1630:  CLRF   03
1632:  MOVF   01,W
1634:  CALL   0004
1638:  MOVLB  4
163A:  MOVWF  x98
163C:  MOVFF  482,499
1640:  MOVLW  0A
1642:  MOVWF  x9A
1644:  MOVLB  0
1646:  CALL   08A6
164A:  CLRF   03
164C:  MOVF   00,W
164E:  CALL   0004
1652:  MOVLB  4
1654:  MOVWF  x99
1656:  MOVFF  496,49A
165A:  MOVFF  497,49B
165E:  MOVFF  498,49C
1662:  MOVWF  x9D
1664:  MOVLB  0
1666:  CALL   02AC
....................             if (count >= max+1) {set_timer0(1);}    
166A:  MOVLW  01
166C:  MOVLB  4
166E:  ADDWF  x7D,W
1670:  MOVWF  00
1672:  BTFSC  FE8.7
1674:  BRA    167C
1676:  MOVF   00,W
1678:  SUBWF  x82,W
167A:  BNC   1682
167C:  CLRF   FD7
167E:  MOVLW  01
1680:  MOVWF  FD6
....................          } 
....................          //readGP2D12(); 
....................          //readSR_04(); 
....................          readDS(); 
1682:  MOVLB  0
1684:  GOTO   0978
....................          BaoChay(); 
1688:  GOTO   0A58
....................          read_temp(); 
168C:  GOTO   0C56
....................          phim_up(); 
1690:  GOTO   0D26
....................          phim_dw(); 
1694:  GOTO   0DCA
....................          if(ttct_td==1) sang_tat_32led(5,1); 
1698:  DECFSZ 41,W
169A:  BRA    16AA
169C:  MOVLW  05
169E:  MOVLB  4
16A0:  MOVWF  x96
16A2:  MOVLW  01
16A4:  MOVWF  x97
16A6:  MOVLB  0
16A8:  RCALL  0FFC
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
16AA:  MOVF   41,W
16AC:  SUBLW  02
16AE:  BNZ   16BE
16B0:  MOVLW  05
16B2:  MOVLB  4
16B4:  MOVWF  x96
16B6:  MOVLW  01
16B8:  MOVWF  x97
16BA:  MOVLB  0
16BC:  RCALL  1060
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
16BE:  MOVF   41,W
16C0:  SUBLW  03
16C2:  BNZ   16D2
16C4:  MOVLW  05
16C6:  MOVLB  4
16C8:  MOVWF  x96
16CA:  MOVLW  01
16CC:  MOVWF  x97
16CE:  MOVLB  0
16D0:  RCALL  10E2
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
16D2:  MOVF   41,W
16D4:  SUBLW  04
16D6:  BNZ   16E6
16D8:  MOVLW  05
16DA:  MOVLB  4
16DC:  MOVWF  x96
16DE:  MOVLW  01
16E0:  MOVWF  x97
16E2:  MOVLB  0
16E4:  RCALL  1164
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
16E6:  MOVF   41,W
16E8:  SUBLW  05
16EA:  BNZ   16FA
16EC:  MOVLW  05
16EE:  MOVLB  4
16F0:  MOVWF  x96
16F2:  MOVLW  01
16F4:  MOVWF  x97
16F6:  MOVLB  0
16F8:  RCALL  11E8
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
16FA:  MOVF   41,W
16FC:  SUBLW  06
16FE:  BNZ   170E
1700:  MOVLW  05
1702:  MOVLB  4
1704:  MOVWF  x96
1706:  MOVLW  01
1708:  MOVWF  x97
170A:  MOVLB  0
170C:  RCALL  10E2
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
170E:  MOVF   41,W
1710:  SUBLW  07
1712:  BNZ   1722
1714:  MOVLW  05
1716:  MOVLB  4
1718:  MOVWF  x96
171A:  MOVLW  01
171C:  MOVWF  x97
171E:  MOVLB  0
1720:  RCALL  10E2
....................          if(ttct_td==8) sang_tat_32led(5,1); 
1722:  MOVF   41,W
1724:  SUBLW  08
1726:  BNZ   1736
1728:  MOVLW  05
172A:  MOVLB  4
172C:  MOVWF  x96
172E:  MOVLW  01
1730:  MOVWF  x97
1732:  MOVLB  0
1734:  RCALL  0FFC
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
1736:  MOVF   41,W
1738:  SUBLW  09
173A:  BNZ   174A
173C:  MOVLW  05
173E:  MOVLB  4
1740:  MOVWF  x96
1742:  MOVLW  01
1744:  MOVWF  x97
1746:  MOVLB  0
1748:  RCALL  1060
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
174A:  MOVF   41,W
174C:  SUBLW  0A
174E:  BNZ   175E
1750:  MOVLW  05
1752:  MOVLB  4
1754:  MOVWF  x96
1756:  MOVLW  01
1758:  MOVWF  x97
175A:  MOVLB  0
175C:  RCALL  10E2
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
175E:  MOVF   41,W
1760:  SUBLW  0B
1762:  BNZ   1772
1764:  MOVLW  05
1766:  MOVLB  4
1768:  MOVWF  x96
176A:  MOVLW  01
176C:  MOVWF  x97
176E:  MOVLB  0
1770:  RCALL  1164
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
1772:  MOVF   41,W
1774:  SUBLW  0C
1776:  BNZ   1786
1778:  MOVLW  05
177A:  MOVLB  4
177C:  MOVWF  x96
177E:  MOVLW  01
1780:  MOVWF  x97
1782:  MOVLB  0
1784:  RCALL  11E8
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
1786:  MOVF   41,W
1788:  SUBLW  0D
178A:  BNZ   179A
178C:  MOVLW  05
178E:  MOVLB  4
1790:  MOVWF  x96
1792:  MOVLW  01
1794:  MOVWF  x97
1796:  MOVLB  0
1798:  RCALL  1164
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
179A:  MOVF   41,W
179C:  SUBLW  0E
179E:  BNZ   17AE
17A0:  MOVLW  05
17A2:  MOVLB  4
17A4:  MOVWF  x96
17A6:  MOVLW  01
17A8:  MOVWF  x97
17AA:  MOVLB  0
17AC:  BRA    124E
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
17AE:  MOVF   41,W
17B0:  SUBLW  0F
17B2:  BNZ   17C2
17B4:  MOVLW  05
17B6:  MOVLB  4
17B8:  MOVWF  x96
17BA:  MOVLW  01
17BC:  MOVWF  x97
17BE:  MOVLB  0
17C0:  RCALL  10E2
....................          if(ttct_td>15) ttct_td =1; 
17C2:  BTFSC  41.7
17C4:  BRA    17D0
17C6:  MOVF   41,W
17C8:  SUBLW  0F
17CA:  BC    17D0
17CC:  MOVLW  01
17CE:  MOVWF  41
....................          bdn++;       
17D0:  MOVLB  4
17D2:  INCF   x74,F
....................       } 
17D4:  BRA    1814
....................       else  
....................       { 
....................          bdn = bdn -10; 
17D6:  MOVLW  0A
17D8:  SUBWF  x74,F
....................          giay++;  
17DA:  INCF   x73,F
....................  
....................             if (giay==60) { giay = 0; phut++; 
17DC:  MOVF   x73,W
17DE:  SUBLW  3C
17E0:  BNZ   17F8
17E2:  CLRF   x73
17E4:  INCF   x75,F
....................                if (phut == 60) { phut = 0; gio++;  
17E6:  MOVF   x75,W
17E8:  SUBLW  3C
17EA:  BNZ   17F8
17EC:  CLRF   x75
17EE:  INCF   x76,F
....................                   if (gio == 24) gio = 0; 
17F0:  MOVF   x76,W
17F2:  SUBLW  18
17F4:  BNZ   17F8
17F6:  CLRF   x76
....................                }  
....................             } 
....................          giai_ma(); 
17F8:  MOVLB  0
17FA:  CALL   0736
....................          doc_thoi_gian_tu_realtime();          
17FE:  CALL   05DE
....................          if (giaytam != giay_ds13) 
1802:  MOVLB  4
1804:  MOVF   x6E,W
1806:  SUBWF  x71,W
1808:  BZ    1814
....................          { 
....................             giaytam = giay_ds13; 
180A:  MOVFF  46E,471
....................             hien_thi_thoi_gian_ds13b07(); 
180E:  MOVLB  0
1810:  BRA    12CA
1812:  MOVLB  4
....................          }          
....................       } 
1814:  BRA    15CC
....................    }            
.................... } 
....................  
1816:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
