CCS PCH C Compiler, Version 5.078, 43599               09-Nov-20 14:10

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK7\601\601.lst

               ROM used:   4336 bytes (13%)
                           Largest free fragment is 28428
               RAM used:   217 (11%) at main() level
                           241 (12%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0C30
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00E8
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
*
00F8:  DATA 20,25
00FA:  DATA 32,64
00FC:  DATA 20,3A
00FE:  DATA 20,25
0100:  DATA 32,64
0102:  DATA 20,3A
0104:  DATA 20,25
0106:  DATA 32,64
0108:  DATA 20,43
010A:  DATA 61,6D
010C:  DATA 20,6F
010E:  DATA 6E,00
0110:  DATA 25,32
0112:  DATA 64,3A
0114:  DATA 25,32
0116:  DATA 64,3A
0118:  DATA 25,32
011A:  DATA 64,20
011C:  DATA 43,61
011E:  DATA 6D,20
0120:  DATA 6F,6E
0122:  DATA 00,00
*
0282:  MOVF   xD8,W
0284:  XORWF  xD9,W
0286:  ANDLW  80
0288:  MOVWF  xDB
028A:  BTFSS  xD8.7
028C:  BRA    0292
028E:  COMF   xD8,F
0290:  INCF   xD8,F
0292:  BTFSS  xD9.7
0294:  BRA    029A
0296:  COMF   xD9,F
0298:  INCF   xD9,F
029A:  MOVF   xD9,W
029C:  CLRF   01
029E:  SUBWF  xD8,W
02A0:  BC    02A8
02A2:  MOVFF  D8,00
02A6:  BRA    02C0
02A8:  CLRF   00
02AA:  MOVLW  08
02AC:  MOVWF  xDA
02AE:  RLCF   xD8,F
02B0:  RLCF   00,F
02B2:  MOVF   xD9,W
02B4:  SUBWF  00,W
02B6:  BTFSC  FD8.0
02B8:  MOVWF  00
02BA:  RLCF   01,F
02BC:  DECFSZ xDA,F
02BE:  BRA    02AE
02C0:  BTFSS  xDB.7
02C2:  BRA    02C8
02C4:  COMF   01,F
02C6:  INCF   01,F
02C8:  RETURN 0
*
0352:  MOVFF  D2,FEA
0356:  MOVFF  D1,FE9
035A:  MOVFF  DE,FEF
035E:  INCF   FE9,F
0360:  BTFSC  FD8.2
0362:  INCF   FEA,F
0364:  CLRF   FEF
0366:  INCF   xD1,F
0368:  BTFSC  FD8.2
036A:  INCF   xD2,F
036C:  RETURN 0
036E:  MOVF   xDF,W
0370:  CLRF   01
0372:  SUBWF  xDE,W
0374:  BC    037C
0376:  MOVFF  DE,00
037A:  BRA    0394
037C:  CLRF   00
037E:  MOVLW  08
0380:  MOVWF  xE0
0382:  RLCF   xDE,F
0384:  RLCF   00,F
0386:  MOVF   xDF,W
0388:  SUBWF  00,W
038A:  BTFSC  FD8.0
038C:  MOVWF  00
038E:  RLCF   01,F
0390:  DECFSZ xE0,F
0392:  BRA    0382
0394:  RETURN 0
0396:  MOVLW  20
0398:  BTFSS  xD9.4
039A:  MOVLW  30
039C:  MOVWF  xDA
039E:  MOVFF  D8,00
03A2:  BTFSS  xD8.7
03A4:  BRA    03B6
03A6:  COMF   00,F
03A8:  INCF   00,F
03AA:  MOVFF  00,D8
03AE:  MOVLW  2D
03B0:  MOVWF  xDA
03B2:  BSF    xD9.7
03B4:  BSF    xD9.0
03B6:  MOVF   01,W
03B8:  MOVFF  D8,DE
03BC:  MOVLW  64
03BE:  MOVWF  xDF
03C0:  RCALL  036E
03C2:  MOVFF  00,D8
03C6:  MOVLW  30
03C8:  ADDWF  01,W
03CA:  MOVWF  xDB
03CC:  MOVFF  D8,DE
03D0:  MOVLW  0A
03D2:  MOVWF  xDF
03D4:  RCALL  036E
03D6:  MOVLW  30
03D8:  ADDWF  00,W
03DA:  MOVWF  xDD
03DC:  MOVLW  30
03DE:  ADDWF  01,W
03E0:  MOVWF  xDC
03E2:  MOVFF  DA,00
03E6:  MOVLW  30
03E8:  SUBWF  xDB,W
03EA:  BZ    03F4
03EC:  BSF    xD9.1
03EE:  BTFSC  xD9.7
03F0:  BSF    xD9.2
03F2:  BRA    0418
03F4:  MOVFF  DA,DB
03F8:  MOVLW  20
03FA:  MOVWF  xDA
03FC:  MOVLW  30
03FE:  SUBWF  xDC,W
0400:  BZ    040A
0402:  BSF    xD9.0
0404:  BTFSC  xD9.7
0406:  BSF    xD9.1
0408:  BRA    0418
040A:  BTFSS  FD8.2
040C:  BSF    xD9.0
040E:  BNZ   0418
0410:  MOVFF  DB,DC
0414:  MOVLW  20
0416:  MOVWF  xDB
0418:  BTFSC  xD9.2
041A:  BRA    0426
041C:  BTFSC  xD9.1
041E:  BRA    042C
0420:  BTFSC  xD9.0
0422:  BRA    0432
0424:  BRA    0438
0426:  MOVFF  DA,DE
042A:  RCALL  0352
042C:  MOVFF  DB,DE
0430:  RCALL  0352
0432:  MOVFF  DC,DE
0436:  RCALL  0352
0438:  MOVFF  DD,DE
043C:  RCALL  0352
043E:  RETURN 0
0440:  TBLRD*+
0442:  MOVFF  FF6,D9
0446:  MOVFF  FF7,DA
044A:  MOVFF  FF5,DE
044E:  RCALL  0352
0450:  MOVFF  D9,FF6
0454:  MOVFF  DA,FF7
0458:  DECFSZ xD8,F
045A:  BRA    0440
045C:  RETURN 0
*
069A:  CLRF   01
069C:  CLRF   02
069E:  CLRF   00
06A0:  CLRF   03
06A2:  MOVF   xDF,W
06A4:  BNZ   06AA
06A6:  MOVF   xDE,W
06A8:  BZ    06DA
06AA:  MOVLW  10
06AC:  MOVWF  xE0
06AE:  BCF    FD8.0
06B0:  RLCF   xDC,F
06B2:  RLCF   xDD,F
06B4:  RLCF   00,F
06B6:  RLCF   03,F
06B8:  MOVF   xDF,W
06BA:  SUBWF  03,W
06BC:  BNZ   06C2
06BE:  MOVF   xDE,W
06C0:  SUBWF  00,W
06C2:  BNC   06D2
06C4:  MOVF   xDE,W
06C6:  SUBWF  00,F
06C8:  BTFSS  FD8.0
06CA:  DECF   03,F
06CC:  MOVF   xDF,W
06CE:  SUBWF  03,F
06D0:  BSF    FD8.0
06D2:  RLCF   01,F
06D4:  RLCF   02,F
06D6:  DECFSZ xE0,F
06D8:  BRA    06AE
06DA:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
0202:  CLRF   FEA
0204:  MOVLW  DD
0206:  MOVWF  FE9
0208:  MOVF   FEF,W
020A:  BZ    0226
020C:  MOVLW  06
020E:  MOVWF  01
0210:  CLRF   00
0212:  DECFSZ 00,F
0214:  BRA    0212
0216:  DECFSZ 01,F
0218:  BRA    0210
021A:  MOVLW  7B
021C:  MOVWF  00
021E:  DECFSZ 00,F
0220:  BRA    021E
0222:  DECFSZ FEF,F
0224:  BRA    020C
0226:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
*
054A:  BSF    F93.5
054C:  BTFSC  F81.5
054E:  BRA    0574
....................     {   
....................       dl_btn++; 
0550:  INCF   1B,F
....................       delay_ms(1); 
0552:  MOVLW  01
0554:  MOVWF  xDD
0556:  RCALL  0202
....................       if (dl_btn>= dl) 
0558:  MOVF   xD9,F
055A:  BNZ   056C
055C:  MOVF   xD8,W
055E:  SUBWF  1B,W
0560:  BNC   056C
....................          { 
....................             dl_btn =0; 
0562:  CLRF   1B
....................             return(1); 
0564:  MOVLW  01
0566:  MOVWF  01
0568:  BRA    0578
....................          } 
056A:  BRA    0572
....................       else return(0); 
056C:  MOVLW  00
056E:  MOVWF  01
0570:  BRA    0578
....................     } 
0572:  BRA    0578
....................     else    return(0); 
0574:  MOVLW  00
0576:  MOVWF  01
0578:  GOTO   0584 (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
*
05CA:  BSF    F93.4
05CC:  BTFSC  F81.4
05CE:  BRA    05F4
....................     {   
....................       dl_btn++; 
05D0:  INCF   1B,F
....................       delay_ms(1); 
05D2:  MOVLW  01
05D4:  MOVWF  xDD
05D6:  RCALL  0202
....................       if (dl_btn>= dl) 
05D8:  MOVF   xD9,F
05DA:  BNZ   05EC
05DC:  MOVF   xD8,W
05DE:  SUBWF  1B,W
05E0:  BNC   05EC
....................          { 
....................             dl_btn =0; 
05E2:  CLRF   1B
....................             return(1); 
05E4:  MOVLW  01
05E6:  MOVWF  01
05E8:  BRA    05F8
....................          } 
05EA:  BRA    05F2
....................       else return(0); 
05EC:  MOVLW  00
05EE:  MOVWF  01
05F0:  BRA    05F8
....................     } 
05F2:  BRA    05F8
....................     else    return(0); 
05F4:  MOVLW  00
05F6:  MOVWF  01
05F8:  GOTO   0604 (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
*
064A:  BSF    F93.3
064C:  BTFSC  F81.3
064E:  BRA    0674
....................     {   
....................       dl_btn++; 
0650:  INCF   1B,F
....................       delay_ms(1); 
0652:  MOVLW  01
0654:  MOVWF  xDD
0656:  RCALL  0202
....................       if (dl_btn>= dl) 
0658:  MOVF   xD9,F
065A:  BNZ   066C
065C:  MOVF   xD8,W
065E:  SUBWF  1B,W
0660:  BNC   066C
....................          { 
....................             dl_btn =0; 
0662:  CLRF   1B
....................             return(1); 
0664:  MOVLW  01
0666:  MOVWF  01
0668:  BRA    0678
....................          } 
066A:  BRA    0672
....................       else return(0); 
066C:  MOVLW  00
066E:  MOVWF  01
0670:  BRA    0678
....................     } 
0672:  BRA    0678
....................     else    return(0); 
0674:  MOVLW  00
0676:  MOVWF  01
0678:  GOTO   0684 (RETURN)
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
0142:  MOVFF  EE,F0
....................    for (sb=0;sb<8;sb++) 
0146:  CLRF   xEF
0148:  MOVF   xEF,W
014A:  SUBLW  07
014C:  BNC   016A
....................       {                                                  
....................          output_bit(ssdo,bseri);     
014E:  BTFSC  xF0.7
0150:  BRA    0156
0152:  BCF    F8D.2
0154:  BRA    0158
0156:  BSF    F8D.2
0158:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
015A:  BCF    F96.0
015C:  BCF    F8D.0
015E:  BCF    F96.0
0160:  BSF    F8D.0
....................          x= x<<1;          
0162:  BCF    FD8.0
0164:  RLCF   xF0,F
0166:  INCF   xEF,F
0168:  BRA    0148
....................      } 
016A:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
0808:  MOVFF  EA,EE
080C:  RCALL  0142
....................       xuat_1byte(bld2); 
080E:  MOVFF  EB,EE
0812:  RCALL  0142
....................       xuat_1byte(bld1);           
0814:  MOVFF  EC,EE
0818:  RCALL  0142
....................       xuat_1byte(bld0);             
081A:  MOVFF  ED,EE
081E:  RCALL  0142
....................       mo_32_led_don;       
0820:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
0822:  RCALL  016C
....................       output_high(rck_32led);    output_low(rck_32led); 
0824:  BCF    F95.5
0826:  BSF    F8C.5
0828:  BCF    F95.5
082A:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
082C:  BCF    F95.1
082E:  BCF    F8C.1
0830:  GOTO   0856 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
0834:  MOVFF  E3,E6
0838:  MOVFF  E2,E7
....................      b1 = wld0>>8;  b0 = wld0; 
083C:  MOVFF  E5,E8
0840:  MOVFF  E4,E9
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0844:  MOVFF  E6,EA
0848:  MOVFF  E7,EB
084C:  MOVFF  E8,EC
0850:  MOVFF  E9,ED
0854:  BRA    0808
0856:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
0858:  MOVFF  DC,DE
085C:  MOVFF  DD,DF
0860:  MOVFF  DB,E1
0864:  MOVFF  DA,E0
....................      xuat_32led_don_2word(wd1,wd0); 
0868:  MOVFF  DF,E3
086C:  MOVFF  DE,E2
0870:  MOVFF  E1,E5
0874:  MOVFF  E0,E4
0878:  RCALL  0834
087A:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
0124:  MOVLW  00
0126:  MOVWF  F95
....................       set_tris_e(0x00); 
0128:  MOVWF  F96
....................       output_d(0xff); 
012A:  CLRF   F95
012C:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
012E:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
0130:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
0132:  BCF    F95.1
0134:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
0136:  BCF    F95.0
0138:  BCF    F8C.0
....................       rbdc=0; 
013A:  CLRF   1D
013C:  CLRF   1C
013E:  GOTO   0D94 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
016C:  CLRF   F95
016E:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
0170:  BTFSC  19.4
0172:  BRA    0178
0174:  BCF    F8C.4
0176:  BRA    017A
0178:  BSF    F8C.4
017A:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
017C:  BTFSC  19.6
017E:  BRA    0184
0180:  BCF    F8C.6
0182:  BRA    0186
0184:  BSF    F8C.6
0186:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
0188:  BTFSC  19.2
018A:  BRA    0190
018C:  BCF    F8C.2
018E:  BRA    0192
0190:  BSF    F8C.2
0192:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
0194:  BCF    F95.1
0196:  BSF    F8C.1
0198:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0482:  CLRF   F95
0484:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0486:  BTFSC  1A.6
0488:  BRA    048E
048A:  BCF    F8C.6
048C:  BRA    0490
048E:  BSF    F8C.6
0490:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0492:  BTFSC  1A.4
0494:  BRA    049A
0496:  BCF    F8C.4
0498:  BRA    049C
049A:  BSF    F8C.4
049C:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
049E:  BTFSC  1A.2
04A0:  BRA    04A6
04A2:  BCF    F8C.2
04A4:  BRA    04A8
04A6:  BSF    F8C.2
04A8:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
04AA:  BCF    F95.0
04AC:  BSF    F8C.0
04AE:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
06DC:  MOVFF  DD,EE
06E0:  RCALL  0142
06E2:  MOVFF  DC,EE
06E6:  RCALL  0142
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
06E8:  MOVFF  DB,EE
06EC:  RCALL  0142
06EE:  MOVFF  DA,EE
06F2:  RCALL  0142
....................        
....................       mo_4_led_7doan; 
06F4:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
06F6:  RCALL  016C
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
06F8:  BCF    F95.7
06FA:  BCF    F8C.7
06FC:  BCF    F95.7
06FE:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
0700:  BCF    F95.1
0702:  BCF    F8C.1
0704:  GOTO   0804 (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
0708:  MOVFF  D9,DD
070C:  MOVFF  D8,DC
0710:  CLRF   xDF
0712:  MOVLW  0A
0714:  MOVWF  xDE
0716:  RCALL  069A
0718:  MOVFF  00,DA
071C:  MOVFF  03,DB
0720:  MOVFF  03,03
0724:  MOVF   00,W
0726:  RCALL  00AE
0728:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
072A:  MOVFF  D9,DD
072E:  MOVFF  D8,DC
0732:  CLRF   xDF
0734:  MOVLW  0A
0736:  MOVWF  xDE
0738:  RCALL  069A
073A:  MOVFF  02,DB
073E:  MOVFF  01,DA
0742:  MOVFF  02,DD
0746:  MOVFF  01,DC
074A:  CLRF   xDF
074C:  MOVLW  0A
074E:  MOVWF  xDE
0750:  RCALL  069A
0752:  MOVFF  00,DA
0756:  MOVFF  03,DB
075A:  MOVFF  03,03
075E:  MOVF   00,W
0760:  RCALL  00AE
0762:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
0764:  MOVFF  D9,DD
0768:  MOVFF  D8,DC
076C:  CLRF   xDF
076E:  MOVLW  64
0770:  MOVWF  xDE
0772:  RCALL  069A
0774:  MOVFF  02,DB
0778:  MOVFF  01,DA
077C:  MOVFF  02,DD
0780:  MOVFF  01,DC
0784:  CLRF   xDF
0786:  MOVLW  0A
0788:  MOVWF  xDE
078A:  RCALL  069A
078C:  MOVFF  00,DA
0790:  MOVFF  03,DB
0794:  MOVFF  03,03
0798:  MOVF   00,W
079A:  RCALL  00AE
079C:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
079E:  MOVFF  D9,DD
07A2:  MOVFF  D8,DC
07A6:  MOVLW  03
07A8:  MOVWF  xDF
07AA:  MOVLW  E8
07AC:  MOVWF  xDE
07AE:  RCALL  069A
07B0:  MOVFF  02,DB
07B4:  MOVFF  01,DA
07B8:  MOVFF  02,DD
07BC:  MOVFF  01,DC
07C0:  CLRF   xDF
07C2:  MOVLW  0A
07C4:  MOVWF  xDE
07C6:  RCALL  069A
07C8:  MOVFF  00,DA
07CC:  MOVFF  03,DB
07D0:  MOVFF  03,03
07D4:  MOVF   00,W
07D6:  RCALL  00AE
07D8:  MOVWF  21
....................       if (ngan4==0xc0) 
07DA:  MOVF   21,W
07DC:  SUBLW  C0
07DE:  BNZ   07F2
....................       { 
....................          ngan4=0xff; 
07E0:  SETF   21
....................          if (tram4==0xc0) 
07E2:  MOVF   20,W
07E4:  SUBLW  C0
07E6:  BNZ   07F2
....................          { 
....................             tram4=0xff; 
07E8:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
07EA:  MOVF   1F,W
07EC:  SUBLW  C0
07EE:  BNZ   07F2
07F0:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
07F2:  MOVFF  21,DA
07F6:  MOVFF  20,DB
07FA:  MOVFF  1F,DC
07FE:  MOVFF  1E,DD
0802:  BRA    06DC
0804:  GOTO   0FAE (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
019A:  MOVFF  25,EE
019E:  RCALL  0142
....................     xuat_1byte(glcddata); 
01A0:  MOVFF  24,EE
01A4:  RCALL  0142
....................     xuat_1byte(lcdcontrol);        
01A6:  MOVFF  23,EE
01AA:  RCALL  0142
....................     xuat_1byte(lcddata);       
01AC:  MOVFF  22,EE
01B0:  RCALL  0142
....................        
....................     mo_glcd_lcd; 
01B2:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
01B4:  RCALL  016C
....................     output_high(rck_lcd20x4);      
01B6:  BCF    F95.3
01B8:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
01BA:  BCF    F95.3
01BC:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
01BE:  BCF    F95.1
01C0:  BCF    F8C.1
01C2:  GOTO   01D4 (RETURN)
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
01C6:  MOVF   xDB,W
01C8:  MOVWF  23
01CA:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
01CC:  MOVFF  DC,22
01D0:  COMF   22,F
....................     xuat_glcd_lcd(); 
01D2:  BRA    019A
01D4:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
....................     glcddata    = ~glcd_ins_hthi;      
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
04E2:  MOVF   xDE,W
04E4:  MOVWF  xE0
04E6:  COMF   xE0,F
04E8:  MOVFF  E0,EE
04EC:  RCALL  0142
04EE:  MOVFF  DF,E0
04F2:  COMF   xE0,F
04F4:  MOVFF  E0,EE
04F8:  RCALL  0142
....................        
....................       mo_8_led_quet; 
04FA:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
04FC:  RCALL  0482
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
04FE:  BCF    F95.5
0500:  BSF    F8C.5
0502:  BCF    F95.5
0504:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0506:  BCF    F95.0
0508:  BCF    F8C.0
050A:  GOTO   0514 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
050E:  SETF   xDE
0510:  SETF   xDF
0512:  BRA    04E2
0514:  GOTO   0544 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
04B0:  CLRF   03
04B2:  MOVF   xDF,W
04B4:  RCALL  00D0
04B6:  MOVWF  01
04B8:  MOVWF  xE1
04BA:  COMF   xE1,F
04BC:  MOVFF  E1,EE
04C0:  RCALL  0142
04C2:  MOVFF  E0,E1
04C6:  COMF   xE1,F
04C8:  MOVFF  E1,EE
04CC:  RCALL  0142
....................       mo_8_led_quet; 
04CE:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
04D0:  RCALL  0482
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
04D2:  BCF    F95.5
04D4:  BSF    F8C.5
04D6:  BCF    F95.5
04D8:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
04DA:  BCF    F95.0
04DC:  BCF    F8C.0
04DE:  GOTO   0538 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0518:  CLRF   2E
051A:  MOVF   2E,W
051C:  SUBLW  07
051E:  BNC   0548
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0520:  CLRF   03
0522:  MOVF   2E,W
0524:  ADDLW  26
0526:  MOVWF  FE9
0528:  MOVLW  00
052A:  ADDWFC 03,W
052C:  MOVWF  FEA
052E:  MOVFF  FEF,E0
0532:  MOVFF  2E,DF
0536:  BRA    04B0
....................             delay_us(100); 
0538:  MOVLW  A6
053A:  MOVWF  00
053C:  DECFSZ 00,F
053E:  BRA    053C
0540:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
0542:  BRA    050E
0544:  INCF   2E,F
0546:  BRA    051A
....................             } 
0548:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0898:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
089A:  CLRF   34
089C:  CLRF   33
089E:  CLRF   32
08A0:  CLRF   31
08A2:  CLRF   38
08A4:  CLRF   37
08A6:  CLRF   36
08A8:  MOVLW  01
08AA:  MOVWF  35
08AC:  MOVLW  80
08AE:  MOVWF  3C
08B0:  CLRF   3B
08B2:  CLRF   3A
08B4:  CLRF   39
08B6:  CLRF   40
08B8:  CLRF   3F
08BA:  CLRF   3E
08BC:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
08BE:  MOVWF  44
08C0:  CLRF   43
08C2:  CLRF   46
08C4:  MOVLW  01
08C6:  MOVWF  45
08C8:  CLRF   48
08CA:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
08CC:  MOVLW  80
08CE:  MOVWF  4C
08D0:  CLRF   4B
08D2:  CLRF   4E
08D4:  MOVLW  01
08D6:  MOVWF  4D
08D8:  CLRF   50
08DA:  CLRF   4F
....................       zt=zp=0; 
08DC:  CLRF   4A
08DE:  CLRF   49
08E0:  MOVFF  4A,42
08E4:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
08E8:  MOVLW  20
08EA:  MOVWF  54
08EC:  CLRF   55
08EE:  MOVLW  10
08F0:  MOVWF  57
08F2:  CLRF   58
....................       dem_led=0; 
08F4:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
08F6:  CLRF   5C
08F8:  CLRF   5B
08FA:  CLRF   5A
08FC:  MOVLW  01
08FE:  MOVWF  59
0900:  CLRF   x60
0902:  CLRF   5F
0904:  CLRF   5E
0906:  MOVWF  5D
0908:  SETF   x64
090A:  SETF   x63
090C:  SETF   x62
090E:  MOVLW  FE
0910:  MOVWF  x61
0912:  MOVLW  01
0914:  MOVWF  x71
0916:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
0918:  MOVLW  80
091A:  MOVWF  x68
091C:  CLRF   x67
091E:  CLRF   x66
0920:  CLRF   x65
0922:  MOVWF  x6C
0924:  CLRF   x6B
0926:  CLRF   x6A
0928:  CLRF   x69
092A:  MOVLW  7F
092C:  MOVWF  x70
092E:  SETF   x6F
0930:  SETF   x6E
0932:  SETF   x6D
....................      tgdlay = 0; 
0934:  CLRF   52
0936:  CLRF   51
0938:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
094A:  CLRF   xDD
094C:  MOVF   xDC,W
094E:  SUBWF  xDD,W
0950:  BC    0958
....................       hien_thi_8led_7doan_quet_all(); 
0952:  RCALL  0518
0954:  INCF   xDD,F
0956:  BRA    094C
....................       dem_led++; 
0958:  INCF   53,F
095A:  GOTO   0970 (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
093A:  MOVF   xDC,F
093C:  BZ    0944
093E:  MOVFF  DC,DD
0942:  RCALL  0202
....................       dem_led++; 
0944:  INCF   53,F
0946:  GOTO   0970 (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
095E:  MOVF   xDB,F
0960:  BNZ   096A
0962:  MOVFF  DA,DC
0966:  BRA    093A
0968:  BRA    0970
....................    else              tang_dem_led_delay_1(dl); 
096A:  MOVFF  DA,DC
096E:  BRA    094A
0970:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
087C:  COMF   31,F
087E:  COMF   32,F
0880:  COMF   33,F
0882:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
0884:  MOVFF  34,DD
0888:  MOVFF  33,DC
088C:  MOVFF  32,DB
0890:  MOVFF  31,DA
0894:  RCALL  0858
0896:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
0972:  DECFSZ 51,W
0974:  BRA    098E
0976:  MOVF   52,F
0978:  BNZ   098E
097A:  MOVFF  34,DD
097E:  MOVFF  33,DC
0982:  MOVFF  32,DB
0986:  MOVFF  31,DA
098A:  RCALL  0858
098C:  BRA    09C4
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
098E:  MOVF   51,W
0990:  SUBLW  32
0992:  BNZ   099C
0994:  MOVF   52,F
0996:  BNZ   099C
0998:  RCALL  087C
099A:  BRA    09C4
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
099C:  MOVF   51,W
099E:  SUBLW  64
09A0:  BNZ   09AA
09A2:  MOVF   52,F
09A4:  BNZ   09AA
09A6:  RCALL  087C
09A8:  BRA    09C4
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
09AA:  MOVF   51,W
09AC:  SUBLW  96
09AE:  BNZ   09B8
09B0:  MOVF   52,F
09B2:  BNZ   09B8
09B4:  RCALL  087C
09B6:  BRA    09C4
....................       else if (tgdlay==200)   
09B8:  MOVF   51,W
09BA:  SUBLW  C8
09BC:  BNZ   09C4
09BE:  MOVF   52,F
09C0:  BNZ   09C4
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
09C2:  RCALL  0898
....................       } 
....................       tgdlay++; 
09C4:  INCF   51,F
09C6:  BTFSC  FD8.2
09C8:  INCF   52,F
....................       delay_chon(dl,chondelay); 
09CA:  MOVFF  D8,DA
09CE:  MOVFF  D9,DB
09D2:  RCALL  095E
09D4:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
09D6:  MOVF   53,W
09D8:  SUBLW  0F
09DA:  BNC   0A20
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
09DC:  MOVFF  4A,E3
09E0:  MOVFF  49,E2
09E4:  MOVFF  42,E5
09E8:  MOVFF  41,E4
09EC:  RCALL  0834
....................       zp= (zp<<1)+1;  
09EE:  BCF    FD8.0
09F0:  RLCF   49,W
09F2:  MOVWF  xDA
09F4:  RLCF   4A,W
09F6:  MOVWF  xDB
09F8:  MOVLW  01
09FA:  ADDWF  xDA,W
09FC:  MOVWF  49
09FE:  MOVLW  00
0A00:  ADDWFC xDB,W
0A02:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
0A04:  BCF    FD8.0
0A06:  RRCF   42,W
0A08:  MOVWF  xDB
0A0A:  RRCF   41,W
0A0C:  MOVWF  41
0A0E:  MOVLW  80
0A10:  ADDWF  xDB,W
0A12:  MOVWF  42
....................       delay_chon(dl,chondelay); 
0A14:  MOVFF  D8,DA
0A18:  MOVFF  D9,DB
0A1C:  RCALL  095E
....................    } 
0A1E:  BRA    0A52
....................    else  if (dem_led<32) 
0A20:  MOVF   53,W
0A22:  SUBLW  1F
0A24:  BNC   0A50
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
0A26:  MOVFF  4A,E3
0A2A:  MOVFF  49,E2
0A2E:  MOVFF  42,E5
0A32:  MOVFF  41,E4
0A36:  RCALL  0834
....................       zp= (zp<<1);  
0A38:  BCF    FD8.0
0A3A:  RLCF   49,F
0A3C:  RLCF   4A,F
....................       zt= (zt>>1); 
0A3E:  BCF    FD8.0
0A40:  RRCF   42,F
0A42:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
0A44:  MOVFF  D8,DA
0A48:  MOVFF  D9,DB
0A4C:  RCALL  095E
....................    } 
0A4E:  BRA    0A52
....................    else reset_toan_bo_bien(); 
0A50:  RCALL  0898
0A52:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
0B56:  MOVF   53,W
0B58:  SUBLW  0F
0B5A:  BNC   0B8A
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
0B5C:  MOVFF  4A,E3
0B60:  MOVFF  49,E2
0B64:  MOVFF  4A,E5
0B68:  MOVFF  49,E4
0B6C:  RCALL  0834
....................       zp= (zp>>1)+0x8000; 
0B6E:  BCF    FD8.0
0B70:  RRCF   4A,W
0B72:  MOVWF  xDB
0B74:  RRCF   49,W
0B76:  MOVWF  49
0B78:  MOVLW  80
0B7A:  ADDWF  xDB,W
0B7C:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
0B7E:  MOVFF  D8,DA
0B82:  MOVFF  D9,DB
0B86:  RCALL  095E
....................    } 
0B88:  BRA    0BB6
....................    else  if (dem_led<32) 
0B8A:  MOVF   53,W
0B8C:  SUBLW  1F
0B8E:  BNC   0BB4
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
0B90:  MOVFF  4A,E3
0B94:  MOVFF  49,E2
0B98:  MOVFF  4A,E5
0B9C:  MOVFF  49,E4
0BA0:  RCALL  0834
....................       zp= (zp>>1); 
0BA2:  BCF    FD8.0
0BA4:  RRCF   4A,F
0BA6:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
0BA8:  MOVFF  D8,DA
0BAC:  MOVFF  D9,DB
0BB0:  RCALL  095E
....................     } 
0BB2:  BRA    0BB6
....................    else reset_toan_bo_bien(); 
0BB4:  RCALL  0898
0BB6:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
0AD6:  MOVF   53,W
0AD8:  SUBLW  1F
0ADA:  BNC   0B24
....................    {   
....................       xuat_32led_don_1dw(y); 
0ADC:  MOVFF  34,DD
0AE0:  MOVFF  33,DC
0AE4:  MOVFF  32,DB
0AE8:  MOVFF  31,DA
0AEC:  RCALL  0858
....................       y= (y<<1)+1; 
0AEE:  BCF    FD8.0
0AF0:  RLCF   31,W
0AF2:  MOVWF  xDB
0AF4:  RLCF   32,W
0AF6:  MOVWF  xDC
0AF8:  RLCF   33,W
0AFA:  MOVWF  xDD
0AFC:  RLCF   34,W
0AFE:  MOVWF  xDE
0B00:  MOVLW  01
0B02:  ADDWF  xDB,W
0B04:  MOVWF  31
0B06:  MOVLW  00
0B08:  ADDWFC xDC,W
0B0A:  MOVWF  32
0B0C:  MOVLW  00
0B0E:  ADDWFC xDD,W
0B10:  MOVWF  33
0B12:  MOVLW  00
0B14:  ADDWFC xDE,W
0B16:  MOVWF  34
....................       delay_chon(dl,chondelay); 
0B18:  MOVFF  D8,DA
0B1C:  MOVFF  D9,DB
0B20:  RCALL  095E
....................    } 
0B22:  BRA    0B54
....................    else  if (dem_led<64) 
0B24:  MOVF   53,W
0B26:  SUBLW  3F
0B28:  BNC   0B52
....................    {   
....................       xuat_32led_don_1dw(y);    
0B2A:  MOVFF  34,DD
0B2E:  MOVFF  33,DC
0B32:  MOVFF  32,DB
0B36:  MOVFF  31,DA
0B3A:  RCALL  0858
....................       y= (y<<1);  
0B3C:  BCF    FD8.0
0B3E:  RLCF   31,F
0B40:  RLCF   32,F
0B42:  RLCF   33,F
0B44:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
0B46:  MOVFF  D8,DA
0B4A:  MOVFF  D9,DB
0B4E:  RCALL  095E
....................    }  
0B50:  BRA    0B54
....................    else reset_toan_bo_bien(); 
0B52:  RCALL  0898
0B54:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
0BB8:  MOVF   53,W
0BBA:  SUBLW  1F
0BBC:  BNC   0BFC
....................       {   
....................          xuat_32led_don_1dw(y); 
0BBE:  MOVFF  34,DD
0BC2:  MOVFF  33,DC
0BC6:  MOVFF  32,DB
0BCA:  MOVFF  31,DA
0BCE:  RCALL  0858
....................          y= (y>>1)+0x80000000;  
0BD0:  BCF    FD8.0
0BD2:  RRCF   34,W
0BD4:  MOVWF  xDE
0BD6:  RRCF   33,W
0BD8:  MOVWF  xDD
0BDA:  RRCF   32,W
0BDC:  MOVWF  xDC
0BDE:  RRCF   31,W
0BE0:  MOVWF  31
0BE2:  MOVFF  DC,32
0BE6:  MOVFF  DD,33
0BEA:  MOVLW  80
0BEC:  ADDWF  xDE,W
0BEE:  MOVWF  34
....................          delay_chon(dl,chondelay);       
0BF0:  MOVFF  D8,DA
0BF4:  MOVFF  D9,DB
0BF8:  RCALL  095E
....................       } 
0BFA:  BRA    0C2C
....................       else 
....................       if (dem_led<64) 
0BFC:  MOVF   53,W
0BFE:  SUBLW  3F
0C00:  BNC   0C2A
....................       {   
....................          xuat_32led_don_1dw(y);  
0C02:  MOVFF  34,DD
0C06:  MOVFF  33,DC
0C0A:  MOVFF  32,DB
0C0E:  MOVFF  31,DA
0C12:  RCALL  0858
....................          y= (y>>1); 
0C14:  BCF    FD8.0
0C16:  RRCF   34,F
0C18:  RRCF   33,F
0C1A:  RRCF   32,F
0C1C:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
0C1E:  MOVFF  D8,DA
0C22:  MOVFF  D9,DB
0C26:  RCALL  095E
....................       }  
0C28:  BRA    0C2C
....................       else reset_toan_bo_bien(); 
0C2A:  RCALL  0898
0C2C:  GOTO   109C (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
0A54:  BTFSC  54.7
0A56:  BRA    0AD2
0A58:  MOVF   54,W
0A5A:  SUBLW  00
0A5C:  BC    0AD2
....................    { 
....................       if(j32<i32) 
0A5E:  MOVF   55,W
0A60:  XORLW  80
0A62:  MOVWF  00
0A64:  MOVF   54,W
0A66:  XORLW  80
0A68:  SUBWF  00,W
0A6A:  BC    0AAC
....................       { 
....................          y = y_codinh|yp_chay; 
0A6C:  MOVF   3D,W
0A6E:  IORWF  35,W
0A70:  MOVWF  31
0A72:  MOVF   3E,W
0A74:  IORWF  36,W
0A76:  MOVWF  32
0A78:  MOVF   3F,W
0A7A:  IORWF  37,W
0A7C:  MOVWF  33
0A7E:  MOVF   40,W
0A80:  IORWF  38,W
0A82:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
0A84:  MOVFF  34,DD
0A88:  MOVFF  33,DC
0A8C:  MOVFF  32,DB
0A90:  MOVFF  31,DA
0A94:  RCALL  0858
....................          delay_chon(dl,chondelay);        
0A96:  MOVFF  D8,DA
0A9A:  MOVFF  D9,DB
0A9E:  RCALL  095E
....................          yp_chay = yp_chay <<1; 
0AA0:  BCF    FD8.0
0AA2:  RLCF   35,F
0AA4:  RLCF   36,F
0AA6:  RLCF   37,F
0AA8:  RLCF   38,F
....................          j32++; 
0AAA:  INCF   55,F
....................       } 
....................       if (j32==i32)  
0AAC:  MOVF   54,W
0AAE:  SUBWF  55,W
0AB0:  BNZ   0AD0
....................       { 
....................          i32--; 
0AB2:  DECF   54,F
....................          j32=0;          
0AB4:  CLRF   55
....................          y_codinh=y; 
0AB6:  MOVFF  34,40
0ABA:  MOVFF  33,3F
0ABE:  MOVFF  32,3E
0AC2:  MOVFF  31,3D
....................          yp_chay = 1; 
0AC6:  CLRF   38
0AC8:  CLRF   37
0ACA:  CLRF   36
0ACC:  MOVLW  01
0ACE:  MOVWF  35
....................       } 
....................    } 
0AD0:  BRA    0AD4
....................    else reset_toan_bo_bien(); 
0AD2:  RCALL  0898
0AD4:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
01D6:  BSF    x73.0
01D8:  MOVFF  73,DB
01DC:  MOVFF  DA,DC
01E0:  RCALL  01C6
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
01E2:  BCF    x73.0
01E4:  MOVFF  73,DB
01E8:  MOVFF  DA,DC
01EC:  RCALL  01C6
01EE:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
01F0:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
01F2:  MOVFF  D8,DA
01F6:  RCALL  01D6
....................       delay_us(20); 
01F8:  MOVLW  21
01FA:  MOVWF  00
01FC:  DECFSZ 00,F
01FE:  BRA    01FC
0200:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0270:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0272:  MOVFF  D9,DA
0276:  RCALL  01D6
....................       delay_us(20); 
0278:  MOVLW  21
027A:  MOVWF  00
027C:  DECFSZ 00,F
027E:  BRA    027C
0280:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
0228:  BCF    x73.0
....................          lcd_rw = 0;  
022A:  BCF    x73.1
....................          lcd_rs = 1;  
022C:  BSF    x73.2
....................          lcd_p =0; 
022E:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
0230:  MOVLW  38
0232:  MOVWF  xD8
0234:  RCALL  01F0
....................          delay_us(40); 
0236:  MOVLW  42
0238:  MOVWF  00
023A:  DECFSZ 00,F
023C:  BRA    023A
023E:  NOP   
....................          lcd_command(lcd_display_control);    
0240:  MOVLW  0C
0242:  MOVWF  xD8
0244:  RCALL  01F0
....................          delay_us(40); 
0246:  MOVLW  42
0248:  MOVWF  00
024A:  DECFSZ 00,F
024C:  BRA    024A
024E:  NOP   
....................          lcd_command(lcd_clear_display);       
0250:  MOVLW  01
0252:  MOVWF  xD8
0254:  RCALL  01F0
....................          delay_ms(2); 
0256:  MOVLW  02
0258:  MOVWF  xDD
025A:  RCALL  0202
....................          lcd_command(lcd_entry_mode);        
025C:  MOVLW  06
025E:  MOVWF  xD8
0260:  RCALL  01F0
....................          delay_us(40);                 
0262:  MOVLW  42
0264:  MOVWF  00
0266:  DECFSZ 00,F
0268:  BRA    0266
026A:  NOP   
026C:  GOTO   0DB6 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
....................  
.................... unsigned char hang1[] = {"Hien thi lcd 20x4** "}; 
.................... unsigned char hang2[] = {"Dai hoc Su pham kt  "}; 
.................... unsigned char hang3[] = {"Bo thi nghiem vdk   "}; 
.................... unsigned char hang4[20]; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 mode = 0; 
.................... unsigned int16 count = 0,countT = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
00E8:  INCF   xC8,F
....................    set_timer1(3036); //3036 
00EA:  MOVLW  0B
00EC:  MOVWF  FCF
00EE:  MOVLW  DC
00F0:  MOVWF  FCE
00F2:  BCF    F9E.0
00F4:  GOTO   0060
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
02CA:  MOVFF  C7,D8
02CE:  MOVLW  0A
02D0:  MOVWF  xD9
02D2:  RCALL  0282
02D4:  CLRF   03
02D6:  MOVF   00,W
02D8:  RCALL  00AE
02DA:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
02DC:  MOVFF  C7,D8
02E0:  MOVLW  0A
02E2:  MOVWF  xD9
02E4:  RCALL  0282
02E6:  CLRF   03
02E8:  MOVF   01,W
02EA:  RCALL  00AE
02EC:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
02EE:  MOVFF  C9,D8
02F2:  MOVLW  0A
02F4:  MOVWF  xD9
02F6:  RCALL  0282
02F8:  CLRF   03
02FA:  MOVF   00,W
02FC:  RCALL  00AE
02FE:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0300:  MOVFF  C9,D8
0304:  MOVLW  0A
0306:  MOVWF  xD9
0308:  RCALL  0282
030A:  CLRF   03
030C:  MOVF   01,W
030E:  RCALL  00AE
0310:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0312:  MOVFF  CA,D8
0316:  MOVLW  0A
0318:  MOVWF  xD9
031A:  RCALL  0282
031C:  CLRF   03
031E:  MOVF   00,W
0320:  RCALL  00AE
0322:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0324:  MOVFF  CA,D8
0328:  MOVLW  0A
032A:  MOVWF  xD9
032C:  RCALL  0282
032E:  CLRF   03
0330:  MOVF   01,W
0332:  RCALL  00AE
0334:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
0336:  DECFSZ xCC,W
0338:  BRA    033E
033A:  BCF    26.7
033C:  BRA    0350
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
033E:  MOVF   xCC,W
0340:  SUBLW  02
0342:  BNZ   0348
0344:  BCF    29.7
0346:  BRA    0350
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
0348:  MOVF   xCC,W
034A:  SUBLW  03
034C:  BNZ   0350
034E:  BCF    2C.7
0350:  RETURN 0
.................... } 
....................  
.................... void phim_up(){ 
....................    if (phim_bt0(5)) { 
*
057C:  CLRF   xD9
057E:  MOVLW  05
0580:  MOVWF  xD8
0582:  BRA    054A
0584:  MOVF   01,F
0586:  BZ    05C6
....................          dem_tg_exit = 0; 
0588:  CLRF   xCB
....................          switch (mode) 
058A:  MOVF   xCC,W
058C:  XORLW  01
058E:  BZ    059A
0590:  XORLW  03
0592:  BZ    05A8
0594:  XORLW  01
0596:  BZ    05B6
0598:  BRA    05C4
....................          { 
....................             case 1: if (giay==59) giay =0; 
059A:  MOVF   xC7,W
059C:  SUBLW  3B
059E:  BNZ   05A4
05A0:  CLRF   xC7
05A2:  BRA    05A6
....................                     else giay++; 
05A4:  INCF   xC7,F
....................                     break; 
05A6:  BRA    05C4
....................             case 2: if (phut == 59) phut = 0; 
05A8:  MOVF   xC9,W
05AA:  SUBLW  3B
05AC:  BNZ   05B2
05AE:  CLRF   xC9
05B0:  BRA    05B4
....................                     else phut++; 
05B2:  INCF   xC9,F
....................                     break; 
05B4:  BRA    05C4
....................             case 3: if (gio == 23) gio = 0; 
05B6:  MOVF   xCA,W
05B8:  SUBLW  17
05BA:  BNZ   05C0
05BC:  CLRF   xCA
05BE:  BRA    05C2
....................                     else gio ++; 
05C0:  INCF   xCA,F
....................                     break; 
05C2:  BRA    05C4
....................             default: break; 
....................          } 
....................          giai_ma(); 
05C4:  RCALL  02CA
....................    } 
05C6:  GOTO   0F7E (RETURN)
.................... } 
....................  
.................... void phim_dw(){ 
....................    if (phim_bt1(5)) { 
*
05FC:  CLRF   xD9
05FE:  MOVLW  05
0600:  MOVWF  xD8
0602:  BRA    05CA
0604:  MOVF   01,F
0606:  BZ    0646
....................          dem_tg_exit = 0; 
0608:  CLRF   xCB
....................          switch (mode) 
060A:  MOVF   xCC,W
060C:  XORLW  01
060E:  BZ    061A
0610:  XORLW  03
0612:  BZ    0628
0614:  XORLW  01
0616:  BZ    0636
0618:  BRA    0644
....................          { 
....................             case 1: if (giay==0) giay =59; 
061A:  MOVF   xC7,F
061C:  BNZ   0624
061E:  MOVLW  3B
0620:  MOVWF  xC7
0622:  BRA    0626
....................                     else giay--; 
0624:  DECF   xC7,F
....................                     break; 
0626:  BRA    0644
....................             case 2: if (phut == 0) phut = 59; 
0628:  MOVF   xC9,F
062A:  BNZ   0632
062C:  MOVLW  3B
062E:  MOVWF  xC9
0630:  BRA    0634
....................                     else phut--; 
0632:  DECF   xC9,F
....................                     break; 
0634:  BRA    0644
....................             case 3: if (gio == 0) gio = 23; 
0636:  MOVF   xCA,F
0638:  BNZ   0640
063A:  MOVLW  17
063C:  MOVWF  xCA
063E:  BRA    0642
....................                     else gio--; 
0640:  DECF   xCA,F
....................                     break; 
0642:  BRA    0644
....................             default: break;         
....................          }; 
....................          giai_ma(); 
0644:  RCALL  02CA
....................    } 
0646:  GOTO   0F82 (RETURN)
.................... } 
....................  
.................... void phim_mode(){ 
....................    if (phim_bt2(5)) { 
*
067C:  CLRF   xD9
067E:  MOVLW  05
0680:  MOVWF  xD8
0682:  BRA    064A
0684:  MOVF   01,F
0686:  BZ    0696
....................          mode++; 
0688:  INCF   xCC,F
....................          if (mode  >= 4){ 
068A:  MOVF   xCC,W
068C:  SUBLW  03
068E:  BC    0692
....................             mode = 0; 
0690:  CLRF   xCC
....................          } 
....................          dem_tg_exit = 0; 
0692:  CLRF   xCB
....................          giai_ma(); 
0694:  RCALL  02CA
....................       } 
0696:  GOTO   0F86 (RETURN)
.................... } 
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
*
045E:  DECFSZ xCC,W
0460:  BRA    0468
0462:  SETF   26
0464:  SETF   27
0466:  BRA    047E
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
0468:  MOVF   xCC,W
046A:  SUBLW  02
046C:  BNZ   0474
046E:  SETF   29
0470:  SETF   2A
0472:  BRA    047E
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
0474:  MOVF   xCC,W
0476:  SUBLW  03
0478:  BNZ   047E
047A:  SETF   2C
047C:  SETF   2D
047E:  GOTO   0F02 (RETURN)
.................... } 
....................  
.................... void main() 
*
0C30:  CLRF   FF8
0C32:  BCF    FD0.7
0C34:  BSF    07.7
0C36:  BSF    F93.1
0C38:  BSF    F93.0
0C3A:  MOVLW  31
0C3C:  MOVWF  FC8
0C3E:  MOVLW  28
0C40:  MOVWF  FC6
0C42:  BSF    FC7.7
0C44:  BCF    FC7.6
0C46:  CLRF   1B
0C48:  CLRF   22
0C4A:  CLRF   23
0C4C:  CLRF   24
0C4E:  CLRF   25
0C50:  CLRF   2E
0C52:  CLRF   2F
0C54:  CLRF   30
0C56:  CLRF   34
0C58:  CLRF   33
0C5A:  CLRF   32
0C5C:  CLRF   31
0C5E:  CLRF   38
0C60:  CLRF   37
0C62:  CLRF   36
0C64:  MOVLW  01
0C66:  MOVWF  35
0C68:  MOVLW  80
0C6A:  MOVWF  3C
0C6C:  CLRF   3B
0C6E:  CLRF   3A
0C70:  CLRF   39
0C72:  CLRF   40
0C74:  CLRF   3F
0C76:  CLRF   3E
0C78:  CLRF   3D
0C7A:  MOVWF  44
0C7C:  CLRF   43
0C7E:  CLRF   46
0C80:  MOVLW  01
0C82:  MOVWF  45
0C84:  CLRF   48
0C86:  CLRF   47
0C88:  MOVLW  80
0C8A:  MOVWF  4C
0C8C:  CLRF   4B
0C8E:  CLRF   4E
0C90:  MOVLW  01
0C92:  MOVWF  4D
0C94:  CLRF   50
0C96:  CLRF   4F
0C98:  CLRF   52
0C9A:  CLRF   51
0C9C:  CLRF   53
0C9E:  MOVLW  20
0CA0:  MOVWF  54
0CA2:  CLRF   55
0CA4:  MOVLW  01
0CA6:  MOVWF  56
0CA8:  MOVLW  10
0CAA:  MOVWF  57
0CAC:  CLRF   58
0CAE:  CLRF   5C
0CB0:  CLRF   5B
0CB2:  CLRF   5A
0CB4:  MOVLW  01
0CB6:  MOVWF  59
0CB8:  CLRF   x60
0CBA:  CLRF   5F
0CBC:  CLRF   5E
0CBE:  MOVWF  5D
0CC0:  SETF   x64
0CC2:  SETF   x63
0CC4:  SETF   x62
0CC6:  MOVLW  FE
0CC8:  MOVWF  x61
0CCA:  MOVLW  80
0CCC:  MOVWF  x68
0CCE:  CLRF   x67
0CD0:  CLRF   x66
0CD2:  CLRF   x65
0CD4:  MOVWF  x6C
0CD6:  CLRF   x6B
0CD8:  CLRF   x6A
0CDA:  CLRF   x69
0CDC:  MOVLW  7F
0CDE:  MOVWF  x70
0CE0:  SETF   x6F
0CE2:  SETF   x6E
0CE4:  SETF   x6D
0CE6:  MOVLW  01
0CE8:  MOVWF  x71
0CEA:  MOVWF  x72
0CEC:  CLRF   xCB
0CEE:  CLRF   xCC
0CF0:  CLRF   xCE
0CF2:  CLRF   xCD
0CF4:  CLRF   xD0
0CF6:  CLRF   xCF
0CF8:  CLRF   xD2
0CFA:  CLRF   xD1
0CFC:  MOVF   FC1,W
0CFE:  ANDLW  C0
0D00:  IORLW  0F
0D02:  MOVWF  FC1
0D04:  MOVLW  07
0D06:  MOVWF  FB4
0D08:  BRA    0D52
0D0A:  DATA 08,40
0D0C:  DATA 26,FF
0D0E:  DATA 3F,00
0D10:  DATA 74,48
0D12:  DATA 69,65
0D14:  DATA 6E,20
0D16:  DATA 74,68
0D18:  DATA 69,20
0D1A:  DATA 6C,63
0D1C:  DATA 64,20
0D1E:  DATA 32,30
0D20:  DATA 78,34
0D22:  DATA 2A,2A
0D24:  DATA 20,00
0D26:  DATA 44,61
0D28:  DATA 69,20
0D2A:  DATA 68,6F
0D2C:  DATA 63,20
0D2E:  DATA 53,75
0D30:  DATA 20,70
0D32:  DATA 68,61
0D34:  DATA 6D,20
0D36:  DATA 6B,74
0D38:  DATA 20,20
0D3A:  DATA 00,42
0D3C:  DATA 6F,20
0D3E:  DATA 74,68
0D40:  DATA 69,20
0D42:  DATA 6E,67
0D44:  DATA 68,69
0D46:  DATA 65,6D
0D48:  DATA 20,76
0D4A:  DATA 64,6B
0D4C:  DATA 20,20
0D4E:  DATA 20,00
0D50:  DATA 00,00
0D52:  MOVLW  00
0D54:  MOVWF  FF8
0D56:  MOVLW  0D
0D58:  MOVWF  FF7
0D5A:  MOVLW  0A
0D5C:  MOVWF  FF6
0D5E:  TBLRD*+
0D60:  MOVF   FF5,W
0D62:  MOVWF  00
0D64:  XORLW  00
0D66:  BZ    0D8E
0D68:  TBLRD*+
0D6A:  MOVF   FF5,W
0D6C:  MOVWF  01
0D6E:  BTFSC  FE8.7
0D70:  BRA    0D7C
0D72:  ANDLW  0F
0D74:  MOVWF  FEA
0D76:  TBLRD*+
0D78:  MOVFF  FF5,FE9
0D7C:  BTFSC  01.6
0D7E:  TBLRD*+
0D80:  BTFSS  01.6
0D82:  TBLRD*+
0D84:  MOVFF  FF5,FEE
0D88:  DCFSNZ 00,F
0D8A:  BRA    0D5E
0D8C:  BRA    0D80
0D8E:  CLRF   FF8
.................... { 
....................    set_up_port_ic_chot(); 
0D90:  GOTO   0124
....................    set_tris_b(0x3c); 
0D94:  MOVLW  3C
0D96:  MOVWF  F93
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
0D98:  MOVLW  A8
0D9A:  MOVWF  FD5
....................    set_timer0(0);    
0D9C:  CLRF   FD7
0D9E:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0DA0:  MOVLW  B5
0DA2:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
0DA4:  MOVLW  0B
0DA6:  MOVWF  FCF
0DA8:  MOVLW  DC
0DAA:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
0DAC:  MOVLW  C0
0DAE:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
0DB0:  BSF    F9D.0
....................    setup_lcd(); 
0DB2:  GOTO   0228
....................  
....................    lcd_command(lcd_addr_line1); 
0DB6:  MOVLW  80
0DB8:  MOVWF  xD8
0DBA:  CALL   01F0
....................    for (int i = 0; i<20;i++) lcd_data(hang1[i]); 
0DBE:  CLRF   xD3
0DC0:  MOVF   xD3,W
0DC2:  SUBLW  13
0DC4:  BNC   0DE0
0DC6:  CLRF   03
0DC8:  MOVF   xD3,W
0DCA:  ADDLW  74
0DCC:  MOVWF  FE9
0DCE:  MOVLW  00
0DD0:  ADDWFC 03,W
0DD2:  MOVWF  FEA
0DD4:  MOVFF  FEF,D9
0DD8:  CALL   0270
0DDC:  INCF   xD3,F
0DDE:  BRA    0DC0
....................  
....................    lcd_command(lcd_addr_line2); 
0DE0:  MOVLW  C0
0DE2:  MOVWF  xD8
0DE4:  CALL   01F0
....................    for (int i = 0; i<20;i++) lcd_data(hang2[i]); 
0DE8:  CLRF   xD4
0DEA:  MOVF   xD4,W
0DEC:  SUBLW  13
0DEE:  BNC   0E0A
0DF0:  CLRF   03
0DF2:  MOVF   xD4,W
0DF4:  ADDLW  89
0DF6:  MOVWF  FE9
0DF8:  MOVLW  00
0DFA:  ADDWFC 03,W
0DFC:  MOVWF  FEA
0DFE:  MOVFF  FEF,D9
0E02:  CALL   0270
0E06:  INCF   xD4,F
0E08:  BRA    0DEA
....................  
....................    lcd_command(lcd_addr_line3); 
0E0A:  MOVLW  94
0E0C:  MOVWF  xD8
0E0E:  CALL   01F0
....................    for (int i = 0; i<20;i++) lcd_data(hang3[i]); 
0E12:  CLRF   xD5
0E14:  MOVF   xD5,W
0E16:  SUBLW  13
0E18:  BNC   0E34
0E1A:  CLRF   03
0E1C:  MOVF   xD5,W
0E1E:  ADDLW  9E
0E20:  MOVWF  FE9
0E22:  MOVLW  00
0E24:  ADDWFC 03,W
0E26:  MOVWF  FEA
0E28:  MOVFF  FEF,D9
0E2C:  CALL   0270
0E30:  INCF   xD5,F
0E32:  BRA    0E14
....................  
....................    lcd_command(lcd_addr_line4); 
0E34:  MOVLW  D4
0E36:  MOVWF  xD8
0E38:  CALL   01F0
....................    for (int i = 0; i<20;i++) lcd_data(hang4[i]); 
0E3C:  CLRF   xD6
0E3E:  MOVF   xD6,W
0E40:  SUBLW  13
0E42:  BNC   0E5E
0E44:  CLRF   03
0E46:  MOVF   xD6,W
0E48:  ADDLW  B3
0E4A:  MOVWF  FE9
0E4C:  MOVLW  00
0E4E:  ADDWFC 03,W
0E50:  MOVWF  FEA
0E52:  MOVFF  FEF,D9
0E56:  CALL   0270
0E5A:  INCF   xD6,F
0E5C:  BRA    0E3E
....................  
....................     
....................  
....................    giay = 0; 
0E5E:  CLRF   xC7
....................    bdn = 0; 
0E60:  CLRF   xC8
....................    phut = 0; 
0E62:  CLRF   xC9
....................    gio = 0; 
0E64:  CLRF   xCA
....................    giai_ma(); 
0E66:  CALL   02CA
....................    sprintf(hang4," %2d : %2d : %2d Cam on",gio,phut,giay); 
0E6A:  CLRF   xD2
0E6C:  MOVLW  B3
0E6E:  MOVWF  xD1
0E70:  MOVLW  20
0E72:  MOVWF  xDE
0E74:  CALL   0352
0E78:  MOVFF  CA,D8
0E7C:  MOVLW  11
0E7E:  MOVWF  xD9
0E80:  CALL   0396
0E84:  MOVLW  FC
0E86:  MOVWF  FF6
0E88:  MOVLW  00
0E8A:  MOVWF  FF7
0E8C:  MOVLW  03
0E8E:  MOVWF  xD8
0E90:  CALL   0440
0E94:  MOVFF  C9,D8
0E98:  MOVLW  11
0E9A:  MOVWF  xD9
0E9C:  CALL   0396
0EA0:  MOVLW  02
0EA2:  MOVWF  FF6
0EA4:  MOVLW  01
0EA6:  MOVWF  FF7
0EA8:  MOVLW  03
0EAA:  MOVWF  xD8
0EAC:  CALL   0440
0EB0:  MOVFF  C7,D8
0EB4:  MOVLW  11
0EB6:  MOVWF  xD9
0EB8:  CALL   0396
0EBC:  MOVLW  08
0EBE:  MOVWF  FF6
0EC0:  MOVLW  01
0EC2:  MOVWF  FF7
0EC4:  MOVLW  07
0EC6:  MOVWF  xD8
0EC8:  CALL   0440
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
0ECC:  BTFSC  xC8.7
0ECE:  BRA    0ED8
0ED0:  MOVF   xC8,W
0ED2:  SUBLW  09
0ED4:  BTFSS  FD8.0
0ED6:  BRA    10BC
....................          if (mode !=0) 
0ED8:  MOVF   xCC,F
0EDA:  BZ    0F02
....................          { 
....................             if ((bdn == 0 ) && (input(bt0))  && (input(bt1)) && (input(bt2))) tat_2_led_chinh(); 
0EDC:  MOVF   xC8,F
0EDE:  BNZ   0EF8
0EE0:  BSF    F93.5
0EE2:  BTFSS  F81.5
0EE4:  BRA    0EF8
0EE6:  BSF    F93.4
0EE8:  BTFSS  F81.4
0EEA:  BRA    0EF8
0EEC:  BSF    F93.3
0EEE:  BTFSS  F81.3
0EF0:  BRA    0EF8
0EF2:  GOTO   045E
0EF6:  BRA    0F02
....................             else if (bdn == 5) giai_ma(); 
0EF8:  MOVF   xC8,W
0EFA:  SUBLW  05
0EFC:  BTFSC  FD8.2
0EFE:  CALL   02CA
....................          } 
....................          sprintf(hang4,"%2d:%2d:%2d Cam on",gio,phut,giay); 
0F02:  CLRF   xD2
0F04:  MOVLW  B3
0F06:  MOVWF  xD1
0F08:  MOVFF  CA,D8
0F0C:  MOVLW  11
0F0E:  MOVWF  xD9
0F10:  CALL   0396
0F14:  MOVLW  3A
0F16:  MOVWF  xDE
0F18:  CALL   0352
0F1C:  MOVFF  C9,D8
0F20:  MOVLW  11
0F22:  MOVWF  xD9
0F24:  CALL   0396
0F28:  MOVLW  3A
0F2A:  MOVWF  xDE
0F2C:  CALL   0352
0F30:  MOVFF  C7,D8
0F34:  MOVLW  11
0F36:  MOVWF  xD9
0F38:  CALL   0396
0F3C:  MOVLW  1B
0F3E:  MOVWF  FF6
0F40:  MOVLW  01
0F42:  MOVWF  FF7
0F44:  MOVLW  07
0F46:  MOVWF  xD8
0F48:  CALL   0440
....................          hien_thi_8led_7doan_quet_all(); 
0F4C:  CALL   0518
....................          lcd_command(lcd_addr_line4); 
0F50:  MOVLW  D4
0F52:  MOVWF  xD8
0F54:  CALL   01F0
....................          for (int i = 0; i<20;i++) lcd_data(hang4[i]); 
0F58:  CLRF   xD7
0F5A:  MOVF   xD7,W
0F5C:  SUBLW  13
0F5E:  BNC   0F7A
0F60:  CLRF   03
0F62:  MOVF   xD7,W
0F64:  ADDLW  B3
0F66:  MOVWF  FE9
0F68:  MOVLW  00
0F6A:  ADDWFC 03,W
0F6C:  MOVWF  FEA
0F6E:  MOVFF  FEF,D9
0F72:  CALL   0270
0F76:  INCF   xD7,F
0F78:  BRA    0F5A
....................          phim_up(); 
0F7A:  GOTO   057C
....................          phim_dw(); 
0F7E:  GOTO   05FC
....................          phim_mode();          
0F82:  GOTO   067C
....................          count = get_timer0(); 
0F86:  MOVF   FD6,W
0F88:  MOVWF  xCD
0F8A:  MOVFF  FD7,CE
....................          if (count != countT) { 
0F8E:  MOVF   xCF,W
0F90:  SUBWF  xCD,W
0F92:  BNZ   0F9A
0F94:  MOVF   xD0,W
0F96:  SUBWF  xCE,W
0F98:  BZ    0FBE
....................             countT = count; 
0F9A:  MOVFF  CE,D0
0F9E:  MOVFF  CD,CF
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
0FA2:  MOVFF  CE,D9
0FA6:  MOVFF  CD,D8
0FAA:  GOTO   0708
....................             if (count >= 101) set_timer0(1); 
0FAE:  MOVF   xCE,F
0FB0:  BNZ   0FB8
0FB2:  MOVF   xCD,W
0FB4:  SUBLW  64
0FB6:  BC    0FBE
0FB8:  CLRF   FD7
0FBA:  MOVLW  01
0FBC:  MOVWF  FD6
....................          } 
....................          if(ttct_td==1) sang_tat_32led(10,1); 
0FBE:  DECFSZ 56,W
0FC0:  BRA    0FCC
0FC2:  MOVLW  0A
0FC4:  MOVWF  xD8
0FC6:  MOVLW  01
0FC8:  MOVWF  xD9
0FCA:  RCALL  0972
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(10,1); 
0FCC:  MOVF   56,W
0FCE:  SUBLW  02
0FD0:  BNZ   0FDC
0FD2:  MOVLW  0A
0FD4:  MOVWF  xD8
0FD6:  MOVLW  01
0FD8:  MOVWF  xD9
0FDA:  RCALL  09D6
....................          if(ttct_td==3) sang_don_pst_32led(10,1); 
0FDC:  MOVF   56,W
0FDE:  SUBLW  03
0FE0:  BNZ   0FEC
0FE2:  MOVLW  0A
0FE4:  MOVWF  xD8
0FE6:  MOVLW  01
0FE8:  MOVWF  xD9
0FEA:  RCALL  0A54
....................          if(ttct_td==4) sang_tat_dan_pst_32led(10,1); 
0FEC:  MOVF   56,W
0FEE:  SUBLW  04
0FF0:  BNZ   0FFC
0FF2:  MOVLW  0A
0FF4:  MOVWF  xD8
0FF6:  MOVLW  01
0FF8:  MOVWF  xD9
0FFA:  RCALL  0AD6
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(10,1); 
0FFC:  MOVF   56,W
0FFE:  SUBLW  05
1000:  BNZ   100C
1002:  MOVLW  0A
1004:  MOVWF  xD8
1006:  MOVLW  01
1008:  MOVWF  xD9
100A:  RCALL  0B56
....................          if(ttct_td==6) sang_don_pst_32led(10,1); 
100C:  MOVF   56,W
100E:  SUBLW  06
1010:  BNZ   101C
1012:  MOVLW  0A
1014:  MOVWF  xD8
1016:  MOVLW  01
1018:  MOVWF  xD9
101A:  RCALL  0A54
....................          if(ttct_td==7) sang_don_pst_32led(10,1); 
101C:  MOVF   56,W
101E:  SUBLW  07
1020:  BNZ   102C
1022:  MOVLW  0A
1024:  MOVWF  xD8
1026:  MOVLW  01
1028:  MOVWF  xD9
102A:  RCALL  0A54
....................          if(ttct_td==8) sang_tat_32led(10,1); 
102C:  MOVF   56,W
102E:  SUBLW  08
1030:  BNZ   103C
1032:  MOVLW  0A
1034:  MOVWF  xD8
1036:  MOVLW  01
1038:  MOVWF  xD9
103A:  RCALL  0972
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(10,1); 
103C:  MOVF   56,W
103E:  SUBLW  09
1040:  BNZ   104C
1042:  MOVLW  0A
1044:  MOVWF  xD8
1046:  MOVLW  01
1048:  MOVWF  xD9
104A:  RCALL  09D6
....................          if(ttct_td==10) sang_don_pst_32led(10,1); 
104C:  MOVF   56,W
104E:  SUBLW  0A
1050:  BNZ   105C
1052:  MOVLW  0A
1054:  MOVWF  xD8
1056:  MOVLW  01
1058:  MOVWF  xD9
105A:  RCALL  0A54
....................          if(ttct_td==11) sang_tat_dan_pst_32led(10,1); 
105C:  MOVF   56,W
105E:  SUBLW  0B
1060:  BNZ   106C
1062:  MOVLW  0A
1064:  MOVWF  xD8
1066:  MOVLW  01
1068:  MOVWF  xD9
106A:  RCALL  0AD6
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(10,1); 
106C:  MOVF   56,W
106E:  SUBLW  0C
1070:  BNZ   107C
1072:  MOVLW  0A
1074:  MOVWF  xD8
1076:  MOVLW  01
1078:  MOVWF  xD9
107A:  RCALL  0B56
....................          if(ttct_td==13) sang_tat_dan_pst_32led(10,1); 
107C:  MOVF   56,W
107E:  SUBLW  0D
1080:  BNZ   108C
1082:  MOVLW  0A
1084:  MOVWF  xD8
1086:  MOVLW  01
1088:  MOVWF  xD9
108A:  RCALL  0AD6
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(10,1); 
108C:  MOVF   56,W
108E:  SUBLW  0E
1090:  BNZ   109C
1092:  MOVLW  0A
1094:  MOVWF  xD8
1096:  MOVLW  01
1098:  MOVWF  xD9
109A:  BRA    0BB8
....................          if(ttct_td==15) sang_don_pst_32led(10,1); 
109C:  MOVF   56,W
109E:  SUBLW  0F
10A0:  BNZ   10AC
10A2:  MOVLW  0A
10A4:  MOVWF  xD8
10A6:  MOVLW  01
10A8:  MOVWF  xD9
10AA:  RCALL  0A54
....................          if(ttct_td>15) ttct_td =1; 
10AC:  BTFSC  56.7
10AE:  BRA    10BA
10B0:  MOVF   56,W
10B2:  SUBLW  0F
10B4:  BC    10BA
10B6:  MOVLW  01
10B8:  MOVWF  56
....................           
....................  
....................       } 
10BA:  BRA    10F0
....................       else  
....................       { 
....................          bdn = bdn -10; 
10BC:  MOVLW  0A
10BE:  SUBWF  xC8,F
....................          dem_tg_exit++; 
10C0:  INCF   xCB,F
....................          if (dem_tg_exit == 20) mode = 0; 
10C2:  MOVF   xCB,W
10C4:  SUBLW  14
10C6:  BNZ   10CA
10C8:  CLRF   xCC
....................          giay++; 
10CA:  INCF   xC7,F
....................             if (giay==60) { giay = 0; phut++; 
10CC:  MOVF   xC7,W
10CE:  SUBLW  3C
10D0:  BNZ   10E8
10D2:  CLRF   xC7
10D4:  INCF   xC9,F
....................                if (phut == 60) { phut = 0; gio++;  
10D6:  MOVF   xC9,W
10D8:  SUBLW  3C
10DA:  BNZ   10E8
10DC:  CLRF   xC9
10DE:  INCF   xCA,F
....................                   if (gio == 24) gio = 0; 
10E0:  MOVF   xCA,W
10E2:  SUBLW  18
10E4:  BNZ   10E8
10E6:  CLRF   xCA
....................                }  
....................             } 
....................  
....................          if (mode == 0) giai_ma(); 
10E8:  MOVF   xCC,F
10EA:  BTFSC  FD8.2
10EC:  CALL   02CA
....................       } 
10F0:  BRA    0ECC
....................    }            
.................... } 
....................  
10F2:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
