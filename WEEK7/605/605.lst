CCS PCH C Compiler, Version 5.078, 43599               09-Nov-20 15:06

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK7\605\605.lst

               ROM used:   4108 bytes (13%)
                           Largest free fragment is 28656
               RAM used:   152 (7%) at main() level
                           176 (9%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0CBA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00E8
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
*
00F8:  DATA 62,61
00FA:  DATA 79,20
00FC:  DATA 67,69
00FE:  DATA 6F,20
0100:  DATA 6C,61
0102:  DATA 20,25
0104:  DATA 32,64
0106:  DATA 3A,25
0108:  DATA 32,64
010A:  DATA 3A,25
010C:  DATA 32,64
010E:  DATA 00,00
0110:  DATA 20,4B
0112:  DATA 68,6F
0114:  DATA 61,20
0116:  DATA 63,6F
0118:  DATA 20,6B
011A:  DATA 68,69
011C:  DATA 20,63
011E:  DATA 68,65
0120:  DATA 20,74
0122:  DATA 61,6F
0124:  DATA 20,6D
0126:  DATA 61,79
0128:  DATA 20,00
012A:  DATA 20,54
012C:  DATA 72,75
012E:  DATA 6F,6E
0130:  DATA 67,20
0132:  DATA 44,48
0134:  DATA 20,53
0136:  DATA 50,4B
0138:  DATA 54,20
013A:  DATA 00,00
013C:  DATA 20,76
013E:  DATA 64,6B
0140:  DATA 20,70
0142:  DATA 69,63
0144:  DATA 31,38
0146:  DATA 66,31
0148:  DATA 35,35
014A:  DATA 30,20
014C:  DATA 00,00
*
02AC:  TBLRD*+
02AE:  MOVF   FF5,F
02B0:  BZ    02CA
02B2:  MOVFF  FF6,97
02B6:  MOVFF  FF7,98
02BA:  MOVFF  FF5,99
02BE:  RCALL  029A
02C0:  MOVFF  97,FF6
02C4:  MOVFF  98,FF7
02C8:  BRA    02AC
02CA:  RETURN 0
02CC:  MOVF   x97,W
02CE:  XORWF  x98,W
02D0:  ANDLW  80
02D2:  MOVWF  x9A
02D4:  BTFSS  x97.7
02D6:  BRA    02DC
02D8:  COMF   x97,F
02DA:  INCF   x97,F
02DC:  BTFSS  x98.7
02DE:  BRA    02E4
02E0:  COMF   x98,F
02E2:  INCF   x98,F
02E4:  MOVF   x98,W
02E6:  CLRF   01
02E8:  SUBWF  x97,W
02EA:  BC    02F2
02EC:  MOVFF  97,00
02F0:  BRA    030A
02F2:  CLRF   00
02F4:  MOVLW  08
02F6:  MOVWF  x99
02F8:  RLCF   x97,F
02FA:  RLCF   00,F
02FC:  MOVF   x98,W
02FE:  SUBWF  00,W
0300:  BTFSC  FD8.0
0302:  MOVWF  00
0304:  RLCF   01,F
0306:  DECFSZ x99,F
0308:  BRA    02F8
030A:  BTFSS  x9A.7
030C:  BRA    0312
030E:  COMF   01,F
0310:  INCF   01,F
0312:  RETURN 0
0314:  MOVFF  95,FEA
0318:  MOVFF  94,FE9
031C:  MOVFF  9D,FEF
0320:  INCF   FE9,F
0322:  BTFSC  FD8.2
0324:  INCF   FEA,F
0326:  CLRF   FEF
0328:  INCF   x94,F
032A:  BTFSC  FD8.2
032C:  INCF   x95,F
032E:  RETURN 0
0330:  TBLRD*+
0332:  MOVFF  FF6,98
0336:  MOVFF  FF7,99
033A:  MOVFF  FF5,9D
033E:  RCALL  0314
0340:  MOVFF  98,FF6
0344:  MOVFF  99,FF7
0348:  DECFSZ x97,F
034A:  BRA    0330
034C:  GOTO   04BC (RETURN)
0350:  MOVF   x9E,W
0352:  CLRF   01
0354:  SUBWF  x9D,W
0356:  BC    035E
0358:  MOVFF  9D,00
035C:  BRA    0376
035E:  CLRF   00
0360:  MOVLW  08
0362:  MOVWF  x9F
0364:  RLCF   x9D,F
0366:  RLCF   00,F
0368:  MOVF   x9E,W
036A:  SUBWF  00,W
036C:  BTFSC  FD8.0
036E:  MOVWF  00
0370:  RLCF   01,F
0372:  DECFSZ x9F,F
0374:  BRA    0364
0376:  RETURN 0
0378:  MOVLW  20
037A:  BTFSS  x98.4
037C:  MOVLW  30
037E:  MOVWF  x99
0380:  MOVFF  97,00
0384:  BTFSS  x97.7
0386:  BRA    0398
0388:  COMF   00,F
038A:  INCF   00,F
038C:  MOVFF  00,97
0390:  MOVLW  2D
0392:  MOVWF  x99
0394:  BSF    x98.7
0396:  BSF    x98.0
0398:  MOVF   01,W
039A:  MOVFF  97,9D
039E:  MOVLW  64
03A0:  MOVWF  x9E
03A2:  RCALL  0350
03A4:  MOVFF  00,97
03A8:  MOVLW  30
03AA:  ADDWF  01,W
03AC:  MOVWF  x9A
03AE:  MOVFF  97,9D
03B2:  MOVLW  0A
03B4:  MOVWF  x9E
03B6:  RCALL  0350
03B8:  MOVLW  30
03BA:  ADDWF  00,W
03BC:  MOVWF  x9C
03BE:  MOVLW  30
03C0:  ADDWF  01,W
03C2:  MOVWF  x9B
03C4:  MOVFF  99,00
03C8:  MOVLW  30
03CA:  SUBWF  x9A,W
03CC:  BZ    03D6
03CE:  BSF    x98.1
03D0:  BTFSC  x98.7
03D2:  BSF    x98.2
03D4:  BRA    03FA
03D6:  MOVFF  99,9A
03DA:  MOVLW  20
03DC:  MOVWF  x99
03DE:  MOVLW  30
03E0:  SUBWF  x9B,W
03E2:  BZ    03EC
03E4:  BSF    x98.0
03E6:  BTFSC  x98.7
03E8:  BSF    x98.1
03EA:  BRA    03FA
03EC:  BTFSS  FD8.2
03EE:  BSF    x98.0
03F0:  BNZ   03FA
03F2:  MOVFF  9A,9B
03F6:  MOVLW  20
03F8:  MOVWF  x9A
03FA:  BTFSC  x98.2
03FC:  BRA    0408
03FE:  BTFSC  x98.1
0400:  BRA    040E
0402:  BTFSC  x98.0
0404:  BRA    0414
0406:  BRA    041A
0408:  MOVFF  99,9D
040C:  RCALL  0314
040E:  MOVFF  9A,9D
0412:  RCALL  0314
0414:  MOVFF  9B,9D
0418:  RCALL  0314
041A:  MOVFF  9C,9D
041E:  RCALL  0314
0420:  RETURN 0
*
0724:  CLRF   01
0726:  CLRF   02
0728:  CLRF   00
072A:  CLRF   03
072C:  MOVF   x9E,W
072E:  BNZ   0734
0730:  MOVF   x9D,W
0732:  BZ    0764
0734:  MOVLW  10
0736:  MOVWF  x9F
0738:  BCF    FD8.0
073A:  RLCF   x9B,F
073C:  RLCF   x9C,F
073E:  RLCF   00,F
0740:  RLCF   03,F
0742:  MOVF   x9E,W
0744:  SUBWF  03,W
0746:  BNZ   074C
0748:  MOVF   x9D,W
074A:  SUBWF  00,W
074C:  BNC   075C
074E:  MOVF   x9D,W
0750:  SUBWF  00,F
0752:  BTFSS  FD8.0
0754:  DECF   03,F
0756:  MOVF   x9E,W
0758:  SUBWF  03,F
075A:  BSF    FD8.0
075C:  RLCF   01,F
075E:  RLCF   02,F
0760:  DECFSZ x9F,F
0762:  BRA    0738
0764:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
022C:  CLRF   FEA
022E:  MOVLW  9C
0230:  MOVWF  FE9
0232:  MOVF   FEF,W
0234:  BZ    0250
0236:  MOVLW  06
0238:  MOVWF  01
023A:  CLRF   00
023C:  DECFSZ 00,F
023E:  BRA    023C
0240:  DECFSZ 01,F
0242:  BRA    023A
0244:  MOVLW  7B
0246:  MOVWF  00
0248:  DECFSZ 00,F
024A:  BRA    0248
024C:  DECFSZ FEF,F
024E:  BRA    0236
0250:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
*
05D4:  BSF    F93.5
05D6:  BTFSC  F81.5
05D8:  BRA    05FE
....................     {   
....................       dl_btn++; 
05DA:  INCF   1B,F
....................       delay_ms(1); 
05DC:  MOVLW  01
05DE:  MOVWF  x9C
05E0:  RCALL  022C
....................       if (dl_btn>= dl) 
05E2:  MOVF   x98,F
05E4:  BNZ   05F6
05E6:  MOVF   x97,W
05E8:  SUBWF  1B,W
05EA:  BNC   05F6
....................          { 
....................             dl_btn =0; 
05EC:  CLRF   1B
....................             return(1); 
05EE:  MOVLW  01
05F0:  MOVWF  01
05F2:  BRA    0602
....................          } 
05F4:  BRA    05FC
....................       else return(0); 
05F6:  MOVLW  00
05F8:  MOVWF  01
05FA:  BRA    0602
....................     } 
05FC:  BRA    0602
....................     else    return(0); 
05FE:  MOVLW  00
0600:  MOVWF  01
0602:  GOTO   060E (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
*
0654:  BSF    F93.4
0656:  BTFSC  F81.4
0658:  BRA    067E
....................     {   
....................       dl_btn++; 
065A:  INCF   1B,F
....................       delay_ms(1); 
065C:  MOVLW  01
065E:  MOVWF  x9C
0660:  RCALL  022C
....................       if (dl_btn>= dl) 
0662:  MOVF   x98,F
0664:  BNZ   0676
0666:  MOVF   x97,W
0668:  SUBWF  1B,W
066A:  BNC   0676
....................          { 
....................             dl_btn =0; 
066C:  CLRF   1B
....................             return(1); 
066E:  MOVLW  01
0670:  MOVWF  01
0672:  BRA    0682
....................          } 
0674:  BRA    067C
....................       else return(0); 
0676:  MOVLW  00
0678:  MOVWF  01
067A:  BRA    0682
....................     } 
067C:  BRA    0682
....................     else    return(0); 
067E:  MOVLW  00
0680:  MOVWF  01
0682:  GOTO   068E (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
*
06D4:  BSF    F93.3
06D6:  BTFSC  F81.3
06D8:  BRA    06FE
....................     {   
....................       dl_btn++; 
06DA:  INCF   1B,F
....................       delay_ms(1); 
06DC:  MOVLW  01
06DE:  MOVWF  x9C
06E0:  RCALL  022C
....................       if (dl_btn>= dl) 
06E2:  MOVF   x98,F
06E4:  BNZ   06F6
06E6:  MOVF   x97,W
06E8:  SUBWF  1B,W
06EA:  BNC   06F6
....................          { 
....................             dl_btn =0; 
06EC:  CLRF   1B
....................             return(1); 
06EE:  MOVLW  01
06F0:  MOVWF  01
06F2:  BRA    0702
....................          } 
06F4:  BRA    06FC
....................       else return(0); 
06F6:  MOVLW  00
06F8:  MOVWF  01
06FA:  BRA    0702
....................     } 
06FC:  BRA    0702
....................     else    return(0); 
06FE:  MOVLW  00
0700:  MOVWF  01
0702:  GOTO   070E (RETURN)
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
016C:  MOVFF  AD,AF
....................    for (sb=0;sb<8;sb++) 
0170:  CLRF   xAE
0172:  MOVF   xAE,W
0174:  SUBLW  07
0176:  BNC   0194
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0178:  BTFSC  xAF.7
017A:  BRA    0180
017C:  BCF    F8D.2
017E:  BRA    0182
0180:  BSF    F8D.2
0182:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
0184:  BCF    F96.0
0186:  BCF    F8D.0
0188:  BCF    F96.0
018A:  BSF    F8D.0
....................          x= x<<1;          
018C:  BCF    FD8.0
018E:  RLCF   xAF,F
0190:  INCF   xAE,F
0192:  BRA    0172
....................      } 
0194:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
0892:  MOVFF  A9,AD
0896:  RCALL  016C
....................       xuat_1byte(bld2); 
0898:  MOVFF  AA,AD
089C:  RCALL  016C
....................       xuat_1byte(bld1);           
089E:  MOVFF  AB,AD
08A2:  RCALL  016C
....................       xuat_1byte(bld0);             
08A4:  MOVFF  AC,AD
08A8:  RCALL  016C
....................       mo_32_led_don;       
08AA:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
08AC:  RCALL  0196
....................       output_high(rck_32led);    output_low(rck_32led); 
08AE:  BCF    F95.5
08B0:  BSF    F8C.5
08B2:  BCF    F95.5
08B4:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
08B6:  BCF    F95.1
08B8:  BCF    F8C.1
08BA:  GOTO   08E0 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
08BE:  MOVFF  A2,A5
08C2:  MOVFF  A1,A6
....................      b1 = wld0>>8;  b0 = wld0; 
08C6:  MOVFF  A4,A7
08CA:  MOVFF  A3,A8
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
08CE:  MOVFF  A5,A9
08D2:  MOVFF  A6,AA
08D6:  MOVFF  A7,AB
08DA:  MOVFF  A8,AC
08DE:  BRA    0892
08E0:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
08E2:  MOVFF  9B,9D
08E6:  MOVFF  9C,9E
08EA:  MOVFF  9A,A0
08EE:  MOVFF  99,9F
....................      xuat_32led_don_2word(wd1,wd0); 
08F2:  MOVFF  9E,A2
08F6:  MOVFF  9D,A1
08FA:  MOVFF  A0,A4
08FE:  MOVFF  9F,A3
0902:  RCALL  08BE
0904:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
014E:  MOVLW  00
0150:  MOVWF  F95
....................       set_tris_e(0x00); 
0152:  MOVWF  F96
....................       output_d(0xff); 
0154:  CLRF   F95
0156:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0158:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
015A:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
015C:  BCF    F95.1
015E:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
0160:  BCF    F95.0
0162:  BCF    F8C.0
....................       rbdc=0; 
0164:  CLRF   1D
0166:  CLRF   1C
0168:  GOTO   0DAA (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0196:  CLRF   F95
0198:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
019A:  BTFSC  19.4
019C:  BRA    01A2
019E:  BCF    F8C.4
01A0:  BRA    01A4
01A2:  BSF    F8C.4
01A4:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
01A6:  BTFSC  19.6
01A8:  BRA    01AE
01AA:  BCF    F8C.6
01AC:  BRA    01B0
01AE:  BSF    F8C.6
01B0:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
01B2:  BTFSC  19.2
01B4:  BRA    01BA
01B6:  BCF    F8C.2
01B8:  BRA    01BC
01BA:  BSF    F8C.2
01BC:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
01BE:  BCF    F95.1
01C0:  BSF    F8C.1
01C2:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
050C:  CLRF   F95
050E:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0510:  BTFSC  1A.6
0512:  BRA    0518
0514:  BCF    F8C.6
0516:  BRA    051A
0518:  BSF    F8C.6
051A:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
051C:  BTFSC  1A.4
051E:  BRA    0524
0520:  BCF    F8C.4
0522:  BRA    0526
0524:  BSF    F8C.4
0526:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0528:  BTFSC  1A.2
052A:  BRA    0530
052C:  BCF    F8C.2
052E:  BRA    0532
0530:  BSF    F8C.2
0532:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
0534:  BCF    F95.0
0536:  BSF    F8C.0
0538:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
0766:  MOVFF  9C,AD
076A:  RCALL  016C
076C:  MOVFF  9B,AD
0770:  RCALL  016C
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
0772:  MOVFF  9A,AD
0776:  RCALL  016C
0778:  MOVFF  99,AD
077C:  RCALL  016C
....................        
....................       mo_4_led_7doan; 
077E:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
0780:  RCALL  0196
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
0782:  BCF    F95.7
0784:  BCF    F8C.7
0786:  BCF    F95.7
0788:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
078A:  BCF    F95.1
078C:  BCF    F8C.1
078E:  GOTO   088E (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
0792:  MOVFF  98,9C
0796:  MOVFF  97,9B
079A:  CLRF   x9E
079C:  MOVLW  0A
079E:  MOVWF  x9D
07A0:  RCALL  0724
07A2:  MOVFF  00,99
07A6:  MOVFF  03,9A
07AA:  MOVFF  03,03
07AE:  MOVF   00,W
07B0:  RCALL  00AE
07B2:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
07B4:  MOVFF  98,9C
07B8:  MOVFF  97,9B
07BC:  CLRF   x9E
07BE:  MOVLW  0A
07C0:  MOVWF  x9D
07C2:  RCALL  0724
07C4:  MOVFF  02,9A
07C8:  MOVFF  01,99
07CC:  MOVFF  02,9C
07D0:  MOVFF  01,9B
07D4:  CLRF   x9E
07D6:  MOVLW  0A
07D8:  MOVWF  x9D
07DA:  RCALL  0724
07DC:  MOVFF  00,99
07E0:  MOVFF  03,9A
07E4:  MOVFF  03,03
07E8:  MOVF   00,W
07EA:  RCALL  00AE
07EC:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
07EE:  MOVFF  98,9C
07F2:  MOVFF  97,9B
07F6:  CLRF   x9E
07F8:  MOVLW  64
07FA:  MOVWF  x9D
07FC:  RCALL  0724
07FE:  MOVFF  02,9A
0802:  MOVFF  01,99
0806:  MOVFF  02,9C
080A:  MOVFF  01,9B
080E:  CLRF   x9E
0810:  MOVLW  0A
0812:  MOVWF  x9D
0814:  RCALL  0724
0816:  MOVFF  00,99
081A:  MOVFF  03,9A
081E:  MOVFF  03,03
0822:  MOVF   00,W
0824:  RCALL  00AE
0826:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
0828:  MOVFF  98,9C
082C:  MOVFF  97,9B
0830:  MOVLW  03
0832:  MOVWF  x9E
0834:  MOVLW  E8
0836:  MOVWF  x9D
0838:  RCALL  0724
083A:  MOVFF  02,9A
083E:  MOVFF  01,99
0842:  MOVFF  02,9C
0846:  MOVFF  01,9B
084A:  CLRF   x9E
084C:  MOVLW  0A
084E:  MOVWF  x9D
0850:  RCALL  0724
0852:  MOVFF  00,99
0856:  MOVFF  03,9A
085A:  MOVFF  03,03
085E:  MOVF   00,W
0860:  RCALL  00AE
0862:  MOVWF  21
....................       if (ngan4==0xc0) 
0864:  MOVF   21,W
0866:  SUBLW  C0
0868:  BNZ   087C
....................       { 
....................          ngan4=0xff; 
086A:  SETF   21
....................          if (tram4==0xc0) 
086C:  MOVF   20,W
086E:  SUBLW  C0
0870:  BNZ   087C
....................          { 
....................             tram4=0xff; 
0872:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
0874:  MOVF   1F,W
0876:  SUBLW  C0
0878:  BNZ   087C
087A:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
087C:  MOVFF  21,99
0880:  MOVFF  20,9A
0884:  MOVFF  1F,9B
0888:  MOVFF  1E,9C
088C:  BRA    0766
088E:  GOTO   0EA6 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
01C4:  MOVFF  25,AD
01C8:  RCALL  016C
....................     xuat_1byte(glcddata); 
01CA:  MOVFF  24,AD
01CE:  RCALL  016C
....................     xuat_1byte(lcdcontrol);        
01D0:  MOVFF  23,AD
01D4:  RCALL  016C
....................     xuat_1byte(lcddata);       
01D6:  MOVFF  22,AD
01DA:  RCALL  016C
....................        
....................     mo_glcd_lcd; 
01DC:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
01DE:  RCALL  0196
....................     output_high(rck_lcd20x4);      
01E0:  BCF    F95.3
01E2:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
01E4:  BCF    F95.3
01E6:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
01E8:  BCF    F95.1
01EA:  BCF    F8C.1
01EC:  GOTO   01FE (RETURN)
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
01F0:  MOVF   x9B,W
01F2:  MOVWF  23
01F4:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
01F6:  MOVFF  9C,22
01FA:  COMF   22,F
....................     xuat_glcd_lcd(); 
01FC:  BRA    01C4
01FE:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
....................     glcddata    = ~glcd_ins_hthi;      
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
056C:  MOVF   x9D,W
056E:  MOVWF  x9F
0570:  COMF   x9F,F
0572:  MOVFF  9F,AD
0576:  RCALL  016C
0578:  MOVFF  9E,9F
057C:  COMF   x9F,F
057E:  MOVFF  9F,AD
0582:  RCALL  016C
....................        
....................       mo_8_led_quet; 
0584:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0586:  RCALL  050C
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0588:  BCF    F95.5
058A:  BSF    F8C.5
058C:  BCF    F95.5
058E:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0590:  BCF    F95.0
0592:  BCF    F8C.0
0594:  GOTO   059E (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0598:  SETF   x9D
059A:  SETF   x9E
059C:  BRA    056C
059E:  GOTO   05CE (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
053A:  CLRF   03
053C:  MOVF   x9E,W
053E:  RCALL  00D0
0540:  MOVWF  01
0542:  MOVWF  xA0
0544:  COMF   xA0,F
0546:  MOVFF  A0,AD
054A:  RCALL  016C
054C:  MOVFF  9F,A0
0550:  COMF   xA0,F
0552:  MOVFF  A0,AD
0556:  RCALL  016C
....................       mo_8_led_quet; 
0558:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
055A:  RCALL  050C
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
055C:  BCF    F95.5
055E:  BSF    F8C.5
0560:  BCF    F95.5
0562:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0564:  BCF    F95.0
0566:  BCF    F8C.0
0568:  GOTO   05C2 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
05A2:  CLRF   2E
05A4:  MOVF   2E,W
05A6:  SUBLW  07
05A8:  BNC   05D2
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
05AA:  CLRF   03
05AC:  MOVF   2E,W
05AE:  ADDLW  26
05B0:  MOVWF  FE9
05B2:  MOVLW  00
05B4:  ADDWFC 03,W
05B6:  MOVWF  FEA
05B8:  MOVFF  FEF,9F
05BC:  MOVFF  2E,9E
05C0:  BRA    053A
....................             delay_us(100); 
05C2:  MOVLW  A6
05C4:  MOVWF  00
05C6:  DECFSZ 00,F
05C8:  BRA    05C6
05CA:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
05CC:  BRA    0598
05CE:  INCF   2E,F
05D0:  BRA    05A4
....................             } 
05D2:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0922:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0924:  CLRF   34
0926:  CLRF   33
0928:  CLRF   32
092A:  CLRF   31
092C:  CLRF   38
092E:  CLRF   37
0930:  CLRF   36
0932:  MOVLW  01
0934:  MOVWF  35
0936:  MOVLW  80
0938:  MOVWF  3C
093A:  CLRF   3B
093C:  CLRF   3A
093E:  CLRF   39
0940:  CLRF   40
0942:  CLRF   3F
0944:  CLRF   3E
0946:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
0948:  MOVWF  44
094A:  CLRF   43
094C:  CLRF   46
094E:  MOVLW  01
0950:  MOVWF  45
0952:  CLRF   48
0954:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
0956:  MOVLW  80
0958:  MOVWF  4C
095A:  CLRF   4B
095C:  CLRF   4E
095E:  MOVLW  01
0960:  MOVWF  4D
0962:  CLRF   50
0964:  CLRF   4F
....................       zt=zp=0; 
0966:  CLRF   4A
0968:  CLRF   49
096A:  MOVFF  4A,42
096E:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
0972:  MOVLW  20
0974:  MOVWF  54
0976:  CLRF   55
0978:  MOVLW  10
097A:  MOVWF  57
097C:  CLRF   58
....................       dem_led=0; 
097E:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
0980:  CLRF   5C
0982:  CLRF   5B
0984:  CLRF   5A
0986:  MOVLW  01
0988:  MOVWF  59
098A:  CLRF   x60
098C:  CLRF   5F
098E:  CLRF   5E
0990:  MOVWF  5D
0992:  SETF   x64
0994:  SETF   x63
0996:  SETF   x62
0998:  MOVLW  FE
099A:  MOVWF  x61
099C:  MOVLW  01
099E:  MOVWF  x71
09A0:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
09A2:  MOVLW  80
09A4:  MOVWF  x68
09A6:  CLRF   x67
09A8:  CLRF   x66
09AA:  CLRF   x65
09AC:  MOVWF  x6C
09AE:  CLRF   x6B
09B0:  CLRF   x6A
09B2:  CLRF   x69
09B4:  MOVLW  7F
09B6:  MOVWF  x70
09B8:  SETF   x6F
09BA:  SETF   x6E
09BC:  SETF   x6D
....................      tgdlay = 0; 
09BE:  CLRF   52
09C0:  CLRF   51
09C2:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
09D4:  CLRF   x9C
09D6:  MOVF   x9B,W
09D8:  SUBWF  x9C,W
09DA:  BC    09E2
....................       hien_thi_8led_7doan_quet_all(); 
09DC:  RCALL  05A2
09DE:  INCF   x9C,F
09E0:  BRA    09D6
....................       dem_led++; 
09E2:  INCF   53,F
09E4:  GOTO   09FA (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
09C4:  MOVF   x9B,F
09C6:  BZ    09CE
09C8:  MOVFF  9B,9C
09CC:  RCALL  022C
....................       dem_led++; 
09CE:  INCF   53,F
09D0:  GOTO   09FA (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
09E8:  MOVF   x9A,F
09EA:  BNZ   09F4
09EC:  MOVFF  99,9B
09F0:  BRA    09C4
09F2:  BRA    09FA
....................    else              tang_dem_led_delay_1(dl); 
09F4:  MOVFF  99,9B
09F8:  BRA    09D4
09FA:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
0906:  COMF   31,F
0908:  COMF   32,F
090A:  COMF   33,F
090C:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
090E:  MOVFF  34,9C
0912:  MOVFF  33,9B
0916:  MOVFF  32,9A
091A:  MOVFF  31,99
091E:  RCALL  08E2
0920:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
09FC:  DECFSZ 51,W
09FE:  BRA    0A18
0A00:  MOVF   52,F
0A02:  BNZ   0A18
0A04:  MOVFF  34,9C
0A08:  MOVFF  33,9B
0A0C:  MOVFF  32,9A
0A10:  MOVFF  31,99
0A14:  RCALL  08E2
0A16:  BRA    0A4E
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
0A18:  MOVF   51,W
0A1A:  SUBLW  32
0A1C:  BNZ   0A26
0A1E:  MOVF   52,F
0A20:  BNZ   0A26
0A22:  RCALL  0906
0A24:  BRA    0A4E
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
0A26:  MOVF   51,W
0A28:  SUBLW  64
0A2A:  BNZ   0A34
0A2C:  MOVF   52,F
0A2E:  BNZ   0A34
0A30:  RCALL  0906
0A32:  BRA    0A4E
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
0A34:  MOVF   51,W
0A36:  SUBLW  96
0A38:  BNZ   0A42
0A3A:  MOVF   52,F
0A3C:  BNZ   0A42
0A3E:  RCALL  0906
0A40:  BRA    0A4E
....................       else if (tgdlay==200)   
0A42:  MOVF   51,W
0A44:  SUBLW  C8
0A46:  BNZ   0A4E
0A48:  MOVF   52,F
0A4A:  BNZ   0A4E
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
0A4C:  RCALL  0922
....................       } 
....................       tgdlay++; 
0A4E:  INCF   51,F
0A50:  BTFSC  FD8.2
0A52:  INCF   52,F
....................       delay_chon(dl,chondelay); 
0A54:  MOVFF  97,99
0A58:  MOVFF  98,9A
0A5C:  RCALL  09E8
0A5E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
0A60:  MOVF   53,W
0A62:  SUBLW  0F
0A64:  BNC   0AAA
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
0A66:  MOVFF  4A,A2
0A6A:  MOVFF  49,A1
0A6E:  MOVFF  42,A4
0A72:  MOVFF  41,A3
0A76:  RCALL  08BE
....................       zp= (zp<<1)+1;  
0A78:  BCF    FD8.0
0A7A:  RLCF   49,W
0A7C:  MOVWF  x99
0A7E:  RLCF   4A,W
0A80:  MOVWF  x9A
0A82:  MOVLW  01
0A84:  ADDWF  x99,W
0A86:  MOVWF  49
0A88:  MOVLW  00
0A8A:  ADDWFC x9A,W
0A8C:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
0A8E:  BCF    FD8.0
0A90:  RRCF   42,W
0A92:  MOVWF  x9A
0A94:  RRCF   41,W
0A96:  MOVWF  41
0A98:  MOVLW  80
0A9A:  ADDWF  x9A,W
0A9C:  MOVWF  42
....................       delay_chon(dl,chondelay); 
0A9E:  MOVFF  97,99
0AA2:  MOVFF  98,9A
0AA6:  RCALL  09E8
....................    } 
0AA8:  BRA    0ADC
....................    else  if (dem_led<32) 
0AAA:  MOVF   53,W
0AAC:  SUBLW  1F
0AAE:  BNC   0ADA
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
0AB0:  MOVFF  4A,A2
0AB4:  MOVFF  49,A1
0AB8:  MOVFF  42,A4
0ABC:  MOVFF  41,A3
0AC0:  RCALL  08BE
....................       zp= (zp<<1);  
0AC2:  BCF    FD8.0
0AC4:  RLCF   49,F
0AC6:  RLCF   4A,F
....................       zt= (zt>>1); 
0AC8:  BCF    FD8.0
0ACA:  RRCF   42,F
0ACC:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
0ACE:  MOVFF  97,99
0AD2:  MOVFF  98,9A
0AD6:  RCALL  09E8
....................    } 
0AD8:  BRA    0ADC
....................    else reset_toan_bo_bien(); 
0ADA:  RCALL  0922
0ADC:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
0BE0:  MOVF   53,W
0BE2:  SUBLW  0F
0BE4:  BNC   0C14
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
0BE6:  MOVFF  4A,A2
0BEA:  MOVFF  49,A1
0BEE:  MOVFF  4A,A4
0BF2:  MOVFF  49,A3
0BF6:  RCALL  08BE
....................       zp= (zp>>1)+0x8000; 
0BF8:  BCF    FD8.0
0BFA:  RRCF   4A,W
0BFC:  MOVWF  x9A
0BFE:  RRCF   49,W
0C00:  MOVWF  49
0C02:  MOVLW  80
0C04:  ADDWF  x9A,W
0C06:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
0C08:  MOVFF  97,99
0C0C:  MOVFF  98,9A
0C10:  RCALL  09E8
....................    } 
0C12:  BRA    0C40
....................    else  if (dem_led<32) 
0C14:  MOVF   53,W
0C16:  SUBLW  1F
0C18:  BNC   0C3E
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
0C1A:  MOVFF  4A,A2
0C1E:  MOVFF  49,A1
0C22:  MOVFF  4A,A4
0C26:  MOVFF  49,A3
0C2A:  RCALL  08BE
....................       zp= (zp>>1); 
0C2C:  BCF    FD8.0
0C2E:  RRCF   4A,F
0C30:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
0C32:  MOVFF  97,99
0C36:  MOVFF  98,9A
0C3A:  RCALL  09E8
....................     } 
0C3C:  BRA    0C40
....................    else reset_toan_bo_bien(); 
0C3E:  RCALL  0922
0C40:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
0B60:  MOVF   53,W
0B62:  SUBLW  1F
0B64:  BNC   0BAE
....................    {   
....................       xuat_32led_don_1dw(y); 
0B66:  MOVFF  34,9C
0B6A:  MOVFF  33,9B
0B6E:  MOVFF  32,9A
0B72:  MOVFF  31,99
0B76:  RCALL  08E2
....................       y= (y<<1)+1; 
0B78:  BCF    FD8.0
0B7A:  RLCF   31,W
0B7C:  MOVWF  x9A
0B7E:  RLCF   32,W
0B80:  MOVWF  x9B
0B82:  RLCF   33,W
0B84:  MOVWF  x9C
0B86:  RLCF   34,W
0B88:  MOVWF  x9D
0B8A:  MOVLW  01
0B8C:  ADDWF  x9A,W
0B8E:  MOVWF  31
0B90:  MOVLW  00
0B92:  ADDWFC x9B,W
0B94:  MOVWF  32
0B96:  MOVLW  00
0B98:  ADDWFC x9C,W
0B9A:  MOVWF  33
0B9C:  MOVLW  00
0B9E:  ADDWFC x9D,W
0BA0:  MOVWF  34
....................       delay_chon(dl,chondelay); 
0BA2:  MOVFF  97,99
0BA6:  MOVFF  98,9A
0BAA:  RCALL  09E8
....................    } 
0BAC:  BRA    0BDE
....................    else  if (dem_led<64) 
0BAE:  MOVF   53,W
0BB0:  SUBLW  3F
0BB2:  BNC   0BDC
....................    {   
....................       xuat_32led_don_1dw(y);    
0BB4:  MOVFF  34,9C
0BB8:  MOVFF  33,9B
0BBC:  MOVFF  32,9A
0BC0:  MOVFF  31,99
0BC4:  RCALL  08E2
....................       y= (y<<1);  
0BC6:  BCF    FD8.0
0BC8:  RLCF   31,F
0BCA:  RLCF   32,F
0BCC:  RLCF   33,F
0BCE:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
0BD0:  MOVFF  97,99
0BD4:  MOVFF  98,9A
0BD8:  RCALL  09E8
....................    }  
0BDA:  BRA    0BDE
....................    else reset_toan_bo_bien(); 
0BDC:  RCALL  0922
0BDE:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
0C42:  MOVF   53,W
0C44:  SUBLW  1F
0C46:  BNC   0C86
....................       {   
....................          xuat_32led_don_1dw(y); 
0C48:  MOVFF  34,9C
0C4C:  MOVFF  33,9B
0C50:  MOVFF  32,9A
0C54:  MOVFF  31,99
0C58:  RCALL  08E2
....................          y= (y>>1)+0x80000000;  
0C5A:  BCF    FD8.0
0C5C:  RRCF   34,W
0C5E:  MOVWF  x9D
0C60:  RRCF   33,W
0C62:  MOVWF  x9C
0C64:  RRCF   32,W
0C66:  MOVWF  x9B
0C68:  RRCF   31,W
0C6A:  MOVWF  31
0C6C:  MOVFF  9B,32
0C70:  MOVFF  9C,33
0C74:  MOVLW  80
0C76:  ADDWF  x9D,W
0C78:  MOVWF  34
....................          delay_chon(dl,chondelay);       
0C7A:  MOVFF  97,99
0C7E:  MOVFF  98,9A
0C82:  RCALL  09E8
....................       } 
0C84:  BRA    0CB6
....................       else 
....................       if (dem_led<64) 
0C86:  MOVF   53,W
0C88:  SUBLW  3F
0C8A:  BNC   0CB4
....................       {   
....................          xuat_32led_don_1dw(y);  
0C8C:  MOVFF  34,9C
0C90:  MOVFF  33,9B
0C94:  MOVFF  32,9A
0C98:  MOVFF  31,99
0C9C:  RCALL  08E2
....................          y= (y>>1); 
0C9E:  BCF    FD8.0
0CA0:  RRCF   34,F
0CA2:  RRCF   33,F
0CA4:  RRCF   32,F
0CA6:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
0CA8:  MOVFF  97,99
0CAC:  MOVFF  98,9A
0CB0:  RCALL  09E8
....................       }  
0CB2:  BRA    0CB6
....................       else reset_toan_bo_bien(); 
0CB4:  RCALL  0922
0CB6:  GOTO   0F94 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
0ADE:  BTFSC  54.7
0AE0:  BRA    0B5C
0AE2:  MOVF   54,W
0AE4:  SUBLW  00
0AE6:  BC    0B5C
....................    { 
....................       if(j32<i32) 
0AE8:  MOVF   55,W
0AEA:  XORLW  80
0AEC:  MOVWF  00
0AEE:  MOVF   54,W
0AF0:  XORLW  80
0AF2:  SUBWF  00,W
0AF4:  BC    0B36
....................       { 
....................          y = y_codinh|yp_chay; 
0AF6:  MOVF   3D,W
0AF8:  IORWF  35,W
0AFA:  MOVWF  31
0AFC:  MOVF   3E,W
0AFE:  IORWF  36,W
0B00:  MOVWF  32
0B02:  MOVF   3F,W
0B04:  IORWF  37,W
0B06:  MOVWF  33
0B08:  MOVF   40,W
0B0A:  IORWF  38,W
0B0C:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
0B0E:  MOVFF  34,9C
0B12:  MOVFF  33,9B
0B16:  MOVFF  32,9A
0B1A:  MOVFF  31,99
0B1E:  RCALL  08E2
....................          delay_chon(dl,chondelay);        
0B20:  MOVFF  97,99
0B24:  MOVFF  98,9A
0B28:  RCALL  09E8
....................          yp_chay = yp_chay <<1; 
0B2A:  BCF    FD8.0
0B2C:  RLCF   35,F
0B2E:  RLCF   36,F
0B30:  RLCF   37,F
0B32:  RLCF   38,F
....................          j32++; 
0B34:  INCF   55,F
....................       } 
....................       if (j32==i32)  
0B36:  MOVF   54,W
0B38:  SUBWF  55,W
0B3A:  BNZ   0B5A
....................       { 
....................          i32--; 
0B3C:  DECF   54,F
....................          j32=0;          
0B3E:  CLRF   55
....................          y_codinh=y; 
0B40:  MOVFF  34,40
0B44:  MOVFF  33,3F
0B48:  MOVFF  32,3E
0B4C:  MOVFF  31,3D
....................          yp_chay = 1; 
0B50:  CLRF   38
0B52:  CLRF   37
0B54:  CLRF   36
0B56:  MOVLW  01
0B58:  MOVWF  35
....................       } 
....................    } 
0B5A:  BRA    0B5E
....................    else reset_toan_bo_bien(); 
0B5C:  RCALL  0922
0B5E:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
0200:  BSF    x73.0
0202:  MOVFF  73,9B
0206:  MOVFF  9A,9C
020A:  RCALL  01F0
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
020C:  BCF    x73.0
020E:  MOVFF  73,9B
0212:  MOVFF  9A,9C
0216:  RCALL  01F0
0218:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
021A:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
021C:  MOVFF  97,9A
0220:  RCALL  0200
....................       delay_us(20); 
0222:  MOVLW  21
0224:  MOVWF  00
0226:  DECFSZ 00,F
0228:  BRA    0226
022A:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
029A:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
029C:  MOVFF  99,9A
02A0:  RCALL  0200
....................       delay_us(20); 
02A2:  MOVLW  21
02A4:  MOVWF  00
02A6:  DECFSZ 00,F
02A8:  BRA    02A6
02AA:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
0252:  BCF    x73.0
....................          lcd_rw = 0;  
0254:  BCF    x73.1
....................          lcd_rs = 1;  
0256:  BSF    x73.2
....................          lcd_p =0; 
0258:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
025A:  MOVLW  38
025C:  MOVWF  x97
025E:  RCALL  021A
....................          delay_us(40); 
0260:  MOVLW  42
0262:  MOVWF  00
0264:  DECFSZ 00,F
0266:  BRA    0264
0268:  NOP   
....................          lcd_command(lcd_display_control);    
026A:  MOVLW  0C
026C:  MOVWF  x97
026E:  RCALL  021A
....................          delay_us(40); 
0270:  MOVLW  42
0272:  MOVWF  00
0274:  DECFSZ 00,F
0276:  BRA    0274
0278:  NOP   
....................          lcd_command(lcd_clear_display);       
027A:  MOVLW  01
027C:  MOVWF  x97
027E:  RCALL  021A
....................          delay_ms(2); 
0280:  MOVLW  02
0282:  MOVWF  x9C
0284:  RCALL  022C
....................          lcd_command(lcd_entry_mode);        
0286:  MOVLW  06
0288:  MOVWF  x97
028A:  RCALL  021A
....................          delay_us(40);                 
028C:  MOVLW  42
028E:  MOVWF  00
0290:  DECFSZ 00,F
0292:  BRA    0290
0294:  NOP   
0296:  GOTO   0DB2 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
....................  
....................  
.................... unsigned char hang4[20]; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... unsigned int16 count = 0,countT = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
00E8:  INCF   x89,F
....................    set_timer1(3036); //3036 
00EA:  MOVLW  0B
00EC:  MOVWF  FCF
00EE:  MOVLW  DC
00F0:  MOVWF  FCE
00F2:  BCF    F9E.0
00F4:  GOTO   0060
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0422:  MOVFF  88,97
0426:  MOVLW  0A
0428:  MOVWF  x98
042A:  RCALL  02CC
042C:  CLRF   03
042E:  MOVF   00,W
0430:  RCALL  00AE
0432:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0434:  MOVFF  88,97
0438:  MOVLW  0A
043A:  MOVWF  x98
043C:  RCALL  02CC
043E:  CLRF   03
0440:  MOVF   01,W
0442:  RCALL  00AE
0444:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0446:  MOVFF  8A,97
044A:  MOVLW  0A
044C:  MOVWF  x98
044E:  RCALL  02CC
0450:  CLRF   03
0452:  MOVF   00,W
0454:  RCALL  00AE
0456:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0458:  MOVFF  8A,97
045C:  MOVLW  0A
045E:  MOVWF  x98
0460:  RCALL  02CC
0462:  CLRF   03
0464:  MOVF   01,W
0466:  RCALL  00AE
0468:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
046A:  MOVFF  8B,97
046E:  MOVLW  0A
0470:  MOVWF  x98
0472:  RCALL  02CC
0474:  CLRF   03
0476:  MOVF   00,W
0478:  RCALL  00AE
047A:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
047C:  MOVFF  8B,97
0480:  MOVLW  0A
0482:  MOVWF  x98
0484:  RCALL  02CC
0486:  CLRF   03
0488:  MOVF   01,W
048A:  RCALL  00AE
048C:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
048E:  DECFSZ x8F,W
0490:  BRA    0496
0492:  BCF    26.7
0494:  BRA    04A8
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
0496:  MOVF   x8F,W
0498:  SUBLW  02
049A:  BNZ   04A0
049C:  BCF    29.7
049E:  BRA    04A8
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
04A0:  MOVF   x8F,W
04A2:  SUBLW  03
04A4:  BNZ   04A8
04A6:  BCF    2C.7
....................    sprintf(hang4,"bay gio la %2d:%2d:%2d",gio,phut,giay); 
04A8:  CLRF   x95
04AA:  MOVLW  74
04AC:  MOVWF  x94
04AE:  MOVLW  F8
04B0:  MOVWF  FF6
04B2:  MOVLW  00
04B4:  MOVWF  FF7
04B6:  MOVLW  0B
04B8:  MOVWF  x97
04BA:  BRA    0330
04BC:  MOVFF  8B,97
04C0:  MOVLW  11
04C2:  MOVWF  x98
04C4:  RCALL  0378
04C6:  MOVLW  3A
04C8:  MOVWF  x9D
04CA:  RCALL  0314
04CC:  MOVFF  8A,97
04D0:  MOVLW  11
04D2:  MOVWF  x98
04D4:  RCALL  0378
04D6:  MOVLW  3A
04D8:  MOVWF  x9D
04DA:  RCALL  0314
04DC:  MOVFF  88,97
04E0:  MOVLW  11
04E2:  MOVWF  x98
04E4:  RCALL  0378
04E6:  RETURN 0
.................... } 
....................  
.................... void phim_up(){ 
....................    if (phim_bt0(5)) { 
*
0606:  CLRF   x98
0608:  MOVLW  05
060A:  MOVWF  x97
060C:  BRA    05D4
060E:  MOVF   01,F
0610:  BZ    0650
....................          dem_tg_exit = 0; 
0612:  CLRF   x8C
....................          switch (mode) 
0614:  MOVF   x8F,W
0616:  XORLW  01
0618:  BZ    0624
061A:  XORLW  03
061C:  BZ    0632
061E:  XORLW  01
0620:  BZ    0640
0622:  BRA    064E
....................          { 
....................             case 1: if (giay==59) giay =0; 
0624:  MOVF   x88,W
0626:  SUBLW  3B
0628:  BNZ   062E
062A:  CLRF   x88
062C:  BRA    0630
....................                     else giay++; 
062E:  INCF   x88,F
....................                     break; 
0630:  BRA    064E
....................             case 2: if (phut == 59) phut = 0; 
0632:  MOVF   x8A,W
0634:  SUBLW  3B
0636:  BNZ   063C
0638:  CLRF   x8A
063A:  BRA    063E
....................                     else phut++; 
063C:  INCF   x8A,F
....................                     break; 
063E:  BRA    064E
....................             case 3: if (gio == 23) gio = 0; 
0640:  MOVF   x8B,W
0642:  SUBLW  17
0644:  BNZ   064A
0646:  CLRF   x8B
0648:  BRA    064C
....................                     else gio ++; 
064A:  INCF   x8B,F
....................                     break; 
064C:  BRA    064E
....................             default: break; 
....................          } 
....................          giai_ma(); 
064E:  RCALL  0422
....................    } 
0650:  GOTO   0E7C (RETURN)
.................... } 
....................  
.................... void phim_dw(){ 
....................    if (phim_bt1(5)) { 
*
0686:  CLRF   x98
0688:  MOVLW  05
068A:  MOVWF  x97
068C:  BRA    0654
068E:  MOVF   01,F
0690:  BZ    06D0
....................          dem_tg_exit = 0; 
0692:  CLRF   x8C
....................          switch (mode) 
0694:  MOVF   x8F,W
0696:  XORLW  01
0698:  BZ    06A4
069A:  XORLW  03
069C:  BZ    06B2
069E:  XORLW  01
06A0:  BZ    06C0
06A2:  BRA    06CE
....................          { 
....................             case 1: if (giay==0) giay =59; 
06A4:  MOVF   x88,F
06A6:  BNZ   06AE
06A8:  MOVLW  3B
06AA:  MOVWF  x88
06AC:  BRA    06B0
....................                     else giay--; 
06AE:  DECF   x88,F
....................                     break; 
06B0:  BRA    06CE
....................             case 2: if (phut == 0) phut = 59; 
06B2:  MOVF   x8A,F
06B4:  BNZ   06BC
06B6:  MOVLW  3B
06B8:  MOVWF  x8A
06BA:  BRA    06BE
....................                     else phut--; 
06BC:  DECF   x8A,F
....................                     break; 
06BE:  BRA    06CE
....................             case 3: if (gio == 0) gio = 23; 
06C0:  MOVF   x8B,F
06C2:  BNZ   06CA
06C4:  MOVLW  17
06C6:  MOVWF  x8B
06C8:  BRA    06CC
....................                     else gio--; 
06CA:  DECF   x8B,F
....................                     break; 
06CC:  BRA    06CE
....................             default: break;         
....................          }; 
....................          giai_ma(); 
06CE:  RCALL  0422
....................    } 
06D0:  GOTO   0E7E (RETURN)
.................... } 
....................  
.................... void phim_mode(){ 
....................    if (phim_bt2(5)) { 
*
0706:  CLRF   x98
0708:  MOVLW  05
070A:  MOVWF  x97
070C:  BRA    06D4
070E:  MOVF   01,F
0710:  BZ    0720
....................          mode++; 
0712:  INCF   x8F,F
....................          if (mode  >= 4){ 
0714:  MOVF   x8F,W
0716:  SUBLW  03
0718:  BC    071C
....................             mode = 0; 
071A:  CLRF   x8F
....................          } 
....................          dem_tg_exit = 0; 
071C:  CLRF   x8C
....................          giai_ma(); 
071E:  RCALL  0422
....................       } 
0720:  GOTO   0E80 (RETURN)
.................... } 
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
*
04E8:  DECFSZ x8F,W
04EA:  BRA    04F2
04EC:  SETF   26
04EE:  SETF   27
04F0:  BRA    0508
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
04F2:  MOVF   x8F,W
04F4:  SUBLW  02
04F6:  BNZ   04FE
04F8:  SETF   29
04FA:  SETF   2A
04FC:  BRA    0508
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
04FE:  MOVF   x8F,W
0500:  SUBLW  03
0502:  BNZ   0508
0504:  SETF   2C
0506:  SETF   2D
0508:  GOTO   0E4A (RETURN)
.................... } 
....................  
.................... void main() 
*
0CBA:  CLRF   FF8
0CBC:  BCF    FD0.7
0CBE:  BSF    07.7
0CC0:  BSF    F93.1
0CC2:  BSF    F93.0
0CC4:  MOVLW  31
0CC6:  MOVWF  FC8
0CC8:  MOVLW  28
0CCA:  MOVWF  FC6
0CCC:  BSF    FC7.7
0CCE:  BCF    FC7.6
0CD0:  CLRF   1B
0CD2:  CLRF   22
0CD4:  CLRF   23
0CD6:  CLRF   24
0CD8:  CLRF   25
0CDA:  CLRF   2E
0CDC:  CLRF   2F
0CDE:  CLRF   30
0CE0:  CLRF   34
0CE2:  CLRF   33
0CE4:  CLRF   32
0CE6:  CLRF   31
0CE8:  CLRF   38
0CEA:  CLRF   37
0CEC:  CLRF   36
0CEE:  MOVLW  01
0CF0:  MOVWF  35
0CF2:  MOVLW  80
0CF4:  MOVWF  3C
0CF6:  CLRF   3B
0CF8:  CLRF   3A
0CFA:  CLRF   39
0CFC:  CLRF   40
0CFE:  CLRF   3F
0D00:  CLRF   3E
0D02:  CLRF   3D
0D04:  MOVWF  44
0D06:  CLRF   43
0D08:  CLRF   46
0D0A:  MOVLW  01
0D0C:  MOVWF  45
0D0E:  CLRF   48
0D10:  CLRF   47
0D12:  MOVLW  80
0D14:  MOVWF  4C
0D16:  CLRF   4B
0D18:  CLRF   4E
0D1A:  MOVLW  01
0D1C:  MOVWF  4D
0D1E:  CLRF   50
0D20:  CLRF   4F
0D22:  CLRF   52
0D24:  CLRF   51
0D26:  CLRF   53
0D28:  MOVLW  20
0D2A:  MOVWF  54
0D2C:  CLRF   55
0D2E:  MOVLW  01
0D30:  MOVWF  56
0D32:  MOVLW  10
0D34:  MOVWF  57
0D36:  CLRF   58
0D38:  CLRF   5C
0D3A:  CLRF   5B
0D3C:  CLRF   5A
0D3E:  MOVLW  01
0D40:  MOVWF  59
0D42:  CLRF   x60
0D44:  CLRF   5F
0D46:  CLRF   5E
0D48:  MOVWF  5D
0D4A:  SETF   x64
0D4C:  SETF   x63
0D4E:  SETF   x62
0D50:  MOVLW  FE
0D52:  MOVWF  x61
0D54:  MOVLW  80
0D56:  MOVWF  x68
0D58:  CLRF   x67
0D5A:  CLRF   x66
0D5C:  CLRF   x65
0D5E:  MOVWF  x6C
0D60:  CLRF   x6B
0D62:  CLRF   x6A
0D64:  CLRF   x69
0D66:  MOVLW  7F
0D68:  MOVWF  x70
0D6A:  SETF   x6F
0D6C:  SETF   x6E
0D6E:  SETF   x6D
0D70:  MOVLW  01
0D72:  MOVWF  x71
0D74:  MOVWF  x72
0D76:  CLRF   x8C
0D78:  CLRF   x8D
0D7A:  CLRF   x8E
0D7C:  CLRF   x8F
0D7E:  CLRF   x91
0D80:  CLRF   x90
0D82:  CLRF   x93
0D84:  CLRF   x92
0D86:  CLRF   x95
0D88:  CLRF   x94
0D8A:  MOVF   FC1,W
0D8C:  ANDLW  C0
0D8E:  IORLW  0F
0D90:  MOVWF  FC1
0D92:  MOVLW  07
0D94:  MOVWF  FB4
0D96:  SETF   26
0D98:  SETF   27
0D9A:  SETF   28
0D9C:  SETF   29
0D9E:  SETF   2A
0DA0:  SETF   2B
0DA2:  SETF   2C
0DA4:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
0DA6:  GOTO   014E
....................    set_tris_b(0x3c); 
0DAA:  MOVLW  3C
0DAC:  MOVWF  F93
....................    setup_lcd(); 
0DAE:  GOTO   0252
....................  
....................    lcd_command(lcd_addr_line1); 
0DB2:  MOVLW  80
0DB4:  MOVWF  x97
0DB6:  CALL   021A
....................    lcd_data(" Khoa co khi che tao may "); 
0DBA:  MOVLW  10
0DBC:  MOVWF  FF6
0DBE:  MOVLW  01
0DC0:  MOVWF  FF7
0DC2:  CALL   02AC
....................  
....................    lcd_command(lcd_addr_line2); 
0DC6:  MOVLW  C0
0DC8:  MOVWF  x97
0DCA:  CALL   021A
....................    lcd_data(" Truong DH SPKT "); 
0DCE:  MOVLW  2A
0DD0:  MOVWF  FF6
0DD2:  MOVLW  01
0DD4:  MOVWF  FF7
0DD6:  CALL   02AC
....................  
....................    lcd_command(lcd_addr_line3); 
0DDA:  MOVLW  94
0DDC:  MOVWF  x97
0DDE:  CALL   021A
....................    lcd_data(" vdk pic18f1550 "); 
0DE2:  MOVLW  3C
0DE4:  MOVWF  FF6
0DE6:  MOVLW  01
0DE8:  MOVWF  FF7
0DEA:  CALL   02AC
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
0DEE:  MOVLW  A8
0DF0:  MOVWF  FD5
....................    set_timer0(0);    
0DF2:  CLRF   FD7
0DF4:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0DF6:  MOVLW  B5
0DF8:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
0DFA:  MOVLW  0B
0DFC:  MOVWF  FCF
0DFE:  MOVLW  DC
0E00:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
0E02:  MOVLW  C0
0E04:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
0E06:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
0E08:  CLRF   x88
....................    bdn = 0; 
0E0A:  CLRF   x89
....................    phut = 0; 
0E0C:  CLRF   x8A
....................    gio = 0; 
0E0E:  CLRF   x8B
....................    giai_ma(); 
0E10:  CALL   0422
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
0E14:  BTFSC  x89.7
0E16:  BRA    0E20
0E18:  MOVF   x89,W
0E1A:  SUBLW  09
0E1C:  BTFSS  FD8.0
0E1E:  BRA    0FB4
....................          if (mode !=0) 
0E20:  MOVF   x8F,F
0E22:  BZ    0E4A
....................          { 
....................             if ((bdn == 0 ) && (input(bt0))  && (input(bt1)) && (input(bt2))) tat_2_led_chinh(); 
0E24:  MOVF   x89,F
0E26:  BNZ   0E40
0E28:  BSF    F93.5
0E2A:  BTFSS  F81.5
0E2C:  BRA    0E40
0E2E:  BSF    F93.4
0E30:  BTFSS  F81.4
0E32:  BRA    0E40
0E34:  BSF    F93.3
0E36:  BTFSS  F81.3
0E38:  BRA    0E40
0E3A:  GOTO   04E8
0E3E:  BRA    0E4A
....................             else if (bdn == 5) giai_ma(); 
0E40:  MOVF   x89,W
0E42:  SUBLW  05
0E44:  BTFSC  FD8.2
0E46:  CALL   0422
....................          } 
....................          hien_thi_8led_7doan_quet_all(); 
0E4A:  CALL   05A2
....................          lcd_command(lcd_addr_line4); 
0E4E:  MOVLW  D4
0E50:  MOVWF  x97
0E52:  CALL   021A
....................          for (int i = 0; i<19;i++) lcd_data(hang4[i]); 
0E56:  CLRF   x96
0E58:  MOVF   x96,W
0E5A:  SUBLW  12
0E5C:  BNC   0E78
0E5E:  CLRF   03
0E60:  MOVF   x96,W
0E62:  ADDLW  74
0E64:  MOVWF  FE9
0E66:  MOVLW  00
0E68:  ADDWFC 03,W
0E6A:  MOVWF  FEA
0E6C:  MOVFF  FEF,99
0E70:  CALL   029A
0E74:  INCF   x96,F
0E76:  BRA    0E58
....................          phim_up(); 
0E78:  GOTO   0606
....................          phim_dw(); 
0E7C:  BRA    0686
....................          phim_mode();          
0E7E:  BRA    0706
....................          count = get_timer0(); 
0E80:  MOVF   FD6,W
0E82:  MOVWF  x90
0E84:  MOVFF  FD7,91
....................          if (count != countT) { 
0E88:  MOVF   x92,W
0E8A:  SUBWF  x90,W
0E8C:  BNZ   0E94
0E8E:  MOVF   x93,W
0E90:  SUBWF  x91,W
0E92:  BZ    0EB6
....................             countT = count; 
0E94:  MOVFF  91,93
0E98:  MOVFF  90,92
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
0E9C:  MOVFF  91,98
0EA0:  MOVFF  90,97
0EA4:  BRA    0792
....................             if (count >= 101) set_timer0(1); 
0EA6:  MOVF   x91,F
0EA8:  BNZ   0EB0
0EAA:  MOVF   x90,W
0EAC:  SUBLW  64
0EAE:  BC    0EB6
0EB0:  CLRF   FD7
0EB2:  MOVLW  01
0EB4:  MOVWF  FD6
....................          } 
....................          if(ttct_td==1) sang_tat_32led(10,1); 
0EB6:  DECFSZ 56,W
0EB8:  BRA    0EC4
0EBA:  MOVLW  0A
0EBC:  MOVWF  x97
0EBE:  MOVLW  01
0EC0:  MOVWF  x98
0EC2:  RCALL  09FC
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(10,1); 
0EC4:  MOVF   56,W
0EC6:  SUBLW  02
0EC8:  BNZ   0ED4
0ECA:  MOVLW  0A
0ECC:  MOVWF  x97
0ECE:  MOVLW  01
0ED0:  MOVWF  x98
0ED2:  RCALL  0A60
....................          if(ttct_td==3) sang_don_pst_32led(10,1); 
0ED4:  MOVF   56,W
0ED6:  SUBLW  03
0ED8:  BNZ   0EE4
0EDA:  MOVLW  0A
0EDC:  MOVWF  x97
0EDE:  MOVLW  01
0EE0:  MOVWF  x98
0EE2:  RCALL  0ADE
....................          if(ttct_td==4) sang_tat_dan_pst_32led(10,1); 
0EE4:  MOVF   56,W
0EE6:  SUBLW  04
0EE8:  BNZ   0EF4
0EEA:  MOVLW  0A
0EEC:  MOVWF  x97
0EEE:  MOVLW  01
0EF0:  MOVWF  x98
0EF2:  RCALL  0B60
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(10,1); 
0EF4:  MOVF   56,W
0EF6:  SUBLW  05
0EF8:  BNZ   0F04
0EFA:  MOVLW  0A
0EFC:  MOVWF  x97
0EFE:  MOVLW  01
0F00:  MOVWF  x98
0F02:  RCALL  0BE0
....................          if(ttct_td==6) sang_don_pst_32led(10,1); 
0F04:  MOVF   56,W
0F06:  SUBLW  06
0F08:  BNZ   0F14
0F0A:  MOVLW  0A
0F0C:  MOVWF  x97
0F0E:  MOVLW  01
0F10:  MOVWF  x98
0F12:  RCALL  0ADE
....................          if(ttct_td==7) sang_don_pst_32led(10,1); 
0F14:  MOVF   56,W
0F16:  SUBLW  07
0F18:  BNZ   0F24
0F1A:  MOVLW  0A
0F1C:  MOVWF  x97
0F1E:  MOVLW  01
0F20:  MOVWF  x98
0F22:  RCALL  0ADE
....................          if(ttct_td==8) sang_tat_32led(10,1); 
0F24:  MOVF   56,W
0F26:  SUBLW  08
0F28:  BNZ   0F34
0F2A:  MOVLW  0A
0F2C:  MOVWF  x97
0F2E:  MOVLW  01
0F30:  MOVWF  x98
0F32:  RCALL  09FC
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(10,1); 
0F34:  MOVF   56,W
0F36:  SUBLW  09
0F38:  BNZ   0F44
0F3A:  MOVLW  0A
0F3C:  MOVWF  x97
0F3E:  MOVLW  01
0F40:  MOVWF  x98
0F42:  RCALL  0A60
....................          if(ttct_td==10) sang_don_pst_32led(10,1); 
0F44:  MOVF   56,W
0F46:  SUBLW  0A
0F48:  BNZ   0F54
0F4A:  MOVLW  0A
0F4C:  MOVWF  x97
0F4E:  MOVLW  01
0F50:  MOVWF  x98
0F52:  RCALL  0ADE
....................          if(ttct_td==11) sang_tat_dan_pst_32led(10,1); 
0F54:  MOVF   56,W
0F56:  SUBLW  0B
0F58:  BNZ   0F64
0F5A:  MOVLW  0A
0F5C:  MOVWF  x97
0F5E:  MOVLW  01
0F60:  MOVWF  x98
0F62:  RCALL  0B60
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(10,1); 
0F64:  MOVF   56,W
0F66:  SUBLW  0C
0F68:  BNZ   0F74
0F6A:  MOVLW  0A
0F6C:  MOVWF  x97
0F6E:  MOVLW  01
0F70:  MOVWF  x98
0F72:  RCALL  0BE0
....................          if(ttct_td==13) sang_tat_dan_pst_32led(10,1); 
0F74:  MOVF   56,W
0F76:  SUBLW  0D
0F78:  BNZ   0F84
0F7A:  MOVLW  0A
0F7C:  MOVWF  x97
0F7E:  MOVLW  01
0F80:  MOVWF  x98
0F82:  RCALL  0B60
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(10,1); 
0F84:  MOVF   56,W
0F86:  SUBLW  0E
0F88:  BNZ   0F94
0F8A:  MOVLW  0A
0F8C:  MOVWF  x97
0F8E:  MOVLW  01
0F90:  MOVWF  x98
0F92:  BRA    0C42
....................          if(ttct_td==15) sang_don_pst_32led(10,1); 
0F94:  MOVF   56,W
0F96:  SUBLW  0F
0F98:  BNZ   0FA4
0F9A:  MOVLW  0A
0F9C:  MOVWF  x97
0F9E:  MOVLW  01
0FA0:  MOVWF  x98
0FA2:  RCALL  0ADE
....................          if(ttct_td>15) ttct_td =1; 
0FA4:  BTFSC  56.7
0FA6:  BRA    0FB2
0FA8:  MOVF   56,W
0FAA:  SUBLW  0F
0FAC:  BC    0FB2
0FAE:  MOVLW  01
0FB0:  MOVWF  56
....................           
....................  
....................       } 
0FB2:  BRA    100C
....................       else  
....................       { 
....................          bdn = bdn -10; 
0FB4:  MOVLW  0A
0FB6:  SUBWF  x89,F
....................          dem_tg_exit++; 
0FB8:  INCF   x8C,F
....................          if (dem_tg_exit == 20) mode = 0; giay++; 
0FBA:  MOVF   x8C,W
0FBC:  SUBLW  14
0FBE:  BTFSC  FD8.2
0FC0:  CLRF   x8F
0FC2:  INCF   x88,F
....................             if (giay==60) { giay = 0; phut++; 
0FC4:  MOVF   x88,W
0FC6:  SUBLW  3C
0FC8:  BNZ   0FE0
0FCA:  CLRF   x88
0FCC:  INCF   x8A,F
....................                if (phut == 60) { phut = 0; gio++;  
0FCE:  MOVF   x8A,W
0FD0:  SUBLW  3C
0FD2:  BNZ   0FE0
0FD4:  CLRF   x8A
0FD6:  INCF   x8B,F
....................                   if (gio == 24) gio = 0; 
0FD8:  MOVF   x8B,W
0FDA:  SUBLW  18
0FDC:  BNZ   0FE0
0FDE:  CLRF   x8B
....................                }  
....................             } 
....................           
....................          if (dead == 0) { 
0FE0:  MOVF   x8E,F
0FE2:  BNZ   0FF0
....................             lcd_command(lcd_shift_left); 
0FE4:  MOVLW  18
0FE6:  MOVWF  x97
0FE8:  CALL   021A
....................             dem++; 
0FEC:  INCF   x8D,F
....................          } 
0FEE:  BRA    0FFA
....................          else { 
....................             lcd_command(lcd_shift_right); 
0FF0:  MOVLW  1C
0FF2:  MOVWF  x97
0FF4:  CALL   021A
....................             dem--; 
0FF8:  DECF   x8D,F
....................           } 
....................          if (dem > 20)  {dead = 1; dem = 20;} 
0FFA:  MOVF   x8D,W
0FFC:  SUBLW  14
0FFE:  BC    1008
1000:  MOVLW  01
1002:  MOVWF  x8E
1004:  MOVLW  14
1006:  MOVWF  x8D
....................          if (dem < 0)  {dead = 0; dem = 0;} 
....................  
....................          giai_ma(); 
1008:  CALL   0422
....................       } 
100C:  BRA    0E14
....................    }            
.................... } 
....................  
100E:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
