CCS PCH C Compiler, Version 5.078, 43599               09-Nov-20 15:53

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK7\616\616.lst

               ROM used:   4112 bytes (13%)
                           Largest free fragment is 28652
               RAM used:   168 (8%) at main() level
                           193 (9%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0D34
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00FC
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 80,C0
00FA:  DATA 94,D4
*
010C:  DATA 49,54
010E:  DATA 45,4D
0110:  DATA 53,3A
0112:  DATA 00,00
0114:  DATA 20,20
0116:  DATA 20,20
0118:  DATA 4B,48
011A:  DATA 4F,41
011C:  DATA 20,43
011E:  DATA 4B,20
0120:  DATA 43,54
0122:  DATA 4D,00
0124:  DATA 20,20
0126:  DATA 20,54
0128:  DATA 52,55
012A:  DATA 4F,4E
012C:  DATA 47,20
012E:  DATA 44,48
0130:  DATA 20,53
0132:  DATA 50,4B
0134:  DATA 54,20
0136:  DATA 00,00
*
0296:  TBLRD*+
0298:  MOVF   FF5,F
029A:  BZ    02B4
029C:  MOVFF  FF6,AA
02A0:  MOVFF  FF7,AB
02A4:  MOVFF  FF5,AC
02A8:  RCALL  0284
02AA:  MOVFF  AA,FF6
02AE:  MOVFF  AB,FF7
02B2:  BRA    0296
02B4:  RETURN 0
02B6:  MOVF   xA8,W
02B8:  XORWF  xA9,W
02BA:  ANDLW  80
02BC:  MOVWF  xAB
02BE:  BTFSS  xA8.7
02C0:  BRA    02C6
02C2:  COMF   xA8,F
02C4:  INCF   xA8,F
02C6:  BTFSS  xA9.7
02C8:  BRA    02CE
02CA:  COMF   xA9,F
02CC:  INCF   xA9,F
02CE:  MOVF   xA9,W
02D0:  CLRF   01
02D2:  SUBWF  xA8,W
02D4:  BC    02DC
02D6:  MOVFF  A8,00
02DA:  BRA    02F4
02DC:  CLRF   00
02DE:  MOVLW  08
02E0:  MOVWF  xAA
02E2:  RLCF   xA8,F
02E4:  RLCF   00,F
02E6:  MOVF   xA9,W
02E8:  SUBWF  00,W
02EA:  BTFSC  FD8.0
02EC:  MOVWF  00
02EE:  RLCF   01,F
02F0:  DECFSZ xAA,F
02F2:  BRA    02E2
02F4:  BTFSS  xAB.7
02F6:  BRA    02FC
02F8:  COMF   01,F
02FA:  INCF   01,F
02FC:  RETURN 0
*
0472:  MOVF   xB1,W
0474:  CLRF   01
0476:  SUBWF  xB0,W
0478:  BC    0480
047A:  MOVFF  B0,00
047E:  BRA    0498
0480:  CLRF   00
0482:  MOVLW  08
0484:  MOVWF  xB2
0486:  RLCF   xB0,F
0488:  RLCF   00,F
048A:  MOVF   xB1,W
048C:  SUBWF  00,W
048E:  BTFSC  FD8.0
0490:  MOVWF  00
0492:  RLCF   01,F
0494:  DECFSZ xB2,F
0496:  BRA    0486
0498:  RETURN 0
049A:  MOVFF  A7,FEA
049E:  MOVFF  A6,FE9
04A2:  MOVFF  B0,FEF
04A6:  INCF   FE9,F
04A8:  BTFSC  FD8.2
04AA:  INCF   FEA,F
04AC:  CLRF   FEF
04AE:  INCF   xA6,F
04B0:  BTFSC  FD8.2
04B2:  INCF   xA7,F
04B4:  RETURN 0
04B6:  MOVLW  20
04B8:  BTFSS  xAB.4
04BA:  MOVLW  30
04BC:  MOVWF  xAC
04BE:  MOVFF  AA,00
04C2:  BTFSS  xAA.7
04C4:  BRA    04D6
04C6:  COMF   00,F
04C8:  INCF   00,F
04CA:  MOVFF  00,AA
04CE:  MOVLW  2D
04D0:  MOVWF  xAC
04D2:  BSF    xAB.7
04D4:  BSF    xAB.0
04D6:  MOVF   01,W
04D8:  MOVFF  AA,B0
04DC:  MOVLW  64
04DE:  MOVWF  xB1
04E0:  RCALL  0472
04E2:  MOVFF  00,AA
04E6:  MOVLW  30
04E8:  ADDWF  01,W
04EA:  MOVWF  xAD
04EC:  MOVFF  AA,B0
04F0:  MOVLW  0A
04F2:  MOVWF  xB1
04F4:  RCALL  0472
04F6:  MOVLW  30
04F8:  ADDWF  00,W
04FA:  MOVWF  xAF
04FC:  MOVLW  30
04FE:  ADDWF  01,W
0500:  MOVWF  xAE
0502:  MOVFF  AC,00
0506:  MOVLW  30
0508:  SUBWF  xAD,W
050A:  BZ    0514
050C:  BSF    xAB.1
050E:  BTFSC  xAB.7
0510:  BSF    xAB.2
0512:  BRA    0538
0514:  MOVFF  AC,AD
0518:  MOVLW  20
051A:  MOVWF  xAC
051C:  MOVLW  30
051E:  SUBWF  xAE,W
0520:  BZ    052A
0522:  BSF    xAB.0
0524:  BTFSC  xAB.7
0526:  BSF    xAB.1
0528:  BRA    0538
052A:  BTFSS  FD8.2
052C:  BSF    xAB.0
052E:  BNZ   0538
0530:  MOVFF  AD,AE
0534:  MOVLW  20
0536:  MOVWF  xAD
0538:  BTFSC  xAB.2
053A:  BRA    0546
053C:  BTFSC  xAB.1
053E:  BRA    054C
0540:  BTFSC  xAB.0
0542:  BRA    0552
0544:  BRA    0558
0546:  MOVFF  AC,B0
054A:  RCALL  049A
054C:  MOVFF  AD,B0
0550:  RCALL  049A
0552:  MOVFF  AE,B0
0556:  RCALL  049A
0558:  MOVFF  AF,B0
055C:  RCALL  049A
055E:  RETURN 0
*
079A:  CLRF   01
079C:  CLRF   02
079E:  CLRF   00
07A0:  CLRF   03
07A2:  MOVF   xAF,W
07A4:  BNZ   07AA
07A6:  MOVF   xAE,W
07A8:  BZ    07DA
07AA:  MOVLW  10
07AC:  MOVWF  xB0
07AE:  BCF    FD8.0
07B0:  RLCF   xAC,F
07B2:  RLCF   xAD,F
07B4:  RLCF   00,F
07B6:  RLCF   03,F
07B8:  MOVF   xAF,W
07BA:  SUBWF  03,W
07BC:  BNZ   07C2
07BE:  MOVF   xAE,W
07C0:  SUBWF  00,W
07C2:  BNC   07D2
07C4:  MOVF   xAE,W
07C6:  SUBWF  00,F
07C8:  BTFSS  FD8.0
07CA:  DECF   03,F
07CC:  MOVF   xAF,W
07CE:  SUBWF  03,F
07D0:  BSF    FD8.0
07D2:  RLCF   01,F
07D4:  RLCF   02,F
07D6:  DECFSZ xB0,F
07D8:  BRA    07AE
07DA:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
0216:  CLRF   FEA
0218:  MOVLW  AD
021A:  MOVWF  FE9
021C:  MOVF   FEF,W
021E:  BZ    023A
0220:  MOVLW  06
0222:  MOVWF  01
0224:  CLRF   00
0226:  DECFSZ 00,F
0228:  BRA    0226
022A:  DECFSZ 01,F
022C:  BRA    0224
022E:  MOVLW  7B
0230:  MOVWF  00
0232:  DECFSZ 00,F
0234:  BRA    0232
0236:  DECFSZ FEF,F
0238:  BRA    0220
023A:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
*
064A:  BSF    F93.5
064C:  BTFSC  F81.5
064E:  BRA    0674
....................     {   
....................       dl_btn++; 
0650:  INCF   1B,F
....................       delay_ms(1); 
0652:  MOVLW  01
0654:  MOVWF  xAD
0656:  RCALL  0216
....................       if (dl_btn>= dl) 
0658:  MOVF   xA9,F
065A:  BNZ   066C
065C:  MOVF   xA8,W
065E:  SUBWF  1B,W
0660:  BNC   066C
....................          { 
....................             dl_btn =0; 
0662:  CLRF   1B
....................             return(1); 
0664:  MOVLW  01
0666:  MOVWF  01
0668:  BRA    0678
....................          } 
066A:  BRA    0672
....................       else return(0); 
066C:  MOVLW  00
066E:  MOVWF  01
0670:  BRA    0678
....................     } 
0672:  BRA    0678
....................     else    return(0); 
0674:  MOVLW  00
0676:  MOVWF  01
0678:  GOTO   0684 (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
*
06CA:  BSF    F93.4
06CC:  BTFSC  F81.4
06CE:  BRA    06F4
....................     {   
....................       dl_btn++; 
06D0:  INCF   1B,F
....................       delay_ms(1); 
06D2:  MOVLW  01
06D4:  MOVWF  xAD
06D6:  RCALL  0216
....................       if (dl_btn>= dl) 
06D8:  MOVF   xA9,F
06DA:  BNZ   06EC
06DC:  MOVF   xA8,W
06DE:  SUBWF  1B,W
06E0:  BNC   06EC
....................          { 
....................             dl_btn =0; 
06E2:  CLRF   1B
....................             return(1); 
06E4:  MOVLW  01
06E6:  MOVWF  01
06E8:  BRA    06F8
....................          } 
06EA:  BRA    06F2
....................       else return(0); 
06EC:  MOVLW  00
06EE:  MOVWF  01
06F0:  BRA    06F8
....................     } 
06F2:  BRA    06F8
....................     else    return(0); 
06F4:  MOVLW  00
06F6:  MOVWF  01
06F8:  GOTO   0704 (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
*
074A:  BSF    F93.3
074C:  BTFSC  F81.3
074E:  BRA    0774
....................     {   
....................       dl_btn++; 
0750:  INCF   1B,F
....................       delay_ms(1); 
0752:  MOVLW  01
0754:  MOVWF  xAD
0756:  RCALL  0216
....................       if (dl_btn>= dl) 
0758:  MOVF   xA9,F
075A:  BNZ   076C
075C:  MOVF   xA8,W
075E:  SUBWF  1B,W
0760:  BNC   076C
....................          { 
....................             dl_btn =0; 
0762:  CLRF   1B
....................             return(1); 
0764:  MOVLW  01
0766:  MOVWF  01
0768:  BRA    0778
....................          } 
076A:  BRA    0772
....................       else return(0); 
076C:  MOVLW  00
076E:  MOVWF  01
0770:  BRA    0778
....................     } 
0772:  BRA    0778
....................     else    return(0); 
0774:  MOVLW  00
0776:  MOVWF  01
0778:  GOTO   0784 (RETURN)
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
0156:  MOVFF  BE,C0
....................    for (sb=0;sb<8;sb++) 
015A:  CLRF   xBF
015C:  MOVF   xBF,W
015E:  SUBLW  07
0160:  BNC   017E
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0162:  BTFSC  xC0.7
0164:  BRA    016A
0166:  BCF    F8D.2
0168:  BRA    016C
016A:  BSF    F8D.2
016C:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
016E:  BCF    F96.0
0170:  BCF    F8D.0
0172:  BCF    F96.0
0174:  BSF    F8D.0
....................          x= x<<1;          
0176:  BCF    FD8.0
0178:  RLCF   xC0,F
017A:  INCF   xBF,F
017C:  BRA    015C
....................      } 
017E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
090A:  MOVFF  BA,BE
090E:  RCALL  0156
....................       xuat_1byte(bld2); 
0910:  MOVFF  BB,BE
0914:  RCALL  0156
....................       xuat_1byte(bld1);           
0916:  MOVFF  BC,BE
091A:  RCALL  0156
....................       xuat_1byte(bld0);             
091C:  MOVFF  BD,BE
0920:  RCALL  0156
....................       mo_32_led_don;       
0922:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
0924:  RCALL  0180
....................       output_high(rck_32led);    output_low(rck_32led); 
0926:  BCF    F95.5
0928:  BSF    F8C.5
092A:  BCF    F95.5
092C:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
092E:  BCF    F95.1
0930:  BCF    F8C.1
0932:  GOTO   0958 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
0936:  MOVFF  B3,B6
093A:  MOVFF  B2,B7
....................      b1 = wld0>>8;  b0 = wld0; 
093E:  MOVFF  B5,B8
0942:  MOVFF  B4,B9
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0946:  MOVFF  B6,BA
094A:  MOVFF  B7,BB
094E:  MOVFF  B8,BC
0952:  MOVFF  B9,BD
0956:  BRA    090A
0958:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
095A:  MOVFF  AC,AE
095E:  MOVFF  AD,AF
0962:  MOVFF  AB,B1
0966:  MOVFF  AA,B0
....................      xuat_32led_don_2word(wd1,wd0); 
096A:  MOVFF  AF,B3
096E:  MOVFF  AE,B2
0972:  MOVFF  B1,B5
0976:  MOVFF  B0,B4
097A:  RCALL  0936
097C:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
0138:  MOVLW  00
013A:  MOVWF  F95
....................       set_tris_e(0x00); 
013C:  MOVWF  F96
....................       output_d(0xff); 
013E:  CLRF   F95
0140:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0142:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
0144:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
0146:  BCF    F95.1
0148:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
014A:  BCF    F95.0
014C:  BCF    F8C.0
....................       rbdc=0; 
014E:  CLRF   1D
0150:  CLRF   1C
0152:  GOTO   0E20 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0180:  CLRF   F95
0182:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
0184:  BTFSC  19.4
0186:  BRA    018C
0188:  BCF    F8C.4
018A:  BRA    018E
018C:  BSF    F8C.4
018E:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
0190:  BTFSC  19.6
0192:  BRA    0198
0194:  BCF    F8C.6
0196:  BRA    019A
0198:  BSF    F8C.6
019A:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
019C:  BTFSC  19.2
019E:  BRA    01A4
01A0:  BCF    F8C.2
01A2:  BRA    01A6
01A4:  BSF    F8C.2
01A6:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
01A8:  BCF    F95.1
01AA:  BSF    F8C.1
01AC:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
03AA:  CLRF   F95
03AC:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
03AE:  BTFSC  1A.6
03B0:  BRA    03B6
03B2:  BCF    F8C.6
03B4:  BRA    03B8
03B6:  BSF    F8C.6
03B8:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
03BA:  BTFSC  1A.4
03BC:  BRA    03C2
03BE:  BCF    F8C.4
03C0:  BRA    03C4
03C2:  BSF    F8C.4
03C4:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
03C6:  BTFSC  1A.2
03C8:  BRA    03CE
03CA:  BCF    F8C.2
03CC:  BRA    03D0
03CE:  BSF    F8C.2
03D0:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
03D2:  BCF    F95.0
03D4:  BSF    F8C.0
03D6:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
07DC:  MOVFF  AD,BE
07E0:  RCALL  0156
07E2:  MOVFF  AC,BE
07E6:  RCALL  0156
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
07E8:  MOVFF  AB,BE
07EC:  RCALL  0156
07EE:  MOVFF  AA,BE
07F2:  RCALL  0156
....................        
....................       mo_4_led_7doan; 
07F4:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
07F6:  RCALL  0180
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
07F8:  BCF    F95.7
07FA:  BCF    F8C.7
07FC:  BCF    F95.7
07FE:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
0800:  BCF    F95.1
0802:  BCF    F8C.1
0804:  GOTO   0906 (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
0808:  MOVFF  A9,AD
080C:  MOVFF  A8,AC
0810:  CLRF   xAF
0812:  MOVLW  0A
0814:  MOVWF  xAE
0816:  RCALL  079A
0818:  MOVFF  00,AA
081C:  MOVFF  03,AB
0820:  MOVFF  03,03
0824:  MOVF   00,W
0826:  RCALL  00AE
0828:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
082A:  MOVFF  A9,AD
082E:  MOVFF  A8,AC
0832:  CLRF   xAF
0834:  MOVLW  0A
0836:  MOVWF  xAE
0838:  RCALL  079A
083A:  MOVFF  02,AB
083E:  MOVFF  01,AA
0842:  MOVFF  02,AD
0846:  MOVFF  01,AC
084A:  CLRF   xAF
084C:  MOVLW  0A
084E:  MOVWF  xAE
0850:  RCALL  079A
0852:  MOVFF  00,AA
0856:  MOVFF  03,AB
085A:  MOVFF  03,03
085E:  MOVF   00,W
0860:  RCALL  00AE
0862:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
0864:  MOVFF  A9,AD
0868:  MOVFF  A8,AC
086C:  CLRF   xAF
086E:  MOVLW  64
0870:  MOVWF  xAE
0872:  RCALL  079A
0874:  MOVFF  02,AB
0878:  MOVFF  01,AA
087C:  MOVFF  02,AD
0880:  MOVFF  01,AC
0884:  CLRF   xAF
0886:  MOVLW  0A
0888:  MOVWF  xAE
088A:  RCALL  079A
088C:  MOVFF  00,AA
0890:  MOVFF  03,AB
0894:  MOVFF  03,03
0898:  MOVF   00,W
089A:  RCALL  00AE
089C:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
089E:  MOVFF  A9,AD
08A2:  MOVFF  A8,AC
08A6:  MOVLW  03
08A8:  MOVWF  xAF
08AA:  MOVLW  E8
08AC:  MOVWF  xAE
08AE:  RCALL  079A
08B0:  MOVFF  02,AB
08B4:  MOVFF  01,AA
08B8:  MOVFF  02,AD
08BC:  MOVFF  01,AC
08C0:  CLRF   xAF
08C2:  MOVLW  0A
08C4:  MOVWF  xAE
08C6:  RCALL  079A
08C8:  MOVFF  00,AA
08CC:  MOVFF  03,AB
08D0:  MOVFF  03,03
08D4:  MOVF   00,W
08D6:  CALL   00AE
08DA:  MOVWF  21
....................       if (ngan4==0xc0) 
08DC:  MOVF   21,W
08DE:  SUBLW  C0
08E0:  BNZ   08F4
....................       { 
....................          ngan4=0xff; 
08E2:  SETF   21
....................          if (tram4==0xc0) 
08E4:  MOVF   20,W
08E6:  SUBLW  C0
08E8:  BNZ   08F4
....................          { 
....................             tram4=0xff; 
08EA:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
08EC:  MOVF   1F,W
08EE:  SUBLW  C0
08F0:  BNZ   08F4
08F2:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
08F4:  MOVFF  21,AA
08F8:  MOVFF  20,AB
08FC:  MOVFF  1F,AC
0900:  MOVFF  1E,AD
0904:  BRA    07DC
0906:  GOTO   0ED2 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
01AE:  MOVFF  25,BE
01B2:  RCALL  0156
....................     xuat_1byte(glcddata); 
01B4:  MOVFF  24,BE
01B8:  RCALL  0156
....................     xuat_1byte(lcdcontrol);        
01BA:  MOVFF  23,BE
01BE:  RCALL  0156
....................     xuat_1byte(lcddata);       
01C0:  MOVFF  22,BE
01C4:  RCALL  0156
....................        
....................     mo_glcd_lcd; 
01C6:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
01C8:  RCALL  0180
....................     output_high(rck_lcd20x4);      
01CA:  BCF    F95.3
01CC:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
01CE:  BCF    F95.3
01D0:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
01D2:  BCF    F95.1
01D4:  BCF    F8C.1
01D6:  GOTO   01E8 (RETURN)
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
01DA:  MOVF   xAF,W
01DC:  MOVWF  23
01DE:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
01E0:  MOVFF  B0,22
01E4:  COMF   22,F
....................     xuat_glcd_lcd(); 
01E6:  BRA    01AE
01E8:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
....................     glcddata    = ~glcd_ins_hthi;      
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
040A:  MOVF   xAE,W
040C:  MOVWF  xB0
040E:  COMF   xB0,F
0410:  MOVFF  B0,BE
0414:  RCALL  0156
0416:  MOVFF  AF,B0
041A:  COMF   xB0,F
041C:  MOVFF  B0,BE
0420:  RCALL  0156
....................        
....................       mo_8_led_quet; 
0422:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0424:  RCALL  03AA
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0426:  BCF    F95.5
0428:  BSF    F8C.5
042A:  BCF    F95.5
042C:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
042E:  BCF    F95.0
0430:  BCF    F8C.0
0432:  GOTO   043C (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0436:  SETF   xAE
0438:  SETF   xAF
043A:  BRA    040A
043C:  GOTO   046C (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
03D8:  CLRF   03
03DA:  MOVF   xAF,W
03DC:  RCALL  00D0
03DE:  MOVWF  01
03E0:  MOVWF  xB1
03E2:  COMF   xB1,F
03E4:  MOVFF  B1,BE
03E8:  RCALL  0156
03EA:  MOVFF  B0,B1
03EE:  COMF   xB1,F
03F0:  MOVFF  B1,BE
03F4:  RCALL  0156
....................       mo_8_led_quet; 
03F6:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
03F8:  RCALL  03AA
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
03FA:  BCF    F95.5
03FC:  BSF    F8C.5
03FE:  BCF    F95.5
0400:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0402:  BCF    F95.0
0404:  BCF    F8C.0
0406:  GOTO   0460 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0440:  CLRF   2E
0442:  MOVF   2E,W
0444:  SUBLW  07
0446:  BNC   0470
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0448:  CLRF   03
044A:  MOVF   2E,W
044C:  ADDLW  26
044E:  MOVWF  FE9
0450:  MOVLW  00
0452:  ADDWFC 03,W
0454:  MOVWF  FEA
0456:  MOVFF  FEF,B0
045A:  MOVFF  2E,AF
045E:  BRA    03D8
....................             delay_us(100); 
0460:  MOVLW  A6
0462:  MOVWF  00
0464:  DECFSZ 00,F
0466:  BRA    0464
0468:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
046A:  BRA    0436
046C:  INCF   2E,F
046E:  BRA    0442
....................             } 
0470:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0570:  CLRF   xAC
0572:  MOVF   xAB,F
0574:  BNZ   057C
0576:  MOVF   xAA,W
0578:  SUBWF  xAC,W
057A:  BC    0582
....................       hien_thi_8led_7doan_quet_all(); 
057C:  RCALL  0440
057E:  INCF   xAC,F
0580:  BRA    0572
0582:  GOTO   0644 (RETURN)
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
099A:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
099C:  CLRF   34
099E:  CLRF   33
09A0:  CLRF   32
09A2:  CLRF   31
09A4:  CLRF   38
09A6:  CLRF   37
09A8:  CLRF   36
09AA:  MOVLW  01
09AC:  MOVWF  35
09AE:  MOVLW  80
09B0:  MOVWF  3C
09B2:  CLRF   3B
09B4:  CLRF   3A
09B6:  CLRF   39
09B8:  CLRF   40
09BA:  CLRF   3F
09BC:  CLRF   3E
09BE:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
09C0:  MOVWF  44
09C2:  CLRF   43
09C4:  CLRF   46
09C6:  MOVLW  01
09C8:  MOVWF  45
09CA:  CLRF   48
09CC:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
09CE:  MOVLW  80
09D0:  MOVWF  4C
09D2:  CLRF   4B
09D4:  CLRF   4E
09D6:  MOVLW  01
09D8:  MOVWF  4D
09DA:  CLRF   50
09DC:  CLRF   4F
....................       zt=zp=0; 
09DE:  CLRF   4A
09E0:  CLRF   49
09E2:  MOVFF  4A,42
09E6:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
09EA:  MOVLW  20
09EC:  MOVWF  54
09EE:  CLRF   55
09F0:  MOVLW  10
09F2:  MOVWF  57
09F4:  CLRF   58
....................       dem_led=0; 
09F6:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
09F8:  CLRF   5C
09FA:  CLRF   5B
09FC:  CLRF   5A
09FE:  MOVLW  01
0A00:  MOVWF  59
0A02:  CLRF   x60
0A04:  CLRF   5F
0A06:  CLRF   5E
0A08:  MOVWF  5D
0A0A:  SETF   x64
0A0C:  SETF   x63
0A0E:  SETF   x62
0A10:  MOVLW  FE
0A12:  MOVWF  x61
0A14:  MOVLW  01
0A16:  MOVWF  x71
0A18:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
0A1A:  MOVLW  80
0A1C:  MOVWF  x68
0A1E:  CLRF   x67
0A20:  CLRF   x66
0A22:  CLRF   x65
0A24:  MOVWF  x6C
0A26:  CLRF   x6B
0A28:  CLRF   x6A
0A2A:  CLRF   x69
0A2C:  MOVLW  7F
0A2E:  MOVWF  x70
0A30:  SETF   x6F
0A32:  SETF   x6E
0A34:  SETF   x6D
....................      tgdlay = 0; 
0A36:  CLRF   52
0A38:  CLRF   51
0A3A:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0A4E:  CLRF   xAD
0A50:  MOVF   xAC,W
0A52:  SUBWF  xAD,W
0A54:  BC    0A5C
....................       hien_thi_8led_7doan_quet_all(); 
0A56:  RCALL  0440
0A58:  INCF   xAD,F
0A5A:  BRA    0A50
....................       dem_led++; 
0A5C:  INCF   53,F
0A5E:  GOTO   0A74 (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
0A3C:  MOVF   xAC,F
0A3E:  BZ    0A48
0A40:  MOVFF  AC,AD
0A44:  CALL   0216
....................       dem_led++; 
0A48:  INCF   53,F
0A4A:  GOTO   0A74 (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
0A62:  MOVF   xAB,F
0A64:  BNZ   0A6E
0A66:  MOVFF  AA,AC
0A6A:  BRA    0A3C
0A6C:  BRA    0A74
....................    else              tang_dem_led_delay_1(dl); 
0A6E:  MOVFF  AA,AC
0A72:  BRA    0A4E
0A74:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
097E:  COMF   31,F
0980:  COMF   32,F
0982:  COMF   33,F
0984:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
0986:  MOVFF  34,AD
098A:  MOVFF  33,AC
098E:  MOVFF  32,AB
0992:  MOVFF  31,AA
0996:  RCALL  095A
0998:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
0A76:  DECFSZ 51,W
0A78:  BRA    0A92
0A7A:  MOVF   52,F
0A7C:  BNZ   0A92
0A7E:  MOVFF  34,AD
0A82:  MOVFF  33,AC
0A86:  MOVFF  32,AB
0A8A:  MOVFF  31,AA
0A8E:  RCALL  095A
0A90:  BRA    0AC8
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
0A92:  MOVF   51,W
0A94:  SUBLW  32
0A96:  BNZ   0AA0
0A98:  MOVF   52,F
0A9A:  BNZ   0AA0
0A9C:  RCALL  097E
0A9E:  BRA    0AC8
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
0AA0:  MOVF   51,W
0AA2:  SUBLW  64
0AA4:  BNZ   0AAE
0AA6:  MOVF   52,F
0AA8:  BNZ   0AAE
0AAA:  RCALL  097E
0AAC:  BRA    0AC8
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
0AAE:  MOVF   51,W
0AB0:  SUBLW  96
0AB2:  BNZ   0ABC
0AB4:  MOVF   52,F
0AB6:  BNZ   0ABC
0AB8:  RCALL  097E
0ABA:  BRA    0AC8
....................       else if (tgdlay==200)   
0ABC:  MOVF   51,W
0ABE:  SUBLW  C8
0AC0:  BNZ   0AC8
0AC2:  MOVF   52,F
0AC4:  BNZ   0AC8
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
0AC6:  RCALL  099A
....................       } 
....................       tgdlay++; 
0AC8:  INCF   51,F
0ACA:  BTFSC  FD8.2
0ACC:  INCF   52,F
....................       delay_chon(dl,chondelay); 
0ACE:  MOVFF  A8,AA
0AD2:  MOVFF  A9,AB
0AD6:  RCALL  0A62
0AD8:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
0ADA:  MOVF   53,W
0ADC:  SUBLW  0F
0ADE:  BNC   0B24
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
0AE0:  MOVFF  4A,B3
0AE4:  MOVFF  49,B2
0AE8:  MOVFF  42,B5
0AEC:  MOVFF  41,B4
0AF0:  RCALL  0936
....................       zp= (zp<<1)+1;  
0AF2:  BCF    FD8.0
0AF4:  RLCF   49,W
0AF6:  MOVWF  xAA
0AF8:  RLCF   4A,W
0AFA:  MOVWF  xAB
0AFC:  MOVLW  01
0AFE:  ADDWF  xAA,W
0B00:  MOVWF  49
0B02:  MOVLW  00
0B04:  ADDWFC xAB,W
0B06:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
0B08:  BCF    FD8.0
0B0A:  RRCF   42,W
0B0C:  MOVWF  xAB
0B0E:  RRCF   41,W
0B10:  MOVWF  41
0B12:  MOVLW  80
0B14:  ADDWF  xAB,W
0B16:  MOVWF  42
....................       delay_chon(dl,chondelay); 
0B18:  MOVFF  A8,AA
0B1C:  MOVFF  A9,AB
0B20:  RCALL  0A62
....................    } 
0B22:  BRA    0B56
....................    else  if (dem_led<32) 
0B24:  MOVF   53,W
0B26:  SUBLW  1F
0B28:  BNC   0B54
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
0B2A:  MOVFF  4A,B3
0B2E:  MOVFF  49,B2
0B32:  MOVFF  42,B5
0B36:  MOVFF  41,B4
0B3A:  RCALL  0936
....................       zp= (zp<<1);  
0B3C:  BCF    FD8.0
0B3E:  RLCF   49,F
0B40:  RLCF   4A,F
....................       zt= (zt>>1); 
0B42:  BCF    FD8.0
0B44:  RRCF   42,F
0B46:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
0B48:  MOVFF  A8,AA
0B4C:  MOVFF  A9,AB
0B50:  RCALL  0A62
....................    } 
0B52:  BRA    0B56
....................    else reset_toan_bo_bien(); 
0B54:  RCALL  099A
0B56:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
0C5A:  MOVF   53,W
0C5C:  SUBLW  0F
0C5E:  BNC   0C8E
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
0C60:  MOVFF  4A,B3
0C64:  MOVFF  49,B2
0C68:  MOVFF  4A,B5
0C6C:  MOVFF  49,B4
0C70:  RCALL  0936
....................       zp= (zp>>1)+0x8000; 
0C72:  BCF    FD8.0
0C74:  RRCF   4A,W
0C76:  MOVWF  xAB
0C78:  RRCF   49,W
0C7A:  MOVWF  49
0C7C:  MOVLW  80
0C7E:  ADDWF  xAB,W
0C80:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
0C82:  MOVFF  A8,AA
0C86:  MOVFF  A9,AB
0C8A:  RCALL  0A62
....................    } 
0C8C:  BRA    0CBA
....................    else  if (dem_led<32) 
0C8E:  MOVF   53,W
0C90:  SUBLW  1F
0C92:  BNC   0CB8
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
0C94:  MOVFF  4A,B3
0C98:  MOVFF  49,B2
0C9C:  MOVFF  4A,B5
0CA0:  MOVFF  49,B4
0CA4:  RCALL  0936
....................       zp= (zp>>1); 
0CA6:  BCF    FD8.0
0CA8:  RRCF   4A,F
0CAA:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
0CAC:  MOVFF  A8,AA
0CB0:  MOVFF  A9,AB
0CB4:  RCALL  0A62
....................     } 
0CB6:  BRA    0CBA
....................    else reset_toan_bo_bien(); 
0CB8:  RCALL  099A
0CBA:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
0BDA:  MOVF   53,W
0BDC:  SUBLW  1F
0BDE:  BNC   0C28
....................    {   
....................       xuat_32led_don_1dw(y); 
0BE0:  MOVFF  34,AD
0BE4:  MOVFF  33,AC
0BE8:  MOVFF  32,AB
0BEC:  MOVFF  31,AA
0BF0:  RCALL  095A
....................       y= (y<<1)+1; 
0BF2:  BCF    FD8.0
0BF4:  RLCF   31,W
0BF6:  MOVWF  xAB
0BF8:  RLCF   32,W
0BFA:  MOVWF  xAC
0BFC:  RLCF   33,W
0BFE:  MOVWF  xAD
0C00:  RLCF   34,W
0C02:  MOVWF  xAE
0C04:  MOVLW  01
0C06:  ADDWF  xAB,W
0C08:  MOVWF  31
0C0A:  MOVLW  00
0C0C:  ADDWFC xAC,W
0C0E:  MOVWF  32
0C10:  MOVLW  00
0C12:  ADDWFC xAD,W
0C14:  MOVWF  33
0C16:  MOVLW  00
0C18:  ADDWFC xAE,W
0C1A:  MOVWF  34
....................       delay_chon(dl,chondelay); 
0C1C:  MOVFF  A8,AA
0C20:  MOVFF  A9,AB
0C24:  RCALL  0A62
....................    } 
0C26:  BRA    0C58
....................    else  if (dem_led<64) 
0C28:  MOVF   53,W
0C2A:  SUBLW  3F
0C2C:  BNC   0C56
....................    {   
....................       xuat_32led_don_1dw(y);    
0C2E:  MOVFF  34,AD
0C32:  MOVFF  33,AC
0C36:  MOVFF  32,AB
0C3A:  MOVFF  31,AA
0C3E:  RCALL  095A
....................       y= (y<<1);  
0C40:  BCF    FD8.0
0C42:  RLCF   31,F
0C44:  RLCF   32,F
0C46:  RLCF   33,F
0C48:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
0C4A:  MOVFF  A8,AA
0C4E:  MOVFF  A9,AB
0C52:  RCALL  0A62
....................    }  
0C54:  BRA    0C58
....................    else reset_toan_bo_bien(); 
0C56:  RCALL  099A
0C58:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
0CBC:  MOVF   53,W
0CBE:  SUBLW  1F
0CC0:  BNC   0D00
....................       {   
....................          xuat_32led_don_1dw(y); 
0CC2:  MOVFF  34,AD
0CC6:  MOVFF  33,AC
0CCA:  MOVFF  32,AB
0CCE:  MOVFF  31,AA
0CD2:  RCALL  095A
....................          y= (y>>1)+0x80000000;  
0CD4:  BCF    FD8.0
0CD6:  RRCF   34,W
0CD8:  MOVWF  xAE
0CDA:  RRCF   33,W
0CDC:  MOVWF  xAD
0CDE:  RRCF   32,W
0CE0:  MOVWF  xAC
0CE2:  RRCF   31,W
0CE4:  MOVWF  31
0CE6:  MOVFF  AC,32
0CEA:  MOVFF  AD,33
0CEE:  MOVLW  80
0CF0:  ADDWF  xAE,W
0CF2:  MOVWF  34
....................          delay_chon(dl,chondelay);       
0CF4:  MOVFF  A8,AA
0CF8:  MOVFF  A9,AB
0CFC:  RCALL  0A62
....................       } 
0CFE:  BRA    0D30
....................       else 
....................       if (dem_led<64) 
0D00:  MOVF   53,W
0D02:  SUBLW  3F
0D04:  BNC   0D2E
....................       {   
....................          xuat_32led_don_1dw(y);  
0D06:  MOVFF  34,AD
0D0A:  MOVFF  33,AC
0D0E:  MOVFF  32,AB
0D12:  MOVFF  31,AA
0D16:  RCALL  095A
....................          y= (y>>1); 
0D18:  BCF    FD8.0
0D1A:  RRCF   34,F
0D1C:  RRCF   33,F
0D1E:  RRCF   32,F
0D20:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
0D22:  MOVFF  A8,AA
0D26:  MOVFF  A9,AB
0D2A:  RCALL  0A62
....................       }  
0D2C:  BRA    0D30
....................       else reset_toan_bo_bien(); 
0D2E:  RCALL  099A
0D30:  GOTO   0FBC (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
0B58:  BTFSC  54.7
0B5A:  BRA    0BD6
0B5C:  MOVF   54,W
0B5E:  SUBLW  00
0B60:  BC    0BD6
....................    { 
....................       if(j32<i32) 
0B62:  MOVF   55,W
0B64:  XORLW  80
0B66:  MOVWF  00
0B68:  MOVF   54,W
0B6A:  XORLW  80
0B6C:  SUBWF  00,W
0B6E:  BC    0BB0
....................       { 
....................          y = y_codinh|yp_chay; 
0B70:  MOVF   3D,W
0B72:  IORWF  35,W
0B74:  MOVWF  31
0B76:  MOVF   3E,W
0B78:  IORWF  36,W
0B7A:  MOVWF  32
0B7C:  MOVF   3F,W
0B7E:  IORWF  37,W
0B80:  MOVWF  33
0B82:  MOVF   40,W
0B84:  IORWF  38,W
0B86:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
0B88:  MOVFF  34,AD
0B8C:  MOVFF  33,AC
0B90:  MOVFF  32,AB
0B94:  MOVFF  31,AA
0B98:  RCALL  095A
....................          delay_chon(dl,chondelay);        
0B9A:  MOVFF  A8,AA
0B9E:  MOVFF  A9,AB
0BA2:  RCALL  0A62
....................          yp_chay = yp_chay <<1; 
0BA4:  BCF    FD8.0
0BA6:  RLCF   35,F
0BA8:  RLCF   36,F
0BAA:  RLCF   37,F
0BAC:  RLCF   38,F
....................          j32++; 
0BAE:  INCF   55,F
....................       } 
....................       if (j32==i32)  
0BB0:  MOVF   54,W
0BB2:  SUBWF  55,W
0BB4:  BNZ   0BD4
....................       { 
....................          i32--; 
0BB6:  DECF   54,F
....................          j32=0;          
0BB8:  CLRF   55
....................          y_codinh=y; 
0BBA:  MOVFF  34,40
0BBE:  MOVFF  33,3F
0BC2:  MOVFF  32,3E
0BC6:  MOVFF  31,3D
....................          yp_chay = 1; 
0BCA:  CLRF   38
0BCC:  CLRF   37
0BCE:  CLRF   36
0BD0:  MOVLW  01
0BD2:  MOVWF  35
....................       } 
....................    } 
0BD4:  BRA    0BD8
....................    else reset_toan_bo_bien(); 
0BD6:  RCALL  099A
0BD8:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
01EA:  BSF    x73.0
01EC:  MOVFF  73,AF
01F0:  MOVFF  AE,B0
01F4:  RCALL  01DA
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
01F6:  BCF    x73.0
01F8:  MOVFF  73,AF
01FC:  MOVFF  AE,B0
0200:  RCALL  01DA
0202:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0204:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0206:  MOVFF  AD,AE
020A:  RCALL  01EA
....................       delay_us(20); 
020C:  MOVLW  21
020E:  MOVWF  00
0210:  DECFSZ 00,F
0212:  BRA    0210
0214:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0284:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0286:  MOVFF  AC,AE
028A:  RCALL  01EA
....................       delay_us(20); 
028C:  MOVLW  21
028E:  MOVWF  00
0290:  DECFSZ 00,F
0292:  BRA    0290
0294:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
023C:  BCF    x73.0
....................          lcd_rw = 0;  
023E:  BCF    x73.1
....................          lcd_rs = 1;  
0240:  BSF    x73.2
....................          lcd_p =0; 
0242:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
0244:  MOVLW  38
0246:  MOVWF  xAD
0248:  RCALL  0204
....................          delay_us(40); 
024A:  MOVLW  42
024C:  MOVWF  00
024E:  DECFSZ 00,F
0250:  BRA    024E
0252:  NOP   
....................          lcd_command(lcd_display_control);    
0254:  MOVLW  0C
0256:  MOVWF  xAD
0258:  RCALL  0204
....................          delay_us(40); 
025A:  MOVLW  42
025C:  MOVWF  00
025E:  DECFSZ 00,F
0260:  BRA    025E
0262:  NOP   
....................          lcd_command(lcd_clear_display);       
0264:  MOVLW  01
0266:  MOVWF  xAD
0268:  RCALL  0204
....................          delay_ms(2); 
026A:  MOVLW  02
026C:  MOVWF  xAD
026E:  RCALL  0216
....................          lcd_command(lcd_entry_mode);        
0270:  MOVLW  06
0272:  MOVWF  xAD
0274:  RCALL  0204
....................          delay_us(40);                 
0276:  MOVLW  42
0278:  MOVWF  00
027A:  DECFSZ 00,F
027C:  BRA    027A
027E:  NOP   
0280:  GOTO   0E28 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
0560:  CLRF   03
0562:  MOVF   xAA,W
0564:  RCALL  00E8
0566:  ADDWF  xAB,W
0568:  MOVWF  xAC
056A:  MOVWF  xAD
056C:  RCALL  0204
056E:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
....................  
....................  
.................... unsigned int8 hang4[20]; 
.................... unsigned int8 hang3[20]; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... unsigned int8 count = 0,countT = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
00FC:  INCF   x9D,F
....................    set_timer1(3036); //3036 
00FE:  MOVLW  0B
0100:  MOVWF  FCF
0102:  MOVLW  DC
0104:  MOVWF  FCE
0106:  BCF    F9E.0
0108:  GOTO   0060
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
02FE:  MOVFF  9C,A8
0302:  MOVLW  0A
0304:  MOVWF  xA9
0306:  RCALL  02B6
0308:  CLRF   03
030A:  MOVF   00,W
030C:  RCALL  00AE
030E:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0310:  MOVFF  9C,A8
0314:  MOVLW  0A
0316:  MOVWF  xA9
0318:  RCALL  02B6
031A:  CLRF   03
031C:  MOVF   01,W
031E:  RCALL  00AE
0320:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0322:  MOVFF  9E,A8
0326:  MOVLW  0A
0328:  MOVWF  xA9
032A:  RCALL  02B6
032C:  CLRF   03
032E:  MOVF   00,W
0330:  RCALL  00AE
0332:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0334:  MOVFF  9E,A8
0338:  MOVLW  0A
033A:  MOVWF  xA9
033C:  RCALL  02B6
033E:  CLRF   03
0340:  MOVF   01,W
0342:  RCALL  00AE
0344:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0346:  MOVFF  9F,A8
034A:  MOVLW  0A
034C:  MOVWF  xA9
034E:  RCALL  02B6
0350:  CLRF   03
0352:  MOVF   00,W
0354:  RCALL  00AE
0356:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0358:  MOVFF  9F,A8
035C:  MOVLW  0A
035E:  MOVWF  xA9
0360:  RCALL  02B6
0362:  CLRF   03
0364:  MOVF   01,W
0366:  RCALL  00AE
0368:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
036A:  DECFSZ xA3,W
036C:  BRA    0372
036E:  BCF    26.7
0370:  BRA    0384
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
0372:  MOVF   xA3,W
0374:  SUBLW  02
0376:  BNZ   037C
0378:  BCF    29.7
037A:  BRA    0384
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
037C:  MOVF   xA3,W
037E:  SUBLW  03
0380:  BNZ   0384
0382:  BCF    2C.7
0384:  RETURN 0
.................... } 
.................... void LCD_DISPLAY() { 
....................       sprintf(hang4,"%2dH:%2dM:%2dS",gio,phut,giay); 
*
0586:  CLRF   xA7
0588:  MOVLW  74
058A:  MOVWF  xA6
058C:  MOVFF  9F,AA
0590:  MOVLW  11
0592:  MOVWF  xAB
0594:  RCALL  04B6
0596:  MOVLW  48
0598:  MOVWF  xB0
059A:  RCALL  049A
059C:  MOVLW  3A
059E:  MOVWF  xB0
05A0:  RCALL  049A
05A2:  MOVFF  9E,AA
05A6:  MOVLW  11
05A8:  MOVWF  xAB
05AA:  RCALL  04B6
05AC:  MOVLW  4D
05AE:  MOVWF  xB0
05B0:  RCALL  049A
05B2:  MOVLW  3A
05B4:  MOVWF  xB0
05B6:  RCALL  049A
05B8:  MOVFF  9C,AA
05BC:  MOVLW  11
05BE:  MOVWF  xAB
05C0:  RCALL  04B6
05C2:  MOVLW  53
05C4:  MOVWF  xB0
05C6:  RCALL  049A
....................       sprintf(hang3,"%3d",count); 
05C8:  CLRF   xA7
05CA:  MOVLW  88
05CC:  MOVWF  xA6
05CE:  MOVFF  A4,AA
05D2:  MOVLW  13
05D4:  MOVWF  xAB
05D6:  RCALL  04B6
....................       lcd_goto_xy(3,5); 
05D8:  MOVLW  03
05DA:  MOVWF  xAA
05DC:  MOVLW  05
05DE:  MOVWF  xAB
05E0:  RCALL  0560
....................       for (int i = 0; i<10;i++)  {lcd_data(hang4[i]);} 
05E2:  CLRF   xA8
05E4:  MOVF   xA8,W
05E6:  SUBLW  09
05E8:  BNC   0602
05EA:  CLRF   03
05EC:  MOVF   xA8,W
05EE:  ADDLW  74
05F0:  MOVWF  FE9
05F2:  MOVLW  00
05F4:  ADDWFC 03,W
05F6:  MOVWF  FEA
05F8:  MOVFF  FEF,AC
05FC:  RCALL  0284
05FE:  INCF   xA8,F
0600:  BRA    05E4
....................       lcd_goto_xy(2,5); 
0602:  MOVLW  02
0604:  MOVWF  xAA
0606:  MOVLW  05
0608:  MOVWF  xAB
060A:  RCALL  0560
....................       lcd_data("ITEMS:"); 
060C:  MOVLW  0C
060E:  MOVWF  FF6
0610:  MOVLW  01
0612:  MOVWF  FF7
0614:  RCALL  0296
....................       lcd_goto_xy(2,11); 
0616:  MOVLW  02
0618:  MOVWF  xAA
061A:  MOVLW  0B
061C:  MOVWF  xAB
061E:  RCALL  0560
....................       for (int i = 0; i<3;i++) {lcd_data(hang3[i]); delay_quet_8led(1);} 
0620:  CLRF   xA9
0622:  MOVF   xA9,W
0624:  SUBLW  02
0626:  BNC   0648
0628:  CLRF   03
062A:  MOVF   xA9,W
062C:  ADDLW  88
062E:  MOVWF  FE9
0630:  MOVLW  00
0632:  ADDWFC 03,W
0634:  MOVWF  FEA
0636:  MOVFF  FEF,AC
063A:  RCALL  0284
063C:  CLRF   xAB
063E:  MOVLW  01
0640:  MOVWF  xAA
0642:  BRA    0570
0644:  INCF   xA9,F
0646:  BRA    0622
0648:  RETURN 0
.................... } 
....................  
.................... void phim_up(){ 
....................    if (phim_bt0(5)) { 
*
067C:  CLRF   xA9
067E:  MOVLW  05
0680:  MOVWF  xA8
0682:  BRA    064A
0684:  MOVF   01,F
0686:  BZ    06C6
....................          dem_tg_exit = 0; 
0688:  CLRF   xA0
....................          switch (mode) 
068A:  MOVF   xA3,W
068C:  XORLW  01
068E:  BZ    069A
0690:  XORLW  03
0692:  BZ    06A8
0694:  XORLW  01
0696:  BZ    06B6
0698:  BRA    06C4
....................          { 
....................             case 1: if (giay==59) giay =0; 
069A:  MOVF   x9C,W
069C:  SUBLW  3B
069E:  BNZ   06A4
06A0:  CLRF   x9C
06A2:  BRA    06A6
....................                     else giay++; 
06A4:  INCF   x9C,F
....................                     break; 
06A6:  BRA    06C4
....................             case 2: if (phut == 59) phut = 0; 
06A8:  MOVF   x9E,W
06AA:  SUBLW  3B
06AC:  BNZ   06B2
06AE:  CLRF   x9E
06B0:  BRA    06B4
....................                     else phut++; 
06B2:  INCF   x9E,F
....................                     break; 
06B4:  BRA    06C4
....................             case 3: if (gio == 23) gio = 0; 
06B6:  MOVF   x9F,W
06B8:  SUBLW  17
06BA:  BNZ   06C0
06BC:  CLRF   x9F
06BE:  BRA    06C2
....................                     else gio ++; 
06C0:  INCF   x9F,F
....................                     break; 
06C2:  BRA    06C4
....................             default: break; 
....................          } 
....................          giai_ma(); 
06C4:  RCALL  02FE
....................    } 
06C6:  GOTO   0EB8 (RETURN)
.................... } 
....................  
.................... void phim_dw(){ 
....................    if (phim_bt1(5)) { 
*
06FC:  CLRF   xA9
06FE:  MOVLW  05
0700:  MOVWF  xA8
0702:  BRA    06CA
0704:  MOVF   01,F
0706:  BZ    0746
....................          dem_tg_exit = 0; 
0708:  CLRF   xA0
....................          switch (mode) 
070A:  MOVF   xA3,W
070C:  XORLW  01
070E:  BZ    071A
0710:  XORLW  03
0712:  BZ    0728
0714:  XORLW  01
0716:  BZ    0736
0718:  BRA    0744
....................          { 
....................             case 1: if (giay==0) giay =59; 
071A:  MOVF   x9C,F
071C:  BNZ   0724
071E:  MOVLW  3B
0720:  MOVWF  x9C
0722:  BRA    0726
....................                     else giay--; 
0724:  DECF   x9C,F
....................                     break; 
0726:  BRA    0744
....................             case 2: if (phut == 0) phut = 59; 
0728:  MOVF   x9E,F
072A:  BNZ   0732
072C:  MOVLW  3B
072E:  MOVWF  x9E
0730:  BRA    0734
....................                     else phut--; 
0732:  DECF   x9E,F
....................                     break; 
0734:  BRA    0744
....................             case 3: if (gio == 0) gio = 23; 
0736:  MOVF   x9F,F
0738:  BNZ   0740
073A:  MOVLW  17
073C:  MOVWF  x9F
073E:  BRA    0742
....................                     else gio--; 
0740:  DECF   x9F,F
....................                     break; 
0742:  BRA    0744
....................             default: break;         
....................          }; 
....................          giai_ma(); 
0744:  RCALL  02FE
....................    } 
0746:  GOTO   0EBA (RETURN)
.................... } 
....................  
.................... void phim_mode(){ 
....................    if (phim_bt2(5)) { 
*
077C:  CLRF   xA9
077E:  MOVLW  05
0780:  MOVWF  xA8
0782:  BRA    074A
0784:  MOVF   01,F
0786:  BZ    0796
....................          mode++; 
0788:  INCF   xA3,F
....................          if (mode  >= 4){ 
078A:  MOVF   xA3,W
078C:  SUBLW  03
078E:  BC    0792
....................             mode = 0; 
0790:  CLRF   xA3
....................          } 
....................          dem_tg_exit = 0; 
0792:  CLRF   xA0
....................          giai_ma(); 
0794:  RCALL  02FE
....................       } 
0796:  GOTO   0EBC (RETURN)
.................... } 
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
*
0386:  DECFSZ xA3,W
0388:  BRA    0390
038A:  SETF   26
038C:  SETF   27
038E:  BRA    03A6
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
0390:  MOVF   xA3,W
0392:  SUBLW  02
0394:  BNZ   039C
0396:  SETF   29
0398:  SETF   2A
039A:  BRA    03A6
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
039C:  MOVF   xA3,W
039E:  SUBLW  03
03A0:  BNZ   03A6
03A2:  SETF   2C
03A4:  SETF   2D
03A6:  GOTO   0EAC (RETURN)
.................... } 
....................  
.................... void main() 
*
0D34:  CLRF   FF8
0D36:  BCF    FD0.7
0D38:  BSF    07.7
0D3A:  BSF    F93.1
0D3C:  BSF    F93.0
0D3E:  MOVLW  31
0D40:  MOVWF  FC8
0D42:  MOVLW  28
0D44:  MOVWF  FC6
0D46:  BSF    FC7.7
0D48:  BCF    FC7.6
0D4A:  CLRF   1B
0D4C:  CLRF   22
0D4E:  CLRF   23
0D50:  CLRF   24
0D52:  CLRF   25
0D54:  CLRF   2E
0D56:  CLRF   2F
0D58:  CLRF   30
0D5A:  CLRF   34
0D5C:  CLRF   33
0D5E:  CLRF   32
0D60:  CLRF   31
0D62:  CLRF   38
0D64:  CLRF   37
0D66:  CLRF   36
0D68:  MOVLW  01
0D6A:  MOVWF  35
0D6C:  MOVLW  80
0D6E:  MOVWF  3C
0D70:  CLRF   3B
0D72:  CLRF   3A
0D74:  CLRF   39
0D76:  CLRF   40
0D78:  CLRF   3F
0D7A:  CLRF   3E
0D7C:  CLRF   3D
0D7E:  MOVWF  44
0D80:  CLRF   43
0D82:  CLRF   46
0D84:  MOVLW  01
0D86:  MOVWF  45
0D88:  CLRF   48
0D8A:  CLRF   47
0D8C:  MOVLW  80
0D8E:  MOVWF  4C
0D90:  CLRF   4B
0D92:  CLRF   4E
0D94:  MOVLW  01
0D96:  MOVWF  4D
0D98:  CLRF   50
0D9A:  CLRF   4F
0D9C:  CLRF   52
0D9E:  CLRF   51
0DA0:  CLRF   53
0DA2:  MOVLW  20
0DA4:  MOVWF  54
0DA6:  CLRF   55
0DA8:  MOVLW  01
0DAA:  MOVWF  56
0DAC:  MOVLW  10
0DAE:  MOVWF  57
0DB0:  CLRF   58
0DB2:  CLRF   5C
0DB4:  CLRF   5B
0DB6:  CLRF   5A
0DB8:  MOVLW  01
0DBA:  MOVWF  59
0DBC:  CLRF   x60
0DBE:  CLRF   5F
0DC0:  CLRF   5E
0DC2:  MOVWF  5D
0DC4:  SETF   x64
0DC6:  SETF   x63
0DC8:  SETF   x62
0DCA:  MOVLW  FE
0DCC:  MOVWF  x61
0DCE:  MOVLW  80
0DD0:  MOVWF  x68
0DD2:  CLRF   x67
0DD4:  CLRF   x66
0DD6:  CLRF   x65
0DD8:  MOVWF  x6C
0DDA:  CLRF   x6B
0DDC:  CLRF   x6A
0DDE:  CLRF   x69
0DE0:  MOVLW  7F
0DE2:  MOVWF  x70
0DE4:  SETF   x6F
0DE6:  SETF   x6E
0DE8:  SETF   x6D
0DEA:  MOVLW  01
0DEC:  MOVWF  x71
0DEE:  MOVWF  x72
0DF0:  CLRF   xA0
0DF2:  CLRF   xA1
0DF4:  CLRF   xA2
0DF6:  CLRF   xA3
0DF8:  CLRF   xA4
0DFA:  CLRF   xA5
0DFC:  CLRF   xA7
0DFE:  CLRF   xA6
0E00:  MOVF   FC1,W
0E02:  ANDLW  C0
0E04:  IORLW  0F
0E06:  MOVWF  FC1
0E08:  MOVLW  07
0E0A:  MOVWF  FB4
0E0C:  SETF   26
0E0E:  SETF   27
0E10:  SETF   28
0E12:  SETF   29
0E14:  SETF   2A
0E16:  SETF   2B
0E18:  SETF   2C
0E1A:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
0E1C:  GOTO   0138
....................    set_tris_b(0x3c); 
0E20:  MOVLW  3C
0E22:  MOVWF  F93
....................    setup_lcd(); 
0E24:  GOTO   023C
....................  
....................    lcd_command(lcd_addr_line1); 
0E28:  MOVLW  80
0E2A:  MOVWF  xAD
0E2C:  CALL   0204
....................    lcd_data("    KHOA CK CTM"); 
0E30:  MOVLW  14
0E32:  MOVWF  FF6
0E34:  MOVLW  01
0E36:  MOVWF  FF7
0E38:  CALL   0296
....................  
....................    lcd_command(lcd_addr_line2); 
0E3C:  MOVLW  C0
0E3E:  MOVWF  xAD
0E40:  CALL   0204
....................    lcd_data("   TRUONG DH SPKT "); 
0E44:  MOVLW  24
0E46:  MOVWF  FF6
0E48:  MOVLW  01
0E4A:  MOVWF  FF7
0E4C:  CALL   0296
....................  
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
0E50:  MOVLW  A8
0E52:  MOVWF  FD5
....................    set_timer0(0);    
0E54:  CLRF   FD7
0E56:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0E58:  MOVLW  B5
0E5A:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
0E5C:  MOVLW  0B
0E5E:  MOVWF  FCF
0E60:  MOVLW  DC
0E62:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
0E64:  MOVLW  C0
0E66:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
0E68:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
0E6A:  CLRF   x9C
....................    bdn = 0; 
0E6C:  CLRF   x9D
....................    phut = 0; 
0E6E:  CLRF   x9E
....................    gio = 0; 
0E70:  CLRF   x9F
....................    giai_ma(); 
0E72:  CALL   02FE
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
0E76:  BTFSC  x9D.7
0E78:  BRA    0E82
0E7A:  MOVF   x9D,W
0E7C:  SUBLW  09
0E7E:  BTFSS  FD8.0
0E80:  BRA    0FDC
....................          if (mode !=0) 
0E82:  MOVF   xA3,F
0E84:  BZ    0EAC
....................          { 
....................             if ((bdn == 0 ) && (input(bt0))  && (input(bt1)) && (input(bt2))) tat_2_led_chinh(); 
0E86:  MOVF   x9D,F
0E88:  BNZ   0EA2
0E8A:  BSF    F93.5
0E8C:  BTFSS  F81.5
0E8E:  BRA    0EA2
0E90:  BSF    F93.4
0E92:  BTFSS  F81.4
0E94:  BRA    0EA2
0E96:  BSF    F93.3
0E98:  BTFSS  F81.3
0E9A:  BRA    0EA2
0E9C:  GOTO   0386
0EA0:  BRA    0EAC
....................             else if (bdn == 5) giai_ma(); 
0EA2:  MOVF   x9D,W
0EA4:  SUBLW  05
0EA6:  BTFSC  FD8.2
0EA8:  CALL   02FE
....................          } 
....................          hien_thi_8led_7doan_quet_all(); 
0EAC:  CALL   0440
....................          LCD_DISPLAY(); 
0EB0:  CALL   0586
....................          phim_up(); 
0EB4:  GOTO   067C
....................          phim_dw(); 
0EB8:  BRA    06FC
....................          phim_mode();          
0EBA:  BRA    077C
....................          count = get_timer0(); 
0EBC:  MOVF   FD6,W
0EBE:  MOVWF  xA4
....................          if (count != countT) { 
0EC0:  MOVF   xA5,W
0EC2:  SUBWF  xA4,W
0EC4:  BZ    0EDE
....................             countT = count; 
0EC6:  MOVFF  A4,A5
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
0ECA:  CLRF   xA9
0ECC:  MOVFF  A4,A8
0ED0:  BRA    0808
....................             if (count >= 101) set_timer0(1); 
0ED2:  MOVF   xA4,W
0ED4:  SUBLW  64
0ED6:  BC    0EDE
0ED8:  CLRF   FD7
0EDA:  MOVLW  01
0EDC:  MOVWF  FD6
....................          } 
....................          if(ttct_td==1) sang_tat_32led(2,1); 
0EDE:  DECFSZ 56,W
0EE0:  BRA    0EEC
0EE2:  MOVLW  02
0EE4:  MOVWF  xA8
0EE6:  MOVLW  01
0EE8:  MOVWF  xA9
0EEA:  RCALL  0A76
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
0EEC:  MOVF   56,W
0EEE:  SUBLW  02
0EF0:  BNZ   0EFC
0EF2:  MOVLW  05
0EF4:  MOVWF  xA8
0EF6:  MOVLW  01
0EF8:  MOVWF  xA9
0EFA:  RCALL  0ADA
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
0EFC:  MOVF   56,W
0EFE:  SUBLW  03
0F00:  BNZ   0F0C
0F02:  MOVLW  05
0F04:  MOVWF  xA8
0F06:  MOVLW  01
0F08:  MOVWF  xA9
0F0A:  RCALL  0B58
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
0F0C:  MOVF   56,W
0F0E:  SUBLW  04
0F10:  BNZ   0F1C
0F12:  MOVLW  05
0F14:  MOVWF  xA8
0F16:  MOVLW  01
0F18:  MOVWF  xA9
0F1A:  RCALL  0BDA
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
0F1C:  MOVF   56,W
0F1E:  SUBLW  05
0F20:  BNZ   0F2C
0F22:  MOVLW  05
0F24:  MOVWF  xA8
0F26:  MOVLW  01
0F28:  MOVWF  xA9
0F2A:  RCALL  0C5A
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
0F2C:  MOVF   56,W
0F2E:  SUBLW  06
0F30:  BNZ   0F3C
0F32:  MOVLW  05
0F34:  MOVWF  xA8
0F36:  MOVLW  01
0F38:  MOVWF  xA9
0F3A:  RCALL  0B58
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
0F3C:  MOVF   56,W
0F3E:  SUBLW  07
0F40:  BNZ   0F4C
0F42:  MOVLW  05
0F44:  MOVWF  xA8
0F46:  MOVLW  01
0F48:  MOVWF  xA9
0F4A:  RCALL  0B58
....................          if(ttct_td==8) sang_tat_32led(5,1); 
0F4C:  MOVF   56,W
0F4E:  SUBLW  08
0F50:  BNZ   0F5C
0F52:  MOVLW  05
0F54:  MOVWF  xA8
0F56:  MOVLW  01
0F58:  MOVWF  xA9
0F5A:  RCALL  0A76
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
0F5C:  MOVF   56,W
0F5E:  SUBLW  09
0F60:  BNZ   0F6C
0F62:  MOVLW  05
0F64:  MOVWF  xA8
0F66:  MOVLW  01
0F68:  MOVWF  xA9
0F6A:  RCALL  0ADA
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
0F6C:  MOVF   56,W
0F6E:  SUBLW  0A
0F70:  BNZ   0F7C
0F72:  MOVLW  05
0F74:  MOVWF  xA8
0F76:  MOVLW  01
0F78:  MOVWF  xA9
0F7A:  RCALL  0B58
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
0F7C:  MOVF   56,W
0F7E:  SUBLW  0B
0F80:  BNZ   0F8C
0F82:  MOVLW  05
0F84:  MOVWF  xA8
0F86:  MOVLW  01
0F88:  MOVWF  xA9
0F8A:  RCALL  0BDA
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
0F8C:  MOVF   56,W
0F8E:  SUBLW  0C
0F90:  BNZ   0F9C
0F92:  MOVLW  05
0F94:  MOVWF  xA8
0F96:  MOVLW  01
0F98:  MOVWF  xA9
0F9A:  RCALL  0C5A
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
0F9C:  MOVF   56,W
0F9E:  SUBLW  0D
0FA0:  BNZ   0FAC
0FA2:  MOVLW  05
0FA4:  MOVWF  xA8
0FA6:  MOVLW  01
0FA8:  MOVWF  xA9
0FAA:  RCALL  0BDA
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
0FAC:  MOVF   56,W
0FAE:  SUBLW  0E
0FB0:  BNZ   0FBC
0FB2:  MOVLW  05
0FB4:  MOVWF  xA8
0FB6:  MOVLW  01
0FB8:  MOVWF  xA9
0FBA:  BRA    0CBC
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
0FBC:  MOVF   56,W
0FBE:  SUBLW  0F
0FC0:  BNZ   0FCC
0FC2:  MOVLW  05
0FC4:  MOVWF  xA8
0FC6:  MOVLW  01
0FC8:  MOVWF  xA9
0FCA:  RCALL  0B58
....................          if(ttct_td>15) ttct_td =1; 
0FCC:  BTFSC  56.7
0FCE:  BRA    0FDA
0FD0:  MOVF   56,W
0FD2:  SUBLW  0F
0FD4:  BC    0FDA
0FD6:  MOVLW  01
0FD8:  MOVWF  56
....................           
....................  
....................       } 
0FDA:  BRA    1010
....................       else  
....................       { 
....................          bdn = bdn -10; 
0FDC:  MOVLW  0A
0FDE:  SUBWF  x9D,F
....................          dem_tg_exit++; 
0FE0:  INCF   xA0,F
....................          if (dem_tg_exit == 20) mode = 0; giay++; 
0FE2:  MOVF   xA0,W
0FE4:  SUBLW  14
0FE6:  BTFSC  FD8.2
0FE8:  CLRF   xA3
0FEA:  INCF   x9C,F
....................             if (giay==60) { giay = 0; phut++; 
0FEC:  MOVF   x9C,W
0FEE:  SUBLW  3C
0FF0:  BNZ   1008
0FF2:  CLRF   x9C
0FF4:  INCF   x9E,F
....................                if (phut == 60) { phut = 0; gio++;  
0FF6:  MOVF   x9E,W
0FF8:  SUBLW  3C
0FFA:  BNZ   1008
0FFC:  CLRF   x9E
0FFE:  INCF   x9F,F
....................                   if (gio == 24) gio = 0; 
1000:  MOVF   x9F,W
1002:  SUBLW  18
1004:  BNZ   1008
1006:  CLRF   x9F
....................                }  
....................             } 
....................          LCD_DISPLAY(); 
1008:  CALL   0586
....................          giai_ma(); 
100C:  CALL   02FE
....................       } 
1010:  BRA    0E76
....................    }            
.................... } 
....................  
1012:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
