CCS PCH C Compiler, Version 5.015, 5967               04-Jan-21 16:27

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK15\De_Giua_Ky\GiuaKy.lst

               ROM used:   13530 bytes (41%)
                           Largest free fragment is 19234
               RAM used:   1203 (59%) at main() level
                           1293 (63%) worst case
               Stack used: 18 locations (8 in main + 10 for interrupts)
               Stack size: 31

*
0000:  GOTO   3202
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0782
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA C0,F9
00B2:  DATA A4,B0
00B4:  DATA 99,92
00B6:  DATA 82,F8
00B8:  DATA 80,90
00BA:  DATA 88,83
00BC:  DATA C6,A1
00BE:  DATA 86,8E
00C0:  DATA 7F,C7
00C2:  MOVFF  FF2,0D
00C6:  BCF    FF2.7
00C8:  CLRF   FF7
00CA:  ADDLW  DC
00CC:  MOVWF  FF6
00CE:  MOVLW  00
00D0:  ADDWFC FF7,F
00D2:  TBLRD*+
00D4:  MOVF   FF5,W
00D6:  BTFSC  0D.7
00D8:  BSF    FF2.7
00DA:  RETURN 0
00DC:  DATA 7F,BF
00DE:  DATA DF,EF
00E0:  DATA F7,FB
00E2:  DATA FD,FE
00E4:  MOVFF  FF2,0D
00E8:  BCF    FF2.7
00EA:  CLRF   FF7
00EC:  ADDLW  FE
00EE:  MOVWF  FF6
00F0:  MOVLW  00
00F2:  ADDWFC FF7,F
00F4:  TBLRD*+
00F6:  MOVF   FF5,W
00F8:  BTFSC  0D.7
00FA:  BSF    FF2.7
00FC:  RETURN 0
00FE:  DATA 3F,7F
0100:  DATA BF,FF
0102:  BTFSS  07.7
0104:  BRA    010C
0106:  MOVFF  FF2,0D
010A:  BCF    FF2.7
010C:  CLRF   FF7
010E:  ADDLW  24
0110:  MOVWF  FF6
0112:  MOVLW  01
0114:  ADDWFC FF7,F
0116:  TBLRD*+
0118:  MOVF   FF5,W
011A:  BTFSS  07.7
011C:  BRA    0122
011E:  BTFSC  0D.7
0120:  BSF    FF2.7
0122:  RETURN 0
0124:  DATA 00,01
0126:  DATA 02,05
0128:  DATA 03,04
012A:  DATA 01,02
012C:  DATA 20,03
012E:  DATA 07,03
0130:  DATA 06,06
0132:  DATA 02,05
0134:  DATA 03,03
0136:  DATA 06,06
0138:  DATA 02,03
013A:  DATA 03,04
013C:  DATA 07,03
013E:  DATA 07,20
0140:  DATA 20,07
0142:  DATA 07,06
0144:  DATA 06,03
0146:  DATA 03,04
0148:  DATA 00,06
014A:  DATA 06,05
014C:  DATA 03,04
014E:  DATA 01,01
0150:  DATA 07,20
0152:  DATA 20,07
0154:  DATA 00,06
0156:  DATA 02,05
0158:  DATA 03,04
015A:  DATA 00,06
015C:  DATA 02,03
015E:  DATA 03,04
0160:  DATA 20,20
0162:  DATA 20,20
0164:  DATA 20,20
0166:  MOVFF  FF2,0D
016A:  BCF    FF2.7
016C:  CLRF   FF7
016E:  ADDLW  80
0170:  MOVWF  FF6
0172:  MOVLW  01
0174:  ADDWFC FF7,F
0176:  TBLRD*+
0178:  MOVF   FF5,W
017A:  BTFSC  0D.7
017C:  BSF    FF2.7
017E:  RETURN 0
0180:  DATA 07,0F
0182:  DATA 1F,1F
0184:  DATA 1F,1F
0186:  DATA 1F,1F
0188:  DATA 1F,1F
018A:  DATA 1F,00
018C:  DATA 00,00
018E:  DATA 00,00
0190:  DATA 1C,1E
0192:  DATA 1F,1F
0194:  DATA 1F,1F
0196:  DATA 1F,1F
0198:  DATA 00,00
019A:  DATA 00,00
019C:  DATA 00,1F
019E:  DATA 1F,1F
01A0:  DATA 1F,1F
01A2:  DATA 1F,1F
01A4:  DATA 1F,1F
01A6:  DATA 1E,1C
01A8:  DATA 1F,1F
01AA:  DATA 1F,1F
01AC:  DATA 1F,1F
01AE:  DATA 0F,07
01B0:  DATA 1F,1F
01B2:  DATA 1F,00
01B4:  DATA 00,00
01B6:  DATA 1F,1F
01B8:  DATA 1F,1F
01BA:  DATA 1F,1F
01BC:  DATA 1F,1F
01BE:  DATA 1F,1F
01C0:  BTFSS  07.7
01C2:  BRA    01CA
01C4:  MOVFF  FF2,0D
01C8:  BCF    FF2.7
01CA:  CLRF   FF7
01CC:  ADDLW  E2
01CE:  MOVWF  FF6
01D0:  MOVLW  01
01D2:  ADDWFC FF7,F
01D4:  TBLRD*+
01D6:  MOVF   FF5,W
01D8:  BTFSS  07.7
01DA:  BRA    01E0
01DC:  BTFSC  0D.7
01DE:  BSF    FF2.7
01E0:  RETURN 0
01E2:  DATA 80,C0
01E4:  DATA 94,D4
01E6:  MOVFF  FF2,0D
01EA:  BCF    FF2.7
01EC:  CLRF   FF7
01EE:  ADDLW  00
01F0:  MOVWF  FF6
01F2:  MOVLW  02
01F4:  ADDWFC FF7,F
01F6:  TBLRD*+
01F8:  MOVF   FF5,W
01FA:  BTFSC  0D.7
01FC:  BSF    FF2.7
01FE:  RETURN 0
0200:  DATA 00,00
0202:  DATA 00,00
0204:  DATA 00,00
0206:  DATA 00,5F
0208:  DATA 00,00
020A:  DATA 00,03
020C:  DATA 00,03
020E:  DATA 00,14
0210:  DATA 3E,14
0212:  DATA 3E,14
0214:  DATA 24,2A
0216:  DATA 7F,2A
0218:  DATA 12,43
021A:  DATA 33,08
021C:  DATA 66,61
021E:  DATA 36,49
0220:  DATA 55,22
0222:  DATA 50,00
0224:  DATA 05,03
0226:  DATA 00,00
0228:  DATA 00,1C
022A:  DATA 22,41
022C:  DATA 00,00
022E:  DATA 41,22
0230:  DATA 1C,00
0232:  DATA 14,08
0234:  DATA 3E,08
0236:  DATA 14,08
0238:  DATA 08,3E
023A:  DATA 08,08
023C:  DATA 00,50
023E:  DATA 30,00
0240:  DATA 00,08
0242:  DATA 08,08
0244:  DATA 08,08
0246:  DATA 00,60
0248:  DATA 60,00
024A:  DATA 00,20
024C:  DATA 10,08
024E:  DATA 04,02
0250:  DATA 3E,51
0252:  DATA 49,45
0254:  DATA 3E,00
0256:  DATA 04,02
0258:  DATA 7F,00
025A:  DATA 42,61
025C:  DATA 51,49
025E:  DATA 46,22
0260:  DATA 41,49
0262:  DATA 49,36
0264:  DATA 18,14
0266:  DATA 12,7F
0268:  DATA 10,27
026A:  DATA 45,45
026C:  DATA 45,39
026E:  DATA 3E,49
0270:  DATA 49,49
0272:  DATA 32,01
0274:  DATA 01,71
0276:  DATA 09,07
0278:  DATA 36,49
027A:  DATA 49,49
027C:  DATA 36,26
027E:  DATA 49,49
0280:  DATA 49,3E
0282:  DATA 00,36
0284:  DATA 36,00
0286:  DATA 00,00
0288:  DATA 56,36
028A:  DATA 00,00
028C:  DATA 08,14
028E:  DATA 22,41
0290:  DATA 00,14
0292:  DATA 14,14
0294:  DATA 14,14
0296:  DATA 00,41
0298:  DATA 22,14
029A:  DATA 08,02
029C:  DATA 01,51
029E:  DATA 09,06
02A0:  DATA 3E,41
02A2:  DATA 59,55
02A4:  DATA 5E,7E
02A6:  DATA 09,09
02A8:  DATA 09,7E
02AA:  DATA 7F,49
02AC:  DATA 49,49
02AE:  DATA 36,3E
02B0:  DATA 41,41
02B2:  DATA 41,22
02B4:  DATA 7F,41
02B6:  DATA 41,41
02B8:  DATA 3E,7F
02BA:  DATA 49,49
02BC:  DATA 49,41
02BE:  DATA 7F,09
02C0:  DATA 09,09
02C2:  DATA 01,3E
02C4:  DATA 41,41
02C6:  DATA 49,3A
02C8:  DATA 7F,08
02CA:  DATA 08,08
02CC:  DATA 7F,00
02CE:  DATA 41,7F
02D0:  DATA 41,00
02D2:  DATA 30,40
02D4:  DATA 40,40
02D6:  DATA 3F,7F
02D8:  DATA 08,14
02DA:  DATA 22,41
02DC:  DATA 7F,40
02DE:  DATA 40,40
02E0:  DATA 40,7F
02E2:  DATA 02,0C
02E4:  DATA 02,7F
02E6:  DATA 7F,02
02E8:  DATA 04,08
02EA:  DATA 7F,3E
02EC:  DATA 41,41
02EE:  DATA 41,3E
02F0:  DATA 7F,09
02F2:  DATA 09,09
02F4:  DATA 06,1E
02F6:  DATA 21,21
02F8:  DATA 21,5E
02FA:  DATA 7F,09
02FC:  DATA 09,09
02FE:  DATA 76,00
0300:  MOVFF  FF2,0D
0304:  BCF    FF2.7
0306:  CLRF   FF7
0308:  ADDLW  1A
030A:  MOVWF  FF6
030C:  MOVLW  03
030E:  ADDWFC FF7,F
0310:  TBLRD*+
0312:  MOVF   FF5,W
0314:  BTFSC  0D.7
0316:  BSF    FF2.7
0318:  RETURN 0
031A:  DATA 26,49
031C:  DATA 49,49
031E:  DATA 32,01
0320:  DATA 01,7F
0322:  DATA 01,01
0324:  DATA 3F,40
0326:  DATA 40,40
0328:  DATA 3F,1F
032A:  DATA 20,40
032C:  DATA 20,1F
032E:  DATA 7F,20
0330:  DATA 10,20
0332:  DATA 7F,41
0334:  DATA 22,1C
0336:  DATA 22,41
0338:  DATA 07,08
033A:  DATA 70,08
033C:  DATA 07,61
033E:  DATA 51,49
0340:  DATA 45,43
0342:  DATA 00,7F
0344:  DATA 41,00
0346:  DATA 00,02
0348:  DATA 04,08
034A:  DATA 10,20
034C:  DATA 00,00
034E:  DATA 41,7F
0350:  DATA 00,04
0352:  DATA 02,01
0354:  DATA 02,04
0356:  DATA 40,40
0358:  DATA 40,40
035A:  DATA 40,00
035C:  DATA 01,02
035E:  DATA 04,00
0360:  DATA 20,54
0362:  DATA 54,54
0364:  DATA 78,7F
0366:  DATA 44,44
0368:  DATA 44,38
036A:  DATA 38,44
036C:  DATA 44,44
036E:  DATA 44,38
0370:  DATA 44,44
0372:  DATA 44,7F
0374:  DATA 38,54
0376:  DATA 54,54
0378:  DATA 18,04
037A:  DATA 04,7E
037C:  DATA 05,05
037E:  DATA 08,54
0380:  DATA 54,54
0382:  DATA 3C,7F
0384:  DATA 08,04
0386:  DATA 04,78
0388:  DATA 00,44
038A:  DATA 7D,40
038C:  DATA 00,20
038E:  DATA 40,44
0390:  DATA 3D,00
0392:  DATA 7F,10
0394:  DATA 28,44
0396:  DATA 00,00
0398:  DATA 41,7F
039A:  DATA 40,00
039C:  DATA 7C,04
039E:  DATA 78,04
03A0:  DATA 78,7C
03A2:  DATA 08,04
03A4:  DATA 04,78
03A6:  DATA 38,44
03A8:  DATA 44,44
03AA:  DATA 38,7C
03AC:  DATA 14,14
03AE:  DATA 14,08
03B0:  DATA 08,14
03B2:  DATA 14,14
03B4:  DATA 7C,00
03B6:  DATA 7C,08
03B8:  DATA 04,04
03BA:  DATA 48,54
03BC:  DATA 54,54
03BE:  DATA 20,04
03C0:  DATA 04,3F
03C2:  DATA 44,44
03C4:  DATA 3C,40
03C6:  DATA 40,20
03C8:  DATA 7C,1C
03CA:  DATA 20,40
03CC:  DATA 20,1C
03CE:  DATA 3C,40
03D0:  DATA 30,40
03D2:  DATA 3C,44
03D4:  DATA 28,10
03D6:  DATA 28,44
03D8:  DATA 0C,50
03DA:  DATA 50,50
03DC:  DATA 3C,44
03DE:  DATA 64,54
03E0:  DATA 4C,44
03E2:  DATA 00,08
03E4:  DATA 36,41
03E6:  DATA 41,00
03E8:  DATA 00,7F
03EA:  DATA 00,00
03EC:  DATA 41,41
03EE:  DATA 36,08
03F0:  DATA 00,02
03F2:  DATA 01,02
03F4:  DATA 04,02
03F6:  DATA 20,20
03F8:  DATA 20,20
03FA:  DATA 20,20
03FC:  DATA 00,00
03FE:  DATA 20,20
0400:  DATA 20,20
0402:  DATA 20,20
0404:  DATA 00,00
0406:  DATA 20,20
0408:  DATA 20,20
040A:  DATA 20,20
040C:  DATA 00,00
040E:  DATA 20,20
0410:  DATA 20,20
0412:  DATA 20,20
0414:  DATA 00,00
0416:  DATA 20,20
0418:  DATA 20,20
041A:  DATA 20,20
041C:  DATA 00,00
041E:  DATA 20,20
0420:  DATA 20,20
0422:  DATA 20,20
0424:  DATA 00,00
*
060E:  TBLRD*+
0610:  MOVF   FF5,F
0612:  BZ    062C
0614:  MOVFF  FF6,500
0618:  MOVFF  FF7,501
061C:  MOVFF  FF5,503
0620:  RCALL  05F8
0622:  MOVFF  500,FF6
0626:  MOVFF  501,FF7
062A:  BRA    060E
062C:  RETURN 0
*
0662:  CLRF   00
0664:  CLRF   01
0666:  MOVLB  5
0668:  MOVF   x02,W
066A:  BCF    FD8.0
066C:  BTFSC  x03.0
066E:  ADDWF  00,F
0670:  RRCF   00,F
0672:  RRCF   01,F
0674:  BTFSC  x03.1
0676:  ADDWF  00,F
0678:  RRCF   00,F
067A:  RRCF   01,F
067C:  BTFSC  x03.2
067E:  ADDWF  00,F
0680:  RRCF   00,F
0682:  RRCF   01,F
0684:  BTFSC  x03.3
0686:  ADDWF  00,F
0688:  RRCF   00,F
068A:  RRCF   01,F
068C:  BTFSC  x03.4
068E:  ADDWF  00,F
0690:  RRCF   00,F
0692:  RRCF   01,F
0694:  BTFSC  x03.5
0696:  ADDWF  00,F
0698:  RRCF   00,F
069A:  RRCF   01,F
069C:  BTFSC  x03.6
069E:  ADDWF  00,F
06A0:  RRCF   00,F
06A2:  RRCF   01,F
06A4:  BTFSC  x03.7
06A6:  ADDWF  00,F
06A8:  RRCF   00,F
06AA:  RRCF   01,F
06AC:  MOVLB  0
06AE:  RETURN 0
*
0962:  MOVLB  4
0964:  MOVF   xD3,W
0966:  MULWF  xD5
0968:  MOVFF  FF3,01
096C:  MOVFF  FF4,00
0970:  MULWF  xD6
0972:  MOVF   FF3,W
0974:  ADDWF  00,F
0976:  MOVF   xD4,W
0978:  MULWF  xD5
097A:  MOVF   FF3,W
097C:  ADDWFC 00,W
097E:  MOVWF  02
0980:  MOVLB  0
0982:  RETURN 0
*
10AC:  CLRF   01
10AE:  CLRF   02
10B0:  CLRF   00
10B2:  CLRF   03
10B4:  MOVLB  4
10B6:  MOVF   xBC,W
10B8:  BNZ   10BE
10BA:  MOVF   xBB,W
10BC:  BZ    10EE
10BE:  MOVLW  10
10C0:  MOVWF  xBD
10C2:  BCF    FD8.0
10C4:  RLCF   xB9,F
10C6:  RLCF   xBA,F
10C8:  RLCF   00,F
10CA:  RLCF   03,F
10CC:  MOVF   xBC,W
10CE:  SUBWF  03,W
10D0:  BNZ   10D6
10D2:  MOVF   xBB,W
10D4:  SUBWF  00,W
10D6:  BNC   10E6
10D8:  MOVF   xBB,W
10DA:  SUBWF  00,F
10DC:  BTFSS  FD8.0
10DE:  DECF   03,F
10E0:  MOVF   xBC,W
10E2:  SUBWF  03,F
10E4:  BSF    FD8.0
10E6:  RLCF   01,F
10E8:  RLCF   02,F
10EA:  DECFSZ xBD,F
10EC:  BRA    10C2
10EE:  MOVLB  0
10F0:  RETURN 0
10F2:  MOVLW  8E
10F4:  MOVWF  00
10F6:  MOVFF  4EE,01
10FA:  MOVFF  4ED,02
10FE:  CLRF   03
1100:  MOVF   01,F
1102:  BNZ   1116
1104:  MOVFF  02,01
1108:  CLRF   02
110A:  MOVLW  08
110C:  SUBWF  00,F
110E:  MOVF   01,F
1110:  BNZ   1116
1112:  CLRF   00
1114:  BRA    1126
1116:  BCF    FD8.0
1118:  BTFSC  01.7
111A:  BRA    1124
111C:  RLCF   02,F
111E:  RLCF   01,F
1120:  DECF   00,F
1122:  BRA    1116
1124:  BCF    01.7
1126:  RETURN 0
1128:  MOVFF  4EA,4F1
112C:  MOVLB  4
112E:  MOVF   xEE,W
1130:  XORWF  xF1,F
1132:  BTFSS  xF1.7
1134:  BRA    1140
1136:  BCF    FD8.2
1138:  BCF    FD8.0
113A:  BTFSC  xEA.7
113C:  BSF    FD8.0
113E:  BRA    119E
1140:  MOVFF  4EA,4F1
1144:  MOVFF  4ED,4F2
1148:  MOVF   xE9,W
114A:  SUBWF  xF2,F
114C:  BZ    115A
114E:  BTFSS  xF1.7
1150:  BRA    119E
1152:  MOVF   FD8,W
1154:  XORLW  01
1156:  MOVWF  FD8
1158:  BRA    119E
115A:  MOVFF  4EE,4F2
115E:  MOVF   xEA,W
1160:  SUBWF  xF2,F
1162:  BZ    1170
1164:  BTFSS  xF1.7
1166:  BRA    119E
1168:  MOVF   FD8,W
116A:  XORLW  01
116C:  MOVWF  FD8
116E:  BRA    119E
1170:  MOVFF  4EF,4F2
1174:  MOVF   xEB,W
1176:  SUBWF  xF2,F
1178:  BZ    1186
117A:  BTFSS  xF1.7
117C:  BRA    119E
117E:  MOVF   FD8,W
1180:  XORLW  01
1182:  MOVWF  FD8
1184:  BRA    119E
1186:  MOVFF  4F0,4F2
118A:  MOVF   xEC,W
118C:  SUBWF  xF2,F
118E:  BZ    119C
1190:  BTFSS  xF1.7
1192:  BRA    119E
1194:  MOVF   FD8,W
1196:  XORLW  01
1198:  MOVWF  FD8
119A:  BRA    119E
119C:  BCF    FD8.0
119E:  MOVLB  0
11A0:  RETURN 0
11A2:  MOVLB  4
11A4:  MOVF   xE2,W
11A6:  BTFSC  FD8.2
11A8:  BRA    12F4
11AA:  MOVWF  xEE
11AC:  MOVF   xE6,W
11AE:  BTFSC  FD8.2
11B0:  BRA    12F4
11B2:  SUBWF  xEE,F
11B4:  BNC   11C0
11B6:  MOVLW  7F
11B8:  ADDWF  xEE,F
11BA:  BTFSC  FD8.0
11BC:  BRA    12F4
11BE:  BRA    11CC
11C0:  MOVLW  81
11C2:  SUBWF  xEE,F
11C4:  BTFSS  FD8.0
11C6:  BRA    12F4
11C8:  BTFSC  FD8.2
11CA:  BRA    12F4
11CC:  MOVFF  4EE,00
11D0:  CLRF   01
11D2:  CLRF   02
11D4:  CLRF   03
11D6:  CLRF   xED
11D8:  MOVFF  4E3,4EC
11DC:  BSF    xEC.7
11DE:  MOVFF  4E4,4EB
11E2:  MOVFF  4E5,4EA
11E6:  MOVLW  19
11E8:  MOVWF  xEE
11EA:  MOVF   xE9,W
11EC:  SUBWF  xEA,F
11EE:  BC    120A
11F0:  MOVLW  01
11F2:  SUBWF  xEB,F
11F4:  BC    120A
11F6:  SUBWF  xEC,F
11F8:  BC    120A
11FA:  SUBWF  xED,F
11FC:  BC    120A
11FE:  INCF   xED,F
1200:  INCF   xEC,F
1202:  INCF   xEB,F
1204:  MOVF   xE9,W
1206:  ADDWF  xEA,F
1208:  BRA    125A
120A:  MOVF   xE8,W
120C:  SUBWF  xEB,F
120E:  BC    1234
1210:  MOVLW  01
1212:  SUBWF  xEC,F
1214:  BC    1234
1216:  SUBWF  xED,F
1218:  BC    1234
121A:  INCF   xED,F
121C:  INCF   xEC,F
121E:  MOVF   xE8,W
1220:  ADDWF  xEB,F
1222:  MOVF   xE9,W
1224:  ADDWF  xEA,F
1226:  BNC   125A
1228:  INCF   xEB,F
122A:  BNZ   125A
122C:  INCF   xEC,F
122E:  BNZ   125A
1230:  INCF   xED,F
1232:  BRA    125A
1234:  MOVF   xE7,W
1236:  IORLW  80
1238:  SUBWF  xEC,F
123A:  BC    1258
123C:  MOVLW  01
123E:  SUBWF  xED,F
1240:  BC    1258
1242:  INCF   xED,F
1244:  MOVF   xE7,W
1246:  IORLW  80
1248:  ADDWF  xEC,F
124A:  MOVF   xE8,W
124C:  ADDWF  xEB,F
124E:  BNC   1222
1250:  INCF   xEC,F
1252:  BNZ   1222
1254:  INCF   xED,F
1256:  BRA    1222
1258:  BSF    03.0
125A:  DECFSZ xEE,F
125C:  BRA    1260
125E:  BRA    1276
1260:  BCF    FD8.0
1262:  RLCF   xEA,F
1264:  RLCF   xEB,F
1266:  RLCF   xEC,F
1268:  RLCF   xED,F
126A:  BCF    FD8.0
126C:  RLCF   03,F
126E:  RLCF   02,F
1270:  RLCF   01,F
1272:  RLCF   xEF,F
1274:  BRA    11EA
1276:  BTFSS  xEF.0
1278:  BRA    1286
127A:  BCF    FD8.0
127C:  RRCF   01,F
127E:  RRCF   02,F
1280:  RRCF   03,F
1282:  RRCF   xEF,F
1284:  BRA    128A
1286:  DECF   00,F
1288:  BZ    12F4
128A:  BTFSC  xEF.7
128C:  BRA    12CA
128E:  BCF    FD8.0
1290:  RLCF   xEA,F
1292:  RLCF   xEB,F
1294:  RLCF   xEC,F
1296:  RLCF   xED,F
1298:  MOVF   xE9,W
129A:  SUBWF  xEA,F
129C:  BC    12AC
129E:  MOVLW  01
12A0:  SUBWF  xEB,F
12A2:  BC    12AC
12A4:  SUBWF  xEC,F
12A6:  BC    12AC
12A8:  SUBWF  xED,F
12AA:  BNC   12E0
12AC:  MOVF   xE8,W
12AE:  SUBWF  xEB,F
12B0:  BC    12BC
12B2:  MOVLW  01
12B4:  SUBWF  xEC,F
12B6:  BC    12BC
12B8:  SUBWF  xED,F
12BA:  BNC   12E0
12BC:  MOVF   xE7,W
12BE:  IORLW  80
12C0:  SUBWF  xEC,F
12C2:  BC    12CA
12C4:  MOVLW  01
12C6:  SUBWF  xED,F
12C8:  BNC   12E0
12CA:  INCF   03,F
12CC:  BNZ   12E0
12CE:  INCF   02,F
12D0:  BNZ   12E0
12D2:  INCF   01,F
12D4:  BNZ   12E0
12D6:  INCF   00,F
12D8:  BZ    12F4
12DA:  RRCF   01,F
12DC:  RRCF   02,F
12DE:  RRCF   03,F
12E0:  MOVFF  4E3,4EE
12E4:  MOVF   xE7,W
12E6:  XORWF  xEE,F
12E8:  BTFSS  xEE.7
12EA:  BRA    12F0
12EC:  BSF    01.7
12EE:  BRA    12FC
12F0:  BCF    01.7
12F2:  BRA    12FC
12F4:  CLRF   00
12F6:  CLRF   01
12F8:  CLRF   02
12FA:  CLRF   03
12FC:  MOVLB  0
12FE:  RETURN 0
1300:  MOVLW  8E
1302:  MOVWF  00
1304:  MOVLB  4
1306:  MOVF   xE9,W
1308:  SUBWF  00,F
130A:  MOVFF  4EA,02
130E:  MOVFF  4EB,01
1312:  BSF    02.7
1314:  MOVF   00,F
1316:  BZ    132A
1318:  BCF    FD8.0
131A:  MOVF   02,F
131C:  BNZ   1322
131E:  MOVF   01,F
1320:  BZ    132A
1322:  RRCF   02,F
1324:  RRCF   01,F
1326:  DECFSZ 00,F
1328:  BRA    1318
132A:  BTFSS  xEA.7
132C:  BRA    1338
132E:  COMF   01,F
1330:  COMF   02,F
1332:  INCF   01,F
1334:  BTFSC  FD8.2
1336:  INCF   02,F
1338:  MOVLB  0
133A:  RETURN 0
133C:  MOVLB  4
133E:  MOVF   xE9,W
1340:  BTFSC  FD8.2
1342:  BRA    1426
1344:  MOVWF  00
1346:  MOVF   xED,W
1348:  BTFSC  FD8.2
134A:  BRA    1426
134C:  ADDWF  00,F
134E:  BNC   1358
1350:  MOVLW  81
1352:  ADDWF  00,F
1354:  BC    1426
1356:  BRA    1360
1358:  MOVLW  7F
135A:  SUBWF  00,F
135C:  BNC   1426
135E:  BZ    1426
1360:  MOVFF  4EA,4F1
1364:  MOVF   xEE,W
1366:  XORWF  xF1,F
1368:  BSF    xEA.7
136A:  BSF    xEE.7
136C:  MOVF   xEC,W
136E:  MULWF  xF0
1370:  MOVFF  FF4,4F3
1374:  MOVF   xEB,W
1376:  MULWF  xEF
1378:  MOVFF  FF4,03
137C:  MOVFF  FF3,4F2
1380:  MULWF  xF0
1382:  MOVF   FF3,W
1384:  ADDWF  xF3,F
1386:  MOVF   FF4,W
1388:  ADDWFC xF2,F
138A:  MOVLW  00
138C:  ADDWFC 03,F
138E:  MOVF   xEC,W
1390:  MULWF  xEF
1392:  MOVF   FF3,W
1394:  ADDWF  xF3,F
1396:  MOVF   FF4,W
1398:  ADDWFC xF2,F
139A:  MOVLW  00
139C:  CLRF   02
139E:  ADDWFC 03,F
13A0:  ADDWFC 02,F
13A2:  MOVF   xEA,W
13A4:  MULWF  xF0
13A6:  MOVF   FF3,W
13A8:  ADDWF  xF2,F
13AA:  MOVF   FF4,W
13AC:  ADDWFC 03,F
13AE:  MOVLW  00
13B0:  ADDWFC 02,F
13B2:  MOVF   xEA,W
13B4:  MULWF  xEF
13B6:  MOVF   FF3,W
13B8:  ADDWF  03,F
13BA:  MOVF   FF4,W
13BC:  ADDWFC 02,F
13BE:  MOVLW  00
13C0:  CLRF   01
13C2:  ADDWFC 01,F
13C4:  MOVF   xEC,W
13C6:  MULWF  xEE
13C8:  MOVF   FF3,W
13CA:  ADDWF  xF2,F
13CC:  MOVF   FF4,W
13CE:  ADDWFC 03,F
13D0:  MOVLW  00
13D2:  ADDWFC 02,F
13D4:  ADDWFC 01,F
13D6:  MOVF   xEB,W
13D8:  MULWF  xEE
13DA:  MOVF   FF3,W
13DC:  ADDWF  03,F
13DE:  MOVF   FF4,W
13E0:  ADDWFC 02,F
13E2:  MOVLW  00
13E4:  ADDWFC 01,F
13E6:  MOVF   xEA,W
13E8:  MULWF  xEE
13EA:  MOVF   FF3,W
13EC:  ADDWF  02,F
13EE:  MOVF   FF4,W
13F0:  ADDWFC 01,F
13F2:  INCF   00,F
13F4:  BTFSC  01.7
13F6:  BRA    1402
13F8:  RLCF   xF2,F
13FA:  RLCF   03,F
13FC:  RLCF   02,F
13FE:  RLCF   01,F
1400:  DECF   00,F
1402:  MOVLW  00
1404:  BTFSS  xF2.7
1406:  BRA    141C
1408:  INCF   03,F
140A:  ADDWFC 02,F
140C:  ADDWFC 01,F
140E:  MOVF   01,W
1410:  BNZ   141C
1412:  MOVF   02,W
1414:  BNZ   141C
1416:  MOVF   03,W
1418:  BNZ   141C
141A:  INCF   00,F
141C:  BTFSC  xF1.7
141E:  BSF    01.7
1420:  BTFSS  xF1.7
1422:  BCF    01.7
1424:  BRA    142E
1426:  CLRF   00
1428:  CLRF   01
142A:  CLRF   02
142C:  CLRF   03
142E:  MOVLB  0
1430:  RETURN 0
1432:  MOVLW  80
1434:  BTFSS  FD8.1
1436:  BRA    143C
1438:  MOVLB  4
143A:  XORWF  xF2,F
143C:  MOVLB  4
143E:  CLRF   xF7
1440:  CLRF   xF8
1442:  MOVFF  4EE,4F6
1446:  MOVF   xF2,W
1448:  XORWF  xF6,F
144A:  MOVF   xED,W
144C:  BTFSC  FD8.2
144E:  BRA    160E
1450:  MOVWF  xF5
1452:  MOVWF  00
1454:  MOVF   xF1,W
1456:  BTFSC  FD8.2
1458:  BRA    1620
145A:  SUBWF  xF5,F
145C:  BTFSC  FD8.2
145E:  BRA    1566
1460:  BNC   14DE
1462:  MOVFF  4F2,4FB
1466:  BSF    xFB.7
1468:  MOVFF  4F3,4FA
146C:  MOVFF  4F4,4F9
1470:  CLRF   xF8
1472:  BCF    FD8.0
1474:  RRCF   xFB,F
1476:  RRCF   xFA,F
1478:  RRCF   xF9,F
147A:  RRCF   xF8,F
147C:  DECFSZ xF5,F
147E:  BRA    1470
1480:  BTFSS  xF6.7
1482:  BRA    148A
1484:  BSF    xF7.0
1486:  BRA    1648
1488:  BCF    xF7.0
148A:  BCF    xF5.0
148C:  BSF    xF7.4
148E:  MOVLW  04
1490:  MOVWF  FEA
1492:  MOVLW  F0
1494:  MOVWF  FE9
1496:  BRA    166E
1498:  BCF    xF7.4
149A:  BTFSC  xF6.7
149C:  BRA    14B2
149E:  BTFSS  xF5.0
14A0:  BRA    14C8
14A2:  RRCF   xFB,F
14A4:  RRCF   xFA,F
14A6:  RRCF   xF9,F
14A8:  RRCF   xF8,F
14AA:  INCF   00,F
14AC:  BTFSC  FD8.2
14AE:  BRA    163E
14B0:  BRA    14C8
14B2:  BTFSC  xFB.7
14B4:  BRA    14CE
14B6:  BCF    FD8.0
14B8:  RLCF   xF8,F
14BA:  RLCF   xF9,F
14BC:  RLCF   xFA,F
14BE:  RLCF   xFB,F
14C0:  DECF   00,F
14C2:  BTFSC  FD8.2
14C4:  BRA    163E
14C6:  BRA    14B2
14C8:  BSF    xF7.6
14CA:  BRA    15A6
14CC:  BCF    xF7.6
14CE:  MOVFF  4EE,4F6
14D2:  BTFSS  xEE.7
14D4:  BRA    14DA
14D6:  BSF    xFB.7
14D8:  BRA    1630
14DA:  BCF    xFB.7
14DC:  BRA    1630
14DE:  MOVFF  4F1,4F5
14E2:  MOVFF  4F1,00
14E6:  MOVF   xED,W
14E8:  SUBWF  xF5,F
14EA:  MOVFF  4EE,4FB
14EE:  BSF    xFB.7
14F0:  MOVFF  4EF,4FA
14F4:  MOVFF  4F0,4F9
14F8:  CLRF   xF8
14FA:  BCF    FD8.0
14FC:  RRCF   xFB,F
14FE:  RRCF   xFA,F
1500:  RRCF   xF9,F
1502:  RRCF   xF8,F
1504:  DECFSZ xF5,F
1506:  BRA    14F8
1508:  BTFSS  xF6.7
150A:  BRA    1512
150C:  BSF    xF7.1
150E:  BRA    1648
1510:  BCF    xF7.1
1512:  BCF    xF5.0
1514:  BSF    xF7.5
1516:  MOVLW  04
1518:  MOVWF  FEA
151A:  MOVLW  F4
151C:  MOVWF  FE9
151E:  BRA    166E
1520:  BCF    xF7.5
1522:  BTFSC  xF6.7
1524:  BRA    153A
1526:  BTFSS  xF5.0
1528:  BRA    1550
152A:  RRCF   xFB,F
152C:  RRCF   xFA,F
152E:  RRCF   xF9,F
1530:  RRCF   xF8,F
1532:  INCF   00,F
1534:  BTFSC  FD8.2
1536:  BRA    163E
1538:  BRA    1550
153A:  BTFSC  xFB.7
153C:  BRA    1556
153E:  BCF    FD8.0
1540:  RLCF   xF8,F
1542:  RLCF   xF9,F
1544:  RLCF   xFA,F
1546:  RLCF   xFB,F
1548:  DECF   00,F
154A:  BTFSC  FD8.2
154C:  BRA    163E
154E:  BRA    153A
1550:  BSF    xF7.7
1552:  BRA    15A6
1554:  BCF    xF7.7
1556:  MOVFF  4F2,4F6
155A:  BTFSS  xF2.7
155C:  BRA    1562
155E:  BSF    xFB.7
1560:  BRA    1630
1562:  BCF    xFB.7
1564:  BRA    1630
1566:  MOVFF  4F2,4FB
156A:  BSF    xFB.7
156C:  MOVFF  4F3,4FA
1570:  MOVFF  4F4,4F9
1574:  BTFSS  xF6.7
1576:  BRA    1580
1578:  BCF    xFB.7
157A:  BSF    xF7.2
157C:  BRA    1648
157E:  BCF    xF7.2
1580:  CLRF   xF8
1582:  BCF    xF5.0
1584:  MOVLW  04
1586:  MOVWF  FEA
1588:  MOVLW  F0
158A:  MOVWF  FE9
158C:  BRA    166E
158E:  BTFSC  xF6.7
1590:  BRA    15CA
1592:  MOVFF  4EE,4F6
1596:  BTFSS  xF5.0
1598:  BRA    15A6
159A:  RRCF   xFB,F
159C:  RRCF   xFA,F
159E:  RRCF   xF9,F
15A0:  RRCF   xF8,F
15A2:  INCF   00,F
15A4:  BZ    163E
15A6:  BTFSS  xF8.7
15A8:  BRA    15C0
15AA:  INCF   xF9,F
15AC:  BNZ   15C0
15AE:  INCF   xFA,F
15B0:  BNZ   15C0
15B2:  INCF   xFB,F
15B4:  BNZ   15C0
15B6:  RRCF   xFB,F
15B8:  RRCF   xFA,F
15BA:  RRCF   xF9,F
15BC:  INCF   00,F
15BE:  BZ    163E
15C0:  BTFSC  xF7.6
15C2:  BRA    14CC
15C4:  BTFSC  xF7.7
15C6:  BRA    1554
15C8:  BRA    1602
15CA:  MOVLW  80
15CC:  XORWF  xFB,F
15CE:  BTFSS  xFB.7
15D0:  BRA    15DA
15D2:  BRA    1648
15D4:  MOVFF  4F2,4F6
15D8:  BRA    15EE
15DA:  MOVFF  4EE,4F6
15DE:  MOVF   xFB,F
15E0:  BNZ   15EE
15E2:  MOVF   xFA,F
15E4:  BNZ   15EE
15E6:  MOVF   xF9,F
15E8:  BNZ   15EE
15EA:  CLRF   00
15EC:  BRA    1630
15EE:  BTFSC  xFB.7
15F0:  BRA    1602
15F2:  BCF    FD8.0
15F4:  RLCF   xF8,F
15F6:  RLCF   xF9,F
15F8:  RLCF   xFA,F
15FA:  RLCF   xFB,F
15FC:  DECFSZ 00,F
15FE:  BRA    15EE
1600:  BRA    163E
1602:  BTFSS  xF6.7
1604:  BRA    160A
1606:  BSF    xFB.7
1608:  BRA    1630
160A:  BCF    xFB.7
160C:  BRA    1630
160E:  MOVFF  4F1,00
1612:  MOVFF  4F2,4FB
1616:  MOVFF  4F3,4FA
161A:  MOVFF  4F4,4F9
161E:  BRA    1630
1620:  MOVFF  4ED,00
1624:  MOVFF  4EE,4FB
1628:  MOVFF  4EF,4FA
162C:  MOVFF  4F0,4F9
1630:  MOVFF  4FB,01
1634:  MOVFF  4FA,02
1638:  MOVFF  4F9,03
163C:  BRA    16A6
163E:  CLRF   00
1640:  CLRF   01
1642:  CLRF   02
1644:  CLRF   03
1646:  BRA    16A6
1648:  CLRF   xF8
164A:  COMF   xF9,F
164C:  COMF   xFA,F
164E:  COMF   xFB,F
1650:  COMF   xF8,F
1652:  INCF   xF8,F
1654:  BNZ   1660
1656:  INCF   xF9,F
1658:  BNZ   1660
165A:  INCF   xFA,F
165C:  BNZ   1660
165E:  INCF   xFB,F
1660:  BTFSC  xF7.0
1662:  BRA    1488
1664:  BTFSC  xF7.1
1666:  BRA    1510
1668:  BTFSC  xF7.2
166A:  BRA    157E
166C:  BRA    15D4
166E:  MOVF   FEF,W
1670:  ADDWF  xF9,F
1672:  BNC   167E
1674:  INCF   xFA,F
1676:  BNZ   167E
1678:  INCF   xFB,F
167A:  BTFSC  FD8.2
167C:  BSF    xF5.0
167E:  MOVF   FED,F
1680:  MOVF   FEF,W
1682:  ADDWF  xFA,F
1684:  BNC   168C
1686:  INCF   xFB,F
1688:  BTFSC  FD8.2
168A:  BSF    xF5.0
168C:  MOVF   FED,F
168E:  MOVF   FEF,W
1690:  BTFSC  FEF.7
1692:  BRA    1696
1694:  XORLW  80
1696:  ADDWF  xFB,F
1698:  BTFSC  FD8.0
169A:  BSF    xF5.0
169C:  BTFSC  xF7.4
169E:  BRA    1498
16A0:  BTFSC  xF7.5
16A2:  BRA    1520
16A4:  BRA    158E
16A6:  MOVLB  0
16A8:  RETURN 0
*
1B96:  MOVLW  8E
1B98:  MOVWF  00
1B9A:  MOVFF  4E0,01
1B9E:  MOVFF  4DF,02
1BA2:  CLRF   03
1BA4:  BTFSS  01.7
1BA6:  BRA    1BB2
1BA8:  COMF   01,F
1BAA:  COMF   02,F
1BAC:  INCF   02,F
1BAE:  BNZ   1BB2
1BB0:  INCF   01,F
1BB2:  MOVF   01,F
1BB4:  BNZ   1BC8
1BB6:  MOVFF  02,01
1BBA:  CLRF   02
1BBC:  MOVLW  08
1BBE:  SUBWF  00,F
1BC0:  MOVF   01,F
1BC2:  BNZ   1BC8
1BC4:  CLRF   00
1BC6:  BRA    1BE4
1BC8:  BCF    FD8.0
1BCA:  BTFSC  01.7
1BCC:  BRA    1BD6
1BCE:  RLCF   02,F
1BD0:  RLCF   01,F
1BD2:  DECF   00,F
1BD4:  BRA    1BC8
1BD6:  MOVLB  4
1BD8:  BTFSS  xE0.7
1BDA:  BRA    1BE0
1BDC:  MOVLB  0
1BDE:  BRA    1BE4
1BE0:  BCF    01.7
1BE2:  MOVLB  0
1BE4:  RETURN 0
*
2906:  MOVFF  FEA,4BB
290A:  MOVFF  FE9,4BA
290E:  MOVLB  4
2910:  BTFSS  xB4.7
2912:  BRA    2924
2914:  BSF    xBA.7
2916:  BTFSS  xBA.4
2918:  INCF   xBA,F
291A:  COMF   xB3,F
291C:  COMF   xB4,F
291E:  INCF   xB3,F
2920:  BTFSC  FD8.2
2922:  INCF   xB4,F
2924:  SWAPF  xB4,W
2926:  IORLW  F0
2928:  MOVWF  xB6
292A:  ADDWF  xB6,F
292C:  ADDLW  E2
292E:  MOVWF  xB7
2930:  ADDLW  32
2932:  MOVWF  xB9
2934:  MOVF   xB4,W
2936:  ANDLW  0F
2938:  ADDWF  xB7,F
293A:  ADDWF  xB7,F
293C:  ADDWF  xB9,F
293E:  ADDLW  E9
2940:  MOVWF  xB8
2942:  ADDWF  xB8,F
2944:  ADDWF  xB8,F
2946:  SWAPF  xB3,W
2948:  ANDLW  0F
294A:  ADDWF  xB8,F
294C:  ADDWF  xB9,F
294E:  RLCF   xB8,F
2950:  RLCF   xB9,F
2952:  COMF   xB9,F
2954:  RLCF   xB9,F
2956:  MOVF   xB3,W
2958:  ANDLW  0F
295A:  ADDWF  xB9,F
295C:  RLCF   xB6,F
295E:  MOVLW  07
2960:  MOVWF  xB5
2962:  MOVLW  0A
2964:  DECF   xB8,F
2966:  ADDWF  xB9,F
2968:  BNC   2964
296A:  DECF   xB7,F
296C:  ADDWF  xB8,F
296E:  BNC   296A
2970:  DECF   xB6,F
2972:  ADDWF  xB7,F
2974:  BNC   2970
2976:  DECF   xB5,F
2978:  ADDWF  xB6,F
297A:  BNC   2976
297C:  MOVLW  04
297E:  MOVWF  FEA
2980:  MOVLW  B5
2982:  MOVWF  FE9
2984:  MOVLW  07
2986:  ANDWF  xBA,W
2988:  BCF    xBA.6
298A:  MOVF   FED,F
298C:  ANDWF  xBA,W
298E:  BNZ   299E
2990:  BTFSC  xBA.4
2992:  MOVF   FEE,F
2994:  BTFSC  xBA.4
2996:  BRA    299E
2998:  MOVLW  20
299A:  MOVWF  00
299C:  BRA    29E0
299E:  ADDWF  FE9,F
29A0:  MOVLW  00
29A2:  ADDWFC FEA,F
29A4:  MOVF   FE9,W
29A6:  SUBLW  B9
29A8:  BNZ   29B2
29AA:  MOVF   FEA,W
29AC:  SUBLW  04
29AE:  BNZ   29B2
29B0:  BSF    xBA.6
29B2:  MOVF   FEF,W
29B4:  MOVWF  00
29B6:  BNZ   29C8
29B8:  BTFSC  xBA.6
29BA:  BRA    29C8
29BC:  BTFSC  xBA.4
29BE:  BRA    2A08
29C0:  BTFSC  xBA.3
29C2:  BRA    29C8
29C4:  MOVLW  20
29C6:  BRA    29DE
29C8:  BTFSS  xBA.7
29CA:  BRA    29D8
29CC:  MOVLW  2D
29CE:  MOVWF  00
29D0:  MOVF   FED,W
29D2:  BCF    xBA.6
29D4:  BCF    xBA.7
29D6:  BRA    29E0
29D8:  BSF    xBA.3
29DA:  BCF    xBA.4
29DC:  MOVLW  30
29DE:  ADDWF  00,F
29E0:  MOVFF  FEA,4B4
29E4:  MOVFF  FE9,4B3
29E8:  CLRF   16
29EA:  BTFSC  FF2.7
29EC:  BSF    16.7
29EE:  BCF    FF2.7
29F0:  MOVFF  00,503
29F4:  MOVLB  0
29F6:  CALL   05F8
29FA:  BTFSC  16.7
29FC:  BSF    FF2.7
29FE:  MOVFF  4B4,FEA
2A02:  MOVFF  4B3,FE9
2A06:  MOVLB  4
2A08:  MOVF   FEE,W
2A0A:  BTFSS  xBA.6
2A0C:  BRA    29A4
2A0E:  MOVLB  0
2A10:  RETURN 0
*
2BAE:  MOVLB  4
2BB0:  MOVF   xBA,W
2BB2:  CLRF   01
2BB4:  SUBWF  xB9,W
2BB6:  BC    2BBE
2BB8:  MOVFF  4B9,00
2BBC:  BRA    2BD6
2BBE:  CLRF   00
2BC0:  MOVLW  08
2BC2:  MOVWF  xBB
2BC4:  RLCF   xB9,F
2BC6:  RLCF   00,F
2BC8:  MOVF   xBA,W
2BCA:  SUBWF  00,W
2BCC:  BTFSC  FD8.0
2BCE:  MOVWF  00
2BD0:  RLCF   01,F
2BD2:  DECFSZ xBB,F
2BD4:  BRA    2BC4
2BD6:  MOVLB  0
2BD8:  RETURN 0
2BDA:  MOVFF  4B1,FEA
2BDE:  MOVFF  4B0,FE9
2BE2:  MOVLB  4
2BE4:  MOVFF  4B9,FEF
2BE8:  INCF   FE9,F
2BEA:  BTFSC  FD8.2
2BEC:  INCF   FEA,F
2BEE:  CLRF   FEF
2BF0:  INCF   xB0,F
2BF2:  BTFSC  FD8.2
2BF4:  INCF   xB1,F
2BF6:  MOVLB  0
2BF8:  RETURN 0
2BFA:  MOVLW  20
2BFC:  MOVLB  4
2BFE:  BTFSS  xB4.4
2C00:  MOVLW  30
2C02:  MOVWF  xB5
2C04:  MOVFF  4B3,00
2C08:  BTFSS  xB3.7
2C0A:  BRA    2C1C
2C0C:  COMF   00,F
2C0E:  INCF   00,F
2C10:  MOVFF  00,4B3
2C14:  MOVLW  2D
2C16:  MOVWF  xB5
2C18:  BSF    xB4.7
2C1A:  BSF    xB4.0
2C1C:  MOVF   01,W
2C1E:  MOVFF  4B3,4B9
2C22:  MOVLW  64
2C24:  MOVWF  xBA
2C26:  MOVLB  0
2C28:  RCALL  2BAE
2C2A:  MOVFF  00,4B3
2C2E:  MOVLW  30
2C30:  ADDWF  01,W
2C32:  MOVLB  4
2C34:  MOVWF  xB6
2C36:  MOVFF  4B3,4B9
2C3A:  MOVLW  0A
2C3C:  MOVWF  xBA
2C3E:  MOVLB  0
2C40:  RCALL  2BAE
2C42:  MOVLW  30
2C44:  ADDWF  00,W
2C46:  MOVLB  4
2C48:  MOVWF  xB8
2C4A:  MOVLW  30
2C4C:  ADDWF  01,W
2C4E:  MOVWF  xB7
2C50:  MOVFF  4B5,00
2C54:  MOVLW  30
2C56:  SUBWF  xB6,W
2C58:  BZ    2C62
2C5A:  BSF    xB4.1
2C5C:  BTFSC  xB4.7
2C5E:  BSF    xB4.2
2C60:  BRA    2C86
2C62:  MOVFF  4B5,4B6
2C66:  MOVLW  20
2C68:  MOVWF  xB5
2C6A:  MOVLW  30
2C6C:  SUBWF  xB7,W
2C6E:  BZ    2C78
2C70:  BSF    xB4.0
2C72:  BTFSC  xB4.7
2C74:  BSF    xB4.1
2C76:  BRA    2C86
2C78:  BTFSS  FD8.2
2C7A:  BSF    xB4.0
2C7C:  BNZ   2C86
2C7E:  MOVFF  4B6,4B7
2C82:  MOVLW  20
2C84:  MOVWF  xB6
2C86:  BTFSC  xB4.2
2C88:  BRA    2C94
2C8A:  BTFSC  xB4.1
2C8C:  BRA    2C9C
2C8E:  BTFSC  xB4.0
2C90:  BRA    2CA4
2C92:  BRA    2CAC
2C94:  MOVFF  4B5,4B9
2C98:  MOVLB  0
2C9A:  RCALL  2BDA
2C9C:  MOVFF  4B6,4B9
2CA0:  MOVLB  0
2CA2:  RCALL  2BDA
2CA4:  MOVFF  4B7,4B9
2CA8:  MOVLB  0
2CAA:  RCALL  2BDA
2CAC:  MOVFF  4B8,4B9
2CB0:  MOVLB  0
2CB2:  RCALL  2BDA
2CB4:  GOTO   2E8C (RETURN)
....................  
.................... #list 
....................  
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
0512:  MOVLW  04
0514:  MOVWF  FEA
0516:  MOVLW  FD
0518:  MOVWF  FE9
051A:  MOVF   FEF,W
051C:  BZ    0538
051E:  MOVLW  06
0520:  MOVWF  01
0522:  CLRF   00
0524:  DECFSZ 00,F
0526:  BRA    0524
0528:  DECFSZ 01,F
052A:  BRA    0522
052C:  MOVLW  7B
052E:  MOVWF  00
0530:  DECFSZ 00,F
0532:  BRA    0530
0534:  DECFSZ FEF,F
0536:  BRA    051E
0538:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[18]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111,0b11000111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
0426:  MOVFF  50A,50C
....................    for (sb=0;sb<8;sb++) 
042A:  MOVLB  5
042C:  CLRF   x0B
042E:  MOVF   x0B,W
0430:  SUBLW  07
0432:  BNC   0450
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0434:  BTFSC  x0C.7
0436:  BRA    043C
0438:  BCF    F8D.2
043A:  BRA    043E
043C:  BSF    F8D.2
043E:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
0440:  BCF    F96.0
0442:  BCF    F8D.0
0444:  BCF    F96.0
0446:  BSF    F8D.0
....................          x= x<<1;          
0448:  BCF    FD8.0
044A:  RLCF   x0C,F
044C:  INCF   x0B,F
044E:  BRA    042E
....................      } 
0450:  MOVLB  0
0452:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
....................       xuat_1byte(bld2); 
....................       xuat_1byte(bld1);           
....................       xuat_1byte(bld0);             
....................       mo_32_led_don;       
....................       mo_ic_74573_a_thong_dl();             
....................       output_high(rck_32led);    output_low(rck_32led); 
....................       chot_ic_74573_a_goi_du_lieu;       
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
....................      b1 = wld0>>8;  b0 = wld0; 
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
....................      xuat_32led_don_2word(wd1,wd0); 
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
07A8:  MOVLW  00
07AA:  MOVWF  F95
....................       set_tris_e(0x00); 
07AC:  MOVWF  F96
....................       output_d(0xff); 
07AE:  CLRF   F95
07B0:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
07B2:  SETF   17
....................       tin_hieu_dk_74573_b=0xff;       
07B4:  SETF   18
....................       chot_ic_74573_a_goi_du_lieu; 
07B6:  BCF    F95.1
07B8:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
07BA:  BCF    F95.0
07BC:  BCF    F8C.0
....................       rbdc=0; 
07BE:  CLRF   1B
07C0:  CLRF   1A
07C2:  GOTO   332C (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
053A:  CLRF   F95
053C:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
053E:  BTFSC  17.4
0540:  BRA    0546
0542:  BCF    F8C.4
0544:  BRA    0548
0546:  BSF    F8C.4
0548:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
054A:  BTFSC  17.6
054C:  BRA    0552
054E:  BCF    F8C.6
0550:  BRA    0554
0552:  BSF    F8C.6
0554:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
0556:  BTFSC  17.2
0558:  BRA    055E
055A:  BCF    F8C.2
055C:  BRA    0560
055E:  BSF    F8C.2
0560:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
0562:  BCF    F95.1
0564:  BSF    F8C.1
0566:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0454:  CLRF   F95
0456:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0458:  BTFSC  18.6
045A:  BRA    0460
045C:  BCF    F8C.6
045E:  BRA    0462
0460:  BSF    F8C.6
0462:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0464:  BTFSC  18.4
0466:  BRA    046C
0468:  BCF    F8C.4
046A:  BRA    046E
046C:  BSF    F8C.4
046E:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0470:  BTFSC  18.2
0472:  BRA    0478
0474:  BCF    F8C.2
0476:  BRA    047A
0478:  BSF    F8C.2
047A:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
047C:  BCF    F95.0
047E:  BSF    F8C.0
0480:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
*
085E:  CLRF   16
0860:  BTFSC  FF2.7
0862:  BSF    16.7
0864:  BCF    FF2.7
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
0866:  MOVFF  4B8,50A
086A:  RCALL  0426
086C:  BTFSC  16.7
086E:  BSF    FF2.7
0870:  CLRF   16
0872:  BTFSC  FF2.7
0874:  BSF    16.7
0876:  BCF    FF2.7
0878:  MOVFF  4B7,50A
087C:  RCALL  0426
087E:  BTFSC  16.7
0880:  BSF    FF2.7
0882:  CLRF   16
0884:  BTFSC  FF2.7
0886:  BSF    16.7
0888:  BCF    FF2.7
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
088A:  MOVFF  4B6,50A
088E:  RCALL  0426
0890:  BTFSC  16.7
0892:  BSF    FF2.7
0894:  CLRF   16
0896:  BTFSC  FF2.7
0898:  BSF    16.7
089A:  BCF    FF2.7
089C:  MOVFF  4B5,50A
08A0:  RCALL  0426
08A2:  BTFSC  16.7
08A4:  BSF    FF2.7
....................        
....................       mo_4_led_7doan; 
08A6:  BCF    17.6
....................       mo_ic_74573_a_thong_dl(); 
08A8:  RCALL  053A
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
08AA:  BCF    F95.7
08AC:  BCF    F8C.7
08AE:  BCF    F95.7
08B0:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
08B2:  BCF    F95.1
08B4:  BCF    F8C.1
08B6:  RETURN 0
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
*
3092:  MOVFF  4B4,4BA
3096:  MOVFF  4B3,4B9
309A:  MOVLB  4
309C:  CLRF   xBC
309E:  MOVLW  0A
30A0:  MOVWF  xBB
30A2:  MOVLB  0
30A4:  CALL   10AC
30A8:  MOVFF  00,4B5
30AC:  MOVLB  4
30AE:  MOVFF  03,4B6
30B2:  MOVFF  03,03
30B6:  MOVF   00,W
30B8:  MOVFF  FF2,4B7
30BC:  BCF    FF2.7
30BE:  MOVLB  0
30C0:  CALL   0096
30C4:  MOVLB  4
30C6:  BTFSC  xB7.7
30C8:  BSF    FF2.7
30CA:  MOVWF  1C
....................       chuc4  = ma7doan[tam/10%10]; 
30CC:  MOVFF  4B4,4BA
30D0:  MOVFF  4B3,4B9
30D4:  CLRF   xBC
30D6:  MOVLW  0A
30D8:  MOVWF  xBB
30DA:  MOVLB  0
30DC:  CALL   10AC
30E0:  MOVFF  02,4B6
30E4:  MOVFF  01,4B5
30E8:  MOVFF  02,4BA
30EC:  MOVFF  01,4B9
30F0:  MOVLB  4
30F2:  CLRF   xBC
30F4:  MOVLW  0A
30F6:  MOVWF  xBB
30F8:  MOVLB  0
30FA:  CALL   10AC
30FE:  MOVFF  00,4B5
3102:  MOVLB  4
3104:  MOVFF  03,4B6
3108:  MOVFF  03,03
310C:  MOVF   00,W
310E:  MOVFF  FF2,4B7
3112:  BCF    FF2.7
3114:  MOVLB  0
3116:  CALL   0096
311A:  MOVLB  4
311C:  BTFSC  xB7.7
311E:  BSF    FF2.7
3120:  MOVWF  1D
....................       tram4  = ma7doan[tam/100%10];  
3122:  MOVFF  4B4,4BA
3126:  MOVFF  4B3,4B9
312A:  CLRF   xBC
312C:  MOVLW  64
312E:  MOVWF  xBB
3130:  MOVLB  0
3132:  CALL   10AC
3136:  MOVFF  02,4B6
313A:  MOVFF  01,4B5
313E:  MOVFF  02,4BA
3142:  MOVFF  01,4B9
3146:  MOVLB  4
3148:  CLRF   xBC
314A:  MOVLW  0A
314C:  MOVWF  xBB
314E:  MOVLB  0
3150:  CALL   10AC
3154:  MOVFF  00,4B5
3158:  MOVLB  4
315A:  MOVFF  03,4B6
315E:  MOVFF  03,03
3162:  MOVF   00,W
3164:  MOVFF  FF2,4B7
3168:  BCF    FF2.7
316A:  MOVLB  0
316C:  CALL   0096
3170:  MOVLB  4
3172:  BTFSC  xB7.7
3174:  BSF    FF2.7
3176:  MOVWF  1E
....................       ngan4  = ma7doan[tam/1000%10];        
3178:  MOVFF  4B4,4BA
317C:  MOVFF  4B3,4B9
3180:  MOVLW  03
3182:  MOVWF  xBC
3184:  MOVLW  E8
3186:  MOVWF  xBB
3188:  MOVLB  0
318A:  CALL   10AC
318E:  MOVFF  02,4B6
3192:  MOVFF  01,4B5
3196:  MOVFF  02,4BA
319A:  MOVFF  01,4B9
319E:  MOVLB  4
31A0:  CLRF   xBC
31A2:  MOVLW  0A
31A4:  MOVWF  xBB
31A6:  MOVLB  0
31A8:  CALL   10AC
31AC:  MOVFF  00,4B5
31B0:  MOVLB  4
31B2:  MOVFF  03,4B6
31B6:  MOVFF  03,03
31BA:  MOVF   00,W
31BC:  MOVFF  FF2,4B7
31C0:  BCF    FF2.7
31C2:  MOVLB  0
31C4:  CALL   0096
31C8:  MOVLB  4
31CA:  BTFSC  xB7.7
31CC:  BSF    FF2.7
31CE:  MOVWF  1F
....................       if (ngan4==0xc0) 
31D0:  MOVF   1F,W
31D2:  SUBLW  C0
31D4:  BNZ   31E8
....................       { 
....................          ngan4=0xff; 
31D6:  SETF   1F
....................          if (tram4==0xc0) 
31D8:  MOVF   1E,W
31DA:  SUBLW  C0
31DC:  BNZ   31E8
....................          { 
....................             tram4=0xff; 
31DE:  SETF   1E
....................             if (chuc4==0xc0)   chuc4=0xff; 
31E0:  MOVF   1D,W
31E2:  SUBLW  C0
31E4:  BNZ   31E8
31E6:  SETF   1D
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
31E8:  MOVFF  1F,4B5
31EC:  MOVFF  1E,4B6
31F0:  MOVFF  1D,4B7
31F4:  MOVFF  1C,4B8
31F8:  MOVLB  0
31FA:  CALL   085E
31FE:  GOTO   34D8 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
0568:  MOVFF  23,50A
056C:  RCALL  0426
....................     xuat_1byte(glcddata); 
056E:  MOVFF  22,50A
0572:  RCALL  0426
....................     xuat_1byte(lcdcontrol);        
0574:  MOVFF  21,50A
0578:  RCALL  0426
....................     xuat_1byte(lcddata);       
057A:  MOVFF  20,50A
057E:  RCALL  0426
....................        
....................     mo_glcd_lcd; 
0580:  BCF    17.2
....................     mo_ic_74573_a_thong_dl();             
0582:  RCALL  053A
....................     output_high(rck_lcd20x4);      
0584:  BCF    F95.3
0586:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
0588:  BCF    F95.3
058A:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
058C:  BCF    F95.1
058E:  BCF    F8C.1
0590:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
0592:  MOVLB  5
0594:  MOVFF  508,21
0598:  COMF   21,F
....................     lcddata    = ~lcd_ins_hthi;       
059A:  MOVFF  509,20
059E:  COMF   20,F
....................     xuat_glcd_lcd(); 
05A0:  MOVLB  0
05A2:  RCALL  0568
05A4:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
08B8:  MOVLB  4
08BA:  MOVFF  4B8,23
08BE:  COMF   23,F
....................     glcddata    = ~glcd_ins_hthi;      
08C0:  MOVFF  4B9,22
08C4:  COMF   22,F
08C6:  CLRF   16
08C8:  BTFSC  FF2.7
08CA:  BSF    16.7
08CC:  BCF    FF2.7
....................     xuat_glcd_lcd(); 
08CE:  MOVLB  0
08D0:  RCALL  0568
08D2:  BTFSC  16.7
08D4:  BSF    FF2.7
08D6:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0FF8:  MOVLB  4
0FFA:  MOVFF  4BC,4BE
0FFE:  COMF   xBE,F
1000:  CLRF   16
1002:  BTFSC  FF2.7
1004:  BSF    16.7
1006:  BCF    FF2.7
1008:  MOVFF  4BE,50A
100C:  MOVLB  0
100E:  CALL   0426
1012:  BTFSC  16.7
1014:  BSF    FF2.7
1016:  MOVLB  4
1018:  MOVFF  4BD,4BE
101C:  COMF   xBE,F
101E:  CLRF   16
1020:  BTFSC  FF2.7
1022:  BSF    16.7
1024:  BCF    FF2.7
1026:  MOVFF  4BE,50A
102A:  MOVLB  0
102C:  CALL   0426
1030:  BTFSC  16.7
1032:  BSF    FF2.7
....................        
....................       mo_8_led_quet; 
1034:  BCF    18.4
....................       mo_ic_74573_b_thong_dl(); 
1036:  CALL   0454
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
103A:  BCF    F95.5
103C:  BSF    F8C.5
103E:  BCF    F95.5
1040:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
1042:  BCF    F95.0
1044:  BCF    F8C.0
1046:  GOTO   1054 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
104A:  MOVLB  4
104C:  SETF   xBC
104E:  SETF   xBD
1050:  MOVLB  0
1052:  BRA    0FF8
1054:  GOTO   1088 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0F90:  CLRF   03
0F92:  MOVLB  4
0F94:  MOVF   xBD,W
0F96:  MOVFF  FF2,4BF
0F9A:  BCF    FF2.7
0F9C:  MOVLB  0
0F9E:  CALL   00C2
0FA2:  MOVLB  4
0FA4:  BTFSC  xBF.7
0FA6:  BSF    FF2.7
0FA8:  MOVWF  01
0FAA:  MOVWF  xBF
0FAC:  COMF   xBF,F
0FAE:  CLRF   16
0FB0:  BTFSC  FF2.7
0FB2:  BSF    16.7
0FB4:  BCF    FF2.7
0FB6:  MOVFF  4BF,50A
0FBA:  MOVLB  0
0FBC:  CALL   0426
0FC0:  BTFSC  16.7
0FC2:  BSF    FF2.7
0FC4:  MOVLB  4
0FC6:  MOVFF  4BE,4BF
0FCA:  COMF   xBF,F
0FCC:  CLRF   16
0FCE:  BTFSC  FF2.7
0FD0:  BSF    16.7
0FD2:  BCF    FF2.7
0FD4:  MOVFF  4BF,50A
0FD8:  MOVLB  0
0FDA:  CALL   0426
0FDE:  BTFSC  16.7
0FE0:  BSF    FF2.7
....................       mo_8_led_quet; 
0FE2:  BCF    18.4
....................       mo_ic_74573_b_thong_dl(); 
0FE4:  CALL   0454
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0FE8:  BCF    F95.5
0FEA:  BSF    F8C.5
0FEC:  BCF    F95.5
0FEE:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0FF0:  BCF    F95.0
0FF2:  BCF    F8C.0
0FF4:  GOTO   107C (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
1058:  CLRF   2C
105A:  MOVF   2C,W
105C:  SUBLW  07
105E:  BNC   108C
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
1060:  CLRF   03
1062:  MOVF   2C,W
1064:  ADDLW  24
1066:  MOVWF  FE9
1068:  MOVLW  00
106A:  ADDWFC 03,W
106C:  MOVWF  FEA
106E:  MOVFF  FEF,4BC
1072:  MOVFF  2C,4BD
1076:  MOVFF  4BC,4BE
107A:  BRA    0F90
....................             delay_us(100); 
107C:  MOVLW  A6
107E:  MOVWF  00
1080:  DECFSZ 00,F
1082:  BRA    1080
1084:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
1086:  BRA    104A
1088:  INCF   2C,F
108A:  BRA    105A
....................             } 
108C:  GOTO   10A2 (RETURN)
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
1090:  MOVLB  4
1092:  CLRF   xBB
1094:  MOVF   xBA,F
1096:  BNZ   109E
1098:  MOVF   xB9,W
109A:  SUBWF  xBB,W
109C:  BC    10A8
....................       hien_thi_8led_7doan_quet_all(); 
109E:  MOVLB  0
10A0:  BRA    1058
10A2:  MOVLB  4
10A4:  INCF   xBB,F
10A6:  BRA    1094
10A8:  MOVLB  0
10AA:  RETURN 0
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
0482:  MOVFF  1A,4FD
0486:  MOVFF  1B,4FE
....................       xuat_1byte(rbdc2);       
048A:  MOVFF  4FE,50A
048E:  RCALL  0426
....................       xuat_1byte(rbdc1); 
0490:  MOVFF  4FD,50A
0494:  RCALL  0426
....................       mo_relay_buzzer_dc; 
0496:  BCF    18.2
....................       mo_ic_74573_b_thong_dl(); 
0498:  RCALL  0454
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
049A:  BCF    F95.3
049C:  BSF    F8C.3
049E:  BCF    F95.3
04A0:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
04A2:  BCF    F95.0
04A4:  BCF    F8C.0
04A6:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
*
2F2A:  MOVLB  4
2F2C:  SETF   xB5
2F2E:  MOVFF  4B5,4B4
....................       for(cot=0;cot<4;cot++) 
2F32:  CLRF   xB6
2F34:  BTFSC  xB6.7
2F36:  BRA    2F3E
2F38:  MOVF   xB6,W
2F3A:  SUBLW  03
2F3C:  BNC   2F90
....................             {    
....................                output_b(maquetkey[cot]); 
2F3E:  CLRF   03
2F40:  MOVF   xB6,W
2F42:  MOVFF  FF2,4B7
2F46:  BCF    FF2.7
2F48:  MOVLB  0
2F4A:  CALL   00E4
2F4E:  MOVLB  4
2F50:  BTFSC  xB7.7
2F52:  BSF    FF2.7
2F54:  CLRF   F93
2F56:  MOVWF  F8A
....................                if         (!input(pin_b2))      {hang=3;   break;} 
2F58:  BSF    F93.2
2F5A:  BTFSC  F81.2
2F5C:  BRA    2F66
2F5E:  MOVLW  03
2F60:  MOVWF  xB5
2F62:  BRA    2F90
2F64:  BRA    2F8C
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
2F66:  BSF    F93.3
2F68:  BTFSC  F81.3
2F6A:  BRA    2F74
2F6C:  MOVLW  02
2F6E:  MOVWF  xB5
2F70:  BRA    2F90
2F72:  BRA    2F8C
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
2F74:  BSF    F93.4
2F76:  BTFSC  F81.4
2F78:  BRA    2F82
2F7A:  MOVLW  01
2F7C:  MOVWF  xB5
2F7E:  BRA    2F90
2F80:  BRA    2F8C
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
2F82:  BSF    F93.5
2F84:  BTFSC  F81.5
2F86:  BRA    2F8C
2F88:  CLRF   xB5
2F8A:  BRA    2F90
2F8C:  INCF   xB6,F
2F8E:  BRA    2F34
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
2F90:  INCFSZ xB5,W
2F92:  BRA    2F96
2F94:  BRA    2FBA
2F96:  CLRF   16
2F98:  BTFSC  FF2.7
2F9A:  BSF    16.7
2F9C:  BCF    FF2.7
2F9E:  MOVFF  4B6,502
2FA2:  MOVLW  04
2FA4:  MOVLB  5
2FA6:  MOVWF  x03
2FA8:  MOVLB  0
2FAA:  CALL   0662
2FAE:  BTFSC  16.7
2FB0:  BSF    FF2.7
2FB2:  MOVLB  4
2FB4:  MOVF   xB5,W
2FB6:  ADDWF  01,W
2FB8:  MOVWF  xB4
....................          return(maphim); 
2FBA:  MOVFF  4B4,01
2FBE:  MOVLB  0
2FC0:  RETURN 0
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
2FC2:  RCALL  2F2A
2FC4:  MOVFF  01,2D
....................       if (mpt1!=0xff)    
2FC8:  INCFSZ 2D,W
2FCA:  BRA    2FCE
2FCC:  BRA    2FF8
2FCE:  CLRF   16
2FD0:  BTFSC  FF2.7
2FD2:  BSF    16.7
2FD4:  BCF    FF2.7
....................       {  delay_ms(1);   
2FD6:  MOVLW  01
2FD8:  MOVLB  4
2FDA:  MOVWF  xFD
2FDC:  MOVLB  0
2FDE:  CALL   0512
2FE2:  BTFSC  16.7
2FE4:  BSF    FF2.7
....................          mpt1=key_nhan(); 
2FE6:  RCALL  2F2A
2FE8:  MOVFF  01,2D
....................          do{mpt2=key_nhan();} 
2FEC:  RCALL  2F2A
2FEE:  MOVFF  01,2E
....................          while (mpt2==mpt1); 
2FF2:  MOVF   2D,W
2FF4:  SUBWF  2E,W
2FF6:  BZ    2FEC
....................       }              
....................       return(mpt1); 
2FF8:  MOVFF  2D,01
2FFC:  GOTO   300A (RETURN)
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
....................       zt=zp=0; 
....................       i32=32;j32=0;i16=16,j16=0; 
....................       dem_led=0; 
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
....................      tgdlay = 0; 
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
....................       dem_led++; 
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
....................       dem_led++; 
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
....................    else              tang_dem_led_delay_1(dl); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
....................    xuat_32led_don_1dw(y);  
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
....................       else if (tgdlay==200)   
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
....................       } 
....................       tgdlay++; 
....................       delay_chon(dl,chondelay); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
....................       zp= (zp<<1)+1;  
....................       zt= (zt>>1)+0x8000; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp<<1);  
....................       zt= (zt>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
....................       zp= (zp>>1)+0x8000; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
....................       zp= (zp>>1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
....................    {   
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<64) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
....................       {   
....................          xuat_32led_don_1dw(y); 
....................          y= (y>>1)+0x80000000;  
....................          delay_chon(dl,chondelay);       
....................       } 
....................       else 
....................       if (dem_led<64) 
....................       {   
....................          xuat_32led_don_1dw(y);  
....................          y= (y>>1); 
....................          delay_chon(dl,chondelay); 
....................       }  
....................       else reset_toan_bo_bien(); 
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yp_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay);        
....................          yp_chay = yp_chay <<1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yp_chay = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
....................  
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
05A6:  BSF    x71.0
05A8:  MOVFF  71,508
05AC:  MOVFF  507,509
05B0:  RCALL  0592
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
05B2:  BCF    x71.0
05B4:  MOVFF  71,508
05B8:  MOVFF  507,509
05BC:  RCALL  0592
05BE:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
05C0:  BCF    x71.2
....................       lcd_xuat_8bit(lcd_data_x); 
05C2:  MOVFF  506,507
05C6:  RCALL  05A6
....................       delay_us(20); 
05C8:  MOVLW  20
05CA:  MOVWF  00
05CC:  DECFSZ 00,F
05CE:  BRA    05CC
05D0:  BRA    05D2
05D2:  NOP   
05D4:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
05F8:  BSF    x71.2
....................       lcd_xuat_8bit(lcd_data_x); 
05FA:  MOVFF  503,507
05FE:  RCALL  05A6
....................       delay_us(20); 
0600:  MOVLW  20
0602:  MOVWF  00
0604:  DECFSZ 00,F
0606:  BRA    0604
0608:  BRA    060A
060A:  NOP   
060C:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
07C6:  BCF    x71.0
....................          lcd_rw = 0;  
07C8:  BCF    x71.1
....................          lcd_rs = 1;  
07CA:  BSF    x71.2
....................          lcd_p =0; 
07CC:  BCF    x71.3
07CE:  CLRF   16
07D0:  BTFSC  FF2.7
07D2:  BSF    16.7
07D4:  BCF    FF2.7
....................          lcd_command(lcd_function_set);          
07D6:  MOVLW  38
07D8:  MOVLB  5
07DA:  MOVWF  x06
07DC:  MOVLB  0
07DE:  RCALL  05C0
07E0:  BTFSC  16.7
07E2:  BSF    FF2.7
....................          delay_us(40); 
07E4:  MOVLW  42
07E6:  MOVWF  00
07E8:  DECFSZ 00,F
07EA:  BRA    07E8
07EC:  NOP   
07EE:  CLRF   16
07F0:  BTFSC  FF2.7
07F2:  BSF    16.7
07F4:  BCF    FF2.7
....................          lcd_command(lcd_display_control);    
07F6:  MOVLW  0C
07F8:  MOVLB  5
07FA:  MOVWF  x06
07FC:  MOVLB  0
07FE:  RCALL  05C0
0800:  BTFSC  16.7
0802:  BSF    FF2.7
....................          delay_us(40); 
0804:  MOVLW  42
0806:  MOVWF  00
0808:  DECFSZ 00,F
080A:  BRA    0808
080C:  NOP   
080E:  CLRF   16
0810:  BTFSC  FF2.7
0812:  BSF    16.7
0814:  BCF    FF2.7
....................          lcd_command(lcd_clear_display);       
0816:  MOVLW  01
0818:  MOVLB  5
081A:  MOVWF  x06
081C:  MOVLB  0
081E:  RCALL  05C0
0820:  BTFSC  16.7
0822:  BSF    FF2.7
0824:  CLRF   16
0826:  BTFSC  FF2.7
0828:  BSF    16.7
082A:  BCF    FF2.7
....................          delay_ms(2); 
082C:  MOVLW  02
082E:  MOVLB  4
0830:  MOVWF  xFD
0832:  MOVLB  0
0834:  RCALL  0512
0836:  BTFSC  16.7
0838:  BSF    FF2.7
083A:  CLRF   16
083C:  BTFSC  FF2.7
083E:  BSF    16.7
0840:  BCF    FF2.7
....................          lcd_command(lcd_entry_mode);        
0842:  MOVLW  06
0844:  MOVLB  5
0846:  MOVWF  x06
0848:  MOVLB  0
084A:  RCALL  05C0
084C:  BTFSC  16.7
084E:  BSF    FF2.7
....................          delay_us(40);                 
0850:  MOVLW  42
0852:  MOVWF  00
0854:  DECFSZ 00,F
0856:  BRA    0854
0858:  NOP   
085A:  GOTO   3348 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
05D6:  CLRF   03
05D8:  MOVLB  5
05DA:  MOVF   x03,W
05DC:  MOVFF  FF2,505
05E0:  BCF    FF2.7
05E2:  MOVLB  0
05E4:  RCALL  01C0
05E6:  MOVLB  5
05E8:  BTFSC  x05.7
05EA:  BSF    FF2.7
05EC:  ADDWF  x04,W
05EE:  MOVWF  x05
05F0:  MOVWF  x06
05F2:  MOVLB  0
05F4:  RCALL  05C0
05F6:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
08D8:  BSF    x72.2
08DA:  MOVFF  72,4B8
08DE:  MOVFF  4B7,4B9
08E2:  RCALL  08B8
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
08E4:  BCF    x72.2
08E6:  MOVFF  72,4B8
08EA:  MOVFF  4B7,4B9
08EE:  RCALL  08B8
08F0:  RETURN 0
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
08F2:  BCF    x72.4
....................       glcd_xuat_8bit(glcd_data2);       
08F4:  MOVFF  4B4,4B7
08F8:  RCALL  08D8
08FA:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
*
0A06:  BSF    x72.4
....................       glcd_xuat_8bit(glcd_data3);      
0A08:  MOVFF  4B6,4B7
0A0C:  RCALL  08D8
0A0E:  RETURN 0
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
*
08FC:  BSF    x72.0
....................          glcd_cs2 = 1; 
08FE:  BSF    x72.1
....................          glcd_e  = 0; 
0900:  BCF    x72.2
....................          glcd_rw = 0;           
0902:  BCF    x72.3
....................          glcd_p =0;          
0904:  BCF    x72.5
....................          glcd_command(glcd_function_set_mode);          
0906:  MOVFF  4B3,4B4
090A:  RCALL  08F2
....................          delay_us(10); 
090C:  MOVLW  10
090E:  MOVWF  00
0910:  DECFSZ 00,F
0912:  BRA    0910
0914:  NOP   
....................          glcd_command(glcd_cursor_display);        
0916:  MOVLW  0C
0918:  MOVLB  4
091A:  MOVWF  xB4
091C:  MOVLB  0
091E:  RCALL  08F2
....................          delay_us(10);     
0920:  MOVLW  10
0922:  MOVWF  00
0924:  DECFSZ 00,F
0926:  BRA    0924
0928:  NOP   
....................          glcd_command(glcd_clear_display);       
092A:  MOVLW  01
092C:  MOVLB  4
092E:  MOVWF  xB4
0930:  MOVLB  0
0932:  RCALL  08F2
0934:  CLRF   16
0936:  BTFSC  FF2.7
0938:  BSF    16.7
093A:  BCF    FF2.7
....................          delay_ms(2); 
093C:  MOVLW  02
093E:  MOVLB  4
0940:  MOVWF  xFD
0942:  MOVLB  0
0944:  RCALL  0512
0946:  BTFSC  16.7
0948:  BSF    FF2.7
....................          glcd_command(glcd_entry_mode);       
094A:  MOVLW  06
094C:  MOVLB  4
094E:  MOVWF  xB4
0950:  MOVLB  0
0952:  RCALL  08F2
....................          delay_us(10);                           
0954:  MOVLW  10
0956:  MOVWF  00
0958:  DECFSZ 00,F
095A:  BRA    0958
095C:  NOP   
095E:  GOTO   33BA (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
*
0984:  MOVLB  4
0986:  MOVF   xB3,F
0988:  BZ    0990
098A:  SETF   xB5
098C:  SETF   xB4
098E:  BRA    0994
0990:  CLRF   xB5
0992:  CLRF   xB4
....................   for (doc=0; doc < glcd_doc; doc++)  
0994:  MOVLB  0
0996:  CLRF   x73
0998:  MOVF   x73,W
099A:  SUBLW  1F
099C:  BNC   0A02
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
099E:  CLRF   x74
09A0:  MOVF   x74,W
09A2:  SUBLW  0F
09A4:  BNC   09FE
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
09A6:  MOVLB  4
09A8:  CLRF   xD4
09AA:  MOVFF  73,4D3
09AE:  CLRF   xD6
09B0:  MOVLW  20
09B2:  MOVWF  xD5
09B4:  MOVLB  0
09B6:  RCALL  0962
09B8:  MOVFF  02,03
09BC:  MOVF   01,W
09BE:  ADDLW  01
09C0:  MOVLB  4
09C2:  MOVWF  xB6
09C4:  MOVLW  00
09C6:  ADDWFC 02,W
09C8:  MOVWF  xB7
09CA:  CLRF   03
09CC:  MOVLB  0
09CE:  MOVFF  74,02
09D2:  BCF    FD8.0
09D4:  RLCF   02,F
09D6:  RLCF   03,F
09D8:  MOVF   02,W
09DA:  MOVLB  4
09DC:  ADDWF  xB6,F
09DE:  MOVF   03,W
09E0:  ADDWFC xB7,F
09E2:  MOVLW  75
09E4:  ADDWF  xB6,W
09E6:  MOVWF  FE9
09E8:  MOVLW  00
09EA:  ADDWFC xB7,W
09EC:  MOVWF  FEA
09EE:  MOVFF  4B5,FEC
09F2:  MOVF   FED,F
09F4:  MOVFF  4B4,FEF
09F8:  MOVLB  0
09FA:  INCF   x74,F
09FC:  BRA    09A0
....................     }  
09FE:  INCF   x73,F
0A00:  BRA    0998
....................   }  
....................   gdram_vdk.refresh = true;  
0A02:  BSF    x75.0
0A04:  RETURN 0
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
*
0AFC:  MOVLB  4
0AFE:  MOVF   xD0,W
0B00:  SUBLW  1F
0B02:  BC    0B0C
0B04:  MOVLW  80
0B06:  ADDWF  xCF,F
0B08:  MOVLW  20
0B0A:  SUBWF  xD0,F
....................   doc = y;  
0B0C:  MOVFF  4D0,73
....................   ngang = x/16;  
0B10:  SWAPF  xCF,W
0B12:  MOVLB  0
0B14:  MOVWF  x74
0B16:  MOVLW  0F
0B18:  ANDWF  x74,F
....................   b = 15 - (x % 16);  
0B1A:  MOVLB  4
0B1C:  MOVF   xCF,W
0B1E:  ANDLW  0F
0B20:  XORLW  FF
0B22:  ADDLW  10
0B24:  MOVWF  xD2
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
0B26:  DECFSZ xD1,W
0B28:  BRA    0B98
0B2A:  CLRF   xD4
0B2C:  MOVFF  73,4D3
0B30:  CLRF   xD6
0B32:  MOVLW  20
0B34:  MOVWF  xD5
0B36:  MOVLB  0
0B38:  RCALL  0962
0B3A:  MOVFF  02,03
0B3E:  MOVF   01,W
0B40:  ADDLW  01
0B42:  MOVLB  4
0B44:  MOVWF  xD3
0B46:  MOVLW  00
0B48:  ADDWFC 02,W
0B4A:  MOVWF  xD4
0B4C:  CLRF   03
0B4E:  MOVLB  0
0B50:  MOVFF  74,02
0B54:  BCF    FD8.0
0B56:  RLCF   02,F
0B58:  RLCF   03,F
0B5A:  MOVF   02,W
0B5C:  MOVLB  4
0B5E:  ADDWF  xD3,F
0B60:  MOVF   03,W
0B62:  ADDWFC xD4,F
0B64:  MOVLW  75
0B66:  ADDWF  xD3,W
0B68:  MOVWF  01
0B6A:  MOVLW  00
0B6C:  ADDWFC xD4,W
0B6E:  MOVWF  03
0B70:  MOVFF  01,FE9
0B74:  MOVWF  FEA
0B76:  CLRF   03
0B78:  MOVLW  01
0B7A:  MOVWF  02
0B7C:  MOVF   xD2,W
0B7E:  MOVWF  00
0B80:  BZ    0B8C
0B82:  BCF    FD8.0
0B84:  RLCF   02,F
0B86:  RLCF   03,F
0B88:  DECFSZ 00,F
0B8A:  BRA    0B82
0B8C:  MOVF   02,W
0B8E:  IORWF  FEF,F
0B90:  MOVF   03,W
0B92:  IORWF  FEC,W
0B94:  MOVWF  FEF
0B96:  BRA    0C0E
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
0B98:  CLRF   xD4
0B9A:  MOVFF  73,4D3
0B9E:  CLRF   xD6
0BA0:  MOVLW  20
0BA2:  MOVWF  xD5
0BA4:  MOVLB  0
0BA6:  RCALL  0962
0BA8:  MOVFF  02,03
0BAC:  MOVF   01,W
0BAE:  ADDLW  01
0BB0:  MOVLB  4
0BB2:  MOVWF  xD3
0BB4:  MOVLW  00
0BB6:  ADDWFC 02,W
0BB8:  MOVWF  xD4
0BBA:  CLRF   03
0BBC:  MOVLB  0
0BBE:  MOVFF  74,02
0BC2:  BCF    FD8.0
0BC4:  RLCF   02,F
0BC6:  RLCF   03,F
0BC8:  MOVF   02,W
0BCA:  MOVLB  4
0BCC:  ADDWF  xD3,F
0BCE:  MOVF   03,W
0BD0:  ADDWFC xD4,F
0BD2:  MOVLW  75
0BD4:  ADDWF  xD3,W
0BD6:  MOVWF  01
0BD8:  MOVLW  00
0BDA:  ADDWFC xD4,W
0BDC:  MOVWF  03
0BDE:  MOVFF  01,FE9
0BE2:  MOVWF  FEA
0BE4:  CLRF   03
0BE6:  MOVLW  01
0BE8:  MOVWF  02
0BEA:  MOVF   xD2,W
0BEC:  MOVWF  00
0BEE:  BZ    0BFA
0BF0:  BCF    FD8.0
0BF2:  RLCF   02,F
0BF4:  RLCF   03,F
0BF6:  DECFSZ 00,F
0BF8:  BRA    0BF0
0BFA:  MOVF   02,W
0BFC:  XORLW  FF
0BFE:  MOVWF  00
0C00:  MOVLW  FF
0C02:  XORWF  03,F
0C04:  MOVF   00,W
0C06:  ANDWF  FEF,F
0C08:  MOVF   03,W
0C0A:  ANDWF  FEC,W
0C0C:  MOVWF  FEF
....................   gdram_vdk.refresh = true;  
0C0E:  MOVLB  0
0C10:  BSF    x75.0
0C12:  RETURN 0
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
*
0A10:  BTFSS  x75.0
0A12:  BRA    0AFA
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
0A14:  CLRF   x73
0A16:  MOVF   x73,W
0A18:  SUBLW  1F
0A1A:  BNC   0AF8
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
0A1C:  MOVF   x73,W
0A1E:  IORLW  80
0A20:  MOVLB  4
0A22:  MOVWF  xB3
0A24:  MOVWF  xB4
0A26:  MOVLB  0
0A28:  RCALL  08F2
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
0A2A:  MOVLW  80
0A2C:  MOVLB  4
0A2E:  MOVWF  xB4
0A30:  MOVLB  0
0A32:  RCALL  08F2
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
0A34:  CLRF   x74
0A36:  MOVF   x74,W
0A38:  SUBLW  0F
0A3A:  BNC   0AF4
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
0A3C:  MOVLB  4
0A3E:  CLRF   xD4
0A40:  MOVFF  73,4D3
0A44:  CLRF   xD6
0A46:  MOVLW  20
0A48:  MOVWF  xD5
0A4A:  MOVLB  0
0A4C:  RCALL  0962
0A4E:  MOVFF  02,03
0A52:  MOVF   01,W
0A54:  ADDLW  01
0A56:  MOVLB  4
0A58:  MOVWF  xB3
0A5A:  MOVLW  00
0A5C:  ADDWFC 02,W
0A5E:  MOVWF  xB4
0A60:  CLRF   03
0A62:  MOVLB  0
0A64:  MOVFF  74,02
0A68:  BCF    FD8.0
0A6A:  RLCF   02,F
0A6C:  RLCF   03,F
0A6E:  MOVF   02,W
0A70:  MOVLB  4
0A72:  ADDWF  xB3,F
0A74:  MOVF   03,W
0A76:  ADDWFC xB4,F
0A78:  MOVLW  01
0A7A:  ADDWF  xB3,W
0A7C:  MOVWF  01
0A7E:  MOVLW  00
0A80:  ADDWFC xB4,W
0A82:  MOVWF  03
0A84:  MOVF   01,W
0A86:  ADDLW  75
0A88:  MOVWF  FE9
0A8A:  MOVLW  00
0A8C:  ADDWFC 03,W
0A8E:  MOVWF  FEA
0A90:  MOVFF  FEF,4B3
0A94:  MOVFF  4B3,4B6
0A98:  MOVLB  0
0A9A:  RCALL  0A06
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
0A9C:  MOVLB  4
0A9E:  CLRF   xD4
0AA0:  MOVFF  73,4D3
0AA4:  CLRF   xD6
0AA6:  MOVLW  20
0AA8:  MOVWF  xD5
0AAA:  MOVLB  0
0AAC:  RCALL  0962
0AAE:  MOVFF  02,03
0AB2:  MOVF   01,W
0AB4:  ADDLW  01
0AB6:  MOVLB  4
0AB8:  MOVWF  xB3
0ABA:  MOVLW  00
0ABC:  ADDWFC 02,W
0ABE:  MOVWF  xB4
0AC0:  CLRF   03
0AC2:  MOVLB  0
0AC4:  MOVFF  74,02
0AC8:  BCF    FD8.0
0ACA:  RLCF   02,F
0ACC:  RLCF   03,F
0ACE:  MOVF   02,W
0AD0:  MOVLB  4
0AD2:  ADDWF  xB3,F
0AD4:  MOVF   03,W
0AD6:  ADDWFC xB4,F
0AD8:  MOVLW  75
0ADA:  ADDWF  xB3,W
0ADC:  MOVWF  FE9
0ADE:  MOVLW  00
0AE0:  ADDWFC xB4,W
0AE2:  MOVWF  FEA
0AE4:  MOVFF  FEF,4B5
0AE8:  MOVFF  4B5,4B6
0AEC:  MOVLB  0
0AEE:  RCALL  0A06
0AF0:  INCF   x74,F
0AF2:  BRA    0A36
....................       }  
0AF4:  INCF   x73,F
0AF6:  BRA    0A16
....................     }  
....................     gdram_vdk.refresh = false;  
0AF8:  BCF    x75.0
....................   }  
0AFA:  RETURN 0
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "TV_PICKIT2_SHIFT_STEP_MOTOR.c" 
.................... unsigned  int8 stepmotor_fullstep[]=  {0x1d,0x17,0x1b,0x0f}; 
.................... unsigned  int8 stepmotor_halfstep[]=  {0x1d,0x15,0x17,0x13,0x03,0x0b,0x09,0x0d}; 
.................... unsigned  int8 stepmotor_i=0, stepmotor_delay; 
.................... int1 stepmotor_tn=0,stepmotor_onoff=0; 
.................... void step_motor_quay_thuan_fs() 
.................... { 
....................       rbdc=rbdc & 0xffe0;            
*
04A8:  MOVLW  E0
04AA:  ANDWF  1A,F
....................       rbdc=rbdc | stepmotor_fullstep[stepmotor_i]; 
04AC:  CLRF   03
04AE:  MOVLB  4
04B0:  MOVF   x82,W
04B2:  ADDLW  76
04B4:  MOVWF  FE9
04B6:  MOVLW  04
04B8:  ADDWFC 03,W
04BA:  MOVWF  FEA
04BC:  MOVF   FEF,W
04BE:  IORWF  1A,F
....................       xuat_buzzer_relay();  
04C0:  MOVLB  0
04C2:  RCALL  0482
....................       stepmotor_i++; 
04C4:  MOVLB  4
04C6:  INCF   x82,F
....................       stepmotor_i = stepmotor_i & 0x03; 
04C8:  MOVLW  03
04CA:  ANDWF  x82,F
04CC:  MOVLB  0
04CE:  GOTO   050E (RETURN)
.................... } 
.................... void step_motor_quay_nghich_fs() 
.................... { 
....................       rbdc=rbdc & 0xffe0;            
04D2:  MOVLW  E0
04D4:  ANDWF  1A,F
....................       rbdc=rbdc | stepmotor_fullstep[stepmotor_i]; 
04D6:  CLRF   03
04D8:  MOVLB  4
04DA:  MOVF   x82,W
04DC:  ADDLW  76
04DE:  MOVWF  FE9
04E0:  MOVLW  04
04E2:  ADDWFC 03,W
04E4:  MOVWF  FEA
04E6:  MOVF   FEF,W
04E8:  IORWF  1A,F
....................       xuat_buzzer_relay();  
04EA:  MOVLB  0
04EC:  RCALL  0482
....................       stepmotor_i--; 
04EE:  MOVLB  4
04F0:  DECF   x82,F
....................       stepmotor_i = stepmotor_i & 0x03; 
04F2:  MOVLW  03
04F4:  ANDWF  x82,F
04F6:  MOVLB  0
04F8:  GOTO   050E (RETURN)
.................... } 
.................... void motor_step_run_fs() 
.................... { 
....................    if (stepmotor_tn) step_motor_quay_thuan_fs(); 
04FC:  MOVLB  4
04FE:  BTFSS  x84.0
0500:  BRA    050A
0502:  MOVLB  0
0504:  BRA    04A8
0506:  MOVLB  0
0508:  BRA    050E
....................    else           step_motor_quay_nghich_fs(); 
050A:  MOVLB  0
050C:  BRA    04D2
050E:  GOTO   0748 (RETURN)
.................... } 
....................  
.................... void step_motor_quay_thuan_hs() 
.................... { 
....................       rbdc=rbdc & 0xe0;            
....................       rbdc=rbdc | stepmotor_halfstep[stepmotor_i]; 
....................       xuat_buzzer_relay();  
....................       stepmotor_i++; 
....................       stepmotor_i = stepmotor_i & 0x07; 
.................... } 
.................... void step_motor_quay_nghich_hs() 
.................... { 
....................       rbdc=rbdc & 0xe0;            
....................       rbdc=rbdc | stepmotor_halfstep[stepmotor_i]; 
....................       xuat_buzzer_relay();  
....................       stepmotor_i--; 
....................       stepmotor_i = stepmotor_i & 0x07; 
.................... } 
.................... void motor_step_run_hs() 
.................... { 
....................    if (stepmotor_tn) step_motor_quay_thuan_hs(); 
....................    else           step_motor_quay_nghich_hs(); 
.................... } 
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_DC_MOTOR.c" 
.................... int1 dcmotor_tn = 0, dcmotor_onoff=0; 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac ham cho dk dong co dc on off 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dc_motor_enable() 
.................... { 
....................       dc_enable=1; 
*
0F7A:  BSF    1A.5
0F7C:  CLRF   16
0F7E:  BTFSC  FF2.7
0F80:  BSF    16.7
0F82:  BCF    FF2.7
....................       xuat_buzzer_relay(); 
0F84:  CALL   0482
0F88:  BTFSC  16.7
0F8A:  BSF    FF2.7
0F8C:  GOTO   3402 (RETURN)
.................... } 
.................... void dc_motor_quay_thuan() 
.................... { 
....................       output_high(pin_c1); 
*
2ED4:  BCF    F94.1
2ED6:  BSF    F8B.1
....................       output_low(pin_c2); 
2ED8:  BCF    F94.2
2EDA:  BCF    F8B.2
2EDC:  GOTO   2F0A (RETURN)
.................... } 
.................... void dc_motor_quay_nghich() 
.................... { 
....................       output_low(pin_c1); 
2EE0:  BCF    F94.1
2EE2:  BCF    F8B.1
....................       output_high(pin_c2); 
2EE4:  BCF    F94.2
2EE6:  BSF    F8B.2
2EE8:  GOTO   2F1E (RETURN)
.................... } 
.................... void dc_motor_stop() 
.................... { 
....................       output_low(pin_c1); 
2EEC:  BCF    F94.1
2EEE:  BCF    F8B.1
....................       output_low(pin_c2); 
2EF0:  BCF    F94.2
2EF2:  BCF    F8B.2
2EF4:  GOTO   2F26 (RETURN)
.................... } 
.................... void dc_motor_control() 
.................... { 
....................       if (dcmotor_onoff==1) 
....................       { 
....................          if (dcmotor_tn)   dc_motor_quay_thuan(); 
....................          else              dc_motor_quay_nghich(); 
....................       } 
....................       else                 dc_motor_stop(); 
....................        
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac ham cho dk dong co dc bang pwm 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16    pwm_duty; 
.................... void dc_motor_ktao_ccp1_thuan() 
.................... {      
....................       setup_ccp2(ccp_off);       
....................       setup_ccp1(ccp_pwm); 
....................       output_low(pin_c1);       
.................... } 
.................... void dc_motor_ktao_ccp2_nghich() 
.................... {             
....................       setup_ccp1(ccp_off);       
....................       setup_ccp2(ccp_pwm); 
....................       output_low(pin_c2); 
.................... } 
.................... void dc_motor_ktao_ccpx_ktao() 
.................... {          
....................      if (dcmotor_tn)   dc_motor_ktao_ccp1_thuan(); 
....................      else               dc_motor_ktao_ccp2_nghich();             
.................... } 
.................... void dc_motor_pww_setup_duty() 
.................... {      
....................      if (dcmotor_tn)   set_pwm1_duty(pwm_duty); 
....................      else               set_pwm2_duty(pwm_duty);      
.................... }  
.................... void dc_motor_pwm_ccp1_ccp2_stop() 
.................... {          
....................       pwm_duty=0;             
....................       setup_ccp1(ccp_off); 
....................       setup_ccp2(ccp_off); 
....................       dc_motor_ktao_ccpx_ktao(); 
....................       dc_motor_pww_setup_duty(); 
.................... } 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
16AA:  MOVLB  4
16AC:  BCF    xE8.0
....................    y = x; 
16AE:  MOVFF  4DC,4E1
16B2:  MOVFF  4DB,4E0
16B6:  MOVFF  4DA,4DF
16BA:  MOVFF  4D9,4DE
....................  
....................    if (x < 0) 
16BE:  MOVFF  4DC,4EC
16C2:  MOVFF  4DB,4EB
16C6:  MOVFF  4DA,4EA
16CA:  MOVFF  4D9,4E9
16CE:  CLRF   xF0
16D0:  CLRF   xEF
16D2:  CLRF   xEE
16D4:  CLRF   xED
16D6:  MOVLB  0
16D8:  RCALL  1128
16DA:  BNC   16E8
....................    { 
....................       s = 1; 
16DC:  MOVLB  4
16DE:  BSF    xE8.0
....................       y = -y; 
16E0:  MOVF   xDF,W
16E2:  XORLW  80
16E4:  MOVWF  xDF
16E6:  MOVLB  0
....................    } 
....................  
....................    if (y <= 32768.0) 
16E8:  MOVFF  4E1,4EC
16EC:  MOVFF  4E0,4EB
16F0:  MOVFF  4DF,4EA
16F4:  MOVFF  4DE,4E9
16F8:  MOVLB  4
16FA:  CLRF   xF0
16FC:  CLRF   xEF
16FE:  CLRF   xEE
1700:  MOVLW  8E
1702:  MOVWF  xED
1704:  MOVLB  0
1706:  RCALL  1128
1708:  BC    170C
170A:  BNZ   173A
....................       res = (float32)(unsigned int16)y; 
170C:  MOVFF  4E1,4EC
1710:  MOVFF  4E0,4EB
1714:  MOVFF  4DF,4EA
1718:  MOVFF  4DE,4E9
171C:  RCALL  1300
171E:  MOVFF  02,4EE
1722:  MOVFF  01,4ED
1726:  RCALL  10F2
1728:  MOVFF  03,4E5
172C:  MOVFF  02,4E4
1730:  MOVFF  01,4E3
1734:  MOVFF  00,4E2
1738:  BRA    18C8
....................  
....................  else if (y < 10000000.0) 
173A:  MOVFF  4E1,4EC
173E:  MOVFF  4E0,4EB
1742:  MOVFF  4DF,4EA
1746:  MOVFF  4DE,4E9
174A:  MOVLW  80
174C:  MOVLB  4
174E:  MOVWF  xF0
1750:  MOVLW  96
1752:  MOVWF  xEF
1754:  MOVLW  18
1756:  MOVWF  xEE
1758:  MOVLW  96
175A:  MOVWF  xED
175C:  MOVLB  0
175E:  RCALL  1128
1760:  BTFSS  FD8.0
1762:  BRA    18B8
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
1764:  MOVFF  4E1,4EC
1768:  MOVFF  4E0,4EB
176C:  MOVFF  4DF,4EA
1770:  MOVFF  4DE,4E9
1774:  MOVLB  4
1776:  CLRF   xF0
1778:  CLRF   xEF
177A:  CLRF   xEE
177C:  MOVLW  70
177E:  MOVWF  xED
1780:  MOVLB  0
1782:  RCALL  133C
1784:  MOVFF  03,4EC
1788:  MOVFF  02,4EB
178C:  MOVFF  01,4EA
1790:  MOVFF  00,4E9
1794:  RCALL  1300
1796:  MOVFF  02,4E7
179A:  MOVFF  01,4E6
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
179E:  MOVFF  4E1,4EC
17A2:  MOVFF  4E0,4EB
17A6:  MOVFF  4DF,4EA
17AA:  MOVFF  4DE,4E9
17AE:  MOVLB  4
17B0:  CLRF   xF0
17B2:  CLRF   xEF
17B4:  CLRF   xEE
17B6:  MOVLW  70
17B8:  MOVWF  xED
17BA:  MOVLB  0
17BC:  RCALL  133C
17BE:  MOVFF  03,4EC
17C2:  MOVFF  02,4EB
17C6:  MOVFF  01,4EA
17CA:  MOVFF  00,4E9
17CE:  MOVFF  4E7,4EE
17D2:  MOVFF  4E6,4ED
17D6:  RCALL  10F2
17D8:  BSF    FD8.1
17DA:  MOVFF  4EC,4F0
17DE:  MOVFF  4EB,4EF
17E2:  MOVFF  4EA,4EE
17E6:  MOVFF  4E9,4ED
17EA:  MOVFF  03,4F4
17EE:  MOVFF  02,4F3
17F2:  MOVFF  01,4F2
17F6:  MOVFF  00,4F1
17FA:  RCALL  1432
17FC:  MOVLB  4
17FE:  CLRF   xEC
1800:  CLRF   xEB
1802:  CLRF   xEA
1804:  MOVLW  8E
1806:  MOVWF  xE9
1808:  MOVFF  03,4F0
180C:  MOVFF  02,4EF
1810:  MOVFF  01,4EE
1814:  MOVFF  00,4ED
1818:  MOVLB  0
181A:  RCALL  133C
181C:  MOVFF  03,4E1
1820:  MOVFF  02,4E0
1824:  MOVFF  01,4DF
1828:  MOVFF  00,4DE
....................       res = 32768.0*(float32)l; 
182C:  MOVFF  4E7,4EE
1830:  MOVFF  4E6,4ED
1834:  RCALL  10F2
1836:  MOVLB  4
1838:  CLRF   xEC
183A:  CLRF   xEB
183C:  CLRF   xEA
183E:  MOVLW  8E
1840:  MOVWF  xE9
1842:  MOVFF  03,4F0
1846:  MOVFF  02,4EF
184A:  MOVFF  01,4EE
184E:  MOVFF  00,4ED
1852:  MOVLB  0
1854:  RCALL  133C
1856:  MOVFF  03,4E5
185A:  MOVFF  02,4E4
185E:  MOVFF  01,4E3
1862:  MOVFF  00,4E2
....................       res += (float32)(unsigned int16)y; 
1866:  MOVFF  4E1,4EC
186A:  MOVFF  4E0,4EB
186E:  MOVFF  4DF,4EA
1872:  MOVFF  4DE,4E9
1876:  RCALL  1300
1878:  MOVFF  02,4EE
187C:  MOVFF  01,4ED
1880:  RCALL  10F2
1882:  BCF    FD8.1
1884:  MOVFF  4E5,4F0
1888:  MOVFF  4E4,4EF
188C:  MOVFF  4E3,4EE
1890:  MOVFF  4E2,4ED
1894:  MOVFF  03,4F4
1898:  MOVFF  02,4F3
189C:  MOVFF  01,4F2
18A0:  MOVFF  00,4F1
18A4:  RCALL  1432
18A6:  MOVFF  03,4E5
18AA:  MOVFF  02,4E4
18AE:  MOVFF  01,4E3
18B2:  MOVFF  00,4E2
....................    } 
18B6:  BRA    18C8
....................  
....................  else 
....................   res = y; 
18B8:  MOVFF  4E1,4E5
18BC:  MOVFF  4E0,4E4
18C0:  MOVFF  4DF,4E3
18C4:  MOVFF  4DE,4E2
....................  
....................  y = y - (float32)(unsigned int16)y; 
18C8:  MOVFF  4E1,4EC
18CC:  MOVFF  4E0,4EB
18D0:  MOVFF  4DF,4EA
18D4:  MOVFF  4DE,4E9
18D8:  RCALL  1300
18DA:  MOVFF  02,4EE
18DE:  MOVFF  01,4ED
18E2:  RCALL  10F2
18E4:  BSF    FD8.1
18E6:  MOVFF  4E1,4F0
18EA:  MOVFF  4E0,4EF
18EE:  MOVFF  4DF,4EE
18F2:  MOVFF  4DE,4ED
18F6:  MOVFF  03,4F4
18FA:  MOVFF  02,4F3
18FE:  MOVFF  01,4F2
1902:  MOVFF  00,4F1
1906:  RCALL  1432
1908:  MOVFF  03,4E1
190C:  MOVFF  02,4E0
1910:  MOVFF  01,4DF
1914:  MOVFF  00,4DE
....................  
....................  if (s) 
1918:  MOVLB  4
191A:  BTFSS  xE8.0
191C:  BRA    1924
....................   res = -res; 
191E:  MOVF   xE3,W
1920:  XORLW  80
1922:  MOVWF  xE3
....................  
....................  if (y != 0) 
1924:  MOVFF  4E1,4EC
1928:  MOVFF  4E0,4EB
192C:  MOVFF  4DF,4EA
1930:  MOVFF  4DE,4E9
1934:  CLRF   xF0
1936:  CLRF   xEF
1938:  CLRF   xEE
193A:  CLRF   xED
193C:  MOVLB  0
193E:  CALL   1128
1942:  BZ    19B8
....................  { 
....................   if (s == 1 && n == 0) 
1944:  MOVLB  4
1946:  BTFSS  xE8.0
1948:  BRA    1980
194A:  MOVF   xDD,F
194C:  BNZ   1980
....................    res -= 1.0; 
194E:  BSF    FD8.1
1950:  MOVFF  4E5,4F0
1954:  MOVFF  4E4,4EF
1958:  MOVFF  4E3,4EE
195C:  MOVFF  4E2,4ED
1960:  CLRF   xF4
1962:  CLRF   xF3
1964:  CLRF   xF2
1966:  MOVLW  7F
1968:  MOVWF  xF1
196A:  MOVLB  0
196C:  RCALL  1432
196E:  MOVFF  03,4E5
1972:  MOVFF  02,4E4
1976:  MOVFF  01,4E3
197A:  MOVFF  00,4E2
197E:  MOVLB  4
....................  
....................   if (s == 0 && n == 1) 
1980:  BTFSC  xE8.0
1982:  BRA    19BA
1984:  DECFSZ xDD,W
1986:  BRA    19BA
....................    res += 1.0; 
1988:  BCF    FD8.1
198A:  MOVFF  4E5,4F0
198E:  MOVFF  4E4,4EF
1992:  MOVFF  4E3,4EE
1996:  MOVFF  4E2,4ED
199A:  CLRF   xF4
199C:  CLRF   xF3
199E:  CLRF   xF2
19A0:  MOVLW  7F
19A2:  MOVWF  xF1
19A4:  MOVLB  0
19A6:  RCALL  1432
19A8:  MOVFF  03,4E5
19AC:  MOVFF  02,4E4
19B0:  MOVFF  01,4E3
19B4:  MOVFF  00,4E2
19B8:  MOVLB  4
....................  } 
....................  if (x == 0) 
19BA:  MOVFF  4DC,4EC
19BE:  MOVFF  4DB,4EB
19C2:  MOVFF  4DA,4EA
19C6:  MOVFF  4D9,4E9
19CA:  CLRF   xF0
19CC:  CLRF   xEF
19CE:  CLRF   xEE
19D0:  CLRF   xED
19D2:  MOVLB  0
19D4:  CALL   1128
19D8:  BNZ   19E6
....................     res = 0; 
19DA:  MOVLB  4
19DC:  CLRF   xE5
19DE:  CLRF   xE4
19E0:  CLRF   xE3
19E2:  CLRF   xE2
19E4:  MOVLB  0
....................  
....................  return (res); 
19E6:  MOVFF  4E2,00
19EA:  MOVFF  4E3,01
19EE:  MOVFF  4E4,02
19F2:  MOVFF  4E5,03
19F6:  RETURN 0
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
*
1A16:  MOVFF  4D8,4DC
1A1A:  MOVFF  4D7,4DB
1A1E:  MOVFF  4D6,4DA
1A22:  MOVFF  4D5,4D9
1A26:  MOVLB  4
1A28:  CLRF   xDD
1A2A:  MOVLB  0
1A2C:  RCALL  16AA
1A2E:  GOTO   1B3A (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
19F8:  MOVFF  4D8,4DC
19FC:  MOVFF  4D7,4DB
1A00:  MOVFF  4D6,4DA
1A04:  MOVFF  4D5,4D9
1A08:  MOVLW  01
1A0A:  MOVLB  4
1A0C:  MOVWF  xDD
1A0E:  MOVLB  0
1A10:  RCALL  16AA
1A12:  GOTO   1AF2 (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
1A32:  MOVFF  4CC,4EC
1A36:  MOVFF  4CB,4EB
1A3A:  MOVFF  4CA,4EA
1A3E:  MOVFF  4C9,4E9
1A42:  MOVLB  4
1A44:  CLRF   xF0
1A46:  CLRF   xEF
1A48:  CLRF   xEE
1A4A:  CLRF   xED
1A4C:  MOVLB  0
1A4E:  CALL   1128
1A52:  BTFSC  FD8.2
1A54:  BRA    1B94
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
1A56:  MOVFF  4C8,4E5
1A5A:  MOVFF  4C7,4E4
1A5E:  MOVFF  4C6,4E3
1A62:  MOVFF  4C5,4E2
1A66:  MOVFF  4CC,4E9
1A6A:  MOVFF  4CB,4E8
1A6E:  MOVFF  4CA,4E7
1A72:  MOVFF  4C9,4E6
1A76:  CALL   11A2
1A7A:  MOVFF  03,4D4
1A7E:  MOVFF  02,4D3
1A82:  MOVFF  01,4D2
1A86:  MOVFF  00,4D1
1A8A:  MOVFF  03,4EC
1A8E:  MOVFF  02,4EB
1A92:  MOVFF  01,4EA
1A96:  MOVFF  00,4E9
1A9A:  MOVLB  4
1A9C:  CLRF   xF0
1A9E:  CLRF   xEF
1AA0:  CLRF   xEE
1AA2:  CLRF   xED
1AA4:  MOVLB  0
1AA6:  CALL   1128
1AAA:  BNC   1AF4
1AAC:  MOVFF  4C8,4E5
1AB0:  MOVFF  4C7,4E4
1AB4:  MOVFF  4C6,4E3
1AB8:  MOVFF  4C5,4E2
1ABC:  MOVFF  4CC,4E9
1AC0:  MOVFF  4CB,4E8
1AC4:  MOVFF  4CA,4E7
1AC8:  MOVFF  4C9,4E6
1ACC:  CALL   11A2
1AD0:  MOVFF  03,4D4
1AD4:  MOVFF  02,4D3
1AD8:  MOVFF  01,4D2
1ADC:  MOVFF  00,4D1
1AE0:  MOVFF  03,4D8
1AE4:  MOVFF  02,4D7
1AE8:  MOVFF  01,4D6
1AEC:  MOVFF  00,4D5
1AF0:  BRA    19F8
1AF2:  BRA    1B3A
1AF4:  MOVFF  4C8,4E5
1AF8:  MOVFF  4C7,4E4
1AFC:  MOVFF  4C6,4E3
1B00:  MOVFF  4C5,4E2
1B04:  MOVFF  4CC,4E9
1B08:  MOVFF  4CB,4E8
1B0C:  MOVFF  4CA,4E7
1B10:  MOVFF  4C9,4E6
1B14:  CALL   11A2
1B18:  MOVFF  03,4D4
1B1C:  MOVFF  02,4D3
1B20:  MOVFF  01,4D2
1B24:  MOVFF  00,4D1
1B28:  MOVFF  03,4D8
1B2C:  MOVFF  02,4D7
1B30:  MOVFF  01,4D6
1B34:  MOVFF  00,4D5
1B38:  BRA    1A16
1B3A:  MOVFF  03,4D0
1B3E:  MOVFF  02,4CF
1B42:  MOVFF  01,4CE
1B46:  MOVFF  00,4CD
....................       return(x-(i*y)); 
1B4A:  MOVFF  4D0,4EC
1B4E:  MOVFF  4CF,4EB
1B52:  MOVFF  4CE,4EA
1B56:  MOVFF  4CD,4E9
1B5A:  MOVFF  4CC,4F0
1B5E:  MOVFF  4CB,4EF
1B62:  MOVFF  4CA,4EE
1B66:  MOVFF  4C9,4ED
1B6A:  CALL   133C
1B6E:  BSF    FD8.1
1B70:  MOVFF  4C8,4F0
1B74:  MOVFF  4C7,4EF
1B78:  MOVFF  4C6,4EE
1B7C:  MOVFF  4C5,4ED
1B80:  MOVFF  03,4F4
1B84:  MOVFF  02,4F3
1B88:  MOVFF  01,4F2
1B8C:  MOVFF  00,4F1
1B90:  RCALL  1432
1B92:  BRA    1B94
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
1B94:  RETURN 0
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
*
1F76:  MOVFF  4CC,4EC
1F7A:  MOVFF  4CB,4EB
1F7E:  MOVFF  4CA,4EA
1F82:  MOVFF  4C9,4E9
1F86:  MOVLW  3B
1F88:  MOVLB  4
1F8A:  MOVWF  xF0
1F8C:  MOVLW  AA
1F8E:  MOVWF  xEF
1F90:  MOVLW  38
1F92:  MOVWF  xEE
1F94:  MOVLW  7F
1F96:  MOVWF  xED
1F98:  MOVLB  0
1F9A:  CALL   133C
1F9E:  MOVFF  03,4EC
1FA2:  MOVFF  02,4EB
1FA6:  MOVFF  01,4EA
1FAA:  MOVFF  00,4E9
1FAE:  CALL   1300
1FB2:  MOVFF  01,4D9
....................    s = 0; 
1FB6:  MOVLB  4
1FB8:  BCF    xDA.0
....................    y = x; 
1FBA:  MOVFF  4CC,4D0
1FBE:  MOVFF  4CB,4CF
1FC2:  MOVFF  4CA,4CE
1FC6:  MOVFF  4C9,4CD
....................  
....................    if (x < 0) 
1FCA:  MOVFF  4CC,4EC
1FCE:  MOVFF  4CB,4EB
1FD2:  MOVFF  4CA,4EA
1FD6:  MOVFF  4C9,4E9
1FDA:  CLRF   xF0
1FDC:  CLRF   xEF
1FDE:  CLRF   xEE
1FE0:  CLRF   xED
1FE2:  MOVLB  0
1FE4:  CALL   1128
1FE8:  BNC   1FF8
....................    { 
....................       s = 1; 
1FEA:  MOVLB  4
1FEC:  BSF    xDA.0
....................       n = -n; 
1FEE:  NEGF   xD9
....................       y = -y; 
1FF0:  MOVF   xCE,W
1FF2:  XORLW  80
1FF4:  MOVWF  xCE
1FF6:  MOVLB  0
....................    } 
....................  
....................    res = 0.0; 
1FF8:  MOVLB  4
1FFA:  CLRF   xD4
1FFC:  CLRF   xD3
1FFE:  CLRF   xD2
2000:  CLRF   xD1
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
2002:  MOVLW  04
2004:  MOVWF  xDC
2006:  MOVLW  D1
2008:  MOVWF  FE9
200A:  MOVFF  4DC,FEA
200E:  MOVLW  7F
2010:  ADDWF  xD9,W
2012:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
2014:  MOVFF  4D0,4EC
2018:  MOVFF  4CF,4EB
201C:  MOVFF  4CE,4EA
2020:  MOVFF  4CD,4E9
2024:  MOVLW  3B
2026:  MOVWF  xF0
2028:  MOVLW  AA
202A:  MOVWF  xEF
202C:  MOVLW  38
202E:  MOVWF  xEE
2030:  MOVLW  7F
2032:  MOVWF  xED
2034:  MOVLB  0
2036:  CALL   133C
203A:  MOVFF  03,4DE
203E:  MOVFF  02,4DD
2042:  MOVFF  01,4DC
2046:  MOVFF  00,4DB
204A:  MOVLB  4
204C:  CLRF   xE0
204E:  MOVFF  4D9,4DF
2052:  BTFSC  xDF.7
2054:  DECF   xE0,F
2056:  MOVLB  0
2058:  RCALL  1B96
205A:  BSF    FD8.1
205C:  MOVFF  4DE,4F0
2060:  MOVFF  4DD,4EF
2064:  MOVFF  4DC,4EE
2068:  MOVFF  4DB,4ED
206C:  MOVFF  03,4F4
2070:  MOVFF  02,4F3
2074:  MOVFF  01,4F2
2078:  MOVFF  00,4F1
207C:  CALL   1432
2080:  MOVFF  03,4D0
2084:  MOVFF  02,4CF
2088:  MOVFF  01,4CE
208C:  MOVFF  00,4CD
....................  
....................    r = pe[0]*y + pe[1]; 
2090:  MOVLW  7C
2092:  MOVLB  4
2094:  MOVWF  xEC
2096:  MOVLW  88
2098:  MOVWF  xEB
209A:  MOVLW  59
209C:  MOVWF  xEA
209E:  MOVLW  72
20A0:  MOVWF  xE9
20A2:  MOVFF  4D0,4F0
20A6:  MOVFF  4CF,4EF
20AA:  MOVFF  4CE,4EE
20AE:  MOVFF  4CD,4ED
20B2:  MOVLB  0
20B4:  CALL   133C
20B8:  MOVFF  03,4DE
20BC:  MOVFF  02,4DD
20C0:  MOVFF  01,4DC
20C4:  MOVFF  00,4DB
20C8:  BCF    FD8.1
20CA:  MOVFF  03,4F0
20CE:  MOVFF  02,4EF
20D2:  MOVFF  01,4EE
20D6:  MOVFF  00,4ED
20DA:  MOVLW  E0
20DC:  MOVLB  4
20DE:  MOVWF  xF4
20E0:  MOVLW  97
20E2:  MOVWF  xF3
20E4:  MOVLW  26
20E6:  MOVWF  xF2
20E8:  MOVLW  75
20EA:  MOVWF  xF1
20EC:  MOVLB  0
20EE:  CALL   1432
20F2:  MOVFF  03,4D8
20F6:  MOVFF  02,4D7
20FA:  MOVFF  01,4D6
20FE:  MOVFF  00,4D5
....................    r = r*y + pe[2]; 
2102:  MOVFF  4D8,4EC
2106:  MOVFF  4D7,4EB
210A:  MOVFF  4D6,4EA
210E:  MOVFF  4D5,4E9
2112:  MOVFF  4D0,4F0
2116:  MOVFF  4CF,4EF
211A:  MOVFF  4CE,4EE
211E:  MOVFF  4CD,4ED
2122:  CALL   133C
2126:  MOVFF  03,4DE
212A:  MOVFF  02,4DD
212E:  MOVFF  01,4DC
2132:  MOVFF  00,4DB
2136:  BCF    FD8.1
2138:  MOVFF  03,4F0
213C:  MOVFF  02,4EF
2140:  MOVFF  01,4EE
2144:  MOVFF  00,4ED
2148:  MOVLW  C4
214A:  MOVLB  4
214C:  MOVWF  xF4
214E:  MOVLW  1D
2150:  MOVWF  xF3
2152:  MOVLW  1E
2154:  MOVWF  xF2
2156:  MOVLW  78
2158:  MOVWF  xF1
215A:  MOVLB  0
215C:  CALL   1432
2160:  MOVFF  03,4D8
2164:  MOVFF  02,4D7
2168:  MOVFF  01,4D6
216C:  MOVFF  00,4D5
....................    r = r*y + pe[3]; 
2170:  MOVFF  4D8,4EC
2174:  MOVFF  4D7,4EB
2178:  MOVFF  4D6,4EA
217C:  MOVFF  4D5,4E9
2180:  MOVFF  4D0,4F0
2184:  MOVFF  4CF,4EF
2188:  MOVFF  4CE,4EE
218C:  MOVFF  4CD,4ED
2190:  CALL   133C
2194:  MOVFF  03,4DE
2198:  MOVFF  02,4DD
219C:  MOVFF  01,4DC
21A0:  MOVFF  00,4DB
21A4:  BCF    FD8.1
21A6:  MOVFF  03,4F0
21AA:  MOVFF  02,4EF
21AE:  MOVFF  01,4EE
21B2:  MOVFF  00,4ED
21B6:  MOVLW  5E
21B8:  MOVLB  4
21BA:  MOVWF  xF4
21BC:  MOVLW  50
21BE:  MOVWF  xF3
21C0:  MOVLW  63
21C2:  MOVWF  xF2
21C4:  MOVLW  7A
21C6:  MOVWF  xF1
21C8:  MOVLB  0
21CA:  CALL   1432
21CE:  MOVFF  03,4D8
21D2:  MOVFF  02,4D7
21D6:  MOVFF  01,4D6
21DA:  MOVFF  00,4D5
....................    r = r*y + pe[4]; 
21DE:  MOVFF  4D8,4EC
21E2:  MOVFF  4D7,4EB
21E6:  MOVFF  4D6,4EA
21EA:  MOVFF  4D5,4E9
21EE:  MOVFF  4D0,4F0
21F2:  MOVFF  4CF,4EF
21F6:  MOVFF  4CE,4EE
21FA:  MOVFF  4CD,4ED
21FE:  CALL   133C
2202:  MOVFF  03,4DE
2206:  MOVFF  02,4DD
220A:  MOVFF  01,4DC
220E:  MOVFF  00,4DB
2212:  BCF    FD8.1
2214:  MOVFF  03,4F0
2218:  MOVFF  02,4EF
221C:  MOVFF  01,4EE
2220:  MOVFF  00,4ED
2224:  MOVLW  1A
2226:  MOVLB  4
2228:  MOVWF  xF4
222A:  MOVLW  FE
222C:  MOVWF  xF3
222E:  MOVLW  75
2230:  MOVWF  xF2
2232:  MOVLW  7C
2234:  MOVWF  xF1
2236:  MOVLB  0
2238:  CALL   1432
223C:  MOVFF  03,4D8
2240:  MOVFF  02,4D7
2244:  MOVFF  01,4D6
2248:  MOVFF  00,4D5
....................    r = r*y + pe[5]; 
224C:  MOVFF  4D8,4EC
2250:  MOVFF  4D7,4EB
2254:  MOVFF  4D6,4EA
2258:  MOVFF  4D5,4E9
225C:  MOVFF  4D0,4F0
2260:  MOVFF  4CF,4EF
2264:  MOVFF  4CE,4EE
2268:  MOVFF  4CD,4ED
226C:  CALL   133C
2270:  MOVFF  03,4DE
2274:  MOVFF  02,4DD
2278:  MOVFF  01,4DC
227C:  MOVFF  00,4DB
2280:  BCF    FD8.1
2282:  MOVFF  03,4F0
2286:  MOVFF  02,4EF
228A:  MOVFF  01,4EE
228E:  MOVFF  00,4ED
2292:  MOVLW  18
2294:  MOVLB  4
2296:  MOVWF  xF4
2298:  MOVLW  72
229A:  MOVWF  xF3
229C:  MOVLW  31
229E:  MOVWF  xF2
22A0:  MOVLW  7E
22A2:  MOVWF  xF1
22A4:  MOVLB  0
22A6:  CALL   1432
22AA:  MOVFF  03,4D8
22AE:  MOVFF  02,4D7
22B2:  MOVFF  01,4D6
22B6:  MOVFF  00,4D5
....................  
....................    res = res*(1.0 + y*r); 
22BA:  MOVFF  4D0,4EC
22BE:  MOVFF  4CF,4EB
22C2:  MOVFF  4CE,4EA
22C6:  MOVFF  4CD,4E9
22CA:  MOVFF  4D8,4F0
22CE:  MOVFF  4D7,4EF
22D2:  MOVFF  4D6,4EE
22D6:  MOVFF  4D5,4ED
22DA:  CALL   133C
22DE:  BCF    FD8.1
22E0:  MOVLB  4
22E2:  CLRF   xF0
22E4:  CLRF   xEF
22E6:  CLRF   xEE
22E8:  MOVLW  7F
22EA:  MOVWF  xED
22EC:  MOVFF  03,4F4
22F0:  MOVFF  02,4F3
22F4:  MOVFF  01,4F2
22F8:  MOVFF  00,4F1
22FC:  MOVLB  0
22FE:  CALL   1432
2302:  MOVFF  4D4,4EC
2306:  MOVFF  4D3,4EB
230A:  MOVFF  4D2,4EA
230E:  MOVFF  4D1,4E9
2312:  MOVFF  03,4F0
2316:  MOVFF  02,4EF
231A:  MOVFF  01,4EE
231E:  MOVFF  00,4ED
2322:  CALL   133C
2326:  MOVFF  03,4D4
232A:  MOVFF  02,4D3
232E:  MOVFF  01,4D2
2332:  MOVFF  00,4D1
....................  
....................    if (s) 
2336:  MOVLB  4
2338:  BTFSS  xDA.0
233A:  BRA    236E
....................       res = 1.0/res; 
233C:  CLRF   xE5
233E:  CLRF   xE4
2340:  CLRF   xE3
2342:  MOVLW  7F
2344:  MOVWF  xE2
2346:  MOVFF  4D4,4E9
234A:  MOVFF  4D3,4E8
234E:  MOVFF  4D2,4E7
2352:  MOVFF  4D1,4E6
2356:  MOVLB  0
2358:  CALL   11A2
235C:  MOVFF  03,4D4
2360:  MOVFF  02,4D3
2364:  MOVFF  01,4D2
2368:  MOVFF  00,4D1
236C:  MOVLB  4
....................    return(res); 
236E:  MOVFF  4D1,00
2372:  MOVFF  4D2,01
2376:  MOVFF  4D3,02
237A:  MOVFF  4D4,03
237E:  MOVLB  0
2380:  RETURN 0
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1BE6:  MOVFF  4CC,4D0
1BEA:  MOVFF  4CB,4CF
1BEE:  MOVFF  4CA,4CE
1BF2:  MOVFF  4C9,4CD
....................  
....................    if (y != 1.0) 
1BF6:  MOVFF  4D0,4EC
1BFA:  MOVFF  4CF,4EB
1BFE:  MOVFF  4CE,4EA
1C02:  MOVFF  4CD,4E9
1C06:  MOVLB  4
1C08:  CLRF   xF0
1C0A:  CLRF   xEF
1C0C:  CLRF   xEE
1C0E:  MOVLW  7F
1C10:  MOVWF  xED
1C12:  MOVLB  0
1C14:  CALL   1128
1C18:  BTFSC  FD8.2
1C1A:  BRA    1F58
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1C1C:  MOVLW  04
1C1E:  MOVLB  4
1C20:  MOVWF  xDF
1C22:  MOVLW  CD
1C24:  MOVWF  FE9
1C26:  MOVFF  4DF,FEA
1C2A:  MOVLW  7E
1C2C:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
1C2E:  BSF    FD8.1
1C30:  MOVFF  4D0,4F0
1C34:  MOVFF  4CF,4EF
1C38:  MOVFF  4CE,4EE
1C3C:  MOVFF  4CD,4ED
1C40:  CLRF   xF4
1C42:  CLRF   xF3
1C44:  CLRF   xF2
1C46:  MOVLW  7F
1C48:  MOVWF  xF1
1C4A:  MOVLB  0
1C4C:  CALL   1432
1C50:  MOVFF  03,4E1
1C54:  MOVFF  02,4E0
1C58:  MOVFF  01,4DF
1C5C:  MOVFF  00,4DE
1C60:  BCF    FD8.1
1C62:  MOVFF  4D0,4F0
1C66:  MOVFF  4CF,4EF
1C6A:  MOVFF  4CE,4EE
1C6E:  MOVFF  4CD,4ED
1C72:  MOVLB  4
1C74:  CLRF   xF4
1C76:  CLRF   xF3
1C78:  CLRF   xF2
1C7A:  MOVLW  7F
1C7C:  MOVWF  xF1
1C7E:  MOVLB  0
1C80:  CALL   1432
1C84:  MOVFF  4E1,4E5
1C88:  MOVFF  4E0,4E4
1C8C:  MOVFF  4DF,4E3
1C90:  MOVFF  4DE,4E2
1C94:  MOVFF  03,4E9
1C98:  MOVFF  02,4E8
1C9C:  MOVFF  01,4E7
1CA0:  MOVFF  00,4E6
1CA4:  CALL   11A2
1CA8:  MOVFF  03,4D0
1CAC:  MOVFF  02,4CF
1CB0:  MOVFF  01,4CE
1CB4:  MOVFF  00,4CD
....................  
....................       y2=y*y; 
1CB8:  MOVFF  4D0,4EC
1CBC:  MOVFF  4CF,4EB
1CC0:  MOVFF  4CE,4EA
1CC4:  MOVFF  4CD,4E9
1CC8:  MOVFF  4D0,4F0
1CCC:  MOVFF  4CF,4EF
1CD0:  MOVFF  4CE,4EE
1CD4:  MOVFF  4CD,4ED
1CD8:  CALL   133C
1CDC:  MOVFF  03,4DC
1CE0:  MOVFF  02,4DB
1CE4:  MOVFF  01,4DA
1CE8:  MOVFF  00,4D9
....................  
....................       res = pl[0]*y2 + pl[1]; 
1CEC:  MOVLW  99
1CEE:  MOVLB  4
1CF0:  MOVWF  xEC
1CF2:  MOVLW  47
1CF4:  MOVWF  xEB
1CF6:  MOVLW  8A
1CF8:  MOVWF  xEA
1CFA:  MOVLW  7F
1CFC:  MOVWF  xE9
1CFE:  MOVFF  4DC,4F0
1D02:  MOVFF  4DB,4EF
1D06:  MOVFF  4DA,4EE
1D0A:  MOVFF  4D9,4ED
1D0E:  MOVLB  0
1D10:  CALL   133C
1D14:  MOVFF  03,4E1
1D18:  MOVFF  02,4E0
1D1C:  MOVFF  01,4DF
1D20:  MOVFF  00,4DE
1D24:  BCF    FD8.1
1D26:  MOVFF  03,4F0
1D2A:  MOVFF  02,4EF
1D2E:  MOVFF  01,4EE
1D32:  MOVFF  00,4ED
1D36:  MOVLB  4
1D38:  CLRF   xF4
1D3A:  CLRF   xF3
1D3C:  CLRF   xF2
1D3E:  MOVLW  80
1D40:  MOVWF  xF1
1D42:  MOVLB  0
1D44:  CALL   1432
1D48:  MOVFF  03,4D4
1D4C:  MOVFF  02,4D3
1D50:  MOVFF  01,4D2
1D54:  MOVFF  00,4D1
....................  
....................       r = ql[0]*y2 + ql[1]; 
1D58:  MOVLW  4C
1D5A:  MOVLB  4
1D5C:  MOVWF  xEC
1D5E:  MOVLW  F3
1D60:  MOVWF  xEB
1D62:  MOVLW  3A
1D64:  MOVWF  xEA
1D66:  MOVLW  7B
1D68:  MOVWF  xE9
1D6A:  MOVFF  4DC,4F0
1D6E:  MOVFF  4DB,4EF
1D72:  MOVFF  4DA,4EE
1D76:  MOVFF  4D9,4ED
1D7A:  MOVLB  0
1D7C:  CALL   133C
1D80:  MOVFF  03,4E1
1D84:  MOVFF  02,4E0
1D88:  MOVFF  01,4DF
1D8C:  MOVFF  00,4DE
1D90:  BCF    FD8.1
1D92:  MOVFF  03,4F0
1D96:  MOVFF  02,4EF
1D9A:  MOVFF  01,4EE
1D9E:  MOVFF  00,4ED
1DA2:  MOVLW  2B
1DA4:  MOVLB  4
1DA6:  MOVWF  xF4
1DA8:  MOVLW  9D
1DAA:  MOVWF  xF3
1DAC:  MOVLW  DF
1DAE:  MOVWF  xF2
1DB0:  MOVLW  7E
1DB2:  MOVWF  xF1
1DB4:  MOVLB  0
1DB6:  CALL   1432
1DBA:  MOVFF  03,4D8
1DBE:  MOVFF  02,4D7
1DC2:  MOVFF  01,4D6
1DC6:  MOVFF  00,4D5
....................       r = r*y2 + 1.0; 
1DCA:  MOVFF  4D8,4EC
1DCE:  MOVFF  4D7,4EB
1DD2:  MOVFF  4D6,4EA
1DD6:  MOVFF  4D5,4E9
1DDA:  MOVFF  4DC,4F0
1DDE:  MOVFF  4DB,4EF
1DE2:  MOVFF  4DA,4EE
1DE6:  MOVFF  4D9,4ED
1DEA:  CALL   133C
1DEE:  MOVFF  03,4E1
1DF2:  MOVFF  02,4E0
1DF6:  MOVFF  01,4DF
1DFA:  MOVFF  00,4DE
1DFE:  BCF    FD8.1
1E00:  MOVFF  03,4F0
1E04:  MOVFF  02,4EF
1E08:  MOVFF  01,4EE
1E0C:  MOVFF  00,4ED
1E10:  MOVLB  4
1E12:  CLRF   xF4
1E14:  CLRF   xF3
1E16:  CLRF   xF2
1E18:  MOVLW  7F
1E1A:  MOVWF  xF1
1E1C:  MOVLB  0
1E1E:  CALL   1432
1E22:  MOVFF  03,4D8
1E26:  MOVFF  02,4D7
1E2A:  MOVFF  01,4D6
1E2E:  MOVFF  00,4D5
....................  
....................       res = y*res/r; 
1E32:  MOVFF  4D0,4EC
1E36:  MOVFF  4CF,4EB
1E3A:  MOVFF  4CE,4EA
1E3E:  MOVFF  4CD,4E9
1E42:  MOVFF  4D4,4F0
1E46:  MOVFF  4D3,4EF
1E4A:  MOVFF  4D2,4EE
1E4E:  MOVFF  4D1,4ED
1E52:  CALL   133C
1E56:  MOVFF  03,4E1
1E5A:  MOVFF  02,4E0
1E5E:  MOVFF  01,4DF
1E62:  MOVFF  00,4DE
1E66:  MOVFF  03,4E5
1E6A:  MOVFF  02,4E4
1E6E:  MOVFF  01,4E3
1E72:  MOVFF  00,4E2
1E76:  MOVFF  4D8,4E9
1E7A:  MOVFF  4D7,4E8
1E7E:  MOVFF  4D6,4E7
1E82:  MOVFF  4D5,4E6
1E86:  CALL   11A2
1E8A:  MOVFF  03,4D4
1E8E:  MOVFF  02,4D3
1E92:  MOVFF  01,4D2
1E96:  MOVFF  00,4D1
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1E9A:  MOVLW  04
1E9C:  MOVLB  4
1E9E:  MOVWF  xDF
1EA0:  MOVLW  C9
1EA2:  MOVWF  FE9
1EA4:  MOVFF  4DF,FEA
1EA8:  MOVLW  7E
1EAA:  SUBWF  FEF,W
1EAC:  MOVWF  xDD
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1EAE:  BTFSS  xDD.7
1EB0:  BRA    1EDA
....................          r = -(float32)-n; 
1EB2:  MOVLW  00
1EB4:  BSF    FD8.0
1EB6:  SUBFWB xDD,W
1EB8:  CLRF   xE0
1EBA:  MOVWF  xDF
1EBC:  BTFSC  xDF.7
1EBE:  DECF   xE0,F
1EC0:  MOVLB  0
1EC2:  RCALL  1B96
1EC4:  MOVFF  00,4D5
1EC8:  MOVF   01,W
1ECA:  XORLW  80
1ECC:  MOVLB  4
1ECE:  MOVWF  xD6
1ED0:  MOVFF  02,4D7
1ED4:  MOVFF  03,4D8
1ED8:  BRA    1EFA
....................       else 
....................          r = (float32)n; 
1EDA:  CLRF   xE0
1EDC:  MOVFF  4DD,4DF
1EE0:  BTFSC  xDF.7
1EE2:  DECF   xE0,F
1EE4:  MOVLB  0
1EE6:  RCALL  1B96
1EE8:  MOVFF  03,4D8
1EEC:  MOVFF  02,4D7
1EF0:  MOVFF  01,4D6
1EF4:  MOVFF  00,4D5
1EF8:  MOVLB  4
....................  
....................       res += r*LN2; 
1EFA:  MOVFF  4D8,4EC
1EFE:  MOVFF  4D7,4EB
1F02:  MOVFF  4D6,4EA
1F06:  MOVFF  4D5,4E9
1F0A:  MOVLW  18
1F0C:  MOVWF  xF0
1F0E:  MOVLW  72
1F10:  MOVWF  xEF
1F12:  MOVLW  31
1F14:  MOVWF  xEE
1F16:  MOVLW  7E
1F18:  MOVWF  xED
1F1A:  MOVLB  0
1F1C:  CALL   133C
1F20:  BCF    FD8.1
1F22:  MOVFF  4D4,4F0
1F26:  MOVFF  4D3,4EF
1F2A:  MOVFF  4D2,4EE
1F2E:  MOVFF  4D1,4ED
1F32:  MOVFF  03,4F4
1F36:  MOVFF  02,4F3
1F3A:  MOVFF  01,4F2
1F3E:  MOVFF  00,4F1
1F42:  CALL   1432
1F46:  MOVFF  03,4D4
1F4A:  MOVFF  02,4D3
1F4E:  MOVFF  01,4D2
1F52:  MOVFF  00,4D1
....................    } 
1F56:  BRA    1F64
....................  
....................    else 
....................       res = 0.0; 
1F58:  MOVLB  4
1F5A:  CLRF   xD4
1F5C:  CLRF   xD3
1F5E:  CLRF   xD2
1F60:  CLRF   xD1
1F62:  MOVLB  0
....................  
....................    return(res); 
1F64:  MOVFF  4D1,00
1F68:  MOVFF  4D2,01
1F6C:  MOVFF  4D3,02
1F70:  MOVFF  4D4,03
1F74:  RETURN 0
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
2382:  MOVFF  4C0,4EC
2386:  MOVFF  4BF,4EB
238A:  MOVFF  4BE,4EA
238E:  MOVFF  4BD,4E9
2392:  MOVLB  4
2394:  CLRF   xF0
2396:  CLRF   xEF
2398:  CLRF   xEE
239A:  CLRF   xED
239C:  MOVLB  0
239E:  CALL   1128
23A2:  BTFSS  FD8.0
23A4:  BRA    2558
23A6:  MOVFF  4C4,4C8
23AA:  MOVFF  4C3,4C7
23AE:  MOVFF  4C2,4C6
23B2:  MOVFF  4C1,4C5
23B6:  MOVLB  4
23B8:  CLRF   xCC
23BA:  CLRF   xCB
23BC:  CLRF   xCA
23BE:  MOVLW  7F
23C0:  MOVWF  xC9
23C2:  MOVLB  0
23C4:  CALL   1A32
23C8:  MOVFF  03,4C8
23CC:  MOVFF  02,4C7
23D0:  MOVFF  01,4C6
23D4:  MOVFF  00,4C5
23D8:  MOVFF  03,4EC
23DC:  MOVFF  02,4EB
23E0:  MOVFF  01,4EA
23E4:  MOVFF  00,4E9
23E8:  MOVLB  4
23EA:  CLRF   xF0
23EC:  CLRF   xEF
23EE:  CLRF   xEE
23F0:  CLRF   xED
23F2:  MOVLB  0
23F4:  CALL   1128
23F8:  BTFSS  FD8.2
23FA:  BRA    2558
....................       if(fmod(y, 2) == 0) { 
23FC:  MOVFF  4C4,4C8
2400:  MOVFF  4C3,4C7
2404:  MOVFF  4C2,4C6
2408:  MOVFF  4C1,4C5
240C:  MOVLB  4
240E:  CLRF   xCC
2410:  CLRF   xCB
2412:  CLRF   xCA
2414:  MOVLW  80
2416:  MOVWF  xC9
2418:  MOVLB  0
241A:  CALL   1A32
241E:  MOVFF  03,4C8
2422:  MOVFF  02,4C7
2426:  MOVFF  01,4C6
242A:  MOVFF  00,4C5
242E:  MOVFF  03,4EC
2432:  MOVFF  02,4EB
2436:  MOVFF  01,4EA
243A:  MOVFF  00,4E9
243E:  MOVLB  4
2440:  CLRF   xF0
2442:  CLRF   xEF
2444:  CLRF   xEE
2446:  CLRF   xED
2448:  MOVLB  0
244A:  CALL   1128
244E:  BNZ   24D2
....................          return (exp(log(-x) * y)); 
2450:  MOVFF  4BD,4C5
2454:  MOVLB  4
2456:  MOVF   xBE,W
2458:  XORLW  80
245A:  MOVWF  xC6
245C:  MOVFF  4BF,4C7
2460:  MOVFF  4C0,4C8
2464:  MOVFF  4C0,4CC
2468:  MOVFF  4BF,4CB
246C:  MOVWF  xCA
246E:  MOVFF  4BD,4C9
2472:  MOVLB  0
2474:  CALL   1BE6
2478:  MOVFF  03,4C8
247C:  MOVFF  02,4C7
2480:  MOVFF  01,4C6
2484:  MOVFF  00,4C5
2488:  MOVFF  03,4EC
248C:  MOVFF  02,4EB
2490:  MOVFF  01,4EA
2494:  MOVFF  00,4E9
2498:  MOVFF  4C4,4F0
249C:  MOVFF  4C3,4EF
24A0:  MOVFF  4C2,4EE
24A4:  MOVFF  4C1,4ED
24A8:  CALL   133C
24AC:  MOVFF  03,4C8
24B0:  MOVFF  02,4C7
24B4:  MOVFF  01,4C6
24B8:  MOVFF  00,4C5
24BC:  MOVFF  03,4CC
24C0:  MOVFF  02,4CB
24C4:  MOVFF  01,4CA
24C8:  MOVFF  00,4C9
24CC:  RCALL  1F76
24CE:  BRA    268A
....................       } else { 
24D0:  BRA    2556
....................          return (-exp(log(-x) * y)); 
24D2:  MOVFF  4BD,4C5
24D6:  MOVLB  4
24D8:  MOVF   xBE,W
24DA:  XORLW  80
24DC:  MOVWF  xC6
24DE:  MOVFF  4BF,4C7
24E2:  MOVFF  4C0,4C8
24E6:  MOVFF  4C0,4CC
24EA:  MOVFF  4BF,4CB
24EE:  MOVWF  xCA
24F0:  MOVFF  4BD,4C9
24F4:  MOVLB  0
24F6:  CALL   1BE6
24FA:  MOVFF  03,4C8
24FE:  MOVFF  02,4C7
2502:  MOVFF  01,4C6
2506:  MOVFF  00,4C5
250A:  MOVFF  03,4EC
250E:  MOVFF  02,4EB
2512:  MOVFF  01,4EA
2516:  MOVFF  00,4E9
251A:  MOVFF  4C4,4F0
251E:  MOVFF  4C3,4EF
2522:  MOVFF  4C2,4EE
2526:  MOVFF  4C1,4ED
252A:  CALL   133C
252E:  MOVFF  03,4C8
2532:  MOVFF  02,4C7
2536:  MOVFF  01,4C6
253A:  MOVFF  00,4C5
253E:  MOVFF  03,4CC
2542:  MOVFF  02,4CB
2546:  MOVFF  01,4CA
254A:  MOVFF  00,4C9
254E:  RCALL  1F76
2550:  MOVLW  80
2552:  XORWF  01,F
2554:  BRA    268A
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
2556:  BRA    268A
2558:  MOVFF  4C0,4EC
255C:  MOVFF  4BF,4EB
2560:  MOVFF  4BE,4EA
2564:  MOVFF  4BD,4E9
2568:  MOVLB  4
256A:  CLRF   xF0
256C:  CLRF   xEF
256E:  CLRF   xEE
2570:  CLRF   xED
2572:  MOVLB  0
2574:  CALL   1128
2578:  BNC   25DA
257A:  MOVFF  4C4,4C8
257E:  MOVFF  4C3,4C7
2582:  MOVFF  4C2,4C6
2586:  MOVFF  4C1,4C5
258A:  MOVLB  4
258C:  CLRF   xCC
258E:  CLRF   xCB
2590:  CLRF   xCA
2592:  MOVLW  7F
2594:  MOVWF  xC9
2596:  MOVLB  0
2598:  CALL   1A32
259C:  MOVFF  03,4C8
25A0:  MOVFF  02,4C7
25A4:  MOVFF  01,4C6
25A8:  MOVFF  00,4C5
25AC:  MOVFF  03,4EC
25B0:  MOVFF  02,4EB
25B4:  MOVFF  01,4EA
25B8:  MOVFF  00,4E9
25BC:  MOVLB  4
25BE:  CLRF   xF0
25C0:  CLRF   xEF
25C2:  CLRF   xEE
25C4:  CLRF   xED
25C6:  MOVLB  0
25C8:  CALL   1128
25CC:  BZ    25DA
....................       return 0; 
25CE:  CLRF   00
25D0:  CLRF   01
25D2:  CLRF   02
25D4:  CLRF   03
25D6:  BRA    268A
....................    } else { 
25D8:  BRA    268A
....................       if(x != 0 || 0 >= y) { 
25DA:  MOVFF  4C0,4EC
25DE:  MOVFF  4BF,4EB
25E2:  MOVFF  4BE,4EA
25E6:  MOVFF  4BD,4E9
25EA:  MOVLB  4
25EC:  CLRF   xF0
25EE:  CLRF   xEF
25F0:  CLRF   xEE
25F2:  CLRF   xED
25F4:  MOVLB  0
25F6:  CALL   1128
25FA:  BNZ   2620
25FC:  MOVFF  4C4,4EC
2600:  MOVFF  4C3,4EB
2604:  MOVFF  4C2,4EA
2608:  MOVFF  4C1,4E9
260C:  MOVLB  4
260E:  CLRF   xF0
2610:  CLRF   xEF
2612:  CLRF   xEE
2614:  CLRF   xED
2616:  MOVLB  0
2618:  CALL   1128
261C:  BC    2620
261E:  BNZ   268A
....................          return (exp(log(x) * y)); 
2620:  MOVFF  4C0,4CC
2624:  MOVFF  4BF,4CB
2628:  MOVFF  4BE,4CA
262C:  MOVFF  4BD,4C9
2630:  CALL   1BE6
2634:  MOVFF  03,4C8
2638:  MOVFF  02,4C7
263C:  MOVFF  01,4C6
2640:  MOVFF  00,4C5
2644:  MOVFF  03,4EC
2648:  MOVFF  02,4EB
264C:  MOVFF  01,4EA
2650:  MOVFF  00,4E9
2654:  MOVFF  4C4,4F0
2658:  MOVFF  4C3,4EF
265C:  MOVFF  4C2,4EE
2660:  MOVFF  4C1,4ED
2664:  CALL   133C
2668:  MOVFF  03,4C8
266C:  MOVFF  02,4C7
2670:  MOVFF  01,4C6
2674:  MOVFF  00,4C5
2678:  MOVFF  03,4CC
267C:  MOVFF  02,4CB
2680:  MOVFF  01,4CA
2684:  MOVFF  00,4C9
2688:  RCALL  1F76
....................       } 
....................    } 
268A:  GOTO   2712 (RETURN)
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0C14:  MOVLW  01
0C16:  MOVLB  4
0C18:  MOVWF  xC8
0C1A:  MOVWF  xC9
0C1C:  CLRF   xCE
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0C1E:  MOVF   xBF,W
0C20:  SUBWF  xC1,W
0C22:  MOVWF  xCF
0C24:  MOVF   xCF,W
0C26:  BTFSS  xCF.7
0C28:  BRA    0C30
0C2A:  MOVLW  00
0C2C:  BSF    FD8.0
0C2E:  SUBFWB xCF,W
0C30:  CLRF   03
0C32:  MOVWF  xC6
0C34:  MOVFF  03,4C7
....................    dy = abs((signed int8)(y2 - y1)); 
0C38:  MOVF   xC0,W
0C3A:  SUBWF  xC2,W
0C3C:  MOVWF  xCF
0C3E:  MOVF   xCF,W
0C40:  BTFSS  xCF.7
0C42:  BRA    0C4A
0C44:  MOVLW  00
0C46:  BSF    FD8.0
0C48:  SUBFWB xCF,W
0C4A:  CLRF   03
0C4C:  MOVWF  xC4
0C4E:  MOVFF  03,4C5
....................    #endif 
....................  
....................    if(x1 > x2) 
0C52:  MOVF   xBF,W
0C54:  SUBWF  xC1,W
0C56:  BC    0C5A
....................       addx = -1; 
0C58:  SETF   xC8
....................    if(y1 > y2) 
0C5A:  MOVF   xC0,W
0C5C:  SUBWF  xC2,W
0C5E:  BC    0C62
....................       addy = -1; 
0C60:  SETF   xC9
....................  
....................    if(dx >= dy) 
0C62:  MOVF   xC5,W
0C64:  SUBWF  xC7,W
0C66:  BNC   0CDC
0C68:  BNZ   0C70
0C6A:  MOVF   xC4,W
0C6C:  SUBWF  xC6,W
0C6E:  BNC   0CDC
....................    { 
....................       dy *= 2; 
0C70:  BCF    FD8.0
0C72:  RLCF   xC4,F
0C74:  RLCF   xC5,F
....................       P = dy - dx; 
0C76:  MOVF   xC6,W
0C78:  SUBWF  xC4,W
0C7A:  MOVWF  00
0C7C:  MOVF   xC7,W
0C7E:  SUBWFB xC5,W
0C80:  MOVFF  00,4CA
0C84:  MOVWF  xCB
....................       diff = P - dx; 
0C86:  MOVF   xC6,W
0C88:  SUBWF  xCA,W
0C8A:  MOVWF  xCC
0C8C:  MOVF   xC7,W
0C8E:  SUBWFB xCB,W
0C90:  MOVWF  xCD
....................  
....................       for(; i<=dx; ++i) 
0C92:  MOVF   xC7,F
0C94:  BNZ   0C9C
0C96:  MOVF   xCE,W
0C98:  SUBWF  xC6,W
0C9A:  BNC   0CDA
....................       { 
....................          glcd_pixel(x1, y1, color); 
0C9C:  MOVFF  4BF,4CF
0CA0:  MOVFF  4C0,4D0
0CA4:  MOVFF  4C3,4D1
0CA8:  MOVLB  0
0CAA:  RCALL  0AFC
....................  
....................          if(P < 0) 
0CAC:  MOVLB  4
0CAE:  BTFSS  xCB.7
0CB0:  BRA    0CC2
....................          { 
....................             P  += dy; 
0CB2:  MOVF   xC4,W
0CB4:  ADDWF  xCA,F
0CB6:  MOVF   xC5,W
0CB8:  ADDWFC xCB,F
....................             x1 += addx; 
0CBA:  MOVF   xC8,W
0CBC:  ADDWF  xBF,W
0CBE:  MOVWF  xBF
....................          } 
0CC0:  BRA    0CD6
....................          else 
....................          { 
....................             P  += diff; 
0CC2:  MOVF   xCC,W
0CC4:  ADDWF  xCA,F
0CC6:  MOVF   xCD,W
0CC8:  ADDWFC xCB,F
....................             x1 += addx; 
0CCA:  MOVF   xC8,W
0CCC:  ADDWF  xBF,W
0CCE:  MOVWF  xBF
....................             y1 += addy; 
0CD0:  MOVF   xC9,W
0CD2:  ADDWF  xC0,W
0CD4:  MOVWF  xC0
....................          } 
0CD6:  INCF   xCE,F
0CD8:  BRA    0C92
....................       } 
....................    } 
0CDA:  BRA    0D46
....................    else 
....................    { 
....................       dx *= 2; 
0CDC:  BCF    FD8.0
0CDE:  RLCF   xC6,F
0CE0:  RLCF   xC7,F
....................       P = dx - dy; 
0CE2:  MOVF   xC4,W
0CE4:  SUBWF  xC6,W
0CE6:  MOVWF  00
0CE8:  MOVF   xC5,W
0CEA:  SUBWFB xC7,W
0CEC:  MOVFF  00,4CA
0CF0:  MOVWF  xCB
....................       diff = P - dy; 
0CF2:  MOVF   xC4,W
0CF4:  SUBWF  xCA,W
0CF6:  MOVWF  xCC
0CF8:  MOVF   xC5,W
0CFA:  SUBWFB xCB,W
0CFC:  MOVWF  xCD
....................  
....................       for(; i<=dy; ++i) 
0CFE:  MOVF   xC5,F
0D00:  BNZ   0D08
0D02:  MOVF   xCE,W
0D04:  SUBWF  xC4,W
0D06:  BNC   0D46
....................       { 
....................          glcd_pixel(x1, y1, color); 
0D08:  MOVFF  4BF,4CF
0D0C:  MOVFF  4C0,4D0
0D10:  MOVFF  4C3,4D1
0D14:  MOVLB  0
0D16:  RCALL  0AFC
....................  
....................          if(P < 0) 
0D18:  MOVLB  4
0D1A:  BTFSS  xCB.7
0D1C:  BRA    0D2E
....................          { 
....................             P  += dx; 
0D1E:  MOVF   xC6,W
0D20:  ADDWF  xCA,F
0D22:  MOVF   xC7,W
0D24:  ADDWFC xCB,F
....................             y1 += addy; 
0D26:  MOVF   xC9,W
0D28:  ADDWF  xC0,W
0D2A:  MOVWF  xC0
....................          } 
0D2C:  BRA    0D42
....................          else 
....................          { 
....................             P  += diff; 
0D2E:  MOVF   xCC,W
0D30:  ADDWF  xCA,F
0D32:  MOVF   xCD,W
0D34:  ADDWFC xCB,F
....................             x1 += addx; 
0D36:  MOVF   xC8,W
0D38:  ADDWF  xBF,W
0D3A:  MOVWF  xBF
....................             y1 += addy; 
0D3C:  MOVF   xC9,W
0D3E:  ADDWF  xC0,W
0D40:  MOVWF  xC0
....................          } 
0D42:  INCF   xCE,F
0D44:  BRA    0CFE
....................       } 
....................    } 
0D46:  MOVLB  0
0D48:  RETURN 0
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
0D4A:  MOVLB  4
0D4C:  CLRF   xB8
....................    b = radius; 
0D4E:  MOVFF  4B5,4B9
....................    P = 1 - radius; 
0D52:  MOVLW  01
0D54:  BSF    FD8.0
0D56:  SUBFWB xB5,W
0D58:  MOVWF  xBA
....................  
....................    do 
....................    { 
....................       if(fill) 
0D5A:  MOVF   xB6,F
0D5C:  BZ    0E20
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
0D5E:  MOVF   xB8,W
0D60:  SUBWF  xB3,W
0D62:  MOVWF  xBB
0D64:  MOVF   xB9,W
0D66:  ADDWF  xB4,W
0D68:  MOVWF  xBC
0D6A:  MOVF   xB8,W
0D6C:  ADDWF  xB3,W
0D6E:  MOVWF  xBD
0D70:  MOVF   xB9,W
0D72:  ADDWF  xB4,W
0D74:  MOVWF  xBE
0D76:  MOVFF  4BB,4BF
0D7A:  MOVFF  4BC,4C0
0D7E:  MOVFF  4BD,4C1
0D82:  MOVWF  xC2
0D84:  MOVFF  4B7,4C3
0D88:  MOVLB  0
0D8A:  RCALL  0C14
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
0D8C:  MOVLB  4
0D8E:  MOVF   xB8,W
0D90:  SUBWF  xB3,W
0D92:  MOVWF  xBB
0D94:  MOVF   xB9,W
0D96:  SUBWF  xB4,W
0D98:  MOVWF  xBC
0D9A:  MOVF   xB8,W
0D9C:  ADDWF  xB3,W
0D9E:  MOVWF  xBD
0DA0:  MOVF   xB9,W
0DA2:  SUBWF  xB4,W
0DA4:  MOVWF  xBE
0DA6:  MOVFF  4BB,4BF
0DAA:  MOVFF  4BC,4C0
0DAE:  MOVFF  4BD,4C1
0DB2:  MOVWF  xC2
0DB4:  MOVFF  4B7,4C3
0DB8:  MOVLB  0
0DBA:  RCALL  0C14
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
0DBC:  MOVLB  4
0DBE:  MOVF   xB9,W
0DC0:  SUBWF  xB3,W
0DC2:  MOVWF  xBB
0DC4:  MOVF   xB8,W
0DC6:  ADDWF  xB4,W
0DC8:  MOVWF  xBC
0DCA:  MOVF   xB9,W
0DCC:  ADDWF  xB3,W
0DCE:  MOVWF  xBD
0DD0:  MOVF   xB8,W
0DD2:  ADDWF  xB4,W
0DD4:  MOVWF  xBE
0DD6:  MOVFF  4BB,4BF
0DDA:  MOVFF  4BC,4C0
0DDE:  MOVFF  4BD,4C1
0DE2:  MOVWF  xC2
0DE4:  MOVFF  4B7,4C3
0DE8:  MOVLB  0
0DEA:  RCALL  0C14
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
0DEC:  MOVLB  4
0DEE:  MOVF   xB9,W
0DF0:  SUBWF  xB3,W
0DF2:  MOVWF  xBB
0DF4:  MOVF   xB8,W
0DF6:  SUBWF  xB4,W
0DF8:  MOVWF  xBC
0DFA:  MOVF   xB9,W
0DFC:  ADDWF  xB3,W
0DFE:  MOVWF  xBD
0E00:  MOVF   xB8,W
0E02:  SUBWF  xB4,W
0E04:  MOVWF  xBE
0E06:  MOVFF  4BB,4BF
0E0A:  MOVFF  4BC,4C0
0E0E:  MOVFF  4BD,4C1
0E12:  MOVWF  xC2
0E14:  MOVFF  4B7,4C3
0E18:  MOVLB  0
0E1A:  RCALL  0C14
....................       } 
0E1C:  BRA    0EFE
0E1E:  MOVLB  4
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
0E20:  MOVF   xB3,W
0E22:  ADDWF  xB8,W
0E24:  MOVWF  xBB
0E26:  MOVF   xB4,W
0E28:  ADDWF  xB9,W
0E2A:  MOVWF  xBC
0E2C:  MOVFF  4BB,4CF
0E30:  MOVWF  xD0
0E32:  MOVFF  4B7,4D1
0E36:  MOVLB  0
0E38:  RCALL  0AFC
....................          glcd_pixel(b+x, a+y, color); 
0E3A:  MOVLB  4
0E3C:  MOVF   xB3,W
0E3E:  ADDWF  xB9,W
0E40:  MOVWF  xBB
0E42:  MOVF   xB4,W
0E44:  ADDWF  xB8,W
0E46:  MOVWF  xBC
0E48:  MOVFF  4BB,4CF
0E4C:  MOVWF  xD0
0E4E:  MOVFF  4B7,4D1
0E52:  MOVLB  0
0E54:  RCALL  0AFC
....................          glcd_pixel(x-a, b+y, color); 
0E56:  MOVLB  4
0E58:  MOVF   xB8,W
0E5A:  SUBWF  xB3,W
0E5C:  MOVWF  xBB
0E5E:  MOVF   xB4,W
0E60:  ADDWF  xB9,W
0E62:  MOVWF  xBC
0E64:  MOVFF  4BB,4CF
0E68:  MOVWF  xD0
0E6A:  MOVFF  4B7,4D1
0E6E:  MOVLB  0
0E70:  RCALL  0AFC
....................          glcd_pixel(x-b, a+y, color); 
0E72:  MOVLB  4
0E74:  MOVF   xB9,W
0E76:  SUBWF  xB3,W
0E78:  MOVWF  xBB
0E7A:  MOVF   xB4,W
0E7C:  ADDWF  xB8,W
0E7E:  MOVWF  xBC
0E80:  MOVFF  4BB,4CF
0E84:  MOVWF  xD0
0E86:  MOVFF  4B7,4D1
0E8A:  MOVLB  0
0E8C:  RCALL  0AFC
....................          glcd_pixel(b+x, y-a, color); 
0E8E:  MOVLB  4
0E90:  MOVF   xB3,W
0E92:  ADDWF  xB9,W
0E94:  MOVWF  xBB
0E96:  MOVF   xB8,W
0E98:  SUBWF  xB4,W
0E9A:  MOVWF  xBC
0E9C:  MOVFF  4BB,4CF
0EA0:  MOVWF  xD0
0EA2:  MOVFF  4B7,4D1
0EA6:  MOVLB  0
0EA8:  RCALL  0AFC
....................          glcd_pixel(a+x, y-b, color); 
0EAA:  MOVLB  4
0EAC:  MOVF   xB3,W
0EAE:  ADDWF  xB8,W
0EB0:  MOVWF  xBB
0EB2:  MOVF   xB9,W
0EB4:  SUBWF  xB4,W
0EB6:  MOVWF  xBC
0EB8:  MOVFF  4BB,4CF
0EBC:  MOVWF  xD0
0EBE:  MOVFF  4B7,4D1
0EC2:  MOVLB  0
0EC4:  RCALL  0AFC
....................          glcd_pixel(x-a, y-b, color); 
0EC6:  MOVLB  4
0EC8:  MOVF   xB8,W
0ECA:  SUBWF  xB3,W
0ECC:  MOVWF  xBB
0ECE:  MOVF   xB9,W
0ED0:  SUBWF  xB4,W
0ED2:  MOVWF  xBC
0ED4:  MOVFF  4BB,4CF
0ED8:  MOVWF  xD0
0EDA:  MOVFF  4B7,4D1
0EDE:  MOVLB  0
0EE0:  RCALL  0AFC
....................          glcd_pixel(x-b, y-a, color); 
0EE2:  MOVLB  4
0EE4:  MOVF   xB9,W
0EE6:  SUBWF  xB3,W
0EE8:  MOVWF  xBB
0EEA:  MOVF   xB8,W
0EEC:  SUBWF  xB4,W
0EEE:  MOVWF  xBC
0EF0:  MOVFF  4BB,4CF
0EF4:  MOVWF  xD0
0EF6:  MOVFF  4B7,4D1
0EFA:  MOVLB  0
0EFC:  RCALL  0AFC
....................       } 
....................  
....................       if(P < 0) 
0EFE:  MOVLB  4
0F00:  BTFSS  xBA.7
0F02:  BRA    0F30
....................          P += 3 + 2 * a++; 
0F04:  MOVF   xB8,W
0F06:  INCF   xB8,F
0F08:  MOVWF  xBB
0F0A:  CLRF   16
0F0C:  BTFSC  FF2.7
0F0E:  BSF    16.7
0F10:  BCF    FF2.7
0F12:  MOVLW  02
0F14:  MOVLB  5
0F16:  MOVWF  x02
0F18:  MOVFF  4BB,503
0F1C:  MOVLB  0
0F1E:  CALL   0662
0F22:  BTFSC  16.7
0F24:  BSF    FF2.7
0F26:  MOVF   01,W
0F28:  ADDLW  03
0F2A:  MOVLB  4
0F2C:  ADDWF  xBA,F
0F2E:  BRA    0F62
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
0F30:  MOVF   xB8,W
0F32:  INCF   xB8,F
0F34:  MOVWF  xBB
0F36:  MOVF   xB9,W
0F38:  DECF   xB9,F
0F3A:  SUBWF  xBB,W
0F3C:  MOVWF  xBB
0F3E:  CLRF   16
0F40:  BTFSC  FF2.7
0F42:  BSF    16.7
0F44:  BCF    FF2.7
0F46:  MOVLW  02
0F48:  MOVLB  5
0F4A:  MOVWF  x02
0F4C:  MOVFF  4BB,503
0F50:  MOVLB  0
0F52:  CALL   0662
0F56:  BTFSC  16.7
0F58:  BSF    FF2.7
0F5A:  MOVF   01,W
0F5C:  ADDLW  05
0F5E:  MOVLB  4
0F60:  ADDWF  xBA,F
....................     } while(a <= b); 
0F62:  MOVF   xB8,W
0F64:  XORLW  80
0F66:  MOVWF  00
0F68:  MOVF   xB9,W
0F6A:  XORLW  80
0F6C:  SUBWF  00,W
0F6E:  BTFSC  FD8.2
0F70:  BRA    0D5A
0F72:  BTFSS  FD8.0
0F74:  BRA    0D5A
0F76:  MOVLB  0
0F78:  RETURN 0
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
2CB8:  MOVFF  4B6,03
2CBC:  MOVLB  4
2CBE:  MOVFF  4B5,FE9
2CC2:  MOVFF  4B6,FEA
2CC6:  MOVF   FEF,F
2CC8:  BTFSC  FD8.2
2CCA:  BRA    2E70
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
2CCC:  MOVFF  4B6,03
2CD0:  MOVFF  4B5,FE9
2CD4:  MOVFF  4B6,FEA
2CD8:  MOVF   FEF,W
2CDA:  SUBLW  52
2CDC:  BNC   2D2C
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
2CDE:  MOVFF  4B6,03
2CE2:  MOVFF  4B5,FE9
2CE6:  MOVFF  4B6,FEA
2CEA:  MOVLW  20
2CEC:  SUBWF  FEF,W
2CEE:  MULLW  05
2CF0:  MOVF   FF3,W
2CF2:  CLRF   03
2CF4:  MOVWF  xC2
2CF6:  MOVLW  04
2CF8:  MOVWF  FEA
2CFA:  MOVLW  BD
2CFC:  MOVWF  FE9
2CFE:  CLRF   xC6
2D00:  MOVFF  4C2,4C5
2D04:  MOVFF  FF2,4C3
2D08:  BCF    FF2.7
2D0A:  MOVLW  05
2D0C:  MOVWF  01
2D0E:  CLRF   FF7
2D10:  MOVF   xC2,W
2D12:  MOVLB  0
2D14:  CALL   01E6
2D18:  TBLRD*-
2D1A:  TBLRD*+
2D1C:  MOVFF  FF5,FEE
2D20:  DECFSZ 01,F
2D22:  BRA    2D1A
2D24:  MOVLB  4
2D26:  BTFSC  xC3.7
2D28:  BSF    FF2.7
2D2A:  BRA    2D96
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
2D2C:  MOVFF  4B6,03
2D30:  MOVFF  4B5,FE9
2D34:  MOVFF  4B6,FEA
2D38:  MOVF   FEF,W
2D3A:  SUBLW  7E
2D3C:  BNC   2D8C
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
2D3E:  MOVFF  4B6,03
2D42:  MOVFF  4B5,FE9
2D46:  MOVFF  4B6,FEA
2D4A:  MOVLW  53
2D4C:  SUBWF  FEF,W
2D4E:  MULLW  05
2D50:  MOVF   FF3,W
2D52:  CLRF   03
2D54:  MOVWF  xC2
2D56:  MOVLW  04
2D58:  MOVWF  FEA
2D5A:  MOVLW  BD
2D5C:  MOVWF  FE9
2D5E:  CLRF   xC6
2D60:  MOVFF  4C2,4C5
2D64:  MOVFF  FF2,4C3
2D68:  BCF    FF2.7
2D6A:  MOVLW  05
2D6C:  MOVWF  01
2D6E:  CLRF   FF7
2D70:  MOVF   xC2,W
2D72:  MOVLB  0
2D74:  CALL   0300
2D78:  TBLRD*-
2D7A:  TBLRD*+
2D7C:  MOVFF  FF5,FEE
2D80:  DECFSZ 01,F
2D82:  BRA    2D7A
2D84:  MOVLB  4
2D86:  BTFSC  xC3.7
2D88:  BSF    FF2.7
2D8A:  BRA    2D96
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
2D8C:  CLRF   xBD
2D8E:  CLRF   xBE
2D90:  CLRF   xBF
2D92:  CLRF   xC0
2D94:  CLRF   xC1
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
2D96:  MOVFF  4B6,03
2D9A:  MOVF   xB5,W
2D9C:  MOVWF  FE9
2D9E:  MOVFF  03,FEA
2DA2:  MOVF   FEF,W
2DA4:  XORLW  0A
2DA6:  MOVLB  0
2DA8:  BZ    2DB0
2DAA:  XORLW  07
2DAC:  BZ    2DC0
2DAE:  BRA    2DC8
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
2DB0:  MOVLB  4
2DB2:  MOVF   xB7,W
2DB4:  MULLW  07
2DB6:  MOVF   FF3,W
2DB8:  ADDLW  01
2DBA:  ADDWF  xB4,F
....................             continue; 
2DBC:  BRA    2E62
2DBE:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
2DC0:  MOVLB  4
2DC2:  CLRF   xB3
....................             continue; 
2DC4:  BRA    2E62
2DC6:  MOVLB  0
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
2DC8:  MOVLB  4
2DCA:  MOVF   xB7,W
2DCC:  MULLW  05
2DCE:  MOVF   FF3,W
2DD0:  ADDWF  xB3,W
2DD2:  SUBLW  7F
2DD4:  BC    2DE2
....................       { 
....................          x = 0;                           // Set x at far left position 
2DD6:  CLRF   xB3
....................          y += 7*size + 1;                 // Set y at next position down 
2DD8:  MOVF   xB7,W
2DDA:  MULLW  07
2DDC:  MOVF   FF3,W
2DDE:  ADDLW  01
2DE0:  ADDWF  xB4,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
2DE2:  CLRF   xB9
2DE4:  MOVF   xB9,W
2DE6:  SUBLW  04
2DE8:  BNC   2E62
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
2DEA:  CLRF   xBA
2DEC:  MOVF   xBA,W
2DEE:  SUBLW  06
2DF0:  BNC   2E5A
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
2DF2:  CLRF   03
2DF4:  MOVF   xB9,W
2DF6:  ADDLW  BD
2DF8:  MOVWF  FE9
2DFA:  MOVLW  04
2DFC:  ADDWFC 03,W
2DFE:  MOVWF  FEA
2E00:  MOVFF  FEF,4C2
2E04:  MOVFF  4C2,00
2E08:  MOVF   xBA,W
2E0A:  MOVWF  01
2E0C:  BZ    2E16
2E0E:  BCF    FD8.0
2E10:  RRCF   00,F
2E12:  DECFSZ 01,F
2E14:  BRA    2E0E
2E16:  BTFSS  00.0
2E18:  BRA    2E56
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
2E1A:  CLRF   xBB
2E1C:  MOVF   xB7,W
2E1E:  SUBWF  xBB,W
2E20:  BC    2E56
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
2E22:  CLRF   xBC
2E24:  MOVF   xB7,W
2E26:  SUBWF  xBC,W
2E28:  BC    2E52
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
2E2A:  MOVF   xBC,W
2E2C:  ADDWF  xB3,W
2E2E:  MOVWF  xC2
2E30:  MOVF   xBA,W
2E32:  MULWF  xB7
2E34:  MOVF   FF3,W
2E36:  ADDWF  xB4,W
2E38:  ADDWF  xBB,W
2E3A:  MOVWF  xC3
2E3C:  MOVFF  4C2,4CF
2E40:  MOVWF  xD0
2E42:  MOVFF  4B8,4D1
2E46:  MOVLB  0
2E48:  CALL   0AFC
2E4C:  MOVLB  4
2E4E:  INCF   xBC,F
2E50:  BRA    2E24
....................                   } 
2E52:  INCF   xBB,F
2E54:  BRA    2E1C
....................                } 
....................             } 
2E56:  INCF   xBA,F
2E58:  BRA    2DEC
....................          } 
2E5A:  INCF   xB9,F
2E5C:  MOVF   xB7,W
2E5E:  ADDWF  xB3,F
2E60:  BRA    2DE4
....................       } 
2E62:  INCF   xB5,F
2E64:  BTFSC  FD8.2
2E66:  INCF   xB6,F
2E68:  INCF   xB3,F
2E6A:  MOVLB  0
2E6C:  BRA    2CB8
2E6E:  MOVLB  4
....................    } 
2E70:  MOVLB  0
2E72:  GOTO   2ECC (RETURN)
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... unsigned char DichTrai[4] = {ma7doan[16],ma7doan[16],ma7doan[16],ma7doan[16]}; 
....................  
....................  
.................... unsigned char text[10]; 
.................... signed int8 max = 13,D,C,giay,bdn; 
.................... unsigned int8 count = 0,countT = 0,donvi = 0; 
.................... unsigned int8 preKey, preDis,Pretem; 
.................... unsigned int16 distance, tem; 
.................... float tempo; 
.................... unsigned int16 step = 0, maxstep = 0, prestep, number; 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... void READ_BTN() 
.................... { 
....................    prestep = step; 
*
3000:  MOVFF  4A9,4AD
3004:  MOVFF  4A8,4AC
....................    unsigned int8 key = key_4x4_dw(); 
3008:  BRA    2FC2
300A:  MOVFF  01,4B3
....................    if (key!=0xff) 
300E:  MOVLB  4
3010:  INCFSZ xB3,W
3012:  BRA    3016
3014:  BRA    308C
....................    { 
....................       if (key == 1) 
3016:  DECFSZ xB3,W
3018:  BRA    3022
....................       { 
....................          stepmotor_tn= 0; 
301A:  BCF    x84.0
....................          step = 1; 
301C:  CLRF   xA9
301E:  MOVLW  01
3020:  MOVWF  xA8
....................       } 
....................       if (key == 2) 
3022:  MOVF   xB3,W
3024:  SUBLW  02
3026:  BNZ   3030
....................       { 
....................          stepmotor_tn= 0; 
3028:  BCF    x84.0
....................          step = 2; 
302A:  CLRF   xA9
302C:  MOVLW  02
302E:  MOVWF  xA8
....................       } 
....................       if (key == 3) 
3030:  MOVF   xB3,W
3032:  SUBLW  03
3034:  BNZ   303E
....................       { 
....................          stepmotor_tn= 0; 
3036:  BCF    x84.0
....................          step = 3; 
3038:  CLRF   xA9
303A:  MOVLW  03
303C:  MOVWF  xA8
....................       } 
....................       if (key == 4) 
303E:  MOVF   xB3,W
3040:  SUBLW  04
3042:  BNZ   304C
....................       { 
....................          stepmotor_tn= 0; 
3044:  BCF    x84.0
....................          step = 4; 
3046:  CLRF   xA9
3048:  MOVLW  04
304A:  MOVWF  xA8
....................       } 
....................       if (key == 5) 
304C:  MOVF   xB3,W
304E:  SUBLW  05
3050:  BNZ   305A
....................       { 
....................          stepmotor_tn= 1; 
3052:  BSF    x84.0
....................          step = 1; 
3054:  CLRF   xA9
3056:  MOVLW  01
3058:  MOVWF  xA8
....................       } 
....................       if (key == 6) 
305A:  MOVF   xB3,W
305C:  SUBLW  06
305E:  BNZ   3068
....................       { 
....................          stepmotor_tn= 1; 
3060:  BSF    x84.0
....................          step = 2; 
3062:  CLRF   xA9
3064:  MOVLW  02
3066:  MOVWF  xA8
....................       } 
....................       if (key == 7) 
3068:  MOVF   xB3,W
306A:  SUBLW  07
306C:  BNZ   3076
....................       { 
....................          stepmotor_tn= 1; 
306E:  BSF    x84.0
....................          step = 3; 
3070:  CLRF   xA9
3072:  MOVLW  03
3074:  MOVWF  xA8
....................       } 
....................       if (key == 8) 
3076:  MOVF   xB3,W
3078:  SUBLW  08
307A:  BNZ   3084
....................       { 
....................          stepmotor_tn= 1; 
307C:  BSF    x84.0
....................          step = 4; 
307E:  CLRF   xA9
3080:  MOVLW  04
3082:  MOVWF  xA8
....................       } 
....................       maxstep = step; 
3084:  MOVFF  4A9,4AB
3088:  MOVFF  4A8,4AA
....................    } 
308C:  MOVLB  0
308E:  GOTO   34A4 (RETURN)
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
*
06B0:  MOVFF  4FE,503
06B4:  MOVFF  4FF,504
06B8:  RCALL  05D6
....................    for (int i = 0; i<6;i++){ 
06BA:  MOVLB  5
06BC:  CLRF   x00
06BE:  MOVF   x00,W
06C0:  SUBLW  05
06C2:  BNC   0720
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
06C4:  MOVF   x00,W
06C6:  SUBLW  03
06C8:  BNZ   06E0
06CA:  MOVLW  01
06CC:  MOVLB  4
06CE:  ADDWF  xFE,W
06D0:  MOVLB  5
06D2:  MOVWF  x01
06D4:  MOVWF  x03
06D6:  MOVFF  4FF,504
06DA:  MOVLB  0
06DC:  RCALL  05D6
06DE:  MOVLB  5
....................       lcd_data(lcd_so_x[lcd_so][i]); 
06E0:  MOVFF  4FD,502
06E4:  MOVLW  06
06E6:  MOVWF  x03
06E8:  MOVLB  0
06EA:  RCALL  0662
06EC:  MOVF   01,W
06EE:  MOVLB  5
06F0:  CLRF   x02
06F2:  MOVWF  x01
06F4:  CLRF   03
06F6:  MOVF   x00,W
06F8:  ADDWF  x01,W
06FA:  MOVWF  01
06FC:  MOVF   x02,W
06FE:  ADDWFC 03,F
0700:  MOVF   01,W
0702:  MOVFF  FF2,501
0706:  BCF    FF2.7
0708:  MOVLB  0
070A:  RCALL  0102
070C:  MOVLB  5
070E:  BTFSC  x01.7
0710:  BSF    FF2.7
0712:  MOVWF  x01
0714:  MOVWF  x03
0716:  MOVLB  0
0718:  RCALL  05F8
071A:  MOVLB  5
071C:  INCF   x00,F
071E:  BRA    06BE
....................    } 
0720:  MOVLB  0
0722:  RETURN 0
.................... } 
....................  
.................... void DISPLAY_GLCD() 
.................... { 
....................    glcd_bar(20,24,20+2*count,24,7,1); 
....................    glcd_bar(20,44,count*2+20,44,7,1); 
....................    delay_quet_8led(5); 
....................    gdram_vdk_to_gdram_glcd_area(20,24,50,10); 
.................... } 
....................  
.................... void CLEAR_GLCD() 
.................... { 
....................    glcd_bar(20,24,20+2*count,24,7,0); 
....................    glcd_bar(20,44,20+2*count,44,7,0); 
....................    gdram_vdk_to_gdram_glcd_area(20,24,50,10); 
....................    delay_quet_8led(5); 
.................... } 
....................  
.................... void XOA_SO_LON(signed int8 x1,y1){ 
*
2820:  CLRF   16
2822:  BTFSC  FF2.7
2824:  BSF    16.7
2826:  BCF    FF2.7
....................    lcd_goto_xy(x1,y1); 
2828:  MOVFF  4B3,503
282C:  MOVFF  4B4,504
2830:  CALL   05D6
2834:  BTFSC  16.7
2836:  BSF    FF2.7
....................    lcd_data("      "); 
2838:  MOVLW  F6
283A:  MOVWF  FF6
283C:  MOVLW  03
283E:  MOVWF  FF7
2840:  CLRF   16
2842:  BTFSC  FF2.7
2844:  BSF    16.7
2846:  BCF    FF2.7
2848:  CALL   060E
284C:  BTFSC  16.7
284E:  BSF    FF2.7
....................    lcd_goto_xy(x1+1,y1); 
2850:  MOVLW  01
2852:  MOVLB  4
2854:  ADDWF  xB3,W
2856:  MOVWF  xB5
2858:  CLRF   16
285A:  BTFSC  FF2.7
285C:  BSF    16.7
285E:  BCF    FF2.7
2860:  MOVFF  FE8,503
2864:  MOVFF  4B4,504
2868:  MOVLB  0
286A:  CALL   05D6
286E:  BTFSC  16.7
2870:  BSF    FF2.7
....................    lcd_data("      "); 
2872:  MOVLW  FE
2874:  MOVWF  FF6
2876:  MOVLW  03
2878:  MOVWF  FF7
287A:  CLRF   16
287C:  BTFSC  FF2.7
287E:  BSF    16.7
2880:  BCF    FF2.7
2882:  CALL   060E
2886:  BTFSC  16.7
2888:  BSF    FF2.7
....................    lcd_goto_xy(x1,y1+2); 
288A:  MOVLW  02
288C:  MOVLB  4
288E:  ADDWF  xB4,W
2890:  MOVWF  xB5
2892:  CLRF   16
2894:  BTFSC  FF2.7
2896:  BSF    16.7
2898:  BCF    FF2.7
289A:  MOVFF  4B3,503
289E:  MOVFF  FE8,504
28A2:  MOVLB  0
28A4:  CALL   05D6
28A8:  BTFSC  16.7
28AA:  BSF    FF2.7
....................    lcd_data("      "); 
28AC:  MOVLW  06
28AE:  MOVWF  FF6
28B0:  MOVLW  04
28B2:  MOVWF  FF7
28B4:  CLRF   16
28B6:  BTFSC  FF2.7
28B8:  BSF    16.7
28BA:  BCF    FF2.7
28BC:  CALL   060E
28C0:  BTFSC  16.7
28C2:  BSF    FF2.7
....................    lcd_goto_xy(x1+1,y1+2); 
28C4:  MOVLW  01
28C6:  MOVLB  4
28C8:  ADDWF  xB3,W
28CA:  MOVWF  xB5
28CC:  MOVLW  02
28CE:  ADDWF  xB4,W
28D0:  MOVWF  xB6
28D2:  CLRF   16
28D4:  BTFSC  FF2.7
28D6:  BSF    16.7
28D8:  BCF    FF2.7
28DA:  MOVFF  4B5,503
28DE:  MOVFF  FE8,504
28E2:  MOVLB  0
28E4:  CALL   05D6
28E8:  BTFSC  16.7
28EA:  BSF    FF2.7
....................    lcd_data("      "); 
28EC:  MOVLW  0E
28EE:  MOVWF  FF6
28F0:  MOVLW  04
28F2:  MOVWF  FF7
28F4:  CLRF   16
28F6:  BTFSC  FF2.7
28F8:  BSF    16.7
28FA:  BCF    FF2.7
28FC:  CALL   060E
2900:  BTFSC  16.7
2902:  BSF    FF2.7
2904:  RETURN 0
.................... } 
....................  
.................... void XOA_SO_1_LON(signed int8 x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
*
062E:  MOVFF  4FD,503
0632:  MOVFF  4FE,504
0636:  RCALL  05D6
....................    lcd_data("      "); 
0638:  MOVLW  16
063A:  MOVWF  FF6
063C:  MOVLW  04
063E:  MOVWF  FF7
0640:  RCALL  060E
....................    lcd_goto_xy(x1+1,y1); 
0642:  MOVLW  01
0644:  MOVLB  4
0646:  ADDWF  xFD,W
0648:  MOVWF  xFF
064A:  MOVFF  FE8,503
064E:  MOVFF  4FE,504
0652:  MOVLB  0
0654:  RCALL  05D6
....................    lcd_data("      "); 
0656:  MOVLW  1E
0658:  MOVWF  FF6
065A:  MOVLW  04
065C:  MOVWF  FF7
065E:  RCALL  060E
0660:  RETURN 0
.................... } 
....................  
.................... void DISPLAY_8SEVSEG() 
.................... { 
....................    led_7dq[0] = ma7doan[Count%10]; 
....................    led_7dq[1] = ma7doan[Count/10]; 
....................  
....................    led_7dq[4] = ma7doan[Count%10]; 
....................    led_7dq[5] = ma7doan[Count/10]; 
.................... } 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    sprintf(text,"%d",count); 
*
2E76:  MOVLW  04
2E78:  MOVLB  4
2E7A:  MOVWF  xB1
2E7C:  MOVLW  8B
2E7E:  MOVWF  xB0
2E80:  MOVFF  49A,4B3
2E84:  MOVLW  18
2E86:  MOVWF  xB4
2E88:  MOVLB  0
2E8A:  BRA    2BFA
....................    glcd_mau_nen(0); 
2E8C:  MOVLB  4
2E8E:  CLRF   xB3
2E90:  MOVLB  0
2E92:  CALL   0984
....................    glcd_circle(32,32,30,0,1); 
2E96:  MOVLW  20
2E98:  MOVLB  4
2E9A:  MOVWF  xB3
2E9C:  MOVWF  xB4
2E9E:  MOVLW  1E
2EA0:  MOVWF  xB5
2EA2:  CLRF   xB6
2EA4:  MOVLW  01
2EA6:  MOVWF  xB7
2EA8:  MOVLB  0
2EAA:  CALL   0D4A
....................    glcd_text57(15,20,text,3,1); 
2EAE:  MOVLW  0F
2EB0:  MOVLB  4
2EB2:  MOVWF  xB3
2EB4:  MOVLW  14
2EB6:  MOVWF  xB4
2EB8:  MOVLW  04
2EBA:  MOVWF  xB6
2EBC:  MOVLW  8B
2EBE:  MOVWF  xB5
2EC0:  MOVLW  03
2EC2:  MOVWF  xB7
2EC4:  MOVLW  01
2EC6:  MOVWF  xB8
2EC8:  MOVLB  0
2ECA:  BRA    2CB8
....................    gdram_vdk_to_gdram_glcd_all(); 
2ECC:  CALL   0A10
2ED0:  GOTO   3488 (RETURN)
.................... } 
....................  
.................... unsigned int16 READ_TEMP() 
.................... { 
....................    unsigned int16 lm35a; 
....................    set_adc_channel(0); 
*
2798:  MOVLW  00
279A:  MOVWF  01
279C:  MOVF   FC2,W
279E:  ANDLW  C3
27A0:  IORWF  01,W
27A2:  MOVWF  FC2
....................    lm35a = read_adc(); 
27A4:  BSF    FC2.1
27A6:  BTFSC  FC2.1
27A8:  BRA    27A6
27AA:  MOVFF  FC4,4B4
27AE:  MOVLB  4
27B0:  MOVFF  FC3,4B3
....................    delay_quet_8led(2); 
27B4:  CLRF   xBA
27B6:  MOVLW  02
27B8:  MOVWF  xB9
27BA:  MOVLB  0
27BC:  CALL   1090
....................    lm35a = lm35a/2.046; 
27C0:  MOVFF  4B4,4EE
27C4:  MOVFF  4B3,4ED
27C8:  CALL   10F2
27CC:  MOVFF  03,4E5
27D0:  MOVFF  02,4E4
27D4:  MOVFF  01,4E3
27D8:  MOVFF  00,4E2
27DC:  MOVLW  AA
27DE:  MOVLB  4
27E0:  MOVWF  xE9
27E2:  MOVLW  F1
27E4:  MOVWF  xE8
27E6:  MOVLW  02
27E8:  MOVWF  xE7
27EA:  MOVLW  80
27EC:  MOVWF  xE6
27EE:  MOVLB  0
27F0:  CALL   11A2
27F4:  MOVFF  03,4EC
27F8:  MOVFF  02,4EB
27FC:  MOVFF  01,4EA
2800:  MOVFF  00,4E9
2804:  CALL   1300
2808:  MOVFF  02,4B4
280C:  MOVFF  01,4B3
....................    return lm35a; 
2810:  MOVLB  4
2812:  MOVFF  4B3,01
2816:  MOVFF  4B4,02
281A:  MOVLB  0
281C:  GOTO   3452 (RETURN)
.................... } 
....................  
.................... float READ_DISTANCE() 
.................... { 
....................    float k_cach; 
....................    unsigned int16 kqadc; 
....................    set_adc_channel(2); 
*
268E:  MOVLW  08
2690:  MOVWF  01
2692:  MOVF   FC2,W
2694:  ANDLW  C3
2696:  IORWF  01,W
2698:  MOVWF  FC2
....................    kqadc = read_adc(); 
269A:  BSF    FC2.1
269C:  BTFSC  FC2.1
269E:  BRA    269C
26A0:  MOVFF  FC4,4B8
26A4:  MOVLB  4
26A6:  MOVFF  FC3,4B7
....................    delay_quet_8led(10); 
26AA:  CLRF   xBA
26AC:  MOVLW  0A
26AE:  MOVWF  xB9
26B0:  MOVLB  0
26B2:  CALL   1090
....................    k_cach = pow(4277/kqadc,1.106); 
26B6:  MOVLW  10
26B8:  MOVLB  4
26BA:  MOVWF  xBA
26BC:  MOVLW  B5
26BE:  MOVWF  xB9
26C0:  MOVFF  4B8,4BC
26C4:  MOVFF  4B7,4BB
26C8:  MOVLB  0
26CA:  CALL   10AC
26CE:  MOVFF  02,4EE
26D2:  MOVFF  01,4ED
26D6:  MOVLB  0
26D8:  CALL   10F2
26DC:  MOVFF  03,4BC
26E0:  MOVFF  02,4BB
26E4:  MOVFF  01,4BA
26E8:  MOVFF  00,4B9
26EC:  MOVFF  03,4C0
26F0:  MOVFF  02,4BF
26F4:  MOVFF  01,4BE
26F8:  MOVFF  00,4BD
26FC:  MOVLW  68
26FE:  MOVLB  4
2700:  MOVWF  xC4
2702:  MOVLW  91
2704:  MOVWF  xC3
2706:  MOVLW  0D
2708:  MOVWF  xC2
270A:  MOVLW  7F
270C:  MOVWF  xC1
270E:  MOVLB  0
2710:  BRA    2382
2712:  MOVFF  03,4B6
2716:  MOVFF  02,4B5
271A:  MOVFF  01,4B4
271E:  MOVFF  00,4B3
....................    if (k_cach>80) k_cach=80; 
2722:  MOVLB  4
2724:  CLRF   xEC
2726:  CLRF   xEB
2728:  MOVLW  20
272A:  MOVWF  xEA
272C:  MOVLW  85
272E:  MOVWF  xE9
2730:  MOVFF  4B6,4F0
2734:  MOVFF  4B5,4EF
2738:  MOVFF  4B4,4EE
273C:  MOVFF  4B3,4ED
2740:  MOVLB  0
2742:  CALL   1128
2746:  BNC   2758
2748:  MOVLB  4
274A:  CLRF   xB6
274C:  CLRF   xB5
274E:  MOVLW  20
2750:  MOVWF  xB4
2752:  MOVLW  85
2754:  MOVWF  xB3
2756:  MOVLB  0
....................    return k_cach; 
2758:  MOVFF  4B3,00
275C:  MOVFF  4B4,01
2760:  MOVFF  4B5,02
2764:  MOVFF  4B6,03
2768:  GOTO   3422 (RETURN)
.................... } 
....................  
.................... unsigned int16 DECODE(float tem) 
.................... { 
....................    unsigned int16 x; 
....................    x = (unsigned int16) tem; 
276C:  MOVFF  4B6,4EC
2770:  MOVFF  4B5,4EB
2774:  MOVFF  4B4,4EA
2778:  MOVFF  4B3,4E9
277C:  CALL   1300
2780:  MOVFF  02,4B8
2784:  MOVFF  01,4B7
....................    return x; 
2788:  MOVLB  4
278A:  MOVFF  4B7,01
278E:  MOVFF  4B8,02
2792:  MOVLB  0
2794:  GOTO   3446 (RETURN)
.................... } 
....................  
.................... void DISPLAY_TEMP() 
.................... { 
....................    if (distance <43) 
*
2AE4:  MOVLB  4
2AE6:  MOVF   xA1,F
2AE8:  BNZ   2B26
2AEA:  MOVF   xA0,W
2AEC:  SUBLW  2A
2AEE:  BNC   2B26
....................    { 
....................       XOA_SO_LON(2,0); 
2AF0:  MOVLW  02
2AF2:  MOVWF  xB3
2AF4:  CLRF   xB4
2AF6:  MOVLB  0
2AF8:  RCALL  2820
2AFA:  CLRF   16
2AFC:  BTFSC  FF2.7
2AFE:  BSF    16.7
2B00:  BCF    FF2.7
....................       lcd_goto_xy(2,0); 
2B02:  MOVLW  02
2B04:  MOVLB  5
2B06:  MOVWF  x03
2B08:  CLRF   x04
2B0A:  MOVLB  0
2B0C:  CALL   05D6
2B10:  BTFSC  16.7
2B12:  BSF    FF2.7
....................       printf(lcd_data,"%ld",tem); 
2B14:  MOVLW  10
2B16:  MOVWF  FE9
2B18:  MOVFF  4A3,4B4
2B1C:  MOVFF  4A2,4B3
2B20:  RCALL  2906
....................    } 
2B22:  BRA    2BAA
2B24:  MOVLB  4
....................    else 
....................    { 
....................       Xoa_So_Lon(2,0); 
2B26:  MOVLW  02
2B28:  MOVWF  xB3
2B2A:  CLRF   xB4
2B2C:  MOVLB  0
2B2E:  RCALL  2820
....................       LCD_SO_LON(tem/10,2,0); 
2B30:  MOVFF  4A3,4BA
2B34:  MOVFF  4A2,4B9
2B38:  MOVLB  4
2B3A:  CLRF   xBC
2B3C:  MOVLW  0A
2B3E:  MOVWF  xBB
2B40:  MOVLB  0
2B42:  CALL   10AC
2B46:  MOVFF  02,4B4
2B4A:  MOVFF  01,4B3
2B4E:  CLRF   16
2B50:  BTFSC  FF2.7
2B52:  BSF    16.7
2B54:  BCF    FF2.7
2B56:  MOVFF  01,4FD
2B5A:  MOVLW  02
2B5C:  MOVLB  4
2B5E:  MOVWF  xFE
2B60:  CLRF   xFF
2B62:  MOVLB  0
2B64:  CALL   06B0
2B68:  BTFSC  16.7
2B6A:  BSF    FF2.7
....................       LCD_SO_LON(tem%10,2,3); 
2B6C:  MOVFF  4A3,4BA
2B70:  MOVFF  4A2,4B9
2B74:  MOVLB  4
2B76:  CLRF   xBC
2B78:  MOVLW  0A
2B7A:  MOVWF  xBB
2B7C:  MOVLB  0
2B7E:  CALL   10AC
2B82:  MOVFF  00,4B3
2B86:  MOVLB  4
2B88:  MOVFF  03,4B4
2B8C:  CLRF   16
2B8E:  BTFSC  FF2.7
2B90:  BSF    16.7
2B92:  BCF    FF2.7
2B94:  MOVFF  00,4FD
2B98:  MOVLW  02
2B9A:  MOVWF  xFE
2B9C:  MOVLW  03
2B9E:  MOVWF  xFF
2BA0:  MOVLB  0
2BA2:  CALL   06B0
2BA6:  BTFSC  16.7
2BA8:  BSF    FF2.7
....................    } 
2BAA:  GOTO   3474 (RETURN)
.................... } 
....................  
.................... void DISPLAY_DIS() 
.................... { 
....................    if (distance <43) 
*
2A12:  MOVLB  4
2A14:  MOVF   xA1,F
2A16:  BNZ   2AAA
2A18:  MOVF   xA0,W
2A1A:  SUBLW  2A
2A1C:  BNC   2AAA
....................    { 
....................       XOA_SO_LON(2,14); 
2A1E:  MOVLW  02
2A20:  MOVWF  xB3
2A22:  MOVLW  0E
2A24:  MOVWF  xB4
2A26:  MOVLB  0
2A28:  RCALL  2820
....................       LCD_SO_LON(distance/10,2,14); 
2A2A:  MOVFF  4A1,4BA
2A2E:  MOVFF  4A0,4B9
2A32:  MOVLB  4
2A34:  CLRF   xBC
2A36:  MOVLW  0A
2A38:  MOVWF  xBB
2A3A:  MOVLB  0
2A3C:  CALL   10AC
2A40:  MOVFF  02,4B4
2A44:  MOVFF  01,4B3
2A48:  CLRF   16
2A4A:  BTFSC  FF2.7
2A4C:  BSF    16.7
2A4E:  BCF    FF2.7
2A50:  MOVFF  01,4FD
2A54:  MOVLW  02
2A56:  MOVLB  4
2A58:  MOVWF  xFE
2A5A:  MOVLW  0E
2A5C:  MOVWF  xFF
2A5E:  MOVLB  0
2A60:  CALL   06B0
2A64:  BTFSC  16.7
2A66:  BSF    FF2.7
....................       LCD_SO_LON(distance%10,2,17); 
2A68:  MOVFF  4A1,4BA
2A6C:  MOVFF  4A0,4B9
2A70:  MOVLB  4
2A72:  CLRF   xBC
2A74:  MOVLW  0A
2A76:  MOVWF  xBB
2A78:  MOVLB  0
2A7A:  CALL   10AC
2A7E:  MOVFF  00,4B3
2A82:  MOVLB  4
2A84:  MOVFF  03,4B4
2A88:  CLRF   16
2A8A:  BTFSC  FF2.7
2A8C:  BSF    16.7
2A8E:  BCF    FF2.7
2A90:  MOVFF  00,4FD
2A94:  MOVLW  02
2A96:  MOVWF  xFE
2A98:  MOVLW  11
2A9A:  MOVWF  xFF
2A9C:  MOVLB  0
2A9E:  CALL   06B0
2AA2:  BTFSC  16.7
2AA4:  BSF    FF2.7
....................    } 
2AA6:  BRA    2AE0
2AA8:  MOVLB  4
....................    else 
....................    { 
....................       Xoa_So_Lon(2,14); 
2AAA:  MOVLW  02
2AAC:  MOVWF  xB3
2AAE:  MOVLW  0E
2AB0:  MOVWF  xB4
2AB2:  MOVLB  0
2AB4:  RCALL  2820
2AB6:  CLRF   16
2AB8:  BTFSC  FF2.7
2ABA:  BSF    16.7
2ABC:  BCF    FF2.7
....................       lcd_goto_xy(2,14); 
2ABE:  MOVLW  02
2AC0:  MOVLB  5
2AC2:  MOVWF  x03
2AC4:  MOVLW  0E
2AC6:  MOVWF  x04
2AC8:  MOVLB  0
2ACA:  CALL   05D6
2ACE:  BTFSC  16.7
2AD0:  BSF    FF2.7
....................       printf(lcd_data,"%ld",distance); 
2AD2:  MOVLW  10
2AD4:  MOVWF  FE9
2AD6:  MOVFF  4A1,4B4
2ADA:  MOVFF  4A0,4B3
2ADE:  RCALL  2906
....................    } 
2AE0:  GOTO   346C (RETURN)
.................... } 
....................  
.................... void DISPLAY_STEP() 
.................... { 
....................    XOA_SO_1_LON(2,8); 
*
0724:  MOVLW  02
0726:  MOVLB  4
0728:  MOVWF  xFD
072A:  MOVLW  08
072C:  MOVWF  xFE
072E:  MOVLB  0
0730:  RCALL  062E
....................    LCD_SO_LON(step,2,8); 
0732:  MOVFF  4A8,4FD
0736:  MOVLW  02
0738:  MOVLB  4
073A:  MOVWF  xFE
073C:  MOVLW  08
073E:  MOVWF  xFF
0740:  MOVLB  0
0742:  RCALL  06B0
0744:  RETURN 0
.................... } 
....................  
.................... void RUN_STEP() 
.................... { 
....................    motor_step_run_fs(); 
0746:  BRA    04FC
....................    number++; 
0748:  MOVLB  4
074A:  INCF   xAE,F
074C:  BTFSC  FD8.2
074E:  INCF   xAF,F
....................    delay_ms(stepmotor_delay); 
0750:  MOVFF  483,4FD
0754:  MOVLB  0
0756:  RCALL  0512
....................    if (number == 200) {prestep = step; step--; number = 0; DISPLAY_STEP();} 
0758:  MOVLB  4
075A:  MOVF   xAE,W
075C:  SUBLW  C8
075E:  BNZ   077C
0760:  MOVF   xAF,F
0762:  BNZ   077C
0764:  MOVFF  4A9,4AD
0768:  MOVF   xA8,W
076A:  MOVWF  xAC
076C:  BTFSC  FD8.2
076E:  DECF   xA9,F
0770:  DECF   xA8,F
0772:  CLRF   xAF
0774:  CLRF   xAE
0776:  MOVLB  0
0778:  RCALL  0724
077A:  MOVLB  4
077C:  MOVLB  0
077E:  GOTO   079A (RETURN)
.................... } 
....................  
.................... void RUN_DC() 
.................... { 
....................    if (count >= 3 && count<= 13) 
*
2EF8:  MOVLB  4
2EFA:  MOVF   x9A,W
2EFC:  SUBLW  02
2EFE:  BC    2F0E
2F00:  MOVF   x9A,W
2F02:  SUBLW  0D
2F04:  BNC   2F0E
....................    { 
....................       dc_motor_quay_thuan(); 
2F06:  MOVLB  0
2F08:  BRA    2ED4
....................    } 
2F0A:  BRA    2F26
2F0C:  MOVLB  4
....................    else if(count >= 15 && count<= 25) 
2F0E:  MOVF   x9A,W
2F10:  SUBLW  0E
2F12:  BC    2F22
2F14:  MOVF   x9A,W
2F16:  SUBLW  19
2F18:  BNC   2F22
....................    { 
....................       dc_motor_quay_nghich(); 
2F1A:  MOVLB  0
2F1C:  BRA    2EE0
....................    } 
2F1E:  BRA    2F26
2F20:  MOVLB  4
....................    else 
....................    { 
....................       dc_motor_stop(); 
2F22:  MOVLB  0
2F24:  BRA    2EEC
....................    } 
2F26:  GOTO   348A (RETURN)
....................     
.................... } 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
0782:  MOVLB  4
0784:  INCF   x99,F
....................    set_timer1(10000); //3036 
0786:  MOVLW  27
0788:  MOVWF  FCF
078A:  MOVLW  10
078C:  MOVWF  FCE
....................          if (step > 0) 
078E:  MOVF   xA8,F
0790:  BNZ   0796
0792:  MOVF   xA9,F
0794:  BZ    079E
....................          { 
....................             RUN_STEP(); 
0796:  MOVLB  0
0798:  BRA    0746
....................          } 
079A:  BRA    07A2
079C:  MOVLB  4
....................          else 
....................          { 
....................             disable_interrupts(INT_TIMER1); 
079E:  BCF    F9D.0
07A0:  MOVLB  0
....................          } 
07A2:  BCF    F9E.0
07A4:  GOTO   0054
.................... } 
....................  
.................... void main() 
*
3202:  CLRF   FF8
3204:  BCF    FD0.7
3206:  BSF    07.7
3208:  CLRF   19
320A:  CLRF   20
320C:  CLRF   21
320E:  CLRF   22
3210:  CLRF   23
3212:  CLRF   2C
3214:  CLRF   2D
3216:  CLRF   2E
3218:  CLRF   32
321A:  CLRF   31
321C:  CLRF   30
321E:  CLRF   2F
3220:  CLRF   36
3222:  CLRF   35
3224:  CLRF   34
3226:  MOVLW  01
3228:  MOVWF  33
322A:  MOVLW  80
322C:  MOVWF  3A
322E:  CLRF   39
3230:  CLRF   38
3232:  CLRF   37
3234:  CLRF   3E
3236:  CLRF   3D
3238:  CLRF   3C
323A:  CLRF   3B
323C:  MOVWF  42
323E:  CLRF   41
3240:  CLRF   44
3242:  MOVLW  01
3244:  MOVWF  43
3246:  CLRF   46
3248:  CLRF   45
324A:  MOVLW  80
324C:  MOVWF  4A
324E:  CLRF   49
3250:  CLRF   4C
3252:  MOVLW  01
3254:  MOVWF  4B
3256:  CLRF   4E
3258:  CLRF   4D
325A:  CLRF   50
325C:  CLRF   4F
325E:  CLRF   51
3260:  MOVLW  20
3262:  MOVWF  52
3264:  CLRF   53
3266:  MOVLW  01
3268:  MOVWF  54
326A:  MOVLW  10
326C:  MOVWF  55
326E:  CLRF   56
3270:  CLRF   5A
3272:  CLRF   59
3274:  CLRF   58
3276:  MOVLW  01
3278:  MOVWF  57
327A:  CLRF   5E
327C:  CLRF   5D
327E:  CLRF   5C
3280:  MOVWF  5B
3282:  SETF   x62
3284:  SETF   x61
3286:  SETF   x60
3288:  MOVLW  FE
328A:  MOVWF  5F
328C:  MOVLW  80
328E:  MOVWF  x66
3290:  CLRF   x65
3292:  CLRF   x64
3294:  CLRF   x63
3296:  MOVWF  x6A
3298:  CLRF   x69
329A:  CLRF   x68
329C:  CLRF   x67
329E:  MOVLW  7F
32A0:  MOVWF  x6E
32A2:  SETF   x6D
32A4:  SETF   x6C
32A6:  SETF   x6B
32A8:  MOVLW  01
32AA:  MOVWF  x6F
32AC:  MOVWF  x70
32AE:  MOVLB  4
32B0:  CLRF   x82
32B2:  BCF    x84.0
32B4:  BCF    x84.1
32B6:  BCF    x84.2
32B8:  BCF    x84.3
32BA:  MOVLW  0D
32BC:  MOVWF  x95
32BE:  CLRF   x9A
32C0:  CLRF   x9B
32C2:  CLRF   x9C
32C4:  CLRF   xA9
32C6:  CLRF   xA8
32C8:  CLRF   xAB
32CA:  CLRF   xAA
32CC:  CLRF   xB1
32CE:  CLRF   xB0
32D0:  MOVF   FC1,W
32D2:  ANDLW  C0
32D4:  IORLW  0F
32D6:  MOVWF  FC1
32D8:  MOVLW  07
32DA:  MOVWF  FB4
32DC:  SETF   24
32DE:  SETF   25
32E0:  SETF   26
32E2:  SETF   27
32E4:  SETF   28
32E6:  SETF   29
32E8:  SETF   2A
32EA:  SETF   2B
32EC:  MOVLW  1D
32EE:  MOVWF  x76
32F0:  MOVLW  17
32F2:  MOVWF  x77
32F4:  MOVLW  1B
32F6:  MOVWF  x78
32F8:  MOVLW  0F
32FA:  MOVWF  x79
32FC:  MOVLW  1D
32FE:  MOVWF  x7A
3300:  MOVLW  15
3302:  MOVWF  x7B
3304:  MOVLW  17
3306:  MOVWF  x7C
3308:  MOVLW  13
330A:  MOVWF  x7D
330C:  MOVLW  03
330E:  MOVWF  x7E
3310:  MOVLW  0B
3312:  MOVWF  x7F
3314:  MOVLW  09
3316:  MOVWF  x80
3318:  MOVLW  0D
331A:  MOVWF  x81
331C:  MOVLW  7F
331E:  MOVWF  x87
3320:  MOVWF  x88
3322:  MOVWF  x89
3324:  MOVWF  x8A
.................... { 
....................    set_up_port_ic_chot(); 
3326:  MOVLB  0
3328:  GOTO   07A8
....................    set_tris_b(0x3c); 
332C:  MOVLW  3C
332E:  MOVWF  F93
....................    setup_adc(ADC_CLOCK_DIV_16); 
3330:  MOVF   FC0,W
3332:  ANDLW  C0
3334:  IORLW  05
3336:  MOVWF  FC0
3338:  BSF    FC0.7
333A:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN2|VSS_VDD); 
333C:  MOVF   FC1,W
333E:  ANDLW  C0
3340:  IORLW  0C
3342:  MOVWF  FC1
....................  
....................    setup_lcd(); 
3344:  GOTO   07C6
3348:  CLRF   16
334A:  BTFSC  FF2.7
334C:  BSF    16.7
334E:  BCF    FF2.7
....................  
....................  
....................    lcd_command(0x40); 
3350:  MOVLW  40
3352:  MOVLB  5
3354:  MOVWF  x06
3356:  MOVLB  0
3358:  CALL   05C0
335C:  BTFSC  16.7
335E:  BSF    FF2.7
....................    for (int i = 0; i<64;i++){ 
3360:  MOVLB  4
3362:  CLRF   xB2
3364:  MOVF   xB2,W
3366:  SUBLW  3F
3368:  BNC   339E
....................       lcd_data(lcd_ma_8doan[i]); 
336A:  CLRF   03
336C:  MOVF   xB2,W
336E:  MOVFF  FF2,4B3
3372:  BCF    FF2.7
3374:  MOVLB  0
3376:  CALL   0166
337A:  MOVLB  4
337C:  BTFSC  xB3.7
337E:  BSF    FF2.7
3380:  MOVWF  xB3
3382:  CLRF   16
3384:  BTFSC  FF2.7
3386:  BSF    16.7
3388:  BCF    FF2.7
338A:  MOVFF  FE8,503
338E:  MOVLB  0
3390:  CALL   05F8
3394:  BTFSC  16.7
3396:  BSF    FF2.7
3398:  MOVLB  4
339A:  INCF   xB2,F
339C:  BRA    3364
....................    } 
....................  
....................  
....................    //LCD_DISPLAY_COUNTER(); 
....................    xuat_4led_7doan_4so(ma7doan[16],ma7doan[16],ma7doan[16],ma7doan[16]);   
339E:  MOVLW  7F
33A0:  MOVWF  xB5
33A2:  MOVWF  xB6
33A4:  MOVWF  xB7
33A6:  MOVWF  xB8
33A8:  MOVLB  0
33AA:  CALL   085E
....................  
....................  
....................    setup_glcd(glcd_graphic_mode); 
33AE:  MOVLW  36
33B0:  MOVLB  4
33B2:  MOVWF  xB3
33B4:  MOVLB  0
33B6:  GOTO   08FC
....................  
....................    glcd_mau_nen(0); 
33BA:  MOVLB  4
33BC:  CLRF   xB3
33BE:  MOVLB  0
33C0:  CALL   0984
....................    gdram_vdk_to_gdram_glcd_all(); 
33C4:  CALL   0A10
....................    glcd_circle(32,32,30,0,1); 
33C8:  MOVLW  20
33CA:  MOVLB  4
33CC:  MOVWF  xB3
33CE:  MOVWF  xB4
33D0:  MOVLW  1E
33D2:  MOVWF  xB5
33D4:  CLRF   xB6
33D6:  MOVLW  01
33D8:  MOVWF  xB7
33DA:  MOVLB  0
33DC:  CALL   0D4A
....................    gdram_vdk_to_gdram_glcd_all(); 
33E0:  CALL   0A10
....................  
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
33E4:  MOVLW  A8
33E6:  MOVWF  FD5
....................    set_timer0(0);    
33E8:  CLRF   FD7
33EA:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
33EC:  MOVLW  85
33EE:  MOVWF  FCD
....................    set_timer1(10000); // 3036 
33F0:  MOVLW  27
33F2:  MOVWF  FCF
33F4:  MOVLW  10
33F6:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
33F8:  MOVLW  C0
33FA:  IORWF  FF2,F
....................    disable_interrupts(INT_TIMER1); 
33FC:  BCF    F9D.0
....................    dc_motor_enable(); 
33FE:  GOTO   0F7A
....................  
....................    bdn = 0; 
3402:  MOVLB  4
3404:  CLRF   x99
....................    preKey = 0; 
3406:  CLRF   x9D
....................    preDis = 0; 
3408:  CLRF   x9E
....................    Pretem = 0; 
340A:  CLRF   x9F
....................  
....................    stepmotor_onoff = 1; 
340C:  BSF    x84.1
....................    stepmotor_delay = 1; 
340E:  MOVLW  01
3410:  MOVWF  x83
....................    while(TRUE) 
....................    {   
....................       if (bdn<2) { 
3412:  BTFSC  x99.7
3414:  BRA    341C
3416:  MOVF   x99,W
3418:  SUBLW  01
341A:  BNC   34CA
....................          tempo= READ_DISTANCE(); 
341C:  MOVLB  0
341E:  GOTO   268E
3422:  MOVFF  03,4A7
3426:  MOVFF  02,4A6
342A:  MOVFF  01,4A5
342E:  MOVFF  00,4A4
....................          distance = DECODE(tempo); 
3432:  MOVFF  4A7,4B6
3436:  MOVFF  4A6,4B5
343A:  MOVFF  4A5,4B4
343E:  MOVFF  4A4,4B3
3442:  GOTO   276C
3446:  MOVFF  02,4A1
344A:  MOVFF  01,4A0
....................          tem = READ_TEMP(); 
344E:  GOTO   2798
3452:  MOVFF  02,4A3
3456:  MOVFF  01,4A2
....................          if (distance != preDis) 
345A:  MOVLB  4
345C:  MOVF   x9E,W
345E:  SUBWF  xA0,W
3460:  BNZ   3466
3462:  MOVF   xA1,F
3464:  BZ    3476
....................          { 
....................             DISPLAY_DIS(); 
3466:  MOVLB  0
3468:  GOTO   2A12
....................             preDis = distance; 
346C:  MOVFF  4A0,49E
....................             DISPLAY_TEMP(); 
3470:  GOTO   2AE4
3474:  MOVLB  4
....................          } 
....................          count = get_timer0(); 
3476:  MOVF   FD6,W
3478:  MOVWF  x9A
....................          if (count != countT) { 
347A:  MOVF   x9B,W
347C:  SUBWF  x9A,W
347E:  BZ    3498
....................             countT = count; 
3480:  MOVFF  49A,49B
....................             LCD_DISPLAY_COUNTER(); 
3484:  MOVLB  0
3486:  BRA    2E76
....................             RUN_DC(); 
3488:  BRA    2EF8
....................             if (count >= 30) {set_timer0(1);}   
348A:  MOVLB  4
348C:  MOVF   x9A,W
348E:  SUBLW  1D
3490:  BC    3498
3492:  CLRF   FD7
3494:  MOVLW  01
3496:  MOVWF  FD6
....................          } 
....................          if (step == 0) 
3498:  MOVF   xA8,F
349A:  BNZ   34C8
349C:  MOVF   xA9,F
349E:  BNZ   34C8
....................          { 
....................             READ_BTN(); 
34A0:  MOVLB  0
34A2:  BRA    3000
....................             enable_interrupts(INT_TIMER1); 
34A4:  BSF    F9D.0
....................             if (step != prestep) DISPLAY_STEP(); 
34A6:  MOVLB  4
34A8:  MOVF   xAC,W
34AA:  SUBWF  xA8,W
34AC:  BNZ   34B4
34AE:  MOVF   xAD,W
34B0:  SUBWF  xA9,W
34B2:  BZ    34C8
34B4:  CLRF   16
34B6:  BTFSC  FF2.7
34B8:  BSF    16.7
34BA:  BCF    FF2.7
34BC:  MOVLB  0
34BE:  CALL   0724
34C2:  BTFSC  16.7
34C4:  BSF    FF2.7
34C6:  MOVLB  4
....................          }   
....................       } 
34C8:  BRA    34DA
....................       else  
....................       { 
....................          bdn = bdn -2; 
34CA:  MOVLW  02
34CC:  SUBWF  x99,F
....................          xuat_4led_7doan_giaima_xoa_so0(bdn); 
34CE:  CLRF   xB4
34D0:  MOVFF  499,4B3
34D4:  MOVLB  0
34D6:  BRA    3092
34D8:  MOVLB  4
....................        } 
34DA:  BRA    3412
....................    } 
....................  
.................... } 
34DC:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
