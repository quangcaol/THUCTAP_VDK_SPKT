CCS PCH C Compiler, Version 5.078, 43599               23-Nov-20 14:52

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK9\654\654.lst

               ROM used:   4722 bytes (14%)
                           Largest free fragment is 28042
               RAM used:   1163 (57%) at main() level
                           1187 (58%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0ECE
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   01B2
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 3F,7F
00FA:  DATA BF,FF
00FC:  CLRF   FF7
00FE:  ADDLW  0C
0100:  MOVWF  FF6
0102:  MOVLW  01
0104:  ADDWFC FF7,F
0106:  TBLRD*+
0108:  MOVF   FF5,W
010A:  RETURN 0
010C:  DATA 00,01
010E:  DATA 02,05
0110:  DATA 03,04
0112:  DATA 01,02
0114:  DATA 20,03
0116:  DATA 07,03
0118:  DATA 06,06
011A:  DATA 02,05
011C:  DATA 03,03
011E:  DATA 06,06
0120:  DATA 02,03
0122:  DATA 03,04
0124:  DATA 07,03
0126:  DATA 07,20
0128:  DATA 20,07
012A:  DATA 07,06
012C:  DATA 06,03
012E:  DATA 03,04
0130:  DATA 00,06
0132:  DATA 06,05
0134:  DATA 03,04
0136:  DATA 01,01
0138:  DATA 07,20
013A:  DATA 20,07
013C:  DATA 00,06
013E:  DATA 02,05
0140:  DATA 03,04
0142:  DATA 00,06
0144:  DATA 02,03
0146:  DATA 03,04
0148:  DATA 20,20
014A:  DATA 20,20
014C:  DATA 20,20
014E:  CLRF   FF7
0150:  ADDLW  5E
0152:  MOVWF  FF6
0154:  MOVLW  01
0156:  ADDWFC FF7,F
0158:  TBLRD*+
015A:  MOVF   FF5,W
015C:  RETURN 0
015E:  DATA 07,0F
0160:  DATA 1F,1F
0162:  DATA 1F,1F
0164:  DATA 1F,1F
0166:  DATA 1F,1F
0168:  DATA 1F,00
016A:  DATA 00,00
016C:  DATA 00,00
016E:  DATA 1C,1E
0170:  DATA 1F,1F
0172:  DATA 1F,1F
0174:  DATA 1F,1F
0176:  DATA 00,00
0178:  DATA 00,00
017A:  DATA 00,1F
017C:  DATA 1F,1F
017E:  DATA 1F,1F
0180:  DATA 1F,1F
0182:  DATA 1F,1F
0184:  DATA 1E,1C
0186:  DATA 1F,1F
0188:  DATA 1F,1F
018A:  DATA 1F,1F
018C:  DATA 0F,07
018E:  DATA 1F,1F
0190:  DATA 1F,00
0192:  DATA 00,00
0194:  DATA 1F,1F
0196:  DATA 1F,1F
0198:  DATA 1F,1F
019A:  DATA 1F,1F
019C:  DATA 1F,1F
019E:  CLRF   FF7
01A0:  ADDLW  AE
01A2:  MOVWF  FF6
01A4:  MOVLW  01
01A6:  ADDWFC FF7,F
01A8:  TBLRD*+
01AA:  MOVF   FF5,W
01AC:  RETURN 0
01AE:  DATA 80,C0
01B0:  DATA 94,D4
*
01C6:  DATA 2A,2A
01C8:  DATA 44,45
01CA:  DATA 4D,20
01CC:  DATA 53,41
01CE:  DATA 4E,20
01D0:  DATA 50,48
01D2:  DATA 41,4D
01D4:  DATA 2A,2A
01D6:  DATA 20,00
01D8:  DATA 2A,2A
01DA:  DATA 44,45
01DC:  DATA 4D,20
01DE:  DATA 53,41
01E0:  DATA 4E,20
01E2:  DATA 50,48
01E4:  DATA 41,4D
01E6:  DATA 2A,2A
01E8:  DATA 20,00
*
03EE:  TBLRD*+
03F0:  MOVF   FF5,F
03F2:  BZ    040C
03F4:  MOVFF  FF6,48A
03F8:  MOVFF  FF7,48B
03FC:  MOVFF  FF5,490
0400:  RCALL  03E4
0402:  MOVFF  48A,FF6
0406:  MOVFF  48B,FF7
040A:  BRA    03EE
040C:  GOTO   0FF0 (RETURN)
*
0422:  TBLRD*+
0424:  MOVF   FF5,F
0426:  BZ    0440
0428:  MOVFF  FF6,48A
042C:  MOVFF  FF7,48B
0430:  MOVFF  FF5,48F
0434:  RCALL  0410
0436:  MOVFF  48A,FF6
043A:  MOVFF  48B,FF7
043E:  BRA    0422
0440:  GOTO   1038 (RETURN)
0444:  MOVLB  4
0446:  MOVF   x8A,W
0448:  XORWF  x8B,W
044A:  ANDLW  80
044C:  MOVWF  x8D
044E:  BTFSS  x8A.7
0450:  BRA    0456
0452:  COMF   x8A,F
0454:  INCF   x8A,F
0456:  BTFSS  x8B.7
0458:  BRA    045E
045A:  COMF   x8B,F
045C:  INCF   x8B,F
045E:  MOVF   x8B,W
0460:  CLRF   01
0462:  SUBWF  x8A,W
0464:  BC    046C
0466:  MOVFF  48A,00
046A:  BRA    0484
046C:  CLRF   00
046E:  MOVLW  08
0470:  MOVWF  x8C
0472:  RLCF   x8A,F
0474:  RLCF   00,F
0476:  MOVF   x8B,W
0478:  SUBWF  00,W
047A:  BTFSC  FD8.0
047C:  MOVWF  00
047E:  RLCF   01,F
0480:  DECFSZ x8C,F
0482:  BRA    0472
0484:  BTFSS  x8D.7
0486:  BRA    048C
0488:  COMF   01,F
048A:  INCF   01,F
048C:  MOVLB  0
048E:  RETURN 0
*
0614:  CLRF   01
0616:  CLRF   02
0618:  CLRF   00
061A:  CLRF   03
061C:  MOVLB  4
061E:  MOVF   x91,W
0620:  BNZ   0626
0622:  MOVF   x90,W
0624:  BZ    0656
0626:  MOVLW  10
0628:  MOVWF  x92
062A:  BCF    FD8.0
062C:  RLCF   x8E,F
062E:  RLCF   x8F,F
0630:  RLCF   00,F
0632:  RLCF   03,F
0634:  MOVF   x91,W
0636:  SUBWF  03,W
0638:  BNZ   063E
063A:  MOVF   x90,W
063C:  SUBWF  00,W
063E:  BNC   064E
0640:  MOVF   x90,W
0642:  SUBWF  00,F
0644:  BTFSS  FD8.0
0646:  DECF   03,F
0648:  MOVF   x91,W
064A:  SUBWF  03,F
064C:  BSF    FD8.0
064E:  RLCF   01,F
0650:  RLCF   02,F
0652:  DECFSZ x92,F
0654:  BRA    062A
0656:  MOVLB  0
0658:  RETURN 0
*
07B2:  MOVLB  4
07B4:  MOVF   x91,W
07B6:  CLRF   01
07B8:  SUBWF  x90,W
07BA:  BC    07C2
07BC:  MOVFF  490,00
07C0:  BRA    07DA
07C2:  CLRF   00
07C4:  MOVLW  08
07C6:  MOVWF  x92
07C8:  RLCF   x90,F
07CA:  RLCF   00,F
07CC:  MOVF   x91,W
07CE:  SUBWF  00,W
07D0:  BTFSC  FD8.0
07D2:  MOVWF  00
07D4:  RLCF   01,F
07D6:  DECFSZ x92,F
07D8:  BRA    07C8
07DA:  MOVLB  0
07DC:  RETURN 0
07DE:  MOVLW  20
07E0:  MOVLB  4
07E2:  BTFSS  x8B.4
07E4:  MOVLW  30
07E6:  MOVWF  x8C
07E8:  MOVFF  48A,00
07EC:  BTFSS  00.7
07EE:  BRA    0800
07F0:  COMF   00,F
07F2:  INCF   00,F
07F4:  MOVFF  00,48A
07F8:  MOVLW  2D
07FA:  MOVWF  x8C
07FC:  BSF    x8B.7
07FE:  BSF    x8B.0
0800:  MOVF   01,W
0802:  MOVFF  48A,490
0806:  MOVLW  64
0808:  MOVWF  x91
080A:  MOVLB  0
080C:  RCALL  07B2
080E:  MOVFF  00,48A
0812:  MOVLW  30
0814:  ADDWF  01,W
0816:  MOVLB  4
0818:  MOVWF  x8D
081A:  MOVFF  48A,490
081E:  MOVLW  0A
0820:  MOVWF  x91
0822:  MOVLB  0
0824:  RCALL  07B2
0826:  MOVLW  30
0828:  ADDWF  00,W
082A:  MOVLB  4
082C:  MOVWF  x8F
082E:  MOVLW  30
0830:  ADDWF  01,W
0832:  MOVWF  x8E
0834:  MOVFF  48C,00
0838:  MOVLW  30
083A:  SUBWF  x8D,W
083C:  BZ    0846
083E:  BSF    x8B.1
0840:  BTFSC  x8B.7
0842:  BSF    x8B.2
0844:  BRA    086A
0846:  MOVFF  48C,48D
084A:  MOVLW  20
084C:  MOVWF  x8C
084E:  MOVLW  30
0850:  SUBWF  x8E,W
0852:  BZ    085C
0854:  BSF    x8B.0
0856:  BTFSC  x8B.7
0858:  BSF    x8B.1
085A:  BRA    086A
085C:  BTFSS  FD8.2
085E:  BSF    x8B.0
0860:  BNZ   086A
0862:  MOVFF  48D,48E
0866:  MOVLW  20
0868:  MOVWF  x8D
086A:  BTFSC  x8B.2
086C:  BRA    0878
086E:  BTFSC  x8B.1
0870:  BRA    0880
0872:  BTFSC  x8B.0
0874:  BRA    0888
0876:  BRA    0890
0878:  MOVFF  48C,490
087C:  MOVLB  0
087E:  RCALL  03E4
0880:  MOVFF  48D,490
0884:  MOVLB  0
0886:  RCALL  03E4
0888:  MOVFF  48E,490
088C:  MOVLB  0
088E:  RCALL  03E4
0890:  MOVFF  48F,490
0894:  MOVLB  0
0896:  RCALL  03E4
0898:  GOTO   0982 (RETURN)
*
08B4:  CLRF   00
08B6:  CLRF   01
08B8:  MOVLB  4
08BA:  MOVF   x8E,W
08BC:  BCF    FD8.0
08BE:  BTFSC  x8F.0
08C0:  ADDWF  00,F
08C2:  RRCF   00,F
08C4:  RRCF   01,F
08C6:  BTFSC  x8F.1
08C8:  ADDWF  00,F
08CA:  RRCF   00,F
08CC:  RRCF   01,F
08CE:  BTFSC  x8F.2
08D0:  ADDWF  00,F
08D2:  RRCF   00,F
08D4:  RRCF   01,F
08D6:  BTFSC  x8F.3
08D8:  ADDWF  00,F
08DA:  RRCF   00,F
08DC:  RRCF   01,F
08DE:  BTFSC  x8F.4
08E0:  ADDWF  00,F
08E2:  RRCF   00,F
08E4:  RRCF   01,F
08E6:  BTFSC  x8F.5
08E8:  ADDWF  00,F
08EA:  RRCF   00,F
08EC:  RRCF   01,F
08EE:  BTFSC  x8F.6
08F0:  ADDWF  00,F
08F2:  RRCF   00,F
08F4:  RRCF   01,F
08F6:  BTFSC  x8F.7
08F8:  ADDWF  00,F
08FA:  RRCF   00,F
08FC:  RRCF   01,F
08FE:  MOVLB  0
0900:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
02CE:  MOVLW  04
02D0:  MOVWF  FEA
02D2:  MOVLW  8F
02D4:  MOVWF  FE9
02D6:  MOVF   FEF,W
02D8:  BZ    02F4
02DA:  MOVLW  06
02DC:  MOVWF  01
02DE:  CLRF   00
02E0:  DECFSZ 00,F
02E2:  BRA    02E0
02E4:  DECFSZ 01,F
02E6:  BRA    02DE
02E8:  MOVLW  7B
02EA:  MOVWF  00
02EC:  DECFSZ 00,F
02EE:  BRA    02EC
02F0:  DECFSZ FEF,F
02F2:  BRA    02DA
02F4:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
0208:  MOVFF  4A0,4A2
....................    for (sb=0;sb<8;sb++) 
020C:  MOVLB  4
020E:  CLRF   xA1
0210:  MOVF   xA1,W
0212:  SUBLW  07
0214:  BNC   0232
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0216:  BTFSC  xA2.7
0218:  BRA    021E
021A:  BCF    F8D.2
021C:  BRA    0220
021E:  BSF    F8D.2
0220:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
0222:  BCF    F96.0
0224:  BCF    F8D.0
0226:  BCF    F96.0
0228:  BSF    F8D.0
....................          x= x<<1;          
022A:  BCF    FD8.0
022C:  RLCF   xA2,F
022E:  INCF   xA1,F
0230:  BRA    0210
....................      } 
0232:  MOVLB  0
0234:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
09CC:  MOVFF  49C,4A0
09D0:  RCALL  0208
....................       xuat_1byte(bld2); 
09D2:  MOVFF  49D,4A0
09D6:  RCALL  0208
....................       xuat_1byte(bld1);           
09D8:  MOVFF  49E,4A0
09DC:  RCALL  0208
....................       xuat_1byte(bld0);             
09DE:  MOVFF  49F,4A0
09E2:  RCALL  0208
....................       mo_32_led_don;       
09E4:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
09E6:  RCALL  0236
....................       output_high(rck_32led);    output_low(rck_32led); 
09E8:  BCF    F95.5
09EA:  BSF    F8C.5
09EC:  BCF    F95.5
09EE:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
09F0:  BCF    F95.1
09F2:  BCF    F8C.1
09F4:  GOTO   0A1A (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
09F8:  MOVFF  495,498
09FC:  MOVFF  494,499
....................      b1 = wld0>>8;  b0 = wld0; 
0A00:  MOVFF  497,49A
0A04:  MOVFF  496,49B
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0A08:  MOVFF  498,49C
0A0C:  MOVFF  499,49D
0A10:  MOVFF  49A,49E
0A14:  MOVFF  49B,49F
0A18:  BRA    09CC
0A1A:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
0A1C:  MOVFF  48E,490
0A20:  MOVFF  48F,491
0A24:  MOVFF  48D,493
0A28:  MOVFF  48C,492
....................      xuat_32led_don_2word(wd1,wd0); 
0A2C:  MOVFF  491,495
0A30:  MOVFF  490,494
0A34:  MOVFF  493,497
0A38:  MOVFF  492,496
0A3C:  RCALL  09F8
0A3E:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
01EA:  MOVLW  00
01EC:  MOVWF  F95
....................       set_tris_e(0x00); 
01EE:  MOVWF  F96
....................       output_d(0xff); 
01F0:  CLRF   F95
01F2:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
01F4:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
01F6:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
01F8:  BCF    F95.1
01FA:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
01FC:  BCF    F95.0
01FE:  BCF    F8C.0
....................       rbdc=0; 
0200:  CLRF   1D
0202:  CLRF   1C
0204:  GOTO   0FC4 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0236:  CLRF   F95
0238:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
023A:  BTFSC  19.4
023C:  BRA    0242
023E:  BCF    F8C.4
0240:  BRA    0244
0242:  BSF    F8C.4
0244:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
0246:  BTFSC  19.6
0248:  BRA    024E
024A:  BCF    F8C.6
024C:  BRA    0250
024E:  BSF    F8C.6
0250:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
0252:  BTFSC  19.2
0254:  BRA    025A
0256:  BCF    F8C.2
0258:  BRA    025C
025A:  BSF    F8C.2
025C:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
025E:  BCF    F95.1
0260:  BSF    F8C.1
0262:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0534:  CLRF   F95
0536:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0538:  BTFSC  1A.6
053A:  BRA    0540
053C:  BCF    F8C.6
053E:  BRA    0542
0540:  BSF    F8C.6
0542:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0544:  BTFSC  1A.4
0546:  BRA    054C
0548:  BCF    F8C.4
054A:  BRA    054E
054C:  BSF    F8C.4
054E:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0550:  BTFSC  1A.2
0552:  BRA    0558
0554:  BCF    F8C.2
0556:  BRA    055A
0558:  BSF    F8C.2
055A:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
055C:  BCF    F95.0
055E:  BSF    F8C.0
0560:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
065A:  MOVFF  48F,4A0
065E:  RCALL  0208
0660:  MOVFF  48E,4A0
0664:  RCALL  0208
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
0666:  MOVFF  48D,4A0
066A:  RCALL  0208
066C:  MOVFF  48C,4A0
0670:  RCALL  0208
....................        
....................       mo_4_led_7doan; 
0672:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
0674:  RCALL  0236
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
0676:  BCF    F95.7
0678:  BCF    F8C.7
067A:  BCF    F95.7
067C:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
067E:  BCF    F95.1
0680:  BCF    F8C.1
0682:  GOTO   07AE (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
0686:  MOVFF  48B,48F
068A:  MOVFF  48A,48E
068E:  MOVLB  4
0690:  CLRF   x91
0692:  MOVLW  0A
0694:  MOVWF  x90
0696:  MOVLB  0
0698:  RCALL  0614
069A:  MOVFF  00,48C
069E:  MOVLB  4
06A0:  MOVFF  03,48D
06A4:  MOVFF  03,03
06A8:  MOVF   00,W
06AA:  MOVLB  0
06AC:  RCALL  00AE
06AE:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
06B0:  MOVFF  48B,48F
06B4:  MOVFF  48A,48E
06B8:  MOVLB  4
06BA:  CLRF   x91
06BC:  MOVLW  0A
06BE:  MOVWF  x90
06C0:  MOVLB  0
06C2:  RCALL  0614
06C4:  MOVFF  02,48D
06C8:  MOVFF  01,48C
06CC:  MOVFF  02,48F
06D0:  MOVFF  01,48E
06D4:  MOVLB  4
06D6:  CLRF   x91
06D8:  MOVLW  0A
06DA:  MOVWF  x90
06DC:  MOVLB  0
06DE:  RCALL  0614
06E0:  MOVFF  00,48C
06E4:  MOVLB  4
06E6:  MOVFF  03,48D
06EA:  MOVFF  03,03
06EE:  MOVF   00,W
06F0:  MOVLB  0
06F2:  RCALL  00AE
06F4:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
06F6:  MOVFF  48B,48F
06FA:  MOVFF  48A,48E
06FE:  MOVLB  4
0700:  CLRF   x91
0702:  MOVLW  64
0704:  MOVWF  x90
0706:  MOVLB  0
0708:  RCALL  0614
070A:  MOVFF  02,48D
070E:  MOVFF  01,48C
0712:  MOVFF  02,48F
0716:  MOVFF  01,48E
071A:  MOVLB  4
071C:  CLRF   x91
071E:  MOVLW  0A
0720:  MOVWF  x90
0722:  MOVLB  0
0724:  RCALL  0614
0726:  MOVFF  00,48C
072A:  MOVLB  4
072C:  MOVFF  03,48D
0730:  MOVFF  03,03
0734:  MOVF   00,W
0736:  MOVLB  0
0738:  RCALL  00AE
073A:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
073C:  MOVFF  48B,48F
0740:  MOVFF  48A,48E
0744:  MOVLW  03
0746:  MOVLB  4
0748:  MOVWF  x91
074A:  MOVLW  E8
074C:  MOVWF  x90
074E:  MOVLB  0
0750:  RCALL  0614
0752:  MOVFF  02,48D
0756:  MOVFF  01,48C
075A:  MOVFF  02,48F
075E:  MOVFF  01,48E
0762:  MOVLB  4
0764:  CLRF   x91
0766:  MOVLW  0A
0768:  MOVWF  x90
076A:  MOVLB  0
076C:  RCALL  0614
076E:  MOVFF  00,48C
0772:  MOVLB  4
0774:  MOVFF  03,48D
0778:  MOVFF  03,03
077C:  MOVF   00,W
077E:  MOVLB  0
0780:  RCALL  00AE
0782:  MOVWF  21
....................       if (ngan4==0xc0) 
0784:  MOVF   21,W
0786:  SUBLW  C0
0788:  BNZ   079C
....................       { 
....................          ngan4=0xff; 
078A:  SETF   21
....................          if (tram4==0xc0) 
078C:  MOVF   20,W
078E:  SUBLW  C0
0790:  BNZ   079C
....................          { 
....................             tram4=0xff; 
0792:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
0794:  MOVF   1F,W
0796:  SUBLW  C0
0798:  BNZ   079C
079A:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
079C:  MOVFF  21,48C
07A0:  MOVFF  20,48D
07A4:  MOVFF  1F,48E
07A8:  MOVFF  1E,48F
07AC:  BRA    065A
07AE:  GOTO   1098 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
0264:  MOVFF  25,4A0
0268:  RCALL  0208
....................     xuat_1byte(glcddata); 
026A:  MOVFF  24,4A0
026E:  RCALL  0208
....................     xuat_1byte(lcdcontrol);        
0270:  MOVFF  23,4A0
0274:  RCALL  0208
....................     xuat_1byte(lcddata);       
0276:  MOVFF  22,4A0
027A:  RCALL  0208
....................        
....................     mo_glcd_lcd; 
027C:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
027E:  RCALL  0236
....................     output_high(rck_lcd20x4);      
0280:  BCF    F95.3
0282:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
0284:  BCF    F95.3
0286:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0288:  BCF    F95.1
028A:  BCF    F8C.1
028C:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
028E:  MOVLB  4
0290:  MOVFF  494,23
0294:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
0296:  MOVFF  495,22
029A:  COMF   22,F
....................     xuat_glcd_lcd(); 
029C:  MOVLB  0
029E:  RCALL  0264
02A0:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
0352:  MOVLB  4
0354:  MOVFF  492,25
0358:  COMF   25,F
....................     glcddata    = ~glcd_ins_hthi;      
035A:  MOVFF  493,24
035E:  COMF   24,F
....................     xuat_glcd_lcd(); 
0360:  MOVLB  0
0362:  RCALL  0264
0364:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
05A0:  MOVLB  4
05A2:  MOVFF  490,492
05A6:  COMF   x92,F
05A8:  MOVFF  492,4A0
05AC:  MOVLB  0
05AE:  RCALL  0208
05B0:  MOVLB  4
05B2:  MOVFF  491,492
05B6:  COMF   x92,F
05B8:  MOVFF  492,4A0
05BC:  MOVLB  0
05BE:  RCALL  0208
....................        
....................       mo_8_led_quet; 
05C0:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
05C2:  RCALL  0534
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
05C4:  BCF    F95.5
05C6:  BSF    F8C.5
05C8:  BCF    F95.5
05CA:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
05CC:  BCF    F95.0
05CE:  BCF    F8C.0
05D0:  GOTO   05DE (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
05D4:  MOVLB  4
05D6:  SETF   x90
05D8:  SETF   x91
05DA:  MOVLB  0
05DC:  BRA    05A0
05DE:  GOTO   060E (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0562:  CLRF   03
0564:  MOVLB  4
0566:  MOVF   x91,W
0568:  MOVLB  0
056A:  RCALL  00D0
056C:  MOVWF  01
056E:  MOVLB  4
0570:  MOVWF  x93
0572:  COMF   x93,F
0574:  MOVFF  493,4A0
0578:  MOVLB  0
057A:  RCALL  0208
057C:  MOVLB  4
057E:  MOVFF  492,493
0582:  COMF   x93,F
0584:  MOVFF  493,4A0
0588:  MOVLB  0
058A:  RCALL  0208
....................       mo_8_led_quet; 
058C:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
058E:  RCALL  0534
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0590:  BCF    F95.5
0592:  BSF    F8C.5
0594:  BCF    F95.5
0596:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0598:  BCF    F95.0
059A:  BCF    F8C.0
059C:  GOTO   0602 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
05E2:  CLRF   2E
05E4:  MOVF   2E,W
05E6:  SUBLW  07
05E8:  BNC   0612
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
05EA:  CLRF   03
05EC:  MOVF   2E,W
05EE:  ADDLW  26
05F0:  MOVWF  FE9
05F2:  MOVLW  00
05F4:  ADDWFC 03,W
05F6:  MOVWF  FEA
05F8:  MOVFF  FEF,492
05FC:  MOVFF  2E,491
0600:  BRA    0562
....................             delay_us(100); 
0602:  MOVLW  A6
0604:  MOVWF  00
0606:  DECFSZ 00,F
0608:  BRA    0606
060A:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
060C:  BRA    05D4
060E:  INCF   2E,F
0610:  BRA    05E4
....................             } 
0612:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
*
0E1E:  MOVLB  4
0E20:  SETF   x8B
0E22:  MOVFF  48B,48A
....................       for(cot=0;cot<4;cot++) 
0E26:  CLRF   x8C
0E28:  BTFSC  x8C.7
0E2A:  BRA    0E32
0E2C:  MOVF   x8C,W
0E2E:  SUBLW  03
0E30:  BNC   0E7A
....................             {    
....................                output_b(maquetkey[cot]); 
0E32:  CLRF   03
0E34:  MOVF   x8C,W
0E36:  MOVLB  0
0E38:  CALL   00E8
0E3C:  MOVLB  4
0E3E:  CLRF   F93
0E40:  MOVWF  F8A
....................                if         (!input(pin_b2))      {hang=3;   break;} 
0E42:  BSF    F93.2
0E44:  BTFSC  F81.2
0E46:  BRA    0E50
0E48:  MOVLW  03
0E4A:  MOVWF  x8B
0E4C:  BRA    0E7A
0E4E:  BRA    0E76
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
0E50:  BSF    F93.3
0E52:  BTFSC  F81.3
0E54:  BRA    0E5E
0E56:  MOVLW  02
0E58:  MOVWF  x8B
0E5A:  BRA    0E7A
0E5C:  BRA    0E76
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
0E5E:  BSF    F93.4
0E60:  BTFSC  F81.4
0E62:  BRA    0E6C
0E64:  MOVLW  01
0E66:  MOVWF  x8B
0E68:  BRA    0E7A
0E6A:  BRA    0E76
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
0E6C:  BSF    F93.5
0E6E:  BTFSC  F81.5
0E70:  BRA    0E76
0E72:  CLRF   x8B
0E74:  BRA    0E7A
0E76:  INCF   x8C,F
0E78:  BRA    0E28
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
0E7A:  INCFSZ x8B,W
0E7C:  BRA    0E80
0E7E:  BRA    0E94
0E80:  MOVFF  48C,48E
0E84:  MOVLW  04
0E86:  MOVWF  x8F
0E88:  MOVLB  0
0E8A:  RCALL  08B4
0E8C:  MOVLB  4
0E8E:  MOVF   x8B,W
0E90:  ADDWF  01,W
0E92:  MOVWF  x8A
....................          return(maphim); 
0E94:  MOVFF  48A,01
0E98:  MOVLB  0
0E9A:  RETURN 0
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
0E9C:  RCALL  0E1E
0E9E:  MOVFF  01,2F
....................       if (mpt1!=0xff)    
0EA2:  INCFSZ 2F,W
0EA4:  BRA    0EA8
0EA6:  BRA    0EC6
....................       {  delay_ms(1);   
0EA8:  MOVLW  01
0EAA:  MOVLB  4
0EAC:  MOVWF  x8F
0EAE:  MOVLB  0
0EB0:  CALL   02CE
....................          mpt1=key_nhan(); 
0EB4:  RCALL  0E1E
0EB6:  MOVFF  01,2F
....................          do{mpt2=key_nhan();} 
0EBA:  RCALL  0E1E
0EBC:  MOVFF  01,30
....................          while (mpt2==mpt1); 
0EC0:  MOVF   2F,W
0EC2:  SUBWF  30,W
0EC4:  BZ    0EBA
....................       }              
....................       return(mpt1); 
0EC6:  MOVFF  2F,01
0ECA:  GOTO   11EE (RETURN)
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0A5C:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0A5E:  CLRF   34
0A60:  CLRF   33
0A62:  CLRF   32
0A64:  CLRF   31
0A66:  CLRF   38
0A68:  CLRF   37
0A6A:  CLRF   36
0A6C:  MOVLW  01
0A6E:  MOVWF  35
0A70:  MOVLW  80
0A72:  MOVWF  3C
0A74:  CLRF   3B
0A76:  CLRF   3A
0A78:  CLRF   39
0A7A:  CLRF   40
0A7C:  CLRF   3F
0A7E:  CLRF   3E
0A80:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
0A82:  MOVWF  44
0A84:  CLRF   43
0A86:  CLRF   46
0A88:  MOVLW  01
0A8A:  MOVWF  45
0A8C:  CLRF   48
0A8E:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
0A90:  MOVLW  80
0A92:  MOVWF  4C
0A94:  CLRF   4B
0A96:  CLRF   4E
0A98:  MOVLW  01
0A9A:  MOVWF  4D
0A9C:  CLRF   50
0A9E:  CLRF   4F
....................       zt=zp=0; 
0AA0:  CLRF   4A
0AA2:  CLRF   49
0AA4:  MOVFF  4A,42
0AA8:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
0AAC:  MOVLW  20
0AAE:  MOVWF  54
0AB0:  CLRF   55
0AB2:  MOVLW  10
0AB4:  MOVWF  57
0AB6:  CLRF   58
....................       dem_led=0; 
0AB8:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
0ABA:  CLRF   5C
0ABC:  CLRF   5B
0ABE:  CLRF   5A
0AC0:  MOVLW  01
0AC2:  MOVWF  59
0AC4:  CLRF   x60
0AC6:  CLRF   5F
0AC8:  CLRF   5E
0ACA:  MOVWF  5D
0ACC:  SETF   x64
0ACE:  SETF   x63
0AD0:  SETF   x62
0AD2:  MOVLW  FE
0AD4:  MOVWF  x61
0AD6:  MOVLW  01
0AD8:  MOVWF  x71
0ADA:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
0ADC:  MOVLW  80
0ADE:  MOVWF  x68
0AE0:  CLRF   x67
0AE2:  CLRF   x66
0AE4:  CLRF   x65
0AE6:  MOVWF  x6C
0AE8:  CLRF   x6B
0AEA:  CLRF   x6A
0AEC:  CLRF   x69
0AEE:  MOVLW  7F
0AF0:  MOVWF  x70
0AF2:  SETF   x6F
0AF4:  SETF   x6E
0AF6:  SETF   x6D
....................      tgdlay = 0; 
0AF8:  CLRF   52
0AFA:  CLRF   51
0AFC:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0B18:  MOVLB  4
0B1A:  CLRF   x8F
0B1C:  MOVF   x8E,W
0B1E:  SUBWF  x8F,W
0B20:  BC    0B2C
....................       hien_thi_8led_7doan_quet_all(); 
0B22:  MOVLB  0
0B24:  RCALL  05E2
0B26:  MOVLB  4
0B28:  INCF   x8F,F
0B2A:  BRA    0B1C
....................       dem_led++; 
0B2C:  INCF   53,F
0B2E:  MOVLB  0
0B30:  GOTO   0B4E (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
0AFE:  MOVLB  4
0B00:  MOVF   x8E,F
0B02:  BZ    0B10
0B04:  MOVFF  48E,48F
0B08:  MOVLB  0
0B0A:  CALL   02CE
0B0E:  MOVLB  4
....................       dem_led++; 
0B10:  INCF   53,F
0B12:  MOVLB  0
0B14:  GOTO   0B4E (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
0B34:  MOVLB  4
0B36:  MOVF   x8D,F
0B38:  BNZ   0B46
0B3A:  MOVFF  48C,48E
0B3E:  MOVLB  0
0B40:  BRA    0AFE
0B42:  MOVLB  0
0B44:  BRA    0B4E
....................    else              tang_dem_led_delay_1(dl); 
0B46:  MOVFF  48C,48E
0B4A:  MOVLB  0
0B4C:  BRA    0B18
0B4E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
0A40:  COMF   31,F
0A42:  COMF   32,F
0A44:  COMF   33,F
0A46:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
0A48:  MOVFF  34,48F
0A4C:  MOVFF  33,48E
0A50:  MOVFF  32,48D
0A54:  MOVFF  31,48C
0A58:  RCALL  0A1C
0A5A:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
0B50:  DECFSZ 51,W
0B52:  BRA    0B6C
0B54:  MOVF   52,F
0B56:  BNZ   0B6C
0B58:  MOVFF  34,48F
0B5C:  MOVFF  33,48E
0B60:  MOVFF  32,48D
0B64:  MOVFF  31,48C
0B68:  RCALL  0A1C
0B6A:  BRA    0BA2
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
0B6C:  MOVF   51,W
0B6E:  SUBLW  32
0B70:  BNZ   0B7A
0B72:  MOVF   52,F
0B74:  BNZ   0B7A
0B76:  RCALL  0A40
0B78:  BRA    0BA2
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
0B7A:  MOVF   51,W
0B7C:  SUBLW  64
0B7E:  BNZ   0B88
0B80:  MOVF   52,F
0B82:  BNZ   0B88
0B84:  RCALL  0A40
0B86:  BRA    0BA2
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
0B88:  MOVF   51,W
0B8A:  SUBLW  96
0B8C:  BNZ   0B96
0B8E:  MOVF   52,F
0B90:  BNZ   0B96
0B92:  RCALL  0A40
0B94:  BRA    0BA2
....................       else if (tgdlay==200)   
0B96:  MOVF   51,W
0B98:  SUBLW  C8
0B9A:  BNZ   0BA2
0B9C:  MOVF   52,F
0B9E:  BNZ   0BA2
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
0BA0:  RCALL  0A5C
....................       } 
....................       tgdlay++; 
0BA2:  INCF   51,F
0BA4:  BTFSC  FD8.2
0BA6:  INCF   52,F
....................       delay_chon(dl,chondelay); 
0BA8:  MOVFF  48A,48C
0BAC:  MOVFF  48B,48D
0BB0:  RCALL  0B34
0BB2:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
0BB4:  MOVF   53,W
0BB6:  SUBLW  0F
0BB8:  BNC   0C02
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
0BBA:  MOVFF  4A,495
0BBE:  MOVFF  49,494
0BC2:  MOVFF  42,497
0BC6:  MOVFF  41,496
0BCA:  RCALL  09F8
....................       zp= (zp<<1)+1;  
0BCC:  BCF    FD8.0
0BCE:  RLCF   49,W
0BD0:  MOVLB  4
0BD2:  MOVWF  x8C
0BD4:  RLCF   4A,W
0BD6:  MOVWF  x8D
0BD8:  MOVLW  01
0BDA:  ADDWF  x8C,W
0BDC:  MOVWF  49
0BDE:  MOVLW  00
0BE0:  ADDWFC x8D,W
0BE2:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
0BE4:  BCF    FD8.0
0BE6:  RRCF   42,W
0BE8:  MOVWF  x8D
0BEA:  RRCF   41,W
0BEC:  MOVWF  41
0BEE:  MOVLW  80
0BF0:  ADDWF  x8D,W
0BF2:  MOVWF  42
....................       delay_chon(dl,chondelay); 
0BF4:  MOVFF  48A,48C
0BF8:  MOVFF  48B,48D
0BFC:  MOVLB  0
0BFE:  RCALL  0B34
....................    } 
0C00:  BRA    0C34
....................    else  if (dem_led<32) 
0C02:  MOVF   53,W
0C04:  SUBLW  1F
0C06:  BNC   0C32
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
0C08:  MOVFF  4A,495
0C0C:  MOVFF  49,494
0C10:  MOVFF  42,497
0C14:  MOVFF  41,496
0C18:  RCALL  09F8
....................       zp= (zp<<1);  
0C1A:  BCF    FD8.0
0C1C:  RLCF   49,F
0C1E:  RLCF   4A,F
....................       zt= (zt>>1); 
0C20:  BCF    FD8.0
0C22:  RRCF   42,F
0C24:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
0C26:  MOVFF  48A,48C
0C2A:  MOVFF  48B,48D
0C2E:  RCALL  0B34
....................    } 
0C30:  BRA    0C34
....................    else reset_toan_bo_bien(); 
0C32:  RCALL  0A5C
0C34:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
0D3C:  MOVF   53,W
0D3E:  SUBLW  0F
0D40:  BNC   0D74
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
0D42:  MOVFF  4A,495
0D46:  MOVFF  49,494
0D4A:  MOVFF  4A,497
0D4E:  MOVFF  49,496
0D52:  RCALL  09F8
....................       zp= (zp>>1)+0x8000; 
0D54:  BCF    FD8.0
0D56:  RRCF   4A,W
0D58:  MOVLB  4
0D5A:  MOVWF  x8D
0D5C:  RRCF   49,W
0D5E:  MOVWF  49
0D60:  MOVLW  80
0D62:  ADDWF  x8D,W
0D64:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
0D66:  MOVFF  48A,48C
0D6A:  MOVFF  48B,48D
0D6E:  MOVLB  0
0D70:  RCALL  0B34
....................    } 
0D72:  BRA    0DA0
....................    else  if (dem_led<32) 
0D74:  MOVF   53,W
0D76:  SUBLW  1F
0D78:  BNC   0D9E
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
0D7A:  MOVFF  4A,495
0D7E:  MOVFF  49,494
0D82:  MOVFF  4A,497
0D86:  MOVFF  49,496
0D8A:  RCALL  09F8
....................       zp= (zp>>1); 
0D8C:  BCF    FD8.0
0D8E:  RRCF   4A,F
0D90:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
0D92:  MOVFF  48A,48C
0D96:  MOVFF  48B,48D
0D9A:  RCALL  0B34
....................     } 
0D9C:  BRA    0DA0
....................    else reset_toan_bo_bien(); 
0D9E:  RCALL  0A5C
0DA0:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
0CB8:  MOVF   53,W
0CBA:  SUBLW  1F
0CBC:  BNC   0D0A
....................    {   
....................       xuat_32led_don_1dw(y); 
0CBE:  MOVFF  34,48F
0CC2:  MOVFF  33,48E
0CC6:  MOVFF  32,48D
0CCA:  MOVFF  31,48C
0CCE:  RCALL  0A1C
....................       y= (y<<1)+1; 
0CD0:  BCF    FD8.0
0CD2:  RLCF   31,W
0CD4:  MOVLB  4
0CD6:  MOVWF  x8D
0CD8:  RLCF   32,W
0CDA:  MOVWF  x8E
0CDC:  RLCF   33,W
0CDE:  MOVWF  x8F
0CE0:  RLCF   34,W
0CE2:  MOVWF  x90
0CE4:  MOVLW  01
0CE6:  ADDWF  x8D,W
0CE8:  MOVWF  31
0CEA:  MOVLW  00
0CEC:  ADDWFC x8E,W
0CEE:  MOVWF  32
0CF0:  MOVLW  00
0CF2:  ADDWFC x8F,W
0CF4:  MOVWF  33
0CF6:  MOVLW  00
0CF8:  ADDWFC x90,W
0CFA:  MOVWF  34
....................       delay_chon(dl,chondelay); 
0CFC:  MOVFF  48A,48C
0D00:  MOVFF  48B,48D
0D04:  MOVLB  0
0D06:  RCALL  0B34
....................    } 
0D08:  BRA    0D3A
....................    else  if (dem_led<64) 
0D0A:  MOVF   53,W
0D0C:  SUBLW  3F
0D0E:  BNC   0D38
....................    {   
....................       xuat_32led_don_1dw(y);    
0D10:  MOVFF  34,48F
0D14:  MOVFF  33,48E
0D18:  MOVFF  32,48D
0D1C:  MOVFF  31,48C
0D20:  RCALL  0A1C
....................       y= (y<<1);  
0D22:  BCF    FD8.0
0D24:  RLCF   31,F
0D26:  RLCF   32,F
0D28:  RLCF   33,F
0D2A:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
0D2C:  MOVFF  48A,48C
0D30:  MOVFF  48B,48D
0D34:  RCALL  0B34
....................    }  
0D36:  BRA    0D3A
....................    else reset_toan_bo_bien(); 
0D38:  RCALL  0A5C
0D3A:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
0DA2:  MOVF   53,W
0DA4:  SUBLW  1F
0DA6:  BNC   0DEA
....................       {   
....................          xuat_32led_don_1dw(y); 
0DA8:  MOVFF  34,48F
0DAC:  MOVFF  33,48E
0DB0:  MOVFF  32,48D
0DB4:  MOVFF  31,48C
0DB8:  RCALL  0A1C
....................          y= (y>>1)+0x80000000;  
0DBA:  BCF    FD8.0
0DBC:  RRCF   34,W
0DBE:  MOVLB  4
0DC0:  MOVWF  x90
0DC2:  RRCF   33,W
0DC4:  MOVWF  x8F
0DC6:  RRCF   32,W
0DC8:  MOVWF  x8E
0DCA:  RRCF   31,W
0DCC:  MOVWF  31
0DCE:  MOVFF  48E,32
0DD2:  MOVFF  48F,33
0DD6:  MOVLW  80
0DD8:  ADDWF  x90,W
0DDA:  MOVWF  34
....................          delay_chon(dl,chondelay);       
0DDC:  MOVFF  48A,48C
0DE0:  MOVFF  48B,48D
0DE4:  MOVLB  0
0DE6:  RCALL  0B34
....................       } 
0DE8:  BRA    0E1A
....................       else 
....................       if (dem_led<64) 
0DEA:  MOVF   53,W
0DEC:  SUBLW  3F
0DEE:  BNC   0E18
....................       {   
....................          xuat_32led_don_1dw(y);  
0DF0:  MOVFF  34,48F
0DF4:  MOVFF  33,48E
0DF8:  MOVFF  32,48D
0DFC:  MOVFF  31,48C
0E00:  RCALL  0A1C
....................          y= (y>>1); 
0E02:  BCF    FD8.0
0E04:  RRCF   34,F
0E06:  RRCF   33,F
0E08:  RRCF   32,F
0E0A:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
0E0C:  MOVFF  48A,48C
0E10:  MOVFF  48B,48D
0E14:  RCALL  0B34
....................       }  
0E16:  BRA    0E1A
....................       else reset_toan_bo_bien(); 
0E18:  RCALL  0A5C
0E1A:  GOTO   11C6 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
0C36:  BTFSC  54.7
0C38:  BRA    0CB4
0C3A:  MOVF   54,W
0C3C:  SUBLW  00
0C3E:  BC    0CB4
....................    { 
....................       if(j32<i32) 
0C40:  MOVF   55,W
0C42:  XORLW  80
0C44:  MOVWF  00
0C46:  MOVF   54,W
0C48:  XORLW  80
0C4A:  SUBWF  00,W
0C4C:  BC    0C8E
....................       { 
....................          y = y_codinh|yp_chay; 
0C4E:  MOVF   3D,W
0C50:  IORWF  35,W
0C52:  MOVWF  31
0C54:  MOVF   3E,W
0C56:  IORWF  36,W
0C58:  MOVWF  32
0C5A:  MOVF   3F,W
0C5C:  IORWF  37,W
0C5E:  MOVWF  33
0C60:  MOVF   40,W
0C62:  IORWF  38,W
0C64:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
0C66:  MOVFF  34,48F
0C6A:  MOVFF  33,48E
0C6E:  MOVFF  32,48D
0C72:  MOVFF  31,48C
0C76:  RCALL  0A1C
....................          delay_chon(dl,chondelay);        
0C78:  MOVFF  48A,48C
0C7C:  MOVFF  48B,48D
0C80:  RCALL  0B34
....................          yp_chay = yp_chay <<1; 
0C82:  BCF    FD8.0
0C84:  RLCF   35,F
0C86:  RLCF   36,F
0C88:  RLCF   37,F
0C8A:  RLCF   38,F
....................          j32++; 
0C8C:  INCF   55,F
....................       } 
....................       if (j32==i32)  
0C8E:  MOVF   54,W
0C90:  SUBWF  55,W
0C92:  BNZ   0CB2
....................       { 
....................          i32--; 
0C94:  DECF   54,F
....................          j32=0;          
0C96:  CLRF   55
....................          y_codinh=y; 
0C98:  MOVFF  34,40
0C9C:  MOVFF  33,3F
0CA0:  MOVFF  32,3E
0CA4:  MOVFF  31,3D
....................          yp_chay = 1; 
0CA8:  CLRF   38
0CAA:  CLRF   37
0CAC:  CLRF   36
0CAE:  MOVLW  01
0CB0:  MOVWF  35
....................       } 
....................    } 
0CB2:  BRA    0CB6
....................    else reset_toan_bo_bien(); 
0CB4:  RCALL  0A5C
0CB6:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
02A2:  BSF    x73.0
02A4:  MOVFF  73,494
02A8:  MOVFF  493,495
02AC:  RCALL  028E
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
02AE:  BCF    x73.0
02B0:  MOVFF  73,494
02B4:  MOVFF  493,495
02B8:  RCALL  028E
02BA:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
02BC:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
02BE:  MOVFF  492,493
02C2:  RCALL  02A2
....................       delay_us(20); 
02C4:  MOVLW  21
02C6:  MOVWF  00
02C8:  DECFSZ 00,F
02CA:  BRA    02C8
02CC:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0410:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0412:  MOVFF  48F,493
0416:  RCALL  02A2
....................       delay_us(20); 
0418:  MOVLW  21
041A:  MOVWF  00
041C:  DECFSZ 00,F
041E:  BRA    041C
0420:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
02F6:  BCF    x73.0
....................          lcd_rw = 0;  
02F8:  BCF    x73.1
....................          lcd_rs = 1;  
02FA:  BSF    x73.2
....................          lcd_p =0; 
02FC:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
02FE:  MOVLW  38
0300:  MOVLB  4
0302:  MOVWF  x92
0304:  MOVLB  0
0306:  RCALL  02BC
....................          delay_us(40); 
0308:  MOVLW  42
030A:  MOVWF  00
030C:  DECFSZ 00,F
030E:  BRA    030C
0310:  NOP   
....................          lcd_command(lcd_display_control);    
0312:  MOVLW  0C
0314:  MOVLB  4
0316:  MOVWF  x92
0318:  MOVLB  0
031A:  RCALL  02BC
....................          delay_us(40); 
031C:  MOVLW  42
031E:  MOVWF  00
0320:  DECFSZ 00,F
0322:  BRA    0320
0324:  NOP   
....................          lcd_command(lcd_clear_display);       
0326:  MOVLW  01
0328:  MOVLB  4
032A:  MOVWF  x92
032C:  MOVLB  0
032E:  RCALL  02BC
....................          delay_ms(2); 
0330:  MOVLW  02
0332:  MOVLB  4
0334:  MOVWF  x8F
0336:  MOVLB  0
0338:  RCALL  02CE
....................          lcd_command(lcd_entry_mode);        
033A:  MOVLW  06
033C:  MOVLB  4
033E:  MOVWF  x92
0340:  MOVLB  0
0342:  RCALL  02BC
....................          delay_us(40);                 
0344:  MOVLW  42
0346:  MOVWF  00
0348:  DECFSZ 00,F
034A:  BRA    0348
034C:  NOP   
034E:  GOTO   0FCC (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
089C:  CLRF   03
089E:  MOVLB  4
08A0:  MOVF   x8F,W
08A2:  MOVLB  0
08A4:  RCALL  019E
08A6:  MOVLB  4
08A8:  ADDWF  x90,W
08AA:  MOVWF  x91
08AC:  MOVWF  x92
08AE:  MOVLB  0
08B0:  RCALL  02BC
08B2:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0366:  BSF    x74.2
0368:  MOVFF  74,492
036C:  MOVFF  491,493
0370:  RCALL  0352
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
0372:  BCF    x74.2
0374:  MOVFF  74,492
0378:  MOVFF  491,493
037C:  RCALL  0352
037E:  RETURN 0
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
0380:  BCF    x74.4
....................       glcd_xuat_8bit(glcd_data2);       
0382:  MOVFF  48B,491
0386:  RCALL  0366
0388:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
*
03E4:  BSF    x74.4
....................       glcd_xuat_8bit(glcd_data3);      
03E6:  MOVFF  490,491
03EA:  RCALL  0366
03EC:  RETURN 0
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
*
038A:  BSF    x74.0
....................          glcd_cs2 = 1; 
038C:  BSF    x74.1
....................          glcd_e  = 0; 
038E:  BCF    x74.2
....................          glcd_rw = 0;           
0390:  BCF    x74.3
....................          glcd_p =0;          
0392:  BCF    x74.5
....................          glcd_command(glcd_function_set_mode);          
0394:  MOVFF  48A,48B
0398:  RCALL  0380
....................          delay_us(10); 
039A:  MOVLW  10
039C:  MOVWF  00
039E:  DECFSZ 00,F
03A0:  BRA    039E
03A2:  NOP   
....................          glcd_command(glcd_cursor_display);        
03A4:  MOVLW  0C
03A6:  MOVLB  4
03A8:  MOVWF  x8B
03AA:  MOVLB  0
03AC:  RCALL  0380
....................          delay_us(10);     
03AE:  MOVLW  10
03B0:  MOVWF  00
03B2:  DECFSZ 00,F
03B4:  BRA    03B2
03B6:  NOP   
....................          glcd_command(glcd_clear_display);       
03B8:  MOVLW  01
03BA:  MOVLB  4
03BC:  MOVWF  x8B
03BE:  MOVLB  0
03C0:  RCALL  0380
....................          delay_ms(2); 
03C2:  MOVLW  02
03C4:  MOVLB  4
03C6:  MOVWF  x8F
03C8:  MOVLB  0
03CA:  RCALL  02CE
....................          glcd_command(glcd_entry_mode);       
03CC:  MOVLW  06
03CE:  MOVLB  4
03D0:  MOVWF  x8B
03D2:  MOVLB  0
03D4:  RCALL  0380
....................          delay_us(10);                           
03D6:  MOVLW  10
03D8:  MOVWF  00
03DA:  DECFSZ 00,F
03DC:  BRA    03DA
03DE:  NOP   
03E0:  GOTO   0FD8 (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
....................   for (doc=0; doc < glcd_doc; doc++)  
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
....................     }  
....................   }  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
....................   doc = y;  
....................   ngang = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
....................       }  
....................     }  
....................     gdram_vdk.refresh = false;  
....................   }  
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
.................... const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... signed int8 max = 100,D,C; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
01B2:  MOVLB  4
01B4:  INCF   x79,F
....................    set_timer1(3036); //3036 
01B6:  MOVLW  0B
01B8:  MOVWF  FCF
01BA:  MOVLW  DC
01BC:  MOVWF  FCE
01BE:  BCF    F9E.0
01C0:  MOVLB  0
01C2:  GOTO   0060
.................... } 
....................  
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
*
0902:  MOVFF  48B,48F
0906:  MOVFF  48C,490
090A:  RCALL  089C
....................    for (int i = 0; i<6;i++){ 
090C:  MOVLB  4
090E:  CLRF   x8D
0910:  MOVF   x8D,W
0912:  SUBLW  05
0914:  BNC   0966
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
0916:  MOVF   x8D,W
0918:  SUBLW  03
091A:  BNZ   092E
091C:  MOVLW  01
091E:  ADDWF  x8B,W
0920:  MOVWF  x8E
0922:  MOVWF  x8F
0924:  MOVFF  48C,490
0928:  MOVLB  0
092A:  RCALL  089C
092C:  MOVLB  4
....................       lcd_data(lcd_so_x[lcd_so][i]); 
092E:  MOVFF  48A,48E
0932:  MOVLW  06
0934:  MOVWF  x8F
0936:  MOVLB  0
0938:  RCALL  08B4
093A:  MOVF   01,W
093C:  MOVLB  4
093E:  CLRF   x8F
0940:  MOVWF  x8E
0942:  CLRF   03
0944:  MOVF   x8D,W
0946:  ADDWF  x8E,W
0948:  MOVWF  01
094A:  MOVF   x8F,W
094C:  ADDWFC 03,F
094E:  MOVF   01,W
0950:  MOVLB  0
0952:  CALL   00FC
0956:  MOVLB  4
0958:  MOVWF  x8E
095A:  MOVWF  x8F
095C:  MOVLB  0
095E:  RCALL  0410
0960:  MOVLB  4
0962:  INCF   x8D,F
0964:  BRA    0910
....................    } 
0966:  MOVLB  0
0968:  RETURN 0
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0490:  MOVFF  478,48A
0494:  MOVLW  0A
0496:  MOVLB  4
0498:  MOVWF  x8B
049A:  MOVLB  0
049C:  RCALL  0444
049E:  CLRF   03
04A0:  MOVF   00,W
04A2:  RCALL  00AE
04A4:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
04A6:  MOVFF  478,48A
04AA:  MOVLW  0A
04AC:  MOVLB  4
04AE:  MOVWF  x8B
04B0:  MOVLB  0
04B2:  RCALL  0444
04B4:  CLRF   03
04B6:  MOVF   01,W
04B8:  RCALL  00AE
04BA:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
04BC:  MOVFF  47A,48A
04C0:  MOVLW  0A
04C2:  MOVLB  4
04C4:  MOVWF  x8B
04C6:  MOVLB  0
04C8:  RCALL  0444
04CA:  CLRF   03
04CC:  MOVF   00,W
04CE:  RCALL  00AE
04D0:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
04D2:  MOVFF  47A,48A
04D6:  MOVLW  0A
04D8:  MOVLB  4
04DA:  MOVWF  x8B
04DC:  MOVLB  0
04DE:  RCALL  0444
04E0:  CLRF   03
04E2:  MOVF   01,W
04E4:  RCALL  00AE
04E6:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
04E8:  MOVFF  47B,48A
04EC:  MOVLW  0A
04EE:  MOVLB  4
04F0:  MOVWF  x8B
04F2:  MOVLB  0
04F4:  RCALL  0444
04F6:  CLRF   03
04F8:  MOVF   00,W
04FA:  RCALL  00AE
04FC:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
04FE:  MOVFF  47B,48A
0502:  MOVLW  0A
0504:  MOVLB  4
0506:  MOVWF  x8B
0508:  MOVLB  0
050A:  RCALL  0444
050C:  CLRF   03
050E:  MOVF   01,W
0510:  RCALL  00AE
0512:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
0514:  MOVLB  4
0516:  DECFSZ x7F,W
0518:  BRA    051E
051A:  BCF    26.7
051C:  BRA    0530
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
051E:  MOVF   x7F,W
0520:  SUBLW  02
0522:  BNZ   0528
0524:  BCF    29.7
0526:  BRA    0530
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
0528:  MOVF   x7F,W
052A:  SUBLW  03
052C:  BNZ   0530
052E:  BCF    2C.7
0530:  MOVLB  0
0532:  RETURN 0
.................... } 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    glcd_command(glcd_addr_line2); 
*
096A:  MOVLW  90
096C:  MOVLB  4
096E:  MOVWF  x8B
0970:  MOVLB  0
0972:  RCALL  0380
....................    printf(glcd_data,"%2d",count); 
0974:  MOVFF  483,48A
0978:  MOVLW  11
097A:  MOVLB  4
097C:  MOVWF  x8B
097E:  MOVLB  0
0980:  BRA    07DE
....................    D = count/10; 
0982:  MOVFF  483,490
0986:  MOVLW  0A
0988:  MOVLB  4
098A:  MOVWF  x91
098C:  MOVLB  0
098E:  RCALL  07B2
0990:  MOVFF  01,481
0994:  MOVLB  4
....................    C = count%10; 
0996:  MOVFF  483,490
099A:  MOVLW  0A
099C:  MOVWF  x91
099E:  MOVLB  0
09A0:  RCALL  07B2
09A2:  MOVFF  00,482
09A6:  MOVLB  4
....................    LCD_SO_LON(D,1,0); 
09A8:  MOVFF  481,48A
09AC:  MOVLW  01
09AE:  MOVWF  x8B
09B0:  CLRF   x8C
09B2:  MOVLB  0
09B4:  RCALL  0902
....................    LCD_SO_LON(C,1,3); 
09B6:  MOVFF  482,48A
09BA:  MOVLW  01
09BC:  MOVLB  4
09BE:  MOVWF  x8B
09C0:  MOVLW  03
09C2:  MOVWF  x8C
09C4:  MOVLB  0
09C6:  RCALL  0902
09C8:  GOTO   109A (RETURN)
....................     
....................     
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
.................... } 
....................  
.................... void main() 
*
0ECE:  CLRF   FF8
0ED0:  BCF    FD0.7
0ED2:  BSF    07.7
0ED4:  BSF    F93.1
0ED6:  BSF    F93.0
0ED8:  MOVLW  31
0EDA:  MOVWF  FC8
0EDC:  MOVLW  28
0EDE:  MOVWF  FC6
0EE0:  BSF    FC7.7
0EE2:  BCF    FC7.6
0EE4:  CLRF   1B
0EE6:  CLRF   22
0EE8:  CLRF   23
0EEA:  CLRF   24
0EEC:  CLRF   25
0EEE:  CLRF   2E
0EF0:  CLRF   2F
0EF2:  CLRF   30
0EF4:  CLRF   34
0EF6:  CLRF   33
0EF8:  CLRF   32
0EFA:  CLRF   31
0EFC:  CLRF   38
0EFE:  CLRF   37
0F00:  CLRF   36
0F02:  MOVLW  01
0F04:  MOVWF  35
0F06:  MOVLW  80
0F08:  MOVWF  3C
0F0A:  CLRF   3B
0F0C:  CLRF   3A
0F0E:  CLRF   39
0F10:  CLRF   40
0F12:  CLRF   3F
0F14:  CLRF   3E
0F16:  CLRF   3D
0F18:  MOVWF  44
0F1A:  CLRF   43
0F1C:  CLRF   46
0F1E:  MOVLW  01
0F20:  MOVWF  45
0F22:  CLRF   48
0F24:  CLRF   47
0F26:  MOVLW  80
0F28:  MOVWF  4C
0F2A:  CLRF   4B
0F2C:  CLRF   4E
0F2E:  MOVLW  01
0F30:  MOVWF  4D
0F32:  CLRF   50
0F34:  CLRF   4F
0F36:  CLRF   52
0F38:  CLRF   51
0F3A:  CLRF   53
0F3C:  MOVLW  20
0F3E:  MOVWF  54
0F40:  CLRF   55
0F42:  MOVLW  01
0F44:  MOVWF  56
0F46:  MOVLW  10
0F48:  MOVWF  57
0F4A:  CLRF   58
0F4C:  CLRF   5C
0F4E:  CLRF   5B
0F50:  CLRF   5A
0F52:  MOVLW  01
0F54:  MOVWF  59
0F56:  CLRF   x60
0F58:  CLRF   5F
0F5A:  CLRF   5E
0F5C:  MOVWF  5D
0F5E:  SETF   x64
0F60:  SETF   x63
0F62:  SETF   x62
0F64:  MOVLW  FE
0F66:  MOVWF  x61
0F68:  MOVLW  80
0F6A:  MOVWF  x68
0F6C:  CLRF   x67
0F6E:  CLRF   x66
0F70:  CLRF   x65
0F72:  MOVWF  x6C
0F74:  CLRF   x6B
0F76:  CLRF   x6A
0F78:  CLRF   x69
0F7A:  MOVLW  7F
0F7C:  MOVWF  x70
0F7E:  SETF   x6F
0F80:  SETF   x6E
0F82:  SETF   x6D
0F84:  MOVLW  01
0F86:  MOVWF  x71
0F88:  MOVWF  x72
0F8A:  MOVLB  4
0F8C:  CLRF   x7C
0F8E:  CLRF   x7D
0F90:  CLRF   x7E
0F92:  CLRF   x7F
0F94:  MOVLW  64
0F96:  MOVWF  x80
0F98:  CLRF   x83
0F9A:  CLRF   x84
0F9C:  CLRF   x85
0F9E:  CLRF   x87
0FA0:  CLRF   x86
0FA2:  MOVF   FC1,W
0FA4:  ANDLW  C0
0FA6:  IORLW  0F
0FA8:  MOVWF  FC1
0FAA:  MOVLW  07
0FAC:  MOVWF  FB4
0FAE:  SETF   26
0FB0:  SETF   27
0FB2:  SETF   28
0FB4:  SETF   29
0FB6:  SETF   2A
0FB8:  SETF   2B
0FBA:  SETF   2C
0FBC:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
0FBE:  MOVLB  0
0FC0:  GOTO   01EA
....................    set_tris_b(0x3c); 
0FC4:  MOVLW  3C
0FC6:  MOVWF  F93
....................    setup_lcd(); 
0FC8:  GOTO   02F6
....................    setup_glcd(glcd_text_mode); 
0FCC:  MOVLW  30
0FCE:  MOVLB  4
0FD0:  MOVWF  x8A
0FD2:  MOVLB  0
0FD4:  GOTO   038A
....................  
....................    glcd_command(glcd_addr_line1); 
0FD8:  MOVLW  80
0FDA:  MOVLB  4
0FDC:  MOVWF  x8B
0FDE:  MOVLB  0
0FE0:  CALL   0380
....................    glcd_data("**DEM SAN PHAM** "); 
0FE4:  MOVLW  C6
0FE6:  MOVWF  FF6
0FE8:  MOVLW  01
0FEA:  MOVWF  FF7
0FEC:  GOTO   03EE
....................  
....................  
....................    lcd_command(0x40); 
0FF0:  MOVLW  40
0FF2:  MOVLB  4
0FF4:  MOVWF  x92
0FF6:  MOVLB  0
0FF8:  CALL   02BC
....................    for (int i = 0; i<64;i++){ 
0FFC:  MOVLB  4
0FFE:  CLRF   x88
1000:  MOVF   x88,W
1002:  SUBLW  3F
1004:  BNC   1022
....................       lcd_data(lcd_ma_8doan[i]); 
1006:  CLRF   03
1008:  MOVF   x88,W
100A:  MOVLB  0
100C:  CALL   014E
1010:  MOVLB  4
1012:  MOVWF  x8A
1014:  MOVWF  x8F
1016:  MOVLB  0
1018:  CALL   0410
101C:  MOVLB  4
101E:  INCF   x88,F
1020:  BRA    1000
....................    } 
....................  
....................    lcd_command(lcd_addr_line1); 
1022:  MOVLW  80
1024:  MOVWF  x92
1026:  MOVLB  0
1028:  CALL   02BC
....................    lcd_data("**DEM SAN PHAM** "); 
102C:  MOVLW  D8
102E:  MOVWF  FF6
1030:  MOVLW  01
1032:  MOVWF  FF7
1034:  GOTO   0422
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
1038:  MOVLW  A8
103A:  MOVWF  FD5
....................    set_timer0(0);    
103C:  CLRF   FD7
103E:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
1040:  MOVLW  B5
1042:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
1044:  MOVLW  0B
1046:  MOVWF  FCF
1048:  MOVLW  DC
104A:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
104C:  MOVLW  C0
104E:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
1050:  BSF    F9D.0
....................  
....................  
....................    giay = 30; 
1052:  MOVLW  1E
1054:  MOVLB  4
1056:  MOVWF  x78
....................    bdn = 0; 
1058:  CLRF   x79
....................    phut = 29; 
105A:  MOVLW  1D
105C:  MOVWF  x7A
....................    gio = 15; 
105E:  MOVLW  0F
1060:  MOVWF  x7B
....................    giai_ma(); 
1062:  MOVLB  0
1064:  CALL   0490
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
1068:  MOVLB  4
106A:  BTFSC  x79.7
106C:  BRA    1076
106E:  MOVF   x79,W
1070:  SUBLW  09
1072:  BTFSS  FD8.0
1074:  BRA    123E
....................          hien_thi_8led_7doan_quet_all();      
1076:  MOVLB  0
1078:  CALL   05E2
....................          count = get_timer0(); 
107C:  MOVF   FD6,W
107E:  MOVLB  4
1080:  MOVWF  x83
....................          if (count != countT) { 
1082:  MOVF   x84,W
1084:  SUBWF  x83,W
1086:  BZ    10B2
....................             countT = count;          
1088:  MOVFF  483,484
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
108C:  CLRF   x8B
108E:  MOVFF  483,48A
1092:  MOVLB  0
1094:  GOTO   0686
....................             LCD_DISPLAY_COUNTER(); 
1098:  BRA    096A
....................             if (count >= max+1) {set_timer0(1);}    
109A:  MOVLW  01
109C:  MOVLB  4
109E:  ADDWF  x80,W
10A0:  MOVWF  00
10A2:  BTFSC  FE8.7
10A4:  BRA    10AC
10A6:  MOVF   00,W
10A8:  SUBWF  x83,W
10AA:  BNC   10B2
10AC:  CLRF   FD7
10AE:  MOVLW  01
10B0:  MOVWF  FD6
....................          } 
....................          if(ttct_td==1) sang_tat_32led(5,1); 
10B2:  DECFSZ 56,W
10B4:  BRA    10C4
10B6:  MOVLW  05
10B8:  MOVWF  x8A
10BA:  MOVLW  01
10BC:  MOVWF  x8B
10BE:  MOVLB  0
10C0:  RCALL  0B50
10C2:  MOVLB  4
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
10C4:  MOVF   56,W
10C6:  SUBLW  02
10C8:  BNZ   10D8
10CA:  MOVLW  05
10CC:  MOVWF  x8A
10CE:  MOVLW  01
10D0:  MOVWF  x8B
10D2:  MOVLB  0
10D4:  RCALL  0BB4
10D6:  MOVLB  4
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
10D8:  MOVF   56,W
10DA:  SUBLW  03
10DC:  BNZ   10EC
10DE:  MOVLW  05
10E0:  MOVWF  x8A
10E2:  MOVLW  01
10E4:  MOVWF  x8B
10E6:  MOVLB  0
10E8:  RCALL  0C36
10EA:  MOVLB  4
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
10EC:  MOVF   56,W
10EE:  SUBLW  04
10F0:  BNZ   1100
10F2:  MOVLW  05
10F4:  MOVWF  x8A
10F6:  MOVLW  01
10F8:  MOVWF  x8B
10FA:  MOVLB  0
10FC:  RCALL  0CB8
10FE:  MOVLB  4
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
1100:  MOVF   56,W
1102:  SUBLW  05
1104:  BNZ   1114
1106:  MOVLW  05
1108:  MOVWF  x8A
110A:  MOVLW  01
110C:  MOVWF  x8B
110E:  MOVLB  0
1110:  RCALL  0D3C
1112:  MOVLB  4
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
1114:  MOVF   56,W
1116:  SUBLW  06
1118:  BNZ   1128
111A:  MOVLW  05
111C:  MOVWF  x8A
111E:  MOVLW  01
1120:  MOVWF  x8B
1122:  MOVLB  0
1124:  RCALL  0C36
1126:  MOVLB  4
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
1128:  MOVF   56,W
112A:  SUBLW  07
112C:  BNZ   113C
112E:  MOVLW  05
1130:  MOVWF  x8A
1132:  MOVLW  01
1134:  MOVWF  x8B
1136:  MOVLB  0
1138:  RCALL  0C36
113A:  MOVLB  4
....................          if(ttct_td==8) sang_tat_32led(5,1); 
113C:  MOVF   56,W
113E:  SUBLW  08
1140:  BNZ   1150
1142:  MOVLW  05
1144:  MOVWF  x8A
1146:  MOVLW  01
1148:  MOVWF  x8B
114A:  MOVLB  0
114C:  RCALL  0B50
114E:  MOVLB  4
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
1150:  MOVF   56,W
1152:  SUBLW  09
1154:  BNZ   1164
1156:  MOVLW  05
1158:  MOVWF  x8A
115A:  MOVLW  01
115C:  MOVWF  x8B
115E:  MOVLB  0
1160:  RCALL  0BB4
1162:  MOVLB  4
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
1164:  MOVF   56,W
1166:  SUBLW  0A
1168:  BNZ   1178
116A:  MOVLW  05
116C:  MOVWF  x8A
116E:  MOVLW  01
1170:  MOVWF  x8B
1172:  MOVLB  0
1174:  RCALL  0C36
1176:  MOVLB  4
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
1178:  MOVF   56,W
117A:  SUBLW  0B
117C:  BNZ   118C
117E:  MOVLW  05
1180:  MOVWF  x8A
1182:  MOVLW  01
1184:  MOVWF  x8B
1186:  MOVLB  0
1188:  RCALL  0CB8
118A:  MOVLB  4
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
118C:  MOVF   56,W
118E:  SUBLW  0C
1190:  BNZ   11A0
1192:  MOVLW  05
1194:  MOVWF  x8A
1196:  MOVLW  01
1198:  MOVWF  x8B
119A:  MOVLB  0
119C:  RCALL  0D3C
119E:  MOVLB  4
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
11A0:  MOVF   56,W
11A2:  SUBLW  0D
11A4:  BNZ   11B4
11A6:  MOVLW  05
11A8:  MOVWF  x8A
11AA:  MOVLW  01
11AC:  MOVWF  x8B
11AE:  MOVLB  0
11B0:  RCALL  0CB8
11B2:  MOVLB  4
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
11B4:  MOVF   56,W
11B6:  SUBLW  0E
11B8:  BNZ   11C8
11BA:  MOVLW  05
11BC:  MOVWF  x8A
11BE:  MOVLW  01
11C0:  MOVWF  x8B
11C2:  MOVLB  0
11C4:  BRA    0DA2
11C6:  MOVLB  4
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
11C8:  MOVF   56,W
11CA:  SUBLW  0F
11CC:  BNZ   11DC
11CE:  MOVLW  05
11D0:  MOVWF  x8A
11D2:  MOVLW  01
11D4:  MOVWF  x8B
11D6:  MOVLB  0
11D8:  RCALL  0C36
11DA:  MOVLB  4
....................          if(ttct_td>15) ttct_td =1; 
11DC:  BTFSC  56.7
11DE:  BRA    11EA
11E0:  MOVF   56,W
11E2:  SUBLW  0F
11E4:  BC    11EA
11E6:  MOVLW  01
11E8:  MOVWF  56
....................          signed int8 mp = key_4x4_dw(); 
11EA:  MOVLB  0
11EC:  BRA    0E9C
11EE:  MOVFF  01,489
....................          if (mp != 0xFF ) { 
11F2:  MOVLB  4
11F4:  INCFSZ x89,W
11F6:  BRA    11FA
11F8:  BRA    123C
....................             if (mp < 10 && donvi <= 2) { 
11FA:  BTFSC  x89.7
11FC:  BRA    1204
11FE:  MOVF   x89,W
1200:  SUBLW  09
1202:  BNC   1230
1204:  MOVF   x85,W
1206:  SUBLW  02
1208:  BNC   1230
....................                if (donvi == 0) max = mp; 
120A:  MOVF   x85,F
120C:  BTFSC  FD8.2
120E:  MOVFF  489,480
....................                if (donvi == 1) max = max*10 + mp;; 
1212:  DECFSZ x85,W
1214:  BRA    122C
1216:  MOVFF  480,48E
121A:  MOVLW  0A
121C:  MOVWF  x8F
121E:  MOVLB  0
1220:  CALL   08B4
1224:  MOVLB  4
1226:  MOVF   x89,W
1228:  ADDWF  01,W
122A:  MOVWF  x80
....................                donvi++;  
122C:  INCF   x85,F
....................             } 
122E:  BRA    123C
....................             else if (mp == 12) {max = 1; donvi = 0;} 
1230:  MOVF   x89,W
1232:  SUBLW  0C
1234:  BNZ   123C
1236:  MOVLW  01
1238:  MOVWF  x80
123A:  CLRF   x85
....................          }          
....................  
....................       } 
123C:  BRA    1272
....................       else  
....................       { 
....................          bdn = bdn -10; 
123E:  MOVLW  0A
1240:  SUBWF  x79,F
....................          dem_tg_exit++; 
1242:  INCF   x7C,F
....................          if (dem_tg_exit == 20) mode = 0; giay++; 
1244:  MOVF   x7C,W
1246:  SUBLW  14
1248:  BTFSC  FD8.2
124A:  CLRF   x7F
124C:  INCF   x78,F
....................             if (giay==60) { giay = 0; phut++; 
124E:  MOVF   x78,W
1250:  SUBLW  3C
1252:  BNZ   126A
1254:  CLRF   x78
1256:  INCF   x7A,F
....................                if (phut == 60) { phut = 0; gio++;  
1258:  MOVF   x7A,W
125A:  SUBLW  3C
125C:  BNZ   126A
125E:  CLRF   x7A
1260:  INCF   x7B,F
....................                   if (gio == 24) gio = 0; 
1262:  MOVF   x7B,W
1264:  SUBLW  18
1266:  BNZ   126A
1268:  CLRF   x7B
....................                }  
....................             } 
....................          giai_ma(); 
126A:  MOVLB  0
126C:  CALL   0490
1270:  MOVLB  4
....................       } 
1272:  BRA    106A
....................    }            
.................... } 
....................  
1274:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
