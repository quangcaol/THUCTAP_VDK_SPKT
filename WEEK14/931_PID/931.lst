CCS PCH C Compiler, Version 5.015, 5967               28-Dec-20 16:28

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK14\931_PID\931.lst

               ROM used:   3892 bytes (12%)
                           Largest free fragment is 28872
               RAM used:   1219 (60%) at main() level
                           1259 (61%) worst case
               Stack used: 10 locations (8 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   0D04
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FA0.1
004A:  GOTO   0054
004E:  BTFSC  FA1.1
0050:  GOTO   04E6
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0096:  MOVLW  8E
0098:  MOVWF  00
009A:  MOVFF  4D8,01
009E:  MOVFF  4D7,02
00A2:  CLRF   03
00A4:  BTFSS  01.7
00A6:  BRA    00B2
00A8:  COMF   01,F
00AA:  COMF   02,F
00AC:  INCF   02,F
00AE:  BNZ   00B2
00B0:  INCF   01,F
00B2:  MOVF   01,F
00B4:  BNZ   00C8
00B6:  MOVFF  02,01
00BA:  CLRF   02
00BC:  MOVLW  08
00BE:  SUBWF  00,F
00C0:  MOVF   01,F
00C2:  BNZ   00C8
00C4:  CLRF   00
00C6:  BRA    00E4
00C8:  BCF    FD8.0
00CA:  BTFSC  01.7
00CC:  BRA    00D6
00CE:  RLCF   02,F
00D0:  RLCF   01,F
00D2:  DECF   00,F
00D4:  BRA    00C8
00D6:  MOVLB  4
00D8:  BTFSS  xD8.7
00DA:  BRA    00E0
00DC:  MOVLB  0
00DE:  BRA    00E4
00E0:  BCF    01.7
00E2:  MOVLB  0
00E4:  RETURN 0
00E6:  MOVLB  4
00E8:  MOVF   xD6,W
00EA:  XORWF  xD8,W
00EC:  ANDLW  80
00EE:  MOVWF  xDA
00F0:  BTFSS  xD6.7
00F2:  BRA    00FE
00F4:  COMF   xD5,F
00F6:  COMF   xD6,F
00F8:  INCF   xD5,F
00FA:  BTFSC  FD8.2
00FC:  INCF   xD6,F
00FE:  BTFSS  xD8.7
0100:  BRA    010C
0102:  COMF   xD7,F
0104:  COMF   xD8,F
0106:  INCF   xD7,F
0108:  BTFSC  FD8.2
010A:  INCF   xD8,F
010C:  MOVF   xD5,W
010E:  MULWF  xD7
0110:  MOVFF  FF3,01
0114:  MOVFF  FF4,00
0118:  MULWF  xD8
011A:  MOVF   FF3,W
011C:  ADDWF  00,F
011E:  MOVF   xD6,W
0120:  MULWF  xD7
0122:  MOVF   FF3,W
0124:  ADDWFC 00,W
0126:  MOVWF  02
0128:  BTFSS  xDA.7
012A:  BRA    0136
012C:  COMF   01,F
012E:  COMF   02,F
0130:  INCF   01,F
0132:  BTFSC  FD8.2
0134:  INCF   02,F
0136:  MOVLB  0
0138:  RETURN 0
013A:  MOVLB  4
013C:  MOVF   xDB,W
013E:  BTFSC  FD8.2
0140:  BRA    0224
0142:  MOVWF  00
0144:  MOVF   xDF,W
0146:  BTFSC  FD8.2
0148:  BRA    0224
014A:  ADDWF  00,F
014C:  BNC   0156
014E:  MOVLW  81
0150:  ADDWF  00,F
0152:  BC    0224
0154:  BRA    015E
0156:  MOVLW  7F
0158:  SUBWF  00,F
015A:  BNC   0224
015C:  BZ    0224
015E:  MOVFF  4DC,4E3
0162:  MOVF   xE0,W
0164:  XORWF  xE3,F
0166:  BSF    xDC.7
0168:  BSF    xE0.7
016A:  MOVF   xDE,W
016C:  MULWF  xE2
016E:  MOVFF  FF4,4E5
0172:  MOVF   xDD,W
0174:  MULWF  xE1
0176:  MOVFF  FF4,03
017A:  MOVFF  FF3,4E4
017E:  MULWF  xE2
0180:  MOVF   FF3,W
0182:  ADDWF  xE5,F
0184:  MOVF   FF4,W
0186:  ADDWFC xE4,F
0188:  MOVLW  00
018A:  ADDWFC 03,F
018C:  MOVF   xDE,W
018E:  MULWF  xE1
0190:  MOVF   FF3,W
0192:  ADDWF  xE5,F
0194:  MOVF   FF4,W
0196:  ADDWFC xE4,F
0198:  MOVLW  00
019A:  CLRF   02
019C:  ADDWFC 03,F
019E:  ADDWFC 02,F
01A0:  MOVF   xDC,W
01A2:  MULWF  xE2
01A4:  MOVF   FF3,W
01A6:  ADDWF  xE4,F
01A8:  MOVF   FF4,W
01AA:  ADDWFC 03,F
01AC:  MOVLW  00
01AE:  ADDWFC 02,F
01B0:  MOVF   xDC,W
01B2:  MULWF  xE1
01B4:  MOVF   FF3,W
01B6:  ADDWF  03,F
01B8:  MOVF   FF4,W
01BA:  ADDWFC 02,F
01BC:  MOVLW  00
01BE:  CLRF   01
01C0:  ADDWFC 01,F
01C2:  MOVF   xDE,W
01C4:  MULWF  xE0
01C6:  MOVF   FF3,W
01C8:  ADDWF  xE4,F
01CA:  MOVF   FF4,W
01CC:  ADDWFC 03,F
01CE:  MOVLW  00
01D0:  ADDWFC 02,F
01D2:  ADDWFC 01,F
01D4:  MOVF   xDD,W
01D6:  MULWF  xE0
01D8:  MOVF   FF3,W
01DA:  ADDWF  03,F
01DC:  MOVF   FF4,W
01DE:  ADDWFC 02,F
01E0:  MOVLW  00
01E2:  ADDWFC 01,F
01E4:  MOVF   xDC,W
01E6:  MULWF  xE0
01E8:  MOVF   FF3,W
01EA:  ADDWF  02,F
01EC:  MOVF   FF4,W
01EE:  ADDWFC 01,F
01F0:  INCF   00,F
01F2:  BTFSC  01.7
01F4:  BRA    0200
01F6:  RLCF   xE4,F
01F8:  RLCF   03,F
01FA:  RLCF   02,F
01FC:  RLCF   01,F
01FE:  DECF   00,F
0200:  MOVLW  00
0202:  BTFSS  xE4.7
0204:  BRA    021A
0206:  INCF   03,F
0208:  ADDWFC 02,F
020A:  ADDWFC 01,F
020C:  MOVF   01,W
020E:  BNZ   021A
0210:  MOVF   02,W
0212:  BNZ   021A
0214:  MOVF   03,W
0216:  BNZ   021A
0218:  INCF   00,F
021A:  BTFSC  xE3.7
021C:  BSF    01.7
021E:  BTFSS  xE3.7
0220:  BCF    01.7
0222:  BRA    022C
0224:  CLRF   00
0226:  CLRF   01
0228:  CLRF   02
022A:  CLRF   03
022C:  MOVLB  0
022E:  RETURN 0
0230:  MOVLW  80
0232:  BTFSS  FD8.1
0234:  BRA    023A
0236:  MOVLB  4
0238:  XORWF  xE0,F
023A:  MOVLB  4
023C:  CLRF   xE5
023E:  CLRF   xE6
0240:  MOVFF  4DC,4E4
0244:  MOVF   xE0,W
0246:  XORWF  xE4,F
0248:  MOVF   xDB,W
024A:  BTFSC  FD8.2
024C:  BRA    040C
024E:  MOVWF  xE3
0250:  MOVWF  00
0252:  MOVF   xDF,W
0254:  BTFSC  FD8.2
0256:  BRA    041E
0258:  SUBWF  xE3,F
025A:  BTFSC  FD8.2
025C:  BRA    0364
025E:  BNC   02DC
0260:  MOVFF  4E0,4E9
0264:  BSF    xE9.7
0266:  MOVFF  4E1,4E8
026A:  MOVFF  4E2,4E7
026E:  CLRF   xE6
0270:  BCF    FD8.0
0272:  RRCF   xE9,F
0274:  RRCF   xE8,F
0276:  RRCF   xE7,F
0278:  RRCF   xE6,F
027A:  DECFSZ xE3,F
027C:  BRA    026E
027E:  BTFSS  xE4.7
0280:  BRA    0288
0282:  BSF    xE5.0
0284:  BRA    0446
0286:  BCF    xE5.0
0288:  BCF    xE3.0
028A:  BSF    xE5.4
028C:  MOVLW  04
028E:  MOVWF  FEA
0290:  MOVLW  DE
0292:  MOVWF  FE9
0294:  BRA    046C
0296:  BCF    xE5.4
0298:  BTFSC  xE4.7
029A:  BRA    02B0
029C:  BTFSS  xE3.0
029E:  BRA    02C6
02A0:  RRCF   xE9,F
02A2:  RRCF   xE8,F
02A4:  RRCF   xE7,F
02A6:  RRCF   xE6,F
02A8:  INCF   00,F
02AA:  BTFSC  FD8.2
02AC:  BRA    043C
02AE:  BRA    02C6
02B0:  BTFSC  xE9.7
02B2:  BRA    02CC
02B4:  BCF    FD8.0
02B6:  RLCF   xE6,F
02B8:  RLCF   xE7,F
02BA:  RLCF   xE8,F
02BC:  RLCF   xE9,F
02BE:  DECF   00,F
02C0:  BTFSC  FD8.2
02C2:  BRA    043C
02C4:  BRA    02B0
02C6:  BSF    xE5.6
02C8:  BRA    03A4
02CA:  BCF    xE5.6
02CC:  MOVFF  4DC,4E4
02D0:  BTFSS  xDC.7
02D2:  BRA    02D8
02D4:  BSF    xE9.7
02D6:  BRA    042E
02D8:  BCF    xE9.7
02DA:  BRA    042E
02DC:  MOVFF  4DF,4E3
02E0:  MOVFF  4DF,00
02E4:  MOVF   xDB,W
02E6:  SUBWF  xE3,F
02E8:  MOVFF  4DC,4E9
02EC:  BSF    xE9.7
02EE:  MOVFF  4DD,4E8
02F2:  MOVFF  4DE,4E7
02F6:  CLRF   xE6
02F8:  BCF    FD8.0
02FA:  RRCF   xE9,F
02FC:  RRCF   xE8,F
02FE:  RRCF   xE7,F
0300:  RRCF   xE6,F
0302:  DECFSZ xE3,F
0304:  BRA    02F6
0306:  BTFSS  xE4.7
0308:  BRA    0310
030A:  BSF    xE5.1
030C:  BRA    0446
030E:  BCF    xE5.1
0310:  BCF    xE3.0
0312:  BSF    xE5.5
0314:  MOVLW  04
0316:  MOVWF  FEA
0318:  MOVLW  E2
031A:  MOVWF  FE9
031C:  BRA    046C
031E:  BCF    xE5.5
0320:  BTFSC  xE4.7
0322:  BRA    0338
0324:  BTFSS  xE3.0
0326:  BRA    034E
0328:  RRCF   xE9,F
032A:  RRCF   xE8,F
032C:  RRCF   xE7,F
032E:  RRCF   xE6,F
0330:  INCF   00,F
0332:  BTFSC  FD8.2
0334:  BRA    043C
0336:  BRA    034E
0338:  BTFSC  xE9.7
033A:  BRA    0354
033C:  BCF    FD8.0
033E:  RLCF   xE6,F
0340:  RLCF   xE7,F
0342:  RLCF   xE8,F
0344:  RLCF   xE9,F
0346:  DECF   00,F
0348:  BTFSC  FD8.2
034A:  BRA    043C
034C:  BRA    0338
034E:  BSF    xE5.7
0350:  BRA    03A4
0352:  BCF    xE5.7
0354:  MOVFF  4E0,4E4
0358:  BTFSS  xE0.7
035A:  BRA    0360
035C:  BSF    xE9.7
035E:  BRA    042E
0360:  BCF    xE9.7
0362:  BRA    042E
0364:  MOVFF  4E0,4E9
0368:  BSF    xE9.7
036A:  MOVFF  4E1,4E8
036E:  MOVFF  4E2,4E7
0372:  BTFSS  xE4.7
0374:  BRA    037E
0376:  BCF    xE9.7
0378:  BSF    xE5.2
037A:  BRA    0446
037C:  BCF    xE5.2
037E:  CLRF   xE6
0380:  BCF    xE3.0
0382:  MOVLW  04
0384:  MOVWF  FEA
0386:  MOVLW  DE
0388:  MOVWF  FE9
038A:  BRA    046C
038C:  BTFSC  xE4.7
038E:  BRA    03C8
0390:  MOVFF  4DC,4E4
0394:  BTFSS  xE3.0
0396:  BRA    03A4
0398:  RRCF   xE9,F
039A:  RRCF   xE8,F
039C:  RRCF   xE7,F
039E:  RRCF   xE6,F
03A0:  INCF   00,F
03A2:  BZ    043C
03A4:  BTFSS  xE6.7
03A6:  BRA    03BE
03A8:  INCF   xE7,F
03AA:  BNZ   03BE
03AC:  INCF   xE8,F
03AE:  BNZ   03BE
03B0:  INCF   xE9,F
03B2:  BNZ   03BE
03B4:  RRCF   xE9,F
03B6:  RRCF   xE8,F
03B8:  RRCF   xE7,F
03BA:  INCF   00,F
03BC:  BZ    043C
03BE:  BTFSC  xE5.6
03C0:  BRA    02CA
03C2:  BTFSC  xE5.7
03C4:  BRA    0352
03C6:  BRA    0400
03C8:  MOVLW  80
03CA:  XORWF  xE9,F
03CC:  BTFSS  xE9.7
03CE:  BRA    03D8
03D0:  BRA    0446
03D2:  MOVFF  4E0,4E4
03D6:  BRA    03EC
03D8:  MOVFF  4DC,4E4
03DC:  MOVF   xE9,F
03DE:  BNZ   03EC
03E0:  MOVF   xE8,F
03E2:  BNZ   03EC
03E4:  MOVF   xE7,F
03E6:  BNZ   03EC
03E8:  CLRF   00
03EA:  BRA    042E
03EC:  BTFSC  xE9.7
03EE:  BRA    0400
03F0:  BCF    FD8.0
03F2:  RLCF   xE6,F
03F4:  RLCF   xE7,F
03F6:  RLCF   xE8,F
03F8:  RLCF   xE9,F
03FA:  DECFSZ 00,F
03FC:  BRA    03EC
03FE:  BRA    043C
0400:  BTFSS  xE4.7
0402:  BRA    0408
0404:  BSF    xE9.7
0406:  BRA    042E
0408:  BCF    xE9.7
040A:  BRA    042E
040C:  MOVFF  4DF,00
0410:  MOVFF  4E0,4E9
0414:  MOVFF  4E1,4E8
0418:  MOVFF  4E2,4E7
041C:  BRA    042E
041E:  MOVFF  4DB,00
0422:  MOVFF  4DC,4E9
0426:  MOVFF  4DD,4E8
042A:  MOVFF  4DE,4E7
042E:  MOVFF  4E9,01
0432:  MOVFF  4E8,02
0436:  MOVFF  4E7,03
043A:  BRA    04A4
043C:  CLRF   00
043E:  CLRF   01
0440:  CLRF   02
0442:  CLRF   03
0444:  BRA    04A4
0446:  CLRF   xE6
0448:  COMF   xE7,F
044A:  COMF   xE8,F
044C:  COMF   xE9,F
044E:  COMF   xE6,F
0450:  INCF   xE6,F
0452:  BNZ   045E
0454:  INCF   xE7,F
0456:  BNZ   045E
0458:  INCF   xE8,F
045A:  BNZ   045E
045C:  INCF   xE9,F
045E:  BTFSC  xE5.0
0460:  BRA    0286
0462:  BTFSC  xE5.1
0464:  BRA    030E
0466:  BTFSC  xE5.2
0468:  BRA    037C
046A:  BRA    03D2
046C:  MOVF   FEF,W
046E:  ADDWF  xE7,F
0470:  BNC   047C
0472:  INCF   xE8,F
0474:  BNZ   047C
0476:  INCF   xE9,F
0478:  BTFSC  FD8.2
047A:  BSF    xE3.0
047C:  MOVF   FED,F
047E:  MOVF   FEF,W
0480:  ADDWF  xE8,F
0482:  BNC   048A
0484:  INCF   xE9,F
0486:  BTFSC  FD8.2
0488:  BSF    xE3.0
048A:  MOVF   FED,F
048C:  MOVF   FEF,W
048E:  BTFSC  FEF.7
0490:  BRA    0494
0492:  XORLW  80
0494:  ADDWF  xE9,F
0496:  BTFSC  FD8.0
0498:  BSF    xE3.0
049A:  BTFSC  xE5.4
049C:  BRA    0296
049E:  BTFSC  xE5.5
04A0:  BRA    031E
04A2:  BRA    038C
04A4:  MOVLB  0
04A6:  RETURN 0
04A8:  MOVLW  8E
04AA:  MOVWF  00
04AC:  MOVLB  4
04AE:  MOVF   xD7,W
04B0:  SUBWF  00,F
04B2:  MOVFF  4D8,02
04B6:  MOVFF  4D9,01
04BA:  BSF    02.7
04BC:  MOVF   00,F
04BE:  BZ    04D2
04C0:  BCF    FD8.0
04C2:  MOVF   02,F
04C4:  BNZ   04CA
04C6:  MOVF   01,F
04C8:  BZ    04D2
04CA:  RRCF   02,F
04CC:  RRCF   01,F
04CE:  DECFSZ 00,F
04D0:  BRA    04C0
04D2:  BTFSS  xD8.7
04D4:  BRA    04E0
04D6:  COMF   01,F
04D8:  COMF   02,F
04DA:  INCF   01,F
04DC:  BTFSC  FD8.2
04DE:  INCF   02,F
04E0:  MOVLB  0
04E2:  GOTO   06F8 (RETURN)
*
0756:  DATA 4C,45
0758:  DATA 56,45
075A:  DATA 4C,20
075C:  DATA 25,34
075E:  DATA 6C,64
0760:  DATA 00,00
0762:  DATA 53,50
0764:  DATA 45,45
0766:  DATA 44,20
0768:  DATA 25,34
076A:  DATA 6C,64
076C:  DATA 00,00
076E:  DATA 53,45
0770:  DATA 54,50
0772:  DATA 4F,49
0774:  DATA 4E,54
0776:  DATA 20,25
0778:  DATA 34,6C
077A:  DATA 64,00
077C:  DATA 43,4F
077E:  DATA 55,4E
0780:  DATA 54,20
0782:  DATA 25,34
0784:  DATA 6C,64
0786:  DATA 00,00
*
0A04:  TBLRD*+
0A06:  MOVFF  FF6,4C4
0A0A:  MOVFF  FF7,4C5
0A0E:  MOVFF  FF5,4CC
0A12:  RCALL  09EA
0A14:  MOVFF  4C4,FF6
0A18:  MOVFF  4C5,FF7
0A1C:  MOVLB  4
0A1E:  DECFSZ xC3,F
0A20:  BRA    0A24
0A22:  BRA    0A28
0A24:  MOVLB  0
0A26:  BRA    0A04
0A28:  MOVLB  0
0A2A:  RETURN 0
0A2C:  MOVFF  FEA,4CB
0A30:  MOVFF  FE9,4CA
0A34:  MOVLB  4
0A36:  BTFSS  xC4.7
0A38:  BRA    0A4A
0A3A:  BSF    xCA.7
0A3C:  BTFSS  xCA.4
0A3E:  INCF   xCA,F
0A40:  COMF   xC3,F
0A42:  COMF   xC4,F
0A44:  INCF   xC3,F
0A46:  BTFSC  FD8.2
0A48:  INCF   xC4,F
0A4A:  SWAPF  xC4,W
0A4C:  IORLW  F0
0A4E:  MOVWF  xC6
0A50:  ADDWF  xC6,F
0A52:  ADDLW  E2
0A54:  MOVWF  xC7
0A56:  ADDLW  32
0A58:  MOVWF  xC9
0A5A:  MOVF   xC4,W
0A5C:  ANDLW  0F
0A5E:  ADDWF  xC7,F
0A60:  ADDWF  xC7,F
0A62:  ADDWF  xC9,F
0A64:  ADDLW  E9
0A66:  MOVWF  xC8
0A68:  ADDWF  xC8,F
0A6A:  ADDWF  xC8,F
0A6C:  SWAPF  xC3,W
0A6E:  ANDLW  0F
0A70:  ADDWF  xC8,F
0A72:  ADDWF  xC9,F
0A74:  RLCF   xC8,F
0A76:  RLCF   xC9,F
0A78:  COMF   xC9,F
0A7A:  RLCF   xC9,F
0A7C:  MOVF   xC3,W
0A7E:  ANDLW  0F
0A80:  ADDWF  xC9,F
0A82:  RLCF   xC6,F
0A84:  MOVLW  07
0A86:  MOVWF  xC5
0A88:  MOVLW  0A
0A8A:  DECF   xC8,F
0A8C:  ADDWF  xC9,F
0A8E:  BNC   0A8A
0A90:  DECF   xC7,F
0A92:  ADDWF  xC8,F
0A94:  BNC   0A90
0A96:  DECF   xC6,F
0A98:  ADDWF  xC7,F
0A9A:  BNC   0A96
0A9C:  DECF   xC5,F
0A9E:  ADDWF  xC6,F
0AA0:  BNC   0A9C
0AA2:  MOVLW  04
0AA4:  MOVWF  FEA
0AA6:  MOVLW  C5
0AA8:  MOVWF  FE9
0AAA:  MOVLW  07
0AAC:  ANDWF  xCA,W
0AAE:  BCF    xCA.6
0AB0:  MOVF   FED,F
0AB2:  ANDWF  xCA,W
0AB4:  BNZ   0AC4
0AB6:  BTFSC  xCA.4
0AB8:  MOVF   FEE,F
0ABA:  BTFSC  xCA.4
0ABC:  BRA    0AC4
0ABE:  MOVLW  20
0AC0:  MOVWF  00
0AC2:  BRA    0B06
0AC4:  ADDWF  FE9,F
0AC6:  MOVLW  00
0AC8:  ADDWFC FEA,F
0ACA:  MOVF   FE9,W
0ACC:  SUBLW  C9
0ACE:  BNZ   0AD8
0AD0:  MOVF   FEA,W
0AD2:  SUBLW  04
0AD4:  BNZ   0AD8
0AD6:  BSF    xCA.6
0AD8:  MOVF   FEF,W
0ADA:  MOVWF  00
0ADC:  BNZ   0AEE
0ADE:  BTFSC  xCA.6
0AE0:  BRA    0AEE
0AE2:  BTFSC  xCA.4
0AE4:  BRA    0B20
0AE6:  BTFSC  xCA.3
0AE8:  BRA    0AEE
0AEA:  MOVLW  20
0AEC:  BRA    0B04
0AEE:  BTFSS  xCA.7
0AF0:  BRA    0AFE
0AF2:  MOVLW  2D
0AF4:  MOVWF  00
0AF6:  MOVF   FED,W
0AF8:  BCF    xCA.6
0AFA:  BCF    xCA.7
0AFC:  BRA    0B06
0AFE:  BSF    xCA.3
0B00:  BCF    xCA.4
0B02:  MOVLW  30
0B04:  ADDWF  00,F
0B06:  MOVFF  FEA,4C4
0B0A:  MOVFF  FE9,4C3
0B0E:  MOVFF  00,4CC
0B12:  MOVLB  0
0B14:  RCALL  09EA
0B16:  MOVFF  4C4,FEA
0B1A:  MOVFF  4C3,FE9
0B1E:  MOVLB  4
0B20:  MOVF   FEE,W
0B22:  BTFSS  xCA.6
0B24:  BRA    0ACA
0B26:  MOVLB  0
0B28:  RETURN 0
*
0C00:  MOVLB  4
0C02:  MOVF   xC4,W
0C04:  XORWF  xC6,W
0C06:  ANDLW  80
0C08:  MOVWF  xC8
0C0A:  BTFSS  xC4.7
0C0C:  BRA    0C18
0C0E:  COMF   xC3,F
0C10:  COMF   xC4,F
0C12:  INCF   xC3,F
0C14:  BTFSC  FD8.2
0C16:  INCF   xC4,F
0C18:  BTFSS  xC6.7
0C1A:  BRA    0C26
0C1C:  COMF   xC5,F
0C1E:  COMF   xC6,F
0C20:  INCF   xC5,F
0C22:  BTFSC  FD8.2
0C24:  INCF   xC6,F
0C26:  CLRF   01
0C28:  CLRF   02
0C2A:  CLRF   00
0C2C:  CLRF   03
0C2E:  MOVF   xC6,W
0C30:  BNZ   0C36
0C32:  MOVF   xC5,W
0C34:  BZ    0C66
0C36:  MOVLW  10
0C38:  MOVWF  xC7
0C3A:  BCF    FD8.0
0C3C:  RLCF   xC3,F
0C3E:  RLCF   xC4,F
0C40:  RLCF   00,F
0C42:  RLCF   03,F
0C44:  MOVF   xC6,W
0C46:  SUBWF  03,W
0C48:  BNZ   0C4E
0C4A:  MOVF   xC5,W
0C4C:  SUBWF  00,W
0C4E:  BNC   0C5E
0C50:  MOVF   xC5,W
0C52:  SUBWF  00,F
0C54:  BTFSS  FD8.0
0C56:  DECF   03,F
0C58:  MOVF   xC6,W
0C5A:  SUBWF  03,F
0C5C:  BSF    FD8.0
0C5E:  RLCF   01,F
0C60:  RLCF   02,F
0C62:  DECFSZ xC7,F
0C64:  BRA    0C3A
0C66:  BTFSS  xC8.7
0C68:  BRA    0C74
0C6A:  COMF   01,F
0C6C:  COMF   02,F
0C6E:  INCF   01,F
0C70:  BTFSC  FD8.2
0C72:  INCF   02,F
0C74:  MOVLB  0
0C76:  GOTO   0F1E (RETURN)
....................  
.................... #list 
....................  
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
08D6:  MOVLW  04
08D8:  MOVWF  FEA
08DA:  MOVLW  C1
08DC:  MOVWF  FE9
08DE:  MOVF   FEF,W
08E0:  BZ    08FC
08E2:  MOVLW  06
08E4:  MOVWF  01
08E6:  CLRF   00
08E8:  DECFSZ 00,F
08EA:  BRA    08E8
08EC:  DECFSZ 01,F
08EE:  BRA    08E6
08F0:  MOVLW  7B
08F2:  MOVWF  00
08F4:  DECFSZ 00,F
08F6:  BRA    08F4
08F8:  DECFSZ FEF,F
08FA:  BRA    08E2
08FC:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
07A6:  MOVFF  4D0,4D2
....................    for (sb=0;sb<8;sb++) 
07AA:  MOVLB  4
07AC:  CLRF   xD1
07AE:  MOVF   xD1,W
07B0:  SUBLW  07
07B2:  BNC   07D0
....................       {                                                  
....................          output_bit(ssdo,bseri);     
07B4:  BTFSC  xD2.7
07B6:  BRA    07BC
07B8:  BCF    F8D.2
07BA:  BRA    07BE
07BC:  BSF    F8D.2
07BE:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
07C0:  BCF    F96.0
07C2:  BCF    F8D.0
07C4:  BCF    F96.0
07C6:  BSF    F8D.0
....................          x= x<<1;          
07C8:  BCF    FD8.0
07CA:  RLCF   xD2,F
07CC:  INCF   xD1,F
07CE:  BRA    07AE
....................      } 
07D0:  MOVLB  0
07D2:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
....................       xuat_1byte(bld2); 
....................       xuat_1byte(bld1);           
....................       xuat_1byte(bld0);             
....................       mo_32_led_don;       
....................       mo_ic_74573_a_thong_dl();             
....................       output_high(rck_32led);    output_low(rck_32led); 
....................       chot_ic_74573_a_goi_du_lieu;       
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
....................      b1 = wld0>>8;  b0 = wld0; 
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
....................      xuat_32led_don_2word(wd1,wd0); 
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
0788:  MOVLW  00
078A:  MOVWF  F95
....................       set_tris_e(0x00); 
078C:  MOVWF  F96
....................       output_d(0xff); 
078E:  CLRF   F95
0790:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0792:  SETF   17
....................       tin_hieu_dk_74573_b=0xff;       
0794:  SETF   18
....................       chot_ic_74573_a_goi_du_lieu; 
0796:  BCF    F95.1
0798:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
079A:  BCF    F95.0
079C:  BCF    F8C.0
....................       rbdc=0; 
079E:  CLRF   1B
07A0:  CLRF   1A
07A2:  GOTO   0E52 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
082A:  CLRF   F95
082C:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
082E:  BTFSC  17.4
0830:  BRA    0836
0832:  BCF    F8C.4
0834:  BRA    0838
0836:  BSF    F8C.4
0838:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
083A:  BTFSC  17.6
083C:  BRA    0842
083E:  BCF    F8C.6
0840:  BRA    0844
0842:  BSF    F8C.6
0844:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
0846:  BTFSC  17.2
0848:  BRA    084E
084A:  BCF    F8C.2
084C:  BRA    0850
084E:  BSF    F8C.2
0850:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
0852:  BCF    F95.1
0854:  BSF    F8C.1
0856:  GOTO   0876 (RETURN)
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
07D4:  CLRF   F95
07D6:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
07D8:  BTFSC  18.6
07DA:  BRA    07E0
07DC:  BCF    F8C.6
07DE:  BRA    07E2
07E0:  BSF    F8C.6
07E2:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
07E4:  BTFSC  18.4
07E6:  BRA    07EC
07E8:  BCF    F8C.4
07EA:  BRA    07EE
07EC:  BSF    F8C.4
07EE:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
07F0:  BTFSC  18.2
07F2:  BRA    07F8
07F4:  BCF    F8C.2
07F6:  BRA    07FA
07F8:  BSF    F8C.2
07FA:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
07FC:  BCF    F95.0
07FE:  BSF    F8C.0
0800:  GOTO   081C (RETURN)
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
....................        
....................       mo_4_led_7doan; 
....................       mo_ic_74573_a_thong_dl(); 
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
....................       chot_ic_74573_a_goi_du_lieu; 
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
....................       chuc4  = ma7doan[tam/10%10]; 
....................       tram4  = ma7doan[tam/100%10];  
....................       ngan4  = ma7doan[tam/1000%10];        
....................       if (ngan4==0xc0) 
....................       { 
....................          ngan4=0xff; 
....................          if (tram4==0xc0) 
....................          { 
....................             tram4=0xff; 
....................             if (chuc4==0xc0)   chuc4=0xff; 
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
085A:  MOVFF  23,4D0
085E:  RCALL  07A6
....................     xuat_1byte(glcddata); 
0860:  MOVFF  22,4D0
0864:  RCALL  07A6
....................     xuat_1byte(lcdcontrol);        
0866:  MOVFF  21,4D0
086A:  RCALL  07A6
....................     xuat_1byte(lcddata);       
086C:  MOVFF  20,4D0
0870:  RCALL  07A6
....................        
....................     mo_glcd_lcd; 
0872:  BCF    17.2
....................     mo_ic_74573_a_thong_dl();             
0874:  BRA    082A
....................     output_high(rck_lcd20x4);      
0876:  BCF    F95.3
0878:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
087A:  BCF    F95.3
087C:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
087E:  BCF    F95.1
0880:  BCF    F8C.1
0882:  GOTO   0898 (RETURN)
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
0886:  MOVLB  4
0888:  MOVFF  4CE,21
088C:  COMF   21,F
....................     lcddata    = ~lcd_ins_hthi;       
088E:  MOVFF  4CF,20
0892:  COMF   20,F
....................     xuat_glcd_lcd(); 
0894:  MOVLB  0
0896:  BRA    085A
0898:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
....................     glcddata    = ~glcd_ins_hthi;      
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
....................        
....................       mo_8_led_quet; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
....................       mo_8_led_quet; 
....................       mo_ic_74573_b_thong_dl(); 
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
0804:  MOVFF  1A,4C1
0808:  MOVFF  1B,4C2
....................       xuat_1byte(rbdc2);       
080C:  MOVFF  4C2,4D0
0810:  RCALL  07A6
....................       xuat_1byte(rbdc1); 
0812:  MOVFF  4C1,4D0
0816:  RCALL  07A6
....................       mo_relay_buzzer_dc; 
0818:  BCF    18.2
....................       mo_ic_74573_b_thong_dl(); 
081A:  BRA    07D4
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
081C:  BCF    F95.3
081E:  BSF    F8C.3
0820:  BCF    F95.3
0822:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
0824:  BCF    F95.0
0826:  BCF    F8C.0
0828:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
....................       zt=zp=0; 
....................       i32=32;j32=0;i16=16,j16=0; 
....................       dem_led=0; 
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
....................      tgdlay = 0; 
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
....................       dem_led++; 
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
....................       dem_led++; 
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
....................    else              tang_dem_led_delay_1(dl); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
....................    xuat_32led_don_1dw(y);  
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
....................       else if (tgdlay==200)   
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
....................       } 
....................       tgdlay++; 
....................       delay_chon(dl,chondelay); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
....................       zp= (zp<<1)+1;  
....................       zt= (zt>>1)+0x8000; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp<<1);  
....................       zt= (zt>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
....................       zp= (zp>>1)+0x8000; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
....................       zp= (zp>>1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
....................    {   
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<64) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
....................       {   
....................          xuat_32led_don_1dw(y); 
....................          y= (y>>1)+0x80000000;  
....................          delay_chon(dl,chondelay);       
....................       } 
....................       else 
....................       if (dem_led<64) 
....................       {   
....................          xuat_32led_don_1dw(y);  
....................          y= (y>>1); 
....................          delay_chon(dl,chondelay); 
....................       }  
....................       else reset_toan_bo_bien(); 
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yp_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay);        
....................          yp_chay = yp_chay <<1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yp_chay = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... //#include "TV_PICKIT2_SHIFT_LCD.c" 
.................... #include "TV_PICKIT2_SHIFT_STEP_MOTOR.c" 
.................... unsigned  int8 stepmotor_fullstep[]=  {0x1d,0x17,0x1b,0x0f}; 
.................... unsigned  int8 stepmotor_halfstep[]=  {0x1d,0x15,0x17,0x13,0x03,0x0b,0x09,0x0d}; 
.................... unsigned  int8 stepmotor_i=0, stepmotor_delay; 
.................... int1 stepmotor_tn=0,stepmotor_onoff=0; 
.................... void step_motor_quay_thuan_fs() 
.................... { 
....................       rbdc=rbdc & 0xffe0;            
....................       rbdc=rbdc | stepmotor_fullstep[stepmotor_i]; 
....................       xuat_buzzer_relay();  
....................       stepmotor_i++; 
....................       stepmotor_i = stepmotor_i & 0x03; 
.................... } 
.................... void step_motor_quay_nghich_fs() 
.................... { 
....................       rbdc=rbdc & 0xffe0;            
....................       rbdc=rbdc | stepmotor_fullstep[stepmotor_i]; 
....................       xuat_buzzer_relay();  
....................       stepmotor_i--; 
....................       stepmotor_i = stepmotor_i & 0x03; 
.................... } 
.................... void motor_step_run_fs() 
.................... { 
....................    if (stepmotor_tn) step_motor_quay_thuan_fs(); 
....................    else           step_motor_quay_nghich_fs(); 
.................... } 
....................  
.................... void step_motor_quay_thuan_hs() 
.................... { 
....................       rbdc=rbdc & 0xe0;            
....................       rbdc=rbdc | stepmotor_halfstep[stepmotor_i]; 
....................       xuat_buzzer_relay();  
....................       stepmotor_i++; 
....................       stepmotor_i = stepmotor_i & 0x07; 
.................... } 
.................... void step_motor_quay_nghich_hs() 
.................... { 
....................       rbdc=rbdc & 0xe0;            
....................       rbdc=rbdc | stepmotor_halfstep[stepmotor_i]; 
....................       xuat_buzzer_relay();  
....................       stepmotor_i--; 
....................       stepmotor_i = stepmotor_i & 0x07; 
.................... } 
.................... void motor_step_run_hs() 
.................... { 
....................    if (stepmotor_tn) step_motor_quay_thuan_hs(); 
....................    else           step_motor_quay_nghich_hs(); 
.................... } 
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_DC_MOTOR.c" 
.................... int1 dcmotor_tn = 0, dcmotor_onoff=0; 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac ham cho dk dong co dc on off 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dc_motor_enable() 
.................... { 
....................       dc_enable=1; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... void dc_motor_quay_thuan() 
.................... { 
....................       output_high(pin_c1); 
....................       output_low(pin_c2); 
.................... } 
.................... void dc_motor_quay_nghich() 
.................... { 
....................       output_low(pin_c1); 
....................       output_high(pin_c2); 
.................... } 
.................... void dc_motor_stop() 
.................... { 
....................       output_low(pin_c1); 
....................       output_low(pin_c2); 
.................... } 
.................... void dc_motor_control() 
.................... { 
....................       if (dcmotor_onoff==1) 
....................       { 
....................          if (dcmotor_tn)   dc_motor_quay_thuan(); 
....................          else              dc_motor_quay_nghich(); 
....................       } 
....................       else                 dc_motor_stop(); 
....................        
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac ham cho dk dong co dc bang pwm 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16    pwm_duty; 
.................... void dc_motor_ktao_ccp1_thuan() 
.................... {      
....................       setup_ccp2(ccp_off);       
*
095A:  MOVLW  F0
095C:  ANDWF  FBA,F
....................       setup_ccp1(ccp_pwm); 
095E:  BCF    F94.2
0960:  BCF    F8B.2
0962:  MOVLW  0C
0964:  MOVWF  FBD
0966:  CLRF   FB7
0968:  CLRF   FB6
....................       output_low(pin_c1);       
096A:  BCF    F94.1
096C:  BCF    F8B.1
096E:  GOTO   0990 (RETURN)
.................... } 
.................... void dc_motor_ktao_ccp2_nghich() 
.................... {             
....................       setup_ccp1(ccp_off);       
0972:  MOVLW  F0
0974:  ANDWF  FBD,F
....................       setup_ccp2(ccp_pwm); 
0976:  BCF    F94.1
0978:  BCF    F8B.1
097A:  MOVLW  0C
097C:  MOVWF  FBA
....................       output_low(pin_c2); 
097E:  BCF    F94.2
0980:  BCF    F8B.2
0982:  GOTO   0990 (RETURN)
.................... } 
.................... void dc_motor_ktao_ccpx_ktao() 
.................... {          
....................      if (dcmotor_tn)   dc_motor_ktao_ccp1_thuan(); 
0986:  BTFSS  x7F.2
0988:  BRA    098E
098A:  BRA    095A
098C:  BRA    0990
....................      else               dc_motor_ktao_ccp2_nghich();             
098E:  BRA    0972
0990:  GOTO   0E82 (RETURN)
.................... } 
.................... void dc_motor_pww_setup_duty() 
.................... {      
....................      if (dcmotor_tn)   set_pwm1_duty(pwm_duty); 
0994:  BTFSS  x7F.2
0996:  BRA    09C0
0998:  MOVFF  81,02
099C:  MOVFF  80,01
09A0:  RRCF   02,F
09A2:  RRCF   01,F
09A4:  RRCF   02,F
09A6:  RRCF   01,F
09A8:  RRCF   02,F
09AA:  MOVFF  01,FBE
09AE:  RRCF   02,F
09B0:  RRCF   02,W
09B2:  ANDLW  30
09B4:  MOVWF  00
09B6:  MOVF   FBD,W
09B8:  ANDLW  CF
09BA:  IORWF  00,W
09BC:  MOVWF  FBD
09BE:  BRA    09E6
....................      else               set_pwm2_duty(pwm_duty);      
09C0:  MOVFF  81,02
09C4:  MOVFF  80,01
09C8:  RRCF   02,F
09CA:  RRCF   01,F
09CC:  RRCF   02,F
09CE:  RRCF   01,F
09D0:  RRCF   02,F
09D2:  MOVFF  01,FBB
09D6:  RRCF   02,F
09D8:  RRCF   02,W
09DA:  ANDLW  30
09DC:  MOVWF  00
09DE:  MOVF   FBA,W
09E0:  ANDLW  CF
09E2:  IORWF  00,W
09E4:  MOVWF  FBA
09E6:  GOTO   0E84 (RETURN)
.................... }  
.................... void dc_motor_pwm_ccp1_ccp2_stop() 
.................... {          
....................       pwm_duty=0;             
....................       setup_ccp1(ccp_off); 
....................       setup_ccp2(ccp_off); 
....................       dc_motor_ktao_ccpx_ktao(); 
....................       dc_motor_pww_setup_duty(); 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
....................       glcd_xuat_8bit(glcd_data2);       
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(glcd_data3);      
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
....................          glcd_cs2 = 1; 
....................          glcd_e  = 0; 
....................          glcd_rw = 0;           
....................          glcd_p =0;          
....................          glcd_command(glcd_function_set_mode);          
....................          delay_us(10); 
....................          glcd_command(glcd_cursor_display);        
....................          delay_us(10);     
....................          glcd_command(glcd_clear_display);       
....................          delay_ms(2); 
....................          glcd_command(glcd_entry_mode);       
....................          delay_us(10);                           
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
....................   for (doc=0; doc < glcd_doc; doc++)  
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
....................     }  
....................   }  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
....................   doc = y;  
....................   ngang = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
....................       }  
....................     }  
....................     gdram_vdk.refresh = false;  
....................   }  
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "TV_PICKIT2_SHIFT_DS18B20.c" 
.................... #define     touch_pin pin_a5 
.................... #include    <touch.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
....................    delay_us(14); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    data = TOUCH_PIN_READ(); 
....................    delay_us(100); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
....................       shift_right(&data, 1, touch_read_bit()); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(10); 
....................    if(data) 
....................    { 
....................       TOUCH_PIN_HIGH(); 
....................       delay_us(10); 
....................       if(!TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
....................       delay_us(10); 
....................       if(TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    delay_us(50); 
....................    TOUCH_PIN_HIGH(); 
....................    delay_us(50); 
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
....................          return FALSE; 
....................  
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................  
....................    if(!TOUCH_PIN_READ()) 
....................       return FALSE; 
....................  
....................    delay_us(65); 
....................    present = !TOUCH_PIN_READ(); 
....................    delay_us(240); 
....................    return present; 
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define       skip_rom              0xcc 
.................... #define       convert_t             0x44 
.................... #define       read_scratchpad       0xbe 
.................... #define       write_scratchpad      0x4e 
.................... #define       copy_scratchpad       0x48     
.................... unsigned int8     ds18al, ds18ah, ds18a_tam; 
.................... unsigned int16    ds18a; 
.................... void  khoi_tao_ds18b20() 
.................... {                          
....................       touch_present(); 
....................       touch_write_byte(skip_rom);       
....................       touch_write_byte(write_scratchpad);     
....................       touch_write_byte(0x0);       // ghi 2 byte rong 
....................       touch_write_byte(0x0);       // 
....................       touch_write_byte(0x1f);      //cau hinh do phan giai 9 bit 
....................  
....................       touch_present(); 
....................       touch_write_byte(skip_rom);       
....................       touch_write_byte(copy_scratchpad);  
.................... } 
.................... void  doc_giatri_ds18b20() 
.................... {  
....................       touch_write_byte(skip_rom); 
....................       touch_write_byte (convert_t);    
....................       touch_present(); 
....................       touch_write_byte(skip_rom); 
....................       touch_write_byte(read_scratchpad);   
....................       ds18al = touch_read_byte(); 
....................       ds18ah = touch_read_byte();       
....................       ds18a   =  make16(ds18ah,ds18al);         
.................... } 
....................              
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_DS1307_I2C.c" 
.................... #include <tv_pickit2_shift_lcd.c> 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
089A:  MOVLB  4
089C:  BSF    x8B.0
089E:  MOVFF  48B,4CE
08A2:  MOVFF  4CD,4CF
08A6:  MOVLB  0
08A8:  RCALL  0886
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
08AA:  MOVLB  4
08AC:  BCF    x8B.0
08AE:  MOVFF  48B,4CE
08B2:  MOVFF  4CD,4CF
08B6:  MOVLB  0
08B8:  RCALL  0886
08BA:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
08BC:  MOVLB  4
08BE:  BCF    x8B.2
....................       lcd_xuat_8bit(lcd_data_x); 
08C0:  MOVFF  4C3,4CD
08C4:  MOVLB  0
08C6:  RCALL  089A
....................       delay_us(20); 
08C8:  MOVLW  20
08CA:  MOVWF  00
08CC:  DECFSZ 00,F
08CE:  BRA    08CC
08D0:  BRA    08D2
08D2:  NOP   
08D4:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
09EA:  MOVLB  4
09EC:  BSF    x8B.2
....................       lcd_xuat_8bit(lcd_data_x); 
09EE:  MOVFF  4CC,4CD
09F2:  MOVLB  0
09F4:  RCALL  089A
....................       delay_us(20); 
09F6:  MOVLW  20
09F8:  MOVWF  00
09FA:  DECFSZ 00,F
09FC:  BRA    09FA
09FE:  BRA    0A00
0A00:  NOP   
0A02:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
08FE:  MOVLB  4
0900:  BCF    x8B.0
....................          lcd_rw = 0;  
0902:  BCF    x8B.1
....................          lcd_rs = 1;  
0904:  BSF    x8B.2
....................          lcd_p =0; 
0906:  BCF    x8B.3
....................          lcd_command(lcd_function_set);          
0908:  MOVLW  38
090A:  MOVWF  xC3
090C:  MOVLB  0
090E:  RCALL  08BC
....................          delay_us(40); 
0910:  MOVLW  42
0912:  MOVWF  00
0914:  DECFSZ 00,F
0916:  BRA    0914
0918:  NOP   
....................          lcd_command(lcd_display_control);    
091A:  MOVLW  0C
091C:  MOVLB  4
091E:  MOVWF  xC3
0920:  MOVLB  0
0922:  RCALL  08BC
....................          delay_us(40); 
0924:  MOVLW  42
0926:  MOVWF  00
0928:  DECFSZ 00,F
092A:  BRA    0928
092C:  NOP   
....................          lcd_command(lcd_clear_display);       
092E:  MOVLW  01
0930:  MOVLB  4
0932:  MOVWF  xC3
0934:  MOVLB  0
0936:  RCALL  08BC
....................          delay_ms(2); 
0938:  MOVLW  02
093A:  MOVLB  4
093C:  MOVWF  xC1
093E:  MOVLB  0
0940:  RCALL  08D6
....................          lcd_command(lcd_entry_mode);        
0942:  MOVLW  06
0944:  MOVLB  4
0946:  MOVWF  xC3
0948:  MOVLB  0
094A:  RCALL  08BC
....................          delay_us(40);                 
094C:  MOVLW  42
094E:  MOVWF  00
0950:  DECFSZ 00,F
0952:  BRA    0950
0954:  NOP   
0956:  GOTO   0E64 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #define   giay_htai      0x55 
.................... #define   phut_htai      0x37 
.................... #define   gio_htai       0x15 
.................... #define   thu_htai       2 
.................... #define   ngay_htai      0x14 
.................... #define   thang_htai     0x12 
.................... #define   nam_htai       0x20       
.................... #define   ma_ds          0x91 
....................  
.................... #define  addr_wr_13b07   0xd0 
.................... #define  addr_rd_13b07   0xd1 
.................... #define  addr_mem        0x00 
....................  
.................... unsigned  char    nam_ds13,thang_ds13,ngay_ds13,thu_ds13,gio_ds13, 
....................                   phut_ds13,giay_ds13,ma_ds13,control_ds13,giaytam; 
....................                                 
.................... void thiet_lap_thoi_gian_hien_tai() 
.................... {     giay_ds13   =   giay_htai;       phut_ds13  =    phut_htai;    
....................       gio_ds13    =   gio_htai;        thu_ds13   =    thu_htai; 
....................       ngay_ds13   =   ngay_htai;       thang_ds13 =    thang_htai;    
....................       nam_ds13    =   nam_htai;    
....................       control_ds13 = 0x90;             ma_ds13      =   ma_ds; 
.................... } 
....................   
.................... void nap_thoi_gian_htai_vao_ds13b07() 
.................... {     i2c_start();          
....................       i2c_write(addr_wr_13b07);     
....................       i2c_write(0x00); 
....................       i2c_write(giay_ds13);        i2c_write(phut_ds13);       
....................       i2c_write(gio_ds13);         i2c_write(thu_ds13);       
....................       i2c_write(ngay_ds13);        i2c_write(thang_ds13);             
....................       i2c_write(nam_ds13);         i2c_write(control_ds13);    
....................       i2c_write(ma_ds13); 
....................       i2c_stop(); 
.................... } 
....................      
.................... void doc_thoi_gian_tu_realtime() 
.................... {    
....................       i2c_start(); 
....................       i2c_write(addr_wr_13b07); 
....................       i2c_write(addr_mem);                      
....................       i2c_start();                 
....................                  
....................       i2c_write(addr_rd_13b07); 
....................       giay_ds13      =  i2c_read();               
....................       phut_ds13      =  i2c_read();              
....................       gio_ds13       =  i2c_read();              
....................       thu_ds13       =  i2c_read();  
....................       ngay_ds13      =  i2c_read();  
....................       thang_ds13     =  i2c_read();  
....................       nam_ds13       =  i2c_read();  
....................       control_ds13   =  i2c_read();           
....................       ma_ds13        =  i2c_read(0);     //not ack 
....................       i2c_stop(); 
.................... }     
....................  
....................     
.................... void doc_giay_tu_realtime() 
.................... {    
....................       i2c_start(); 
....................       i2c_write(addr_wr_13b07); 
....................       i2c_write(addr_mem);                      
....................       i2c_start();                 
....................                  
....................       i2c_write(addr_rd_13b07); 
....................       giay_ds13      =  i2c_read(0);               
....................       i2c_stop(); 
.................... }   
....................          
....................   
.................... void hien_thi_thoi_gian_ds13b07 ( ) 
.................... {     lcd_command (0x8c);    
....................       lcd_data(gio_ds13/16  +0x30);    lcd_data(gio_ds13%16  +0x30); 
....................       lcd_data(' '); 
....................       lcd_data(phut_ds13/16 +0x30);    lcd_data(phut_ds13%16 +0x30); 
....................       lcd_data(' '); 
....................       lcd_data(giay_ds13/16 +0x30);    lcd_data(giay_ds13%16 +0x30); 
....................       lcd_command (0xcc);   
....................       lcd_data(ngay_ds13/16 +0x30);    lcd_data(ngay_ds13%16 +0x30); 
....................       lcd_data(' '); 
....................       lcd_data(thang_ds13/16 +0x30);   lcd_data(thang_ds13%16 +0x30); 
....................       lcd_data(' '); 
....................       lcd_data(nam_ds13/16 +0x30);     lcd_data(nam_ds13%16 +0x30);  
.................... } 
....................  
....................  
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... signed int16 t1; 
.................... signed int8 donvi,chuc,tram,ngan,bdn; 
.................... signed int16 xung,xungdat,duty,e,ecu =0,tocdo; 
.................... float kp =1,kd = 0.2, ki = 0.002,tp = 0,td = 0,ti = 0; 
....................  
....................  
....................  
....................  
.................... #int_timer3 
.................... void interrupt_timer3() 
.................... { 
....................    set_timer3(3036); 
*
04E6:  MOVLW  0B
04E8:  MOVWF  FB3
04EA:  MOVLW  DC
04EC:  MOVWF  FB2
....................       bdn = 0; 
04EE:  MOVLB  4
04F0:  CLRF   x9C
....................       xung = get_timer1(); 
04F2:  MOVF   FCE,W
04F4:  MOVWF  x9D
04F6:  MOVFF  FCF,49E
....................       set_timer1(0); 
04FA:  CLRF   FCF
04FC:  CLRF   FCE
....................       e = xungdat - xung; 
04FE:  MOVF   x9D,W
0500:  SUBWF  x9F,W
0502:  MOVWF  xA3
0504:  MOVF   x9E,W
0506:  SUBWFB xA0,W
0508:  MOVWF  xA4
....................       tp = e; 
050A:  MOVFF  4A4,4D8
050E:  MOVFF  4A3,4D7
0512:  MOVLB  0
0514:  RCALL  0096
0516:  MOVFF  03,4B8
051A:  MOVFF  02,4B7
051E:  MOVFF  01,4B6
0522:  MOVFF  00,4B5
....................       td = (e-ecu)*10; 
0526:  MOVLB  4
0528:  MOVF   xA5,W
052A:  SUBWF  xA3,W
052C:  MOVWF  xD3
052E:  MOVF   xA6,W
0530:  SUBWFB xA4,W
0532:  MOVWF  xD4
0534:  MOVWF  xD6
0536:  MOVFF  4D3,4D5
053A:  CLRF   xD8
053C:  MOVLW  0A
053E:  MOVWF  xD7
0540:  MOVLB  0
0542:  RCALL  00E6
0544:  MOVFF  02,4D8
0548:  MOVFF  01,4D7
054C:  MOVLB  0
054E:  RCALL  0096
0550:  MOVFF  03,4BC
0554:  MOVFF  02,4BB
0558:  MOVFF  01,4BA
055C:  MOVFF  00,4B9
....................       ti = ti*e*0.1; 
0560:  MOVFF  4A4,4D8
0564:  MOVFF  4A3,4D7
0568:  RCALL  0096
056A:  MOVFF  4C0,4DE
056E:  MOVFF  4BF,4DD
0572:  MOVFF  4BE,4DC
0576:  MOVFF  4BD,4DB
057A:  MOVFF  03,4E2
057E:  MOVFF  02,4E1
0582:  MOVFF  01,4E0
0586:  MOVFF  00,4DF
058A:  RCALL  013A
058C:  MOVFF  03,4D6
0590:  MOVFF  02,4D5
0594:  MOVFF  01,4D4
0598:  MOVFF  00,4D3
059C:  MOVFF  03,4DE
05A0:  MOVFF  02,4DD
05A4:  MOVFF  01,4DC
05A8:  MOVFF  00,4DB
05AC:  MOVLW  CD
05AE:  MOVLB  4
05B0:  MOVWF  xE2
05B2:  MOVLW  CC
05B4:  MOVWF  xE1
05B6:  MOVLW  4C
05B8:  MOVWF  xE0
05BA:  MOVLW  7B
05BC:  MOVWF  xDF
05BE:  MOVLB  0
05C0:  RCALL  013A
05C2:  MOVFF  03,4C0
05C6:  MOVFF  02,4BF
05CA:  MOVFF  01,4BE
05CE:  MOVFF  00,4BD
....................       ecu = e; 
05D2:  MOVFF  4A4,4A6
05D6:  MOVFF  4A3,4A5
....................       duty = duty + kp*tp + kd*td + ki*ti; 
05DA:  MOVFF  4AC,4DE
05DE:  MOVFF  4AB,4DD
05E2:  MOVFF  4AA,4DC
05E6:  MOVFF  4A9,4DB
05EA:  MOVFF  4B8,4E2
05EE:  MOVFF  4B7,4E1
05F2:  MOVFF  4B6,4E0
05F6:  MOVFF  4B5,4DF
05FA:  RCALL  013A
05FC:  MOVFF  03,4D6
0600:  MOVFF  02,4D5
0604:  MOVFF  01,4D4
0608:  MOVFF  00,4D3
060C:  MOVFF  4A2,4D8
0610:  MOVFF  4A1,4D7
0614:  RCALL  0096
0616:  BCF    FD8.1
0618:  MOVFF  03,4DE
061C:  MOVFF  02,4DD
0620:  MOVFF  01,4DC
0624:  MOVFF  00,4DB
0628:  MOVFF  4D6,4E2
062C:  MOVFF  4D5,4E1
0630:  MOVFF  4D4,4E0
0634:  MOVFF  4D3,4DF
0638:  RCALL  0230
063A:  MOVFF  03,4DA
063E:  MOVFF  02,4D9
0642:  MOVFF  01,4D8
0646:  MOVFF  00,4D7
064A:  MOVFF  4B0,4DE
064E:  MOVFF  4AF,4DD
0652:  MOVFF  4AE,4DC
0656:  MOVFF  4AD,4DB
065A:  MOVFF  4BC,4E2
065E:  MOVFF  4BB,4E1
0662:  MOVFF  4BA,4E0
0666:  MOVFF  4B9,4DF
066A:  RCALL  013A
066C:  BCF    FD8.1
066E:  MOVFF  4DA,4DE
0672:  MOVFF  4D9,4DD
0676:  MOVFF  4D8,4DC
067A:  MOVFF  4D7,4DB
067E:  MOVFF  03,4E2
0682:  MOVFF  02,4E1
0686:  MOVFF  01,4E0
068A:  MOVFF  00,4DF
068E:  RCALL  0230
0690:  MOVFF  03,4DA
0694:  MOVFF  02,4D9
0698:  MOVFF  01,4D8
069C:  MOVFF  00,4D7
06A0:  MOVFF  4B4,4DE
06A4:  MOVFF  4B3,4DD
06A8:  MOVFF  4B2,4DC
06AC:  MOVFF  4B1,4DB
06B0:  MOVFF  4C0,4E2
06B4:  MOVFF  4BF,4E1
06B8:  MOVFF  4BE,4E0
06BC:  MOVFF  4BD,4DF
06C0:  RCALL  013A
06C2:  BCF    FD8.1
06C4:  MOVFF  4DA,4DE
06C8:  MOVFF  4D9,4DD
06CC:  MOVFF  4D8,4DC
06D0:  MOVFF  4D7,4DB
06D4:  MOVFF  03,4E2
06D8:  MOVFF  02,4E1
06DC:  MOVFF  01,4E0
06E0:  MOVFF  00,4DF
06E4:  RCALL  0230
06E6:  MOVFF  03,4DA
06EA:  MOVFF  02,4D9
06EE:  MOVFF  01,4D8
06F2:  MOVFF  00,4D7
06F6:  BRA    04A8
06F8:  MOVFF  02,4A2
06FC:  MOVFF  01,4A1
....................       if (duty > 1000) duty = 1000; 
0700:  MOVLB  4
0702:  BTFSC  xA2.7
0704:  BRA    0720
0706:  MOVF   xA2,W
0708:  SUBLW  02
070A:  BC    0720
070C:  XORLW  FF
070E:  BNZ   0716
0710:  MOVF   xA1,W
0712:  SUBLW  E8
0714:  BC    0720
0716:  MOVLW  03
0718:  MOVWF  xA2
071A:  MOVLW  E8
071C:  MOVWF  xA1
071E:  BRA    0728
....................       else if (duty<0) duty = 0; 
0720:  BTFSS  xA2.7
0722:  BRA    0728
0724:  CLRF   xA2
0726:  CLRF   xA1
....................       set_pwm1_duty(duty);     
0728:  MOVFF  4A2,02
072C:  MOVFF  4A1,01
0730:  RRCF   02,F
0732:  RRCF   01,F
0734:  RRCF   02,F
0736:  RRCF   01,F
0738:  RRCF   02,F
073A:  MOVFF  01,FBE
073E:  RRCF   02,F
0740:  RRCF   02,W
0742:  ANDLW  30
0744:  MOVWF  00
0746:  MOVF   FBD,W
0748:  ANDLW  CF
074A:  IORWF  00,W
074C:  MOVWF  FBD
074E:  BCF    FA1.1
0750:  MOVLB  0
0752:  GOTO   0054
.................... } 
....................  
.................... void hienthi_lcd_t1(signed int16 tam) 
.................... { 
....................    lcd_command(lcd_addr_line1); 
*
0C7A:  MOVLW  80
0C7C:  MOVLB  4
0C7E:  MOVWF  xC3
0C80:  MOVLB  0
0C82:  RCALL  08BC
....................    printf(lcd_data,"LEVEL %4ld",tam); 
0C84:  MOVLW  56
0C86:  MOVWF  FF6
0C88:  MOVLW  07
0C8A:  MOVWF  FF7
0C8C:  MOVLW  06
0C8E:  MOVLB  4
0C90:  MOVWF  xC3
0C92:  MOVLB  0
0C94:  RCALL  0A04
0C96:  MOVLW  02
0C98:  MOVWF  FE9
0C9A:  MOVFF  4C2,4C4
0C9E:  MOVFF  4C1,4C3
0CA2:  RCALL  0A2C
0CA4:  GOTO   0F30 (RETURN)
.................... } 
....................  
....................  
.................... void hienthi_lcd_cap_tocdo() 
.................... { 
....................    lcd_command(lcd_addr_line2); 
*
0B2A:  MOVLW  C0
0B2C:  MOVLB  4
0B2E:  MOVWF  xC3
0B30:  MOVLB  0
0B32:  RCALL  08BC
....................    printf(lcd_data,"SPEED %4ld",tocdo); 
0B34:  MOVLW  62
0B36:  MOVWF  FF6
0B38:  MOVLW  07
0B3A:  MOVWF  FF7
0B3C:  MOVLW  06
0B3E:  MOVLB  4
0B40:  MOVWF  xC3
0B42:  MOVLB  0
0B44:  RCALL  0A04
0B46:  MOVLW  02
0B48:  MOVWF  FE9
0B4A:  MOVFF  4A8,4C4
0B4E:  MOVFF  4A7,4C3
0B52:  RCALL  0A2C
0B54:  RETURN 0
.................... } 
.................... void hienthi_lcd_xung_dat() 
.................... { 
....................    lcd_command(lcd_addr_line3); 
*
0CA8:  MOVLW  94
0CAA:  MOVLB  4
0CAC:  MOVWF  xC3
0CAE:  MOVLB  0
0CB0:  RCALL  08BC
....................    printf(lcd_data,"SETPOINT %4ld",xungdat); 
0CB2:  MOVLW  6E
0CB4:  MOVWF  FF6
0CB6:  MOVLW  07
0CB8:  MOVWF  FF7
0CBA:  MOVLW  09
0CBC:  MOVLB  4
0CBE:  MOVWF  xC3
0CC0:  MOVLB  0
0CC2:  RCALL  0A04
0CC4:  MOVLW  02
0CC6:  MOVWF  FE9
0CC8:  MOVFF  4A0,4C4
0CCC:  MOVFF  49F,4C3
0CD0:  RCALL  0A2C
0CD2:  GOTO   0F32 (RETURN)
.................... } 
.................... void heinthi_lcd_xung_dem() 
.................... { 
....................    lcd_command(lcd_addr_line4); 
0CD6:  MOVLW  D4
0CD8:  MOVLB  4
0CDA:  MOVWF  xC3
0CDC:  MOVLB  0
0CDE:  RCALL  08BC
....................    printf(lcd_data,"COUNT %4ld",xung); 
0CE0:  MOVLW  7C
0CE2:  MOVWF  FF6
0CE4:  MOVLW  07
0CE6:  MOVWF  FF7
0CE8:  MOVLW  06
0CEA:  MOVLB  4
0CEC:  MOVWF  xC3
0CEE:  MOVLB  0
0CF0:  RCALL  0A04
0CF2:  MOVLW  02
0CF4:  MOVWF  FE9
0CF6:  MOVFF  49E,4C4
0CFA:  MOVFF  49D,4C3
0CFE:  RCALL  0A2C
0D00:  GOTO   0F34 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void phim_up(){ 
....................    if (!input(up) && (xungdat<300)) 
*
0BA8:  BSF    F93.5
0BAA:  BTFSC  F81.5
0BAC:  BRA    0BFC
0BAE:  MOVLB  4
0BB0:  BTFSC  xA0.7
0BB2:  BRA    0BCE
0BB4:  MOVF   xA0,W
0BB6:  SUBLW  01
0BB8:  BTFSC  FD8.0
0BBA:  BRA    0BC0
0BBC:  MOVLB  0
0BBE:  BRA    0BFC
0BC0:  BNZ   0BCE
0BC2:  MOVF   x9F,W
0BC4:  SUBLW  2B
0BC6:  BTFSC  FD8.0
0BC8:  BRA    0BCE
0BCA:  MOVLB  0
0BCC:  BRA    0BFC
....................    { 
....................       delay_ms(20); 
0BCE:  MOVLW  14
0BD0:  MOVWF  xC1
0BD2:  MOVLB  0
0BD4:  RCALL  08D6
....................       if (!input(up)) { 
0BD6:  BSF    F93.5
0BD8:  BTFSC  F81.5
0BDA:  BRA    0BFA
....................       xungdat = xungdat+10; 
0BDC:  MOVLW  0A
0BDE:  MOVLB  4
0BE0:  ADDWF  x9F,F
0BE2:  MOVLW  00
0BE4:  ADDWFC xA0,F
....................       tocdo++; 
0BE6:  INCF   xA7,F
0BE8:  BTFSC  FD8.2
0BEA:  INCF   xA8,F
....................       hienthi_lcd_cap_tocdo(); 
0BEC:  MOVLB  0
0BEE:  RCALL  0B2A
....................       delay_ms(200);       
0BF0:  MOVLW  C8
0BF2:  MOVLB  4
0BF4:  MOVWF  xC1
0BF6:  MOVLB  0
0BF8:  RCALL  08D6
....................    } 
....................    enable_interrupts(INT_TIMER3); 
0BFA:  BSF    FA0.1
....................    } 
0BFC:  GOTO   0EBC (RETURN)
.................... }   
.................... void phim_dw() 
.................... { 
....................    if (!input(dw) && (xungdat>0)) 
*
0B56:  BSF    F93.4
0B58:  BTFSC  F81.4
0B5A:  BRA    0BA4
0B5C:  MOVLB  4
0B5E:  BTFSS  xA0.7
0B60:  BRA    0B66
0B62:  MOVLB  0
0B64:  BRA    0BA4
0B66:  MOVF   xA0,F
0B68:  BNZ   0B76
0B6A:  MOVF   x9F,W
0B6C:  SUBLW  00
0B6E:  BTFSS  FD8.0
0B70:  BRA    0B76
0B72:  MOVLB  0
0B74:  BRA    0BA4
....................    { 
....................       delay_ms(20); 
0B76:  MOVLW  14
0B78:  MOVWF  xC1
0B7A:  MOVLB  0
0B7C:  RCALL  08D6
....................       if (!input(dw)) { 
0B7E:  BSF    F93.4
0B80:  BTFSC  F81.4
0B82:  BRA    0BA4
....................          xungdat = xungdat-10; 
0B84:  MOVLW  0A
0B86:  MOVLB  4
0B88:  SUBWF  x9F,F
0B8A:  MOVLW  00
0B8C:  SUBWFB xA0,F
....................          tocdo--; 
0B8E:  MOVF   xA7,W
0B90:  BTFSC  FD8.2
0B92:  DECF   xA8,F
0B94:  DECF   xA7,F
....................          hienthi_lcd_cap_tocdo(); 
0B96:  MOVLB  0
0B98:  RCALL  0B2A
....................          delay_ms(200); 
0B9A:  MOVLW  C8
0B9C:  MOVLB  4
0B9E:  MOVWF  xC1
0BA0:  MOVLB  0
0BA2:  RCALL  08D6
....................       } 
....................    } 
0BA4:  GOTO   0EBA (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
0D04:  CLRF   FF8
0D06:  BCF    FD0.7
0D08:  BSF    07.7
0D0A:  CLRF   19
0D0C:  CLRF   20
0D0E:  CLRF   21
0D10:  CLRF   22
0D12:  CLRF   23
0D14:  CLRF   2C
0D16:  CLRF   2D
0D18:  CLRF   2E
0D1A:  CLRF   32
0D1C:  CLRF   31
0D1E:  CLRF   30
0D20:  CLRF   2F
0D22:  CLRF   36
0D24:  CLRF   35
0D26:  CLRF   34
0D28:  MOVLW  01
0D2A:  MOVWF  33
0D2C:  MOVLW  80
0D2E:  MOVWF  3A
0D30:  CLRF   39
0D32:  CLRF   38
0D34:  CLRF   37
0D36:  CLRF   3E
0D38:  CLRF   3D
0D3A:  CLRF   3C
0D3C:  CLRF   3B
0D3E:  MOVWF  42
0D40:  CLRF   41
0D42:  CLRF   44
0D44:  MOVLW  01
0D46:  MOVWF  43
0D48:  CLRF   46
0D4A:  CLRF   45
0D4C:  MOVLW  80
0D4E:  MOVWF  4A
0D50:  CLRF   49
0D52:  CLRF   4C
0D54:  MOVLW  01
0D56:  MOVWF  4B
0D58:  CLRF   4E
0D5A:  CLRF   4D
0D5C:  CLRF   50
0D5E:  CLRF   4F
0D60:  CLRF   51
0D62:  MOVLW  20
0D64:  MOVWF  52
0D66:  CLRF   53
0D68:  MOVLW  01
0D6A:  MOVWF  54
0D6C:  MOVLW  10
0D6E:  MOVWF  55
0D70:  CLRF   56
0D72:  CLRF   5A
0D74:  CLRF   59
0D76:  CLRF   58
0D78:  MOVLW  01
0D7A:  MOVWF  57
0D7C:  CLRF   5E
0D7E:  CLRF   5D
0D80:  CLRF   5C
0D82:  MOVWF  5B
0D84:  SETF   x62
0D86:  SETF   x61
0D88:  SETF   x60
0D8A:  MOVLW  FE
0D8C:  MOVWF  5F
0D8E:  MOVLW  80
0D90:  MOVWF  x66
0D92:  CLRF   x65
0D94:  CLRF   x64
0D96:  CLRF   x63
0D98:  MOVWF  x6A
0D9A:  CLRF   x69
0D9C:  CLRF   x68
0D9E:  CLRF   x67
0DA0:  MOVLW  7F
0DA2:  MOVWF  x6E
0DA4:  SETF   x6D
0DA6:  SETF   x6C
0DA8:  SETF   x6B
0DAA:  MOVLW  01
0DAC:  MOVWF  x6F
0DAE:  MOVWF  x70
0DB0:  CLRF   x7D
0DB2:  BCF    x7F.0
0DB4:  BCF    x7F.1
0DB6:  BCF    x7F.2
0DB8:  BCF    x7F.3
0DBA:  MOVLB  4
0DBC:  CLRF   xA6
0DBE:  CLRF   xA5
0DC0:  CLRF   xAC
0DC2:  CLRF   xAB
0DC4:  CLRF   xAA
0DC6:  MOVLW  7F
0DC8:  MOVWF  xA9
0DCA:  MOVLW  CD
0DCC:  MOVWF  xB0
0DCE:  MOVLW  CC
0DD0:  MOVWF  xAF
0DD2:  MOVLW  4C
0DD4:  MOVWF  xAE
0DD6:  MOVLW  7C
0DD8:  MOVWF  xAD
0DDA:  MOVLW  6F
0DDC:  MOVWF  xB4
0DDE:  MOVLW  12
0DE0:  MOVWF  xB3
0DE2:  MOVLW  03
0DE4:  MOVWF  xB2
0DE6:  MOVLW  76
0DE8:  MOVWF  xB1
0DEA:  CLRF   xB8
0DEC:  CLRF   xB7
0DEE:  CLRF   xB6
0DF0:  CLRF   xB5
0DF2:  CLRF   xBC
0DF4:  CLRF   xBB
0DF6:  CLRF   xBA
0DF8:  CLRF   xB9
0DFA:  CLRF   xC0
0DFC:  CLRF   xBF
0DFE:  CLRF   xBE
0E00:  CLRF   xBD
0E02:  MOVF   FC1,W
0E04:  ANDLW  C0
0E06:  IORLW  0F
0E08:  MOVWF  FC1
0E0A:  MOVLW  07
0E0C:  MOVWF  FB4
0E0E:  SETF   24
0E10:  SETF   25
0E12:  SETF   26
0E14:  SETF   27
0E16:  SETF   28
0E18:  SETF   29
0E1A:  SETF   2A
0E1C:  SETF   2B
0E1E:  MOVLW  1D
0E20:  MOVLB  0
0E22:  MOVWF  x71
0E24:  MOVLW  17
0E26:  MOVWF  x72
0E28:  MOVLW  1B
0E2A:  MOVWF  x73
0E2C:  MOVLW  0F
0E2E:  MOVWF  x74
0E30:  MOVLW  1D
0E32:  MOVWF  x75
0E34:  MOVLW  15
0E36:  MOVWF  x76
0E38:  MOVLW  17
0E3A:  MOVWF  x77
0E3C:  MOVLW  13
0E3E:  MOVWF  x78
0E40:  MOVLW  03
0E42:  MOVWF  x79
0E44:  MOVLW  0B
0E46:  MOVWF  x7A
0E48:  MOVLW  09
0E4A:  MOVWF  x7B
0E4C:  MOVLW  0D
0E4E:  MOVWF  x7C
.................... { 
....................    set_up_port_ic_chot(); 
0E50:  BRA    0788
....................    set_tris_b(0x3C); 
0E52:  MOVLW  3C
0E54:  MOVWF  F93
....................    set_tris_c(0xf9); 
0E56:  MOVLW  F9
0E58:  MOVWF  F94
....................    dc_enable=1; 
0E5A:  BSF    1A.5
....................    output_low(pin_c1); 
0E5C:  BCF    F94.1
0E5E:  BCF    F8B.1
....................    xuat_buzzer_relay(); 
0E60:  RCALL  0804
....................  
....................    setup_lcd(); 
0E62:  BRA    08FE
....................  
....................    setup_ccp1(CCP_PWM); 
0E64:  BCF    F94.2
0E66:  BCF    F8B.2
0E68:  MOVLW  0C
0E6A:  MOVWF  FBD
0E6C:  CLRF   FB7
0E6E:  CLRF   FB6
....................    setup_timer_2(T2_DIV_BY_1,249,1); 
0E70:  MOVLW  00
0E72:  IORLW  04
0E74:  MOVWF  FCA
0E76:  MOVLW  F9
0E78:  MOVWF  FCB
....................  
....................    dcmotor_tn = 1; 
0E7A:  BSF    x7F.2
....................    pwm_duty = 0; 
0E7C:  CLRF   x81
0E7E:  CLRF   x80
....................    dc_motor_ktao_ccpx_ktao(); 
0E80:  BRA    0986
....................    dc_motor_pww_setup_duty(); 
0E82:  BRA    0994
....................  
....................  
....................    enable_interrupts(GLOBAL); 
0E84:  MOVLW  C0
0E86:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER3); 
0E88:  BSF    FA0.1
....................     
....................     
....................  
....................    setup_timer_3(T3_INTERNAL|T3_DIV_BY_8); 
0E8A:  MOVLW  B5
0E8C:  MOVWF  FB1
....................    set_timer3(3036); 
0E8E:  MOVLW  0B
0E90:  MOVWF  FB3
0E92:  MOVLW  DC
0E94:  MOVWF  FB2
....................  
....................  
....................    setup_timer_1(T1_EXTERNAL_SYNC | T1_DIV_BY_1); 
0E96:  MOVLW  83
0E98:  MOVWF  FCD
....................    set_timer1(0); 
0E9A:  CLRF   FCF
0E9C:  CLRF   FCE
....................  
....................    hienthi_lcd_cap_tocdo(); 
0E9E:  RCALL  0B2A
....................    tocdo =0; 
0EA0:  MOVLB  4
0EA2:  CLRF   xA8
0EA4:  CLRF   xA7
....................    xuat_buzzer_relay(); 
0EA6:  MOVLB  0
0EA8:  RCALL  0804
....................    duty = 0; 
0EAA:  MOVLB  4
0EAC:  CLRF   xA2
0EAE:  CLRF   xA1
....................    bdn = 0; 
0EB0:  CLRF   x9C
....................    xungdat = 0; 
0EB2:  CLRF   xA0
0EB4:  CLRF   x9F
....................  
....................    while (true) 
....................    { 
....................       phim_dw(); 
0EB6:  MOVLB  0
0EB8:  BRA    0B56
....................       phim_up(); 
0EBA:  BRA    0BA8
....................       if (!input(stop)) 
0EBC:  BSF    F93.2
0EBE:  BTFSC  F81.2
0EC0:  BRA    0EE0
....................       { 
....................          disable_interrupts(INT_TIMER3); 
0EC2:  BCF    FA0.1
....................          duty = 0; 
0EC4:  MOVLB  4
0EC6:  CLRF   xA2
0EC8:  CLRF   xA1
....................          set_timer1(0); 
0ECA:  CLRF   FCF
0ECC:  CLRF   FCE
....................          tocdo = 0; 
0ECE:  CLRF   xA8
0ED0:  CLRF   xA7
....................          xungdat = 0; 
0ED2:  CLRF   xA0
0ED4:  CLRF   x9F
....................          xung = 0; 
0ED6:  CLRF   x9E
0ED8:  CLRF   x9D
....................          hienthi_lcd_cap_tocdo(); 
0EDA:  MOVLB  0
0EDC:  RCALL  0B2A
....................          set_pwm1_duty(0); 
0EDE:  CLRF   FBE
0EE0:  CLRF   16
0EE2:  BTFSC  FF2.7
0EE4:  BSF    16.7
0EE6:  BCF    FF2.7
....................       } 
....................       t1 = (xung*40)/3; 
0EE8:  MOVFF  49E,4D6
0EEC:  MOVFF  49D,4D5
0EF0:  MOVLB  4
0EF2:  CLRF   xD8
0EF4:  MOVLW  28
0EF6:  MOVWF  xD7
0EF8:  MOVLB  0
0EFA:  CALL   00E6
0EFE:  BTFSC  16.7
0F00:  BSF    FF2.7
0F02:  MOVFF  02,4C2
0F06:  MOVFF  01,4C1
0F0A:  MOVFF  02,4C4
0F0E:  MOVFF  01,4C3
0F12:  MOVLB  4
0F14:  CLRF   xC6
0F16:  MOVLW  03
0F18:  MOVWF  xC5
0F1A:  MOVLB  0
0F1C:  BRA    0C00
0F1E:  MOVFF  02,497
0F22:  MOVFF  01,496
....................       hienthi_lcd_t1(t1); 
0F26:  MOVFF  497,4C2
0F2A:  MOVFF  496,4C1
0F2E:  BRA    0C7A
....................       hienthi_lcd_xung_dat(); 
0F30:  BRA    0CA8
....................       heinthi_lcd_xung_dem(); 
0F32:  BRA    0CD6
0F34:  BRA    0EB8
....................    } 
....................     
.................... } 
....................  
0F36:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
