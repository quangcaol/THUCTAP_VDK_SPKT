CCS PCH C Compiler, Version 5.078, 43599               02-Nov-20 14:10

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK6\517\517.lst

               ROM used:   1440 bytes (4%)
                           Largest free fragment is 31324
               RAM used:   121 (6%) at main() level
                           128 (6%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   043A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00E8
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
*
0116:  MOVF   x79,W
0118:  XORWF  x7A,W
011A:  ANDLW  80
011C:  MOVWF  x7C
011E:  BTFSS  x79.7
0120:  BRA    0126
0122:  COMF   x79,F
0124:  INCF   x79,F
0126:  BTFSS  x7A.7
0128:  BRA    012E
012A:  COMF   x7A,F
012C:  INCF   x7A,F
012E:  MOVF   x7A,W
0130:  CLRF   01
0132:  SUBWF  x79,W
0134:  BC    013C
0136:  MOVFF  79,00
013A:  BRA    0154
013C:  CLRF   00
013E:  MOVLW  08
0140:  MOVWF  x7B
0142:  RLCF   x79,F
0144:  RLCF   00,F
0146:  MOVF   x7A,W
0148:  SUBWF  00,W
014A:  BTFSC  FD8.0
014C:  MOVWF  00
014E:  RLCF   01,F
0150:  DECFSZ x7B,F
0152:  BRA    0142
0154:  BTFSS  x7C.7
0156:  BRA    015C
0158:  COMF   01,F
015A:  INCF   01,F
015C:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
*
02FE:  BSF    F93.5
0300:  BTFSC  F81.5
0302:  BRA    0322
....................     {   
....................       dl_btn++; 
0304:  INCF   1B,F
....................        
....................       if (dl_btn>= dl) 
0306:  MOVF   x7A,F
0308:  BNZ   031A
030A:  MOVF   x79,W
030C:  SUBWF  1B,W
030E:  BNC   031A
....................          { 
....................             dl_btn =0; 
0310:  CLRF   1B
....................             return(1); 
0312:  MOVLW  01
0314:  MOVWF  01
0316:  BRA    0326
....................          } 
0318:  BRA    0320
....................       else return(0); 
031A:  MOVLW  00
031C:  MOVWF  01
031E:  BRA    0326
....................     } 
0320:  BRA    0326
....................     else    return(0); 
0322:  MOVLW  00
0324:  MOVWF  01
0326:  GOTO   0332 (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
*
0378:  BSF    F93.4
037A:  BTFSC  F81.4
037C:  BRA    039C
....................     {   
....................       dl_btn++; 
037E:  INCF   1B,F
....................        
....................       if (dl_btn>= dl) 
0380:  MOVF   x7A,F
0382:  BNZ   0394
0384:  MOVF   x79,W
0386:  SUBWF  1B,W
0388:  BNC   0394
....................          { 
....................             dl_btn =0; 
038A:  CLRF   1B
....................             return(1); 
038C:  MOVLW  01
038E:  MOVWF  01
0390:  BRA    03A0
....................          } 
0392:  BRA    039A
....................       else return(0); 
0394:  MOVLW  00
0396:  MOVWF  01
0398:  BRA    03A0
....................     } 
039A:  BRA    03A0
....................     else    return(0); 
039C:  MOVLW  00
039E:  MOVWF  01
03A0:  GOTO   03AC (RETURN)
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
*
03F0:  BSF    F93.3
03F2:  BTFSC  F81.3
03F4:  BRA    0414
....................     {   
....................       dl_btn++; 
03F6:  INCF   1B,F
....................        
....................       if (dl_btn>= dl) 
03F8:  MOVF   x7A,F
03FA:  BNZ   040C
03FC:  MOVF   x79,W
03FE:  SUBWF  1B,W
0400:  BNC   040C
....................          { 
....................             dl_btn =0; 
0402:  CLRF   1B
....................             return(1); 
0404:  MOVLW  01
0406:  MOVWF  01
0408:  BRA    0418
....................          } 
040A:  BRA    0412
....................       else return(0); 
040C:  MOVLW  00
040E:  MOVWF  01
0410:  BRA    0418
....................     } 
0412:  BRA    0418
....................     else    return(0); 
0414:  MOVLW  00
0416:  MOVWF  01
0418:  GOTO   0424 (RETURN)
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
020A:  MOVFF  7D,7F
....................    for (sb=0;sb<8;sb++) 
020E:  CLRF   x7E
0210:  MOVF   x7E,W
0212:  SUBLW  07
0214:  BNC   0232
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0216:  BTFSC  x7F.7
0218:  BRA    021E
021A:  BCF    F8D.2
021C:  BRA    0220
021E:  BSF    F8D.2
0220:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
0222:  BCF    F96.0
0224:  BCF    F8D.0
0226:  BCF    F96.0
0228:  BSF    F8D.0
....................          x= x<<1;          
022A:  BCF    FD8.0
022C:  RLCF   x7F,F
022E:  INCF   x7E,F
0230:  BRA    0210
....................      } 
0232:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
....................       xuat_1byte(bld2); 
....................       xuat_1byte(bld1);           
....................       xuat_1byte(bld0);             
....................       mo_32_led_don;       
....................       mo_ic_74573_a_thong_dl();             
....................       output_high(rck_32led);    output_low(rck_32led); 
....................       chot_ic_74573_a_goi_du_lieu;       
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
....................      b1 = wld0>>8;  b0 = wld0; 
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
....................      xuat_32led_don_2word(wd1,wd0); 
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
00F8:  MOVLW  00
00FA:  MOVWF  F95
....................       set_tris_e(0x00); 
00FC:  MOVWF  F96
....................       output_d(0xff); 
00FE:  CLRF   F95
0100:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0102:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
0104:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
0106:  BCF    F95.1
0108:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
010A:  BCF    F95.0
010C:  BCF    F8C.0
....................       rbdc=0; 
010E:  CLRF   1D
0110:  CLRF   1C
0112:  GOTO   0518 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
....................       output_bit(g_32led,g_32a); 
....................       output_bit(g_4led7doan,g_4a); 
....................       output_bit(g_lcd20x4,g_lcda);   
....................       cho_ic_74573_a_goi_du_lieu; 
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0234:  CLRF   F95
0236:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0238:  BTFSC  1A.6
023A:  BRA    0240
023C:  BCF    F8C.6
023E:  BRA    0242
0240:  BSF    F8C.6
0242:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0244:  BTFSC  1A.4
0246:  BRA    024C
0248:  BCF    F8C.4
024A:  BRA    024E
024C:  BSF    F8C.4
024E:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0250:  BTFSC  1A.2
0252:  BRA    0258
0254:  BCF    F8C.2
0256:  BRA    025A
0258:  BSF    F8C.2
025A:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
025C:  BCF    F95.0
025E:  BSF    F8C.0
0260:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
....................        
....................       mo_4_led_7doan; 
....................       mo_ic_74573_a_thong_dl(); 
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
....................       chot_ic_74573_a_goi_du_lieu; 
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
....................       chuc4  = ma7doan[tam/10%10]; 
....................       tram4  = ma7doan[tam/100%10];  
....................       ngan4  = ma7doan[tam/1000%10];        
....................       if (ngan4==0xc0) 
....................       { 
....................          ngan4=0xff; 
....................          if (tram4==0xc0) 
....................          { 
....................             tram4=0xff; 
....................             if (chuc4==0xc0)   chuc4=0xff; 
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
....................     xuat_1byte(glcddata); 
....................     xuat_1byte(lcdcontrol);        
....................     xuat_1byte(lcddata);       
....................        
....................     mo_glcd_lcd; 
....................     mo_ic_74573_a_thong_dl();             
....................     output_high(rck_lcd20x4);      
....................     output_low(rck_lcd20x4); 
....................     chot_ic_74573_a_goi_du_lieu; 
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
....................     lcddata    = ~lcd_ins_hthi;       
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
....................     glcddata    = ~glcd_ins_hthi;      
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0294:  MOVF   x79,W
0296:  MOVWF  x7B
0298:  COMF   x7B,F
029A:  MOVFF  7B,7D
029E:  RCALL  020A
02A0:  MOVFF  7A,7B
02A4:  COMF   x7B,F
02A6:  MOVFF  7B,7D
02AA:  RCALL  020A
....................        
....................       mo_8_led_quet; 
02AC:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
02AE:  RCALL  0234
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
02B0:  BCF    F95.5
02B2:  BSF    F8C.5
02B4:  BCF    F95.5
02B6:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
02B8:  BCF    F95.0
02BA:  BCF    F8C.0
02BC:  GOTO   02C6 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
02C0:  SETF   x79
02C2:  SETF   x7A
02C4:  BRA    0294
02C6:  GOTO   02F6 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0262:  CLRF   03
0264:  MOVF   x7A,W
0266:  RCALL  00D0
0268:  MOVWF  01
026A:  MOVWF  x7C
026C:  COMF   x7C,F
026E:  MOVFF  7C,7D
0272:  RCALL  020A
0274:  MOVFF  7B,7C
0278:  COMF   x7C,F
027A:  MOVFF  7C,7D
027E:  RCALL  020A
....................       mo_8_led_quet; 
0280:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0282:  RCALL  0234
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0284:  BCF    F95.5
0286:  BSF    F8C.5
0288:  BCF    F95.5
028A:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
028C:  BCF    F95.0
028E:  BCF    F8C.0
0290:  GOTO   02EA (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
02CA:  CLRF   2E
02CC:  MOVF   2E,W
02CE:  SUBLW  07
02D0:  BNC   02FA
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
02D2:  CLRF   03
02D4:  MOVF   2E,W
02D6:  ADDLW  26
02D8:  MOVWF  FE9
02DA:  MOVLW  00
02DC:  ADDWFC 03,W
02DE:  MOVWF  FEA
02E0:  MOVFF  FEF,7B
02E4:  MOVFF  2E,7A
02E8:  BRA    0262
....................             delay_us(100); 
02EA:  MOVLW  A6
02EC:  MOVWF  00
02EE:  DECFSZ 00,F
02F0:  BRA    02EE
02F2:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
02F4:  BRA    02C0
02F6:  INCF   2E,F
02F8:  BRA    02CC
....................             } 
02FA:  GOTO   056A (RETURN)
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
....................       zt=zp=0; 
....................       i32=32;j32=0;i16=16,j16=0; 
....................       dem_led=0; 
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
....................      tgdlay = 0; 
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
....................       dem_led++; 
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
....................       dem_led++; 
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
....................    else              tang_dem_led_delay_1(dl); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
....................    xuat_32led_don_1dw(y);  
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
....................       else if (tgdlay==200)   
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
....................       } 
....................       tgdlay++; 
....................       delay_chon(dl,chondelay); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
....................       zp= (zp<<1)+1;  
....................       zt= (zt>>1)+0x8000; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp<<1);  
....................       zt= (zt>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
....................       zp= (zp>>1)+0x8000; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
....................       zp= (zp>>1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
....................    {   
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<64) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
....................       {   
....................          xuat_32led_don_1dw(y); 
....................          y= (y>>1)+0x80000000;  
....................          delay_chon(dl,chondelay);       
....................       } 
....................       else 
....................       if (dem_led<64) 
....................       {   
....................          xuat_32led_don_1dw(y);  
....................          y= (y>>1); 
....................          delay_chon(dl,chondelay); 
....................       }  
....................       else reset_toan_bo_bien(); 
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yp_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay);        
....................          yp_chay = yp_chay <<1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yp_chay = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 mode = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
00E8:  INCF   x74,F
....................    set_timer1(3036); //3036 
00EA:  MOVLW  0B
00EC:  MOVWF  FCF
00EE:  MOVLW  DC
00F0:  MOVWF  FCE
00F2:  BCF    F9E.0
00F4:  GOTO   0060
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
015E:  MOVFF  73,79
0162:  MOVLW  0A
0164:  MOVWF  x7A
0166:  RCALL  0116
0168:  CLRF   03
016A:  MOVF   00,W
016C:  RCALL  00AE
016E:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0170:  MOVFF  73,79
0174:  MOVLW  0A
0176:  MOVWF  x7A
0178:  RCALL  0116
017A:  CLRF   03
017C:  MOVF   01,W
017E:  RCALL  00AE
0180:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0182:  MOVFF  75,79
0186:  MOVLW  0A
0188:  MOVWF  x7A
018A:  RCALL  0116
018C:  CLRF   03
018E:  MOVF   00,W
0190:  RCALL  00AE
0192:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0194:  MOVFF  75,79
0198:  MOVLW  0A
019A:  MOVWF  x7A
019C:  RCALL  0116
019E:  CLRF   03
01A0:  MOVF   01,W
01A2:  RCALL  00AE
01A4:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
01A6:  MOVFF  76,79
01AA:  MOVLW  0A
01AC:  MOVWF  x7A
01AE:  RCALL  0116
01B0:  CLRF   03
01B2:  MOVF   00,W
01B4:  RCALL  00AE
01B6:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
01B8:  MOVFF  76,79
01BC:  MOVLW  0A
01BE:  MOVWF  x7A
01C0:  RCALL  0116
01C2:  CLRF   03
01C4:  MOVF   01,W
01C6:  RCALL  00AE
01C8:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
01CA:  DECFSZ x78,W
01CC:  BRA    01D2
01CE:  BCF    26.7
01D0:  BRA    01E4
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
01D2:  MOVF   x78,W
01D4:  SUBLW  02
01D6:  BNZ   01DC
01D8:  BCF    29.7
01DA:  BRA    01E4
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
01DC:  MOVF   x78,W
01DE:  SUBLW  03
01E0:  BNZ   01E4
01E2:  BCF    2C.7
01E4:  RETURN 0
.................... } 
....................  
.................... void phim_up(){ 
....................    if (phim_bt0(200)) { 
*
032A:  CLRF   x7A
032C:  MOVLW  C8
032E:  MOVWF  x79
0330:  BRA    02FE
0332:  MOVF   01,F
0334:  BZ    0374
....................          dem_tg_exit = 0; 
0336:  CLRF   x77
....................          switch (mode) 
0338:  MOVF   x78,W
033A:  XORLW  01
033C:  BZ    0348
033E:  XORLW  03
0340:  BZ    0356
0342:  XORLW  01
0344:  BZ    0364
0346:  BRA    0372
....................          { 
....................             case 1: if (giay==59) giay =0; 
0348:  MOVF   x73,W
034A:  SUBLW  3B
034C:  BNZ   0352
034E:  CLRF   x73
0350:  BRA    0354
....................                     else giay++; 
0352:  INCF   x73,F
....................                     break; 
0354:  BRA    0372
....................             case 2: if (phut == 59) phut = 0; 
0356:  MOVF   x75,W
0358:  SUBLW  3B
035A:  BNZ   0360
035C:  CLRF   x75
035E:  BRA    0362
....................                     else phut++; 
0360:  INCF   x75,F
....................                     break; 
0362:  BRA    0372
....................             case 3: if (gio == 23) gio = 0; 
0364:  MOVF   x76,W
0366:  SUBLW  17
0368:  BNZ   036E
036A:  CLRF   x76
036C:  BRA    0370
....................                     else gio ++; 
036E:  INCF   x76,F
....................                     break; 
0370:  BRA    0372
....................             default: break; 
....................          } 
....................          giai_ma(); 
0372:  RCALL  015E
....................    } 
0374:  GOTO   056C (RETURN)
.................... } 
....................  
.................... void phim_dw(){ 
....................    if (phim_bt1(200)) { 
*
03A4:  CLRF   x7A
03A6:  MOVLW  C8
03A8:  MOVWF  x79
03AA:  BRA    0378
03AC:  MOVF   01,F
03AE:  BZ    03EC
....................          switch (mode) 
03B0:  MOVF   x78,W
03B2:  XORLW  01
03B4:  BZ    03C0
03B6:  XORLW  03
03B8:  BZ    03CE
03BA:  XORLW  01
03BC:  BZ    03DC
03BE:  BRA    03EA
....................          { 
....................             case 1: if (giay==0) giay =59; 
03C0:  MOVF   x73,F
03C2:  BNZ   03CA
03C4:  MOVLW  3B
03C6:  MOVWF  x73
03C8:  BRA    03CC
....................                     else giay--; 
03CA:  DECF   x73,F
....................                     break; 
03CC:  BRA    03EA
....................             case 2: if (phut == 0) phut = 59; 
03CE:  MOVF   x75,F
03D0:  BNZ   03D8
03D2:  MOVLW  3B
03D4:  MOVWF  x75
03D6:  BRA    03DA
....................                     else phut--; 
03D8:  DECF   x75,F
....................                     break; 
03DA:  BRA    03EA
....................             case 3: if (gio == 0) gio = 23; 
03DC:  MOVF   x76,F
03DE:  BNZ   03E6
03E0:  MOVLW  17
03E2:  MOVWF  x76
03E4:  BRA    03E8
....................                     else gio--; 
03E6:  DECF   x76,F
....................                     break; 
03E8:  BRA    03EA
....................             default: break;         
....................          } 
....................          giai_ma(); 
03EA:  RCALL  015E
....................    } 
03EC:  GOTO   056E (RETURN)
.................... } 
....................  
.................... void phim_mode(){ 
....................    if (phim_bt2(200)) { 
*
041C:  CLRF   x7A
041E:  MOVLW  C8
0420:  MOVWF  x79
0422:  BRA    03F0
0424:  MOVF   01,F
0426:  BZ    0436
....................          mode++; 
0428:  INCF   x78,F
....................          if (mode  >= 4){ 
042A:  MOVF   x78,W
042C:  SUBLW  03
042E:  BC    0432
....................             mode = 0; 
0430:  CLRF   x78
....................          } 
....................          dem_tg_exit = 0; 
0432:  CLRF   x77
....................          giai_ma(); 
0434:  RCALL  015E
....................       } 
0436:  GOTO   0570 (RETURN)
.................... } 
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] &= 0x7f; led_7dq[1] &= 0x7f;} 
*
01E6:  DECFSZ x78,W
01E8:  BRA    01F0
01EA:  BCF    26.7
01EC:  BCF    27.7
01EE:  BRA    0206
....................    else if (mode == 2) {led_7dq[3] &= 0x7f; led_7dq[4] &= 0x7f;} 
01F0:  MOVF   x78,W
01F2:  SUBLW  02
01F4:  BNZ   01FC
01F6:  BCF    29.7
01F8:  BCF    2A.7
01FA:  BRA    0206
....................    else if (mode == 3) {led_7dq[6] &= 0x7f; led_7dq[7] &= 0x7f;}    
01FC:  MOVF   x78,W
01FE:  SUBLW  03
0200:  BNZ   0206
0202:  BCF    2C.7
0204:  BCF    2D.7
0206:  GOTO   0568 (RETURN)
.................... } 
....................  
.................... void main() 
*
043A:  CLRF   FF8
043C:  BCF    FD0.7
043E:  BSF    07.7
0440:  BSF    F93.1
0442:  BSF    F93.0
0444:  MOVLW  31
0446:  MOVWF  FC8
0448:  MOVLW  28
044A:  MOVWF  FC6
044C:  BSF    FC7.7
044E:  BCF    FC7.6
0450:  CLRF   1B
0452:  CLRF   22
0454:  CLRF   23
0456:  CLRF   24
0458:  CLRF   25
045A:  CLRF   2E
045C:  CLRF   2F
045E:  CLRF   30
0460:  CLRF   34
0462:  CLRF   33
0464:  CLRF   32
0466:  CLRF   31
0468:  CLRF   38
046A:  CLRF   37
046C:  CLRF   36
046E:  MOVLW  01
0470:  MOVWF  35
0472:  MOVLW  80
0474:  MOVWF  3C
0476:  CLRF   3B
0478:  CLRF   3A
047A:  CLRF   39
047C:  CLRF   40
047E:  CLRF   3F
0480:  CLRF   3E
0482:  CLRF   3D
0484:  MOVWF  44
0486:  CLRF   43
0488:  CLRF   46
048A:  MOVLW  01
048C:  MOVWF  45
048E:  CLRF   48
0490:  CLRF   47
0492:  MOVLW  80
0494:  MOVWF  4C
0496:  CLRF   4B
0498:  CLRF   4E
049A:  MOVLW  01
049C:  MOVWF  4D
049E:  CLRF   50
04A0:  CLRF   4F
04A2:  CLRF   52
04A4:  CLRF   51
04A6:  CLRF   53
04A8:  MOVLW  20
04AA:  MOVWF  54
04AC:  CLRF   55
04AE:  MOVLW  01
04B0:  MOVWF  56
04B2:  MOVLW  10
04B4:  MOVWF  57
04B6:  CLRF   58
04B8:  CLRF   5C
04BA:  CLRF   5B
04BC:  CLRF   5A
04BE:  MOVLW  01
04C0:  MOVWF  59
04C2:  CLRF   x60
04C4:  CLRF   5F
04C6:  CLRF   5E
04C8:  MOVWF  5D
04CA:  SETF   x64
04CC:  SETF   x63
04CE:  SETF   x62
04D0:  MOVLW  FE
04D2:  MOVWF  x61
04D4:  MOVLW  80
04D6:  MOVWF  x68
04D8:  CLRF   x67
04DA:  CLRF   x66
04DC:  CLRF   x65
04DE:  MOVWF  x6C
04E0:  CLRF   x6B
04E2:  CLRF   x6A
04E4:  CLRF   x69
04E6:  MOVLW  7F
04E8:  MOVWF  x70
04EA:  SETF   x6F
04EC:  SETF   x6E
04EE:  SETF   x6D
04F0:  MOVLW  01
04F2:  MOVWF  x71
04F4:  MOVWF  x72
04F6:  CLRF   x77
04F8:  CLRF   x78
04FA:  MOVF   FC1,W
04FC:  ANDLW  C0
04FE:  IORLW  0F
0500:  MOVWF  FC1
0502:  MOVLW  07
0504:  MOVWF  FB4
0506:  SETF   26
0508:  SETF   27
050A:  SETF   28
050C:  SETF   29
050E:  SETF   2A
0510:  SETF   2B
0512:  SETF   2C
0514:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
0516:  BRA    00F8
....................    set_tris_b(0x3c); 
0518:  MOVLW  3C
051A:  MOVWF  F93
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
051C:  MOVLW  B5
051E:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
0520:  MOVLW  0B
0522:  MOVWF  FCF
0524:  MOVLW  DC
0526:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
0528:  MOVLW  C0
052A:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
052C:  BSF    F9D.0
....................    giay = 0; 
052E:  CLRF   x73
....................    bdn = 0; 
0530:  CLRF   x74
....................    phut = 0; 
0532:  CLRF   x75
....................    gio = 0; 
0534:  CLRF   x76
....................    giai_ma(); 
0536:  RCALL  015E
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
0538:  BTFSC  x74.7
053A:  BRA    0542
053C:  MOVF   x74,W
053E:  SUBLW  09
0540:  BNC   0572
....................          if (mode !=0) 
0542:  MOVF   x78,F
0544:  BZ    0568
....................          { 
....................             if ((bdn = 0) && (input(bt0)) && (input(bt1)) && (input(bt2))) tat_2_led_chinh(); 
0546:  CLRF   x74
0548:  BZ    0560
054A:  BSF    F93.5
054C:  BTFSS  F81.5
054E:  BRA    0560
0550:  BSF    F93.4
0552:  BTFSS  F81.4
0554:  BRA    0560
0556:  BSF    F93.3
0558:  BTFSS  F81.3
055A:  BRA    0560
055C:  BRA    01E6
055E:  BRA    0568
....................             else if (bdn == 5) giai_ma(); 
0560:  MOVF   x74,W
0562:  SUBLW  05
0564:  BTFSC  FD8.2
0566:  RCALL  015E
....................          } 
....................          hien_thi_8led_7doan_quet_all(); 
0568:  BRA    02CA
....................          phim_up(); 
056A:  BRA    032A
....................          phim_dw(); 
056C:  BRA    03A4
....................          phim_mode(); 
056E:  BRA    041C
....................       } 
0570:  BRA    05A0
....................       else  
....................       { 
....................          bdn = bdn -10; 
0572:  MOVLW  0A
0574:  SUBWF  x74,F
....................          dem_tg_exit++; 
0576:  INCF   x77,F
....................          if (dem_tg_exit == 20) mode = 0; 
0578:  MOVF   x77,W
057A:  SUBLW  14
057C:  BNZ   0580
057E:  CLRF   x78
....................          giay++; 
0580:  INCF   x73,F
....................             if (giay==60) { giay = 0; phut++; 
0582:  MOVF   x73,W
0584:  SUBLW  3C
0586:  BNZ   059E
0588:  CLRF   x73
058A:  INCF   x75,F
....................                if (phut == 60) { phut = 0; gio++;  
058C:  MOVF   x75,W
058E:  SUBLW  3C
0590:  BNZ   059E
0592:  CLRF   x75
0594:  INCF   x76,F
....................                   if (gio == 24) gio = 0; 
0596:  MOVF   x76,W
0598:  SUBLW  18
059A:  BNZ   059E
059C:  CLRF   x76
....................                }  
....................             } 
....................          giai_ma(); 
059E:  RCALL  015E
....................       } 
05A0:  BRA    0538
....................    }            
.................... } 
....................  
05A2:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
