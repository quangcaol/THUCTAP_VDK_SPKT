CCS PCH C Compiler, Version 5.078, 43599               16-Nov-20 14:09

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK8\622\622.lst

               ROM used:   4072 bytes (12%)
                           Largest free fragment is 28692
               RAM used:   151 (7%) at main() level
                           176 (9%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0CFA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0110
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 3F,7F
00FA:  DATA BF,FF
00FC:  CLRF   FF7
00FE:  ADDLW  0C
0100:  MOVWF  FF6
0102:  MOVLW  01
0104:  ADDWFC FF7,F
0106:  TBLRD*+
0108:  MOVF   FF5,W
010A:  RETURN 0
010C:  DATA 80,C0
010E:  DATA 94,D4
*
0120:  DATA 49,54
0122:  DATA 45,4D
0124:  DATA 53,3A
0126:  DATA 00,00
0128:  DATA 48,41
012A:  DATA 59,20
012C:  DATA 4E,48
012E:  DATA 41,4E
0130:  DATA 20,50
0132:  DATA 48,49
0134:  DATA 4D,00
*
02A4:  TBLRD*+
02A6:  MOVF   FF5,F
02A8:  BZ    02C2
02AA:  MOVFF  FF6,98
02AE:  MOVFF  FF7,99
02B2:  MOVFF  FF5,9E
02B6:  RCALL  0292
02B8:  MOVFF  98,FF6
02BC:  MOVFF  99,FF7
02C0:  BRA    02A4
02C2:  RETURN 0
02C4:  MOVF   x97,W
02C6:  XORWF  x98,W
02C8:  ANDLW  80
02CA:  MOVWF  x9A
02CC:  BTFSS  x97.7
02CE:  BRA    02D4
02D0:  COMF   x97,F
02D2:  INCF   x97,F
02D4:  BTFSS  x98.7
02D6:  BRA    02DC
02D8:  COMF   x98,F
02DA:  INCF   x98,F
02DC:  MOVF   x98,W
02DE:  CLRF   01
02E0:  SUBWF  x97,W
02E2:  BC    02EA
02E4:  MOVFF  97,00
02E8:  BRA    0302
02EA:  CLRF   00
02EC:  MOVLW  08
02EE:  MOVWF  x99
02F0:  RLCF   x97,F
02F2:  RLCF   00,F
02F4:  MOVF   x98,W
02F6:  SUBWF  00,W
02F8:  BTFSC  FD8.0
02FA:  MOVWF  00
02FC:  RLCF   01,F
02FE:  DECFSZ x99,F
0300:  BRA    02F0
0302:  BTFSS  x9A.7
0304:  BRA    030A
0306:  COMF   01,F
0308:  INCF   01,F
030A:  RETURN 0
*
045C:  MOVF   x9F,W
045E:  CLRF   01
0460:  SUBWF  x9E,W
0462:  BC    046A
0464:  MOVFF  9E,00
0468:  BRA    0482
046A:  CLRF   00
046C:  MOVLW  08
046E:  MOVWF  xA0
0470:  RLCF   x9E,F
0472:  RLCF   00,F
0474:  MOVF   x9F,W
0476:  SUBWF  00,W
0478:  BTFSC  FD8.0
047A:  MOVWF  00
047C:  RLCF   01,F
047E:  DECFSZ xA0,F
0480:  BRA    0470
0482:  RETURN 0
0484:  MOVLW  20
0486:  BTFSS  x99.4
0488:  MOVLW  30
048A:  MOVWF  x9A
048C:  MOVFF  98,00
0490:  BTFSS  x98.7
0492:  BRA    04A4
0494:  COMF   00,F
0496:  INCF   00,F
0498:  MOVFF  00,98
049C:  MOVLW  2D
049E:  MOVWF  x9A
04A0:  BSF    x99.7
04A2:  BSF    x99.0
04A4:  MOVF   01,W
04A6:  MOVFF  98,9E
04AA:  MOVLW  64
04AC:  MOVWF  x9F
04AE:  RCALL  045C
04B0:  MOVFF  00,98
04B4:  MOVLW  30
04B6:  ADDWF  01,W
04B8:  MOVWF  x9B
04BA:  MOVFF  98,9E
04BE:  MOVLW  0A
04C0:  MOVWF  x9F
04C2:  RCALL  045C
04C4:  MOVLW  30
04C6:  ADDWF  00,W
04C8:  MOVWF  x9D
04CA:  MOVLW  30
04CC:  ADDWF  01,W
04CE:  MOVWF  x9C
04D0:  MOVFF  9A,00
04D4:  MOVLW  30
04D6:  SUBWF  x9B,W
04D8:  BZ    04E2
04DA:  BSF    x99.1
04DC:  BTFSC  x99.7
04DE:  BSF    x99.2
04E0:  BRA    0506
04E2:  MOVFF  9A,9B
04E6:  MOVLW  20
04E8:  MOVWF  x9A
04EA:  MOVLW  30
04EC:  SUBWF  x9C,W
04EE:  BZ    04F8
04F0:  BSF    x99.0
04F2:  BTFSC  x99.7
04F4:  BSF    x99.1
04F6:  BRA    0506
04F8:  BTFSS  FD8.2
04FA:  BSF    x99.0
04FC:  BNZ   0506
04FE:  MOVFF  9B,9C
0502:  MOVLW  20
0504:  MOVWF  x9B
0506:  BTFSC  x99.2
0508:  BRA    0514
050A:  BTFSC  x99.1
050C:  BRA    051A
050E:  BTFSC  x99.0
0510:  BRA    0520
0512:  BRA    0526
0514:  MOVFF  9A,9E
0518:  RCALL  0292
051A:  MOVFF  9B,9E
051E:  RCALL  0292
0520:  MOVFF  9C,9E
0524:  RCALL  0292
0526:  MOVFF  9D,9E
052A:  RCALL  0292
052C:  RETURN 0
*
0634:  CLRF   01
0636:  CLRF   02
0638:  CLRF   00
063A:  CLRF   03
063C:  MOVF   x9E,W
063E:  BNZ   0644
0640:  MOVF   x9D,W
0642:  BZ    0674
0644:  MOVLW  10
0646:  MOVWF  x9F
0648:  BCF    FD8.0
064A:  RLCF   x9B,F
064C:  RLCF   x9C,F
064E:  RLCF   00,F
0650:  RLCF   03,F
0652:  MOVF   x9E,W
0654:  SUBWF  03,W
0656:  BNZ   065C
0658:  MOVF   x9D,W
065A:  SUBWF  00,W
065C:  BNC   066C
065E:  MOVF   x9D,W
0660:  SUBWF  00,F
0662:  BTFSS  FD8.0
0664:  DECF   03,F
0666:  MOVF   x9E,W
0668:  SUBWF  03,F
066A:  BSF    FD8.0
066C:  RLCF   01,F
066E:  RLCF   02,F
0670:  DECFSZ x9F,F
0672:  BRA    0648
0674:  RETURN 0
*
0BCA:  CLRF   00
0BCC:  CLRF   01
0BCE:  MOVF   x9A,W
0BD0:  BCF    FD8.0
0BD2:  BTFSC  x9B.0
0BD4:  ADDWF  00,F
0BD6:  RRCF   00,F
0BD8:  RRCF   01,F
0BDA:  BTFSC  x9B.1
0BDC:  ADDWF  00,F
0BDE:  RRCF   00,F
0BE0:  RRCF   01,F
0BE2:  BTFSC  x9B.2
0BE4:  ADDWF  00,F
0BE6:  RRCF   00,F
0BE8:  RRCF   01,F
0BEA:  BTFSC  x9B.3
0BEC:  ADDWF  00,F
0BEE:  RRCF   00,F
0BF0:  RRCF   01,F
0BF2:  BTFSC  x9B.4
0BF4:  ADDWF  00,F
0BF6:  RRCF   00,F
0BF8:  RRCF   01,F
0BFA:  BTFSC  x9B.5
0BFC:  ADDWF  00,F
0BFE:  RRCF   00,F
0C00:  RRCF   01,F
0C02:  BTFSC  x9B.6
0C04:  ADDWF  00,F
0C06:  RRCF   00,F
0C08:  RRCF   01,F
0C0A:  BTFSC  x9B.7
0C0C:  ADDWF  00,F
0C0E:  RRCF   00,F
0C10:  RRCF   01,F
0C12:  GOTO   0C7C (RETURN)
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
0214:  CLRF   FEA
0216:  MOVLW  9C
0218:  MOVWF  FE9
021A:  MOVF   FEF,W
021C:  BZ    0238
021E:  MOVLW  06
0220:  MOVWF  01
0222:  CLRF   00
0224:  DECFSZ 00,F
0226:  BRA    0224
0228:  DECFSZ 01,F
022A:  BRA    0222
022C:  MOVLW  7B
022E:  MOVWF  00
0230:  DECFSZ 00,F
0232:  BRA    0230
0234:  DECFSZ FEF,F
0236:  BRA    021E
0238:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
0154:  MOVFF  AD,AF
....................    for (sb=0;sb<8;sb++) 
0158:  CLRF   xAE
015A:  MOVF   xAE,W
015C:  SUBLW  07
015E:  BNC   017C
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0160:  BTFSC  xAF.7
0162:  BRA    0168
0164:  BCF    F8D.2
0166:  BRA    016A
0168:  BSF    F8D.2
016A:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
016C:  BCF    F96.0
016E:  BCF    F8D.0
0170:  BCF    F96.0
0172:  BSF    F8D.0
....................          x= x<<1;          
0174:  BCF    FD8.0
0176:  RLCF   xAF,F
0178:  INCF   xAE,F
017A:  BRA    015A
....................      } 
017C:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
07A2:  MOVFF  A9,AD
07A6:  RCALL  0154
....................       xuat_1byte(bld2); 
07A8:  MOVFF  AA,AD
07AC:  RCALL  0154
....................       xuat_1byte(bld1);           
07AE:  MOVFF  AB,AD
07B2:  RCALL  0154
....................       xuat_1byte(bld0);             
07B4:  MOVFF  AC,AD
07B8:  RCALL  0154
....................       mo_32_led_don;       
07BA:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
07BC:  RCALL  017E
....................       output_high(rck_32led);    output_low(rck_32led); 
07BE:  BCF    F95.5
07C0:  BSF    F8C.5
07C2:  BCF    F95.5
07C4:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
07C6:  BCF    F95.1
07C8:  BCF    F8C.1
07CA:  GOTO   07F0 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
07CE:  MOVFF  A2,A5
07D2:  MOVFF  A1,A6
....................      b1 = wld0>>8;  b0 = wld0; 
07D6:  MOVFF  A4,A7
07DA:  MOVFF  A3,A8
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
07DE:  MOVFF  A5,A9
07E2:  MOVFF  A6,AA
07E6:  MOVFF  A7,AB
07EA:  MOVFF  A8,AC
07EE:  BRA    07A2
07F0:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
07F2:  MOVFF  9B,9D
07F6:  MOVFF  9C,9E
07FA:  MOVFF  9A,A0
07FE:  MOVFF  99,9F
....................      xuat_32led_don_2word(wd1,wd0); 
0802:  MOVFF  9E,A2
0806:  MOVFF  9D,A1
080A:  MOVFF  A0,A4
080E:  MOVFF  9F,A3
0812:  RCALL  07CE
0814:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
0136:  MOVLW  00
0138:  MOVWF  F95
....................       set_tris_e(0x00); 
013A:  MOVWF  F96
....................       output_d(0xff); 
013C:  CLRF   F95
013E:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0140:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
0142:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
0144:  BCF    F95.1
0146:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
0148:  BCF    F95.0
014A:  BCF    F8C.0
....................       rbdc=0; 
014C:  CLRF   1D
014E:  CLRF   1C
0150:  GOTO   0E2E (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
017E:  CLRF   F95
0180:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
0182:  BTFSC  19.4
0184:  BRA    018A
0186:  BCF    F8C.4
0188:  BRA    018C
018A:  BSF    F8C.4
018C:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
018E:  BTFSC  19.6
0190:  BRA    0196
0192:  BCF    F8C.6
0194:  BRA    0198
0196:  BSF    F8C.6
0198:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
019A:  BTFSC  19.2
019C:  BRA    01A2
019E:  BCF    F8C.2
01A0:  BRA    01A4
01A2:  BSF    F8C.2
01A4:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
01A6:  BCF    F95.1
01A8:  BSF    F8C.1
01AA:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0394:  CLRF   F95
0396:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0398:  BTFSC  1A.6
039A:  BRA    03A0
039C:  BCF    F8C.6
039E:  BRA    03A2
03A0:  BSF    F8C.6
03A2:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
03A4:  BTFSC  1A.4
03A6:  BRA    03AC
03A8:  BCF    F8C.4
03AA:  BRA    03AE
03AC:  BSF    F8C.4
03AE:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
03B0:  BTFSC  1A.2
03B2:  BRA    03B8
03B4:  BCF    F8C.2
03B6:  BRA    03BA
03B8:  BSF    F8C.2
03BA:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
03BC:  BCF    F95.0
03BE:  BSF    F8C.0
03C0:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
0676:  MOVFF  9C,AD
067A:  RCALL  0154
067C:  MOVFF  9B,AD
0680:  RCALL  0154
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
0682:  MOVFF  9A,AD
0686:  RCALL  0154
0688:  MOVFF  99,AD
068C:  RCALL  0154
....................        
....................       mo_4_led_7doan; 
068E:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
0690:  RCALL  017E
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
0692:  BCF    F95.7
0694:  BCF    F8C.7
0696:  BCF    F95.7
0698:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
069A:  BCF    F95.1
069C:  BCF    F8C.1
069E:  GOTO   079E (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
06A2:  MOVFF  98,9C
06A6:  MOVFF  97,9B
06AA:  CLRF   x9E
06AC:  MOVLW  0A
06AE:  MOVWF  x9D
06B0:  RCALL  0634
06B2:  MOVFF  00,99
06B6:  MOVFF  03,9A
06BA:  MOVFF  03,03
06BE:  MOVF   00,W
06C0:  RCALL  00AE
06C2:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
06C4:  MOVFF  98,9C
06C8:  MOVFF  97,9B
06CC:  CLRF   x9E
06CE:  MOVLW  0A
06D0:  MOVWF  x9D
06D2:  RCALL  0634
06D4:  MOVFF  02,9A
06D8:  MOVFF  01,99
06DC:  MOVFF  02,9C
06E0:  MOVFF  01,9B
06E4:  CLRF   x9E
06E6:  MOVLW  0A
06E8:  MOVWF  x9D
06EA:  RCALL  0634
06EC:  MOVFF  00,99
06F0:  MOVFF  03,9A
06F4:  MOVFF  03,03
06F8:  MOVF   00,W
06FA:  RCALL  00AE
06FC:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
06FE:  MOVFF  98,9C
0702:  MOVFF  97,9B
0706:  CLRF   x9E
0708:  MOVLW  64
070A:  MOVWF  x9D
070C:  RCALL  0634
070E:  MOVFF  02,9A
0712:  MOVFF  01,99
0716:  MOVFF  02,9C
071A:  MOVFF  01,9B
071E:  CLRF   x9E
0720:  MOVLW  0A
0722:  MOVWF  x9D
0724:  RCALL  0634
0726:  MOVFF  00,99
072A:  MOVFF  03,9A
072E:  MOVFF  03,03
0732:  MOVF   00,W
0734:  RCALL  00AE
0736:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
0738:  MOVFF  98,9C
073C:  MOVFF  97,9B
0740:  MOVLW  03
0742:  MOVWF  x9E
0744:  MOVLW  E8
0746:  MOVWF  x9D
0748:  RCALL  0634
074A:  MOVFF  02,9A
074E:  MOVFF  01,99
0752:  MOVFF  02,9C
0756:  MOVFF  01,9B
075A:  CLRF   x9E
075C:  MOVLW  0A
075E:  MOVWF  x9D
0760:  RCALL  0634
0762:  MOVFF  00,99
0766:  MOVFF  03,9A
076A:  MOVFF  03,03
076E:  MOVF   00,W
0770:  RCALL  00AE
0772:  MOVWF  21
....................       if (ngan4==0xc0) 
0774:  MOVF   21,W
0776:  SUBLW  C0
0778:  BNZ   078C
....................       { 
....................          ngan4=0xff; 
077A:  SETF   21
....................          if (tram4==0xc0) 
077C:  MOVF   20,W
077E:  SUBLW  C0
0780:  BNZ   078C
....................          { 
....................             tram4=0xff; 
0782:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
0784:  MOVF   1F,W
0786:  SUBLW  C0
0788:  BNZ   078C
078A:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
078C:  MOVFF  21,99
0790:  MOVFF  20,9A
0794:  MOVFF  1F,9B
0798:  MOVFF  1E,9C
079C:  BRA    0676
079E:  GOTO   0E98 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
01AC:  MOVFF  25,AD
01B0:  RCALL  0154
....................     xuat_1byte(glcddata); 
01B2:  MOVFF  24,AD
01B6:  RCALL  0154
....................     xuat_1byte(lcdcontrol);        
01B8:  MOVFF  23,AD
01BC:  RCALL  0154
....................     xuat_1byte(lcddata);       
01BE:  MOVFF  22,AD
01C2:  RCALL  0154
....................        
....................     mo_glcd_lcd; 
01C4:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
01C6:  RCALL  017E
....................     output_high(rck_lcd20x4);      
01C8:  BCF    F95.3
01CA:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
01CC:  BCF    F95.3
01CE:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
01D0:  BCF    F95.1
01D2:  BCF    F8C.1
01D4:  GOTO   01E6 (RETURN)
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
01D8:  MOVF   xA0,W
01DA:  MOVWF  23
01DC:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
01DE:  MOVFF  A1,22
01E2:  COMF   22,F
....................     xuat_glcd_lcd(); 
01E4:  BRA    01AC
01E6:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
....................     glcddata    = ~glcd_ins_hthi;      
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
03F4:  MOVF   x9D,W
03F6:  MOVWF  x9F
03F8:  COMF   x9F,F
03FA:  MOVFF  9F,AD
03FE:  RCALL  0154
0400:  MOVFF  9E,9F
0404:  COMF   x9F,F
0406:  MOVFF  9F,AD
040A:  RCALL  0154
....................        
....................       mo_8_led_quet; 
040C:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
040E:  RCALL  0394
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0410:  BCF    F95.5
0412:  BSF    F8C.5
0414:  BCF    F95.5
0416:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0418:  BCF    F95.0
041A:  BCF    F8C.0
041C:  GOTO   0426 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0420:  SETF   x9D
0422:  SETF   x9E
0424:  BRA    03F4
0426:  GOTO   0456 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
03C2:  CLRF   03
03C4:  MOVF   x9E,W
03C6:  RCALL  00D0
03C8:  MOVWF  01
03CA:  MOVWF  xA0
03CC:  COMF   xA0,F
03CE:  MOVFF  A0,AD
03D2:  RCALL  0154
03D4:  MOVFF  9F,A0
03D8:  COMF   xA0,F
03DA:  MOVFF  A0,AD
03DE:  RCALL  0154
....................       mo_8_led_quet; 
03E0:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
03E2:  RCALL  0394
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
03E4:  BCF    F95.5
03E6:  BSF    F8C.5
03E8:  BCF    F95.5
03EA:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
03EC:  BCF    F95.0
03EE:  BCF    F8C.0
03F0:  GOTO   044A (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
042A:  CLRF   2E
042C:  MOVF   2E,W
042E:  SUBLW  07
0430:  BNC   045A
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0432:  CLRF   03
0434:  MOVF   2E,W
0436:  ADDLW  26
0438:  MOVWF  FE9
043A:  MOVLW  00
043C:  ADDWFC 03,W
043E:  MOVWF  FEA
0440:  MOVFF  FEF,9F
0444:  MOVFF  2E,9E
0448:  BRA    03C2
....................             delay_us(100); 
044A:  MOVLW  A6
044C:  MOVWF  00
044E:  DECFSZ 00,F
0450:  BRA    044E
0452:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
0454:  BRA    0420
0456:  INCF   2E,F
0458:  BRA    042C
....................             } 
045A:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
052E:  CLRF   x9A
0530:  MOVF   x99,F
0532:  BNZ   053A
0534:  MOVF   x98,W
0536:  SUBWF  x9A,W
0538:  BC    0540
....................       hien_thi_8led_7doan_quet_all(); 
053A:  RCALL  042A
053C:  INCF   x9A,F
053E:  BRA    0530
0540:  RETURN 0
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
*
0C16:  SETF   x98
0C18:  MOVFF  98,97
....................       for(cot=0;cot<4;cot++) 
0C1C:  CLRF   x99
0C1E:  BTFSC  x99.7
0C20:  BRA    0C28
0C22:  MOVF   x99,W
0C24:  SUBLW  03
0C26:  BNC   0C6C
....................             {    
....................                output_b(maquetkey[cot]); 
0C28:  CLRF   03
0C2A:  MOVF   x99,W
0C2C:  CALL   00E8
0C30:  CLRF   F93
0C32:  MOVWF  F8A
....................                if         (!input(pin_b2))      {hang=3;   break;} 
0C34:  BSF    F93.2
0C36:  BTFSC  F81.2
0C38:  BRA    0C42
0C3A:  MOVLW  03
0C3C:  MOVWF  x98
0C3E:  BRA    0C6C
0C40:  BRA    0C68
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
0C42:  BSF    F93.3
0C44:  BTFSC  F81.3
0C46:  BRA    0C50
0C48:  MOVLW  02
0C4A:  MOVWF  x98
0C4C:  BRA    0C6C
0C4E:  BRA    0C68
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
0C50:  BSF    F93.4
0C52:  BTFSC  F81.4
0C54:  BRA    0C5E
0C56:  MOVLW  01
0C58:  MOVWF  x98
0C5A:  BRA    0C6C
0C5C:  BRA    0C68
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
0C5E:  BSF    F93.5
0C60:  BTFSC  F81.5
0C62:  BRA    0C68
0C64:  CLRF   x98
0C66:  BRA    0C6C
0C68:  INCF   x99,F
0C6A:  BRA    0C1E
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
0C6C:  INCFSZ x98,W
0C6E:  BRA    0C72
0C70:  BRA    0C82
0C72:  MOVFF  99,9A
0C76:  MOVLW  04
0C78:  MOVWF  x9B
0C7A:  BRA    0BCA
0C7C:  MOVF   x98,W
0C7E:  ADDWF  01,W
0C80:  MOVWF  x97
....................          return(maphim); 
0C82:  MOVFF  97,01
0C86:  RETURN 0
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
0C88:  RCALL  0C16
0C8A:  MOVFF  01,2F
....................       if (mpt1!=0xff)    
0C8E:  INCFSZ 2F,W
0C90:  BRA    0C94
0C92:  BRA    0CAE
....................       {  delay_ms(1);   
0C94:  MOVLW  01
0C96:  MOVWF  x9C
0C98:  CALL   0214
....................          mpt1=key_nhan(); 
0C9C:  RCALL  0C16
0C9E:  MOVFF  01,2F
....................          do{mpt2=key_nhan();} 
0CA2:  RCALL  0C16
0CA4:  MOVFF  01,30
....................          while (mpt2==mpt1); 
0CA8:  MOVF   2F,W
0CAA:  SUBWF  30,W
0CAC:  BZ    0CA2
....................       }              
....................       return(mpt1); 
0CAE:  MOVFF  2F,01
0CB2:  GOTO   0FA2 (RETURN)
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0832:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0834:  CLRF   34
0836:  CLRF   33
0838:  CLRF   32
083A:  CLRF   31
083C:  CLRF   38
083E:  CLRF   37
0840:  CLRF   36
0842:  MOVLW  01
0844:  MOVWF  35
0846:  MOVLW  80
0848:  MOVWF  3C
084A:  CLRF   3B
084C:  CLRF   3A
084E:  CLRF   39
0850:  CLRF   40
0852:  CLRF   3F
0854:  CLRF   3E
0856:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
0858:  MOVWF  44
085A:  CLRF   43
085C:  CLRF   46
085E:  MOVLW  01
0860:  MOVWF  45
0862:  CLRF   48
0864:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
0866:  MOVLW  80
0868:  MOVWF  4C
086A:  CLRF   4B
086C:  CLRF   4E
086E:  MOVLW  01
0870:  MOVWF  4D
0872:  CLRF   50
0874:  CLRF   4F
....................       zt=zp=0; 
0876:  CLRF   4A
0878:  CLRF   49
087A:  MOVFF  4A,42
087E:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
0882:  MOVLW  20
0884:  MOVWF  54
0886:  CLRF   55
0888:  MOVLW  10
088A:  MOVWF  57
088C:  CLRF   58
....................       dem_led=0; 
088E:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
0890:  CLRF   5C
0892:  CLRF   5B
0894:  CLRF   5A
0896:  MOVLW  01
0898:  MOVWF  59
089A:  CLRF   x60
089C:  CLRF   5F
089E:  CLRF   5E
08A0:  MOVWF  5D
08A2:  SETF   x64
08A4:  SETF   x63
08A6:  SETF   x62
08A8:  MOVLW  FE
08AA:  MOVWF  x61
08AC:  MOVLW  01
08AE:  MOVWF  x71
08B0:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
08B2:  MOVLW  80
08B4:  MOVWF  x68
08B6:  CLRF   x67
08B8:  CLRF   x66
08BA:  CLRF   x65
08BC:  MOVWF  x6C
08BE:  CLRF   x6B
08C0:  CLRF   x6A
08C2:  CLRF   x69
08C4:  MOVLW  7F
08C6:  MOVWF  x70
08C8:  SETF   x6F
08CA:  SETF   x6E
08CC:  SETF   x6D
....................      tgdlay = 0; 
08CE:  CLRF   52
08D0:  CLRF   51
08D2:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
08E4:  CLRF   x9C
08E6:  MOVF   x9B,W
08E8:  SUBWF  x9C,W
08EA:  BC    08F2
....................       hien_thi_8led_7doan_quet_all(); 
08EC:  RCALL  042A
08EE:  INCF   x9C,F
08F0:  BRA    08E6
....................       dem_led++; 
08F2:  INCF   53,F
08F4:  GOTO   090A (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
08D4:  MOVF   x9B,F
08D6:  BZ    08DE
08D8:  MOVFF  9B,9C
08DC:  RCALL  0214
....................       dem_led++; 
08DE:  INCF   53,F
08E0:  GOTO   090A (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
08F8:  MOVF   x9A,F
08FA:  BNZ   0904
08FC:  MOVFF  99,9B
0900:  BRA    08D4
0902:  BRA    090A
....................    else              tang_dem_led_delay_1(dl); 
0904:  MOVFF  99,9B
0908:  BRA    08E4
090A:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
0816:  COMF   31,F
0818:  COMF   32,F
081A:  COMF   33,F
081C:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
081E:  MOVFF  34,9C
0822:  MOVFF  33,9B
0826:  MOVFF  32,9A
082A:  MOVFF  31,99
082E:  RCALL  07F2
0830:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
090C:  DECFSZ 51,W
090E:  BRA    0928
0910:  MOVF   52,F
0912:  BNZ   0928
0914:  MOVFF  34,9C
0918:  MOVFF  33,9B
091C:  MOVFF  32,9A
0920:  MOVFF  31,99
0924:  RCALL  07F2
0926:  BRA    095E
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
0928:  MOVF   51,W
092A:  SUBLW  32
092C:  BNZ   0936
092E:  MOVF   52,F
0930:  BNZ   0936
0932:  RCALL  0816
0934:  BRA    095E
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
0936:  MOVF   51,W
0938:  SUBLW  64
093A:  BNZ   0944
093C:  MOVF   52,F
093E:  BNZ   0944
0940:  RCALL  0816
0942:  BRA    095E
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
0944:  MOVF   51,W
0946:  SUBLW  96
0948:  BNZ   0952
094A:  MOVF   52,F
094C:  BNZ   0952
094E:  RCALL  0816
0950:  BRA    095E
....................       else if (tgdlay==200)   
0952:  MOVF   51,W
0954:  SUBLW  C8
0956:  BNZ   095E
0958:  MOVF   52,F
095A:  BNZ   095E
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
095C:  RCALL  0832
....................       } 
....................       tgdlay++; 
095E:  INCF   51,F
0960:  BTFSC  FD8.2
0962:  INCF   52,F
....................       delay_chon(dl,chondelay); 
0964:  MOVFF  97,99
0968:  MOVFF  98,9A
096C:  RCALL  08F8
096E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
0970:  MOVF   53,W
0972:  SUBLW  0F
0974:  BNC   09BA
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
0976:  MOVFF  4A,A2
097A:  MOVFF  49,A1
097E:  MOVFF  42,A4
0982:  MOVFF  41,A3
0986:  RCALL  07CE
....................       zp= (zp<<1)+1;  
0988:  BCF    FD8.0
098A:  RLCF   49,W
098C:  MOVWF  x99
098E:  RLCF   4A,W
0990:  MOVWF  x9A
0992:  MOVLW  01
0994:  ADDWF  x99,W
0996:  MOVWF  49
0998:  MOVLW  00
099A:  ADDWFC x9A,W
099C:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
099E:  BCF    FD8.0
09A0:  RRCF   42,W
09A2:  MOVWF  x9A
09A4:  RRCF   41,W
09A6:  MOVWF  41
09A8:  MOVLW  80
09AA:  ADDWF  x9A,W
09AC:  MOVWF  42
....................       delay_chon(dl,chondelay); 
09AE:  MOVFF  97,99
09B2:  MOVFF  98,9A
09B6:  RCALL  08F8
....................    } 
09B8:  BRA    09EC
....................    else  if (dem_led<32) 
09BA:  MOVF   53,W
09BC:  SUBLW  1F
09BE:  BNC   09EA
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
09C0:  MOVFF  4A,A2
09C4:  MOVFF  49,A1
09C8:  MOVFF  42,A4
09CC:  MOVFF  41,A3
09D0:  RCALL  07CE
....................       zp= (zp<<1);  
09D2:  BCF    FD8.0
09D4:  RLCF   49,F
09D6:  RLCF   4A,F
....................       zt= (zt>>1); 
09D8:  BCF    FD8.0
09DA:  RRCF   42,F
09DC:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
09DE:  MOVFF  97,99
09E2:  MOVFF  98,9A
09E6:  RCALL  08F8
....................    } 
09E8:  BRA    09EC
....................    else reset_toan_bo_bien(); 
09EA:  RCALL  0832
09EC:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
0AF0:  MOVF   53,W
0AF2:  SUBLW  0F
0AF4:  BNC   0B24
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
0AF6:  MOVFF  4A,A2
0AFA:  MOVFF  49,A1
0AFE:  MOVFF  4A,A4
0B02:  MOVFF  49,A3
0B06:  RCALL  07CE
....................       zp= (zp>>1)+0x8000; 
0B08:  BCF    FD8.0
0B0A:  RRCF   4A,W
0B0C:  MOVWF  x9A
0B0E:  RRCF   49,W
0B10:  MOVWF  49
0B12:  MOVLW  80
0B14:  ADDWF  x9A,W
0B16:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
0B18:  MOVFF  97,99
0B1C:  MOVFF  98,9A
0B20:  RCALL  08F8
....................    } 
0B22:  BRA    0B50
....................    else  if (dem_led<32) 
0B24:  MOVF   53,W
0B26:  SUBLW  1F
0B28:  BNC   0B4E
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
0B2A:  MOVFF  4A,A2
0B2E:  MOVFF  49,A1
0B32:  MOVFF  4A,A4
0B36:  MOVFF  49,A3
0B3A:  RCALL  07CE
....................       zp= (zp>>1); 
0B3C:  BCF    FD8.0
0B3E:  RRCF   4A,F
0B40:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
0B42:  MOVFF  97,99
0B46:  MOVFF  98,9A
0B4A:  RCALL  08F8
....................     } 
0B4C:  BRA    0B50
....................    else reset_toan_bo_bien(); 
0B4E:  RCALL  0832
0B50:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
0A70:  MOVF   53,W
0A72:  SUBLW  1F
0A74:  BNC   0ABE
....................    {   
....................       xuat_32led_don_1dw(y); 
0A76:  MOVFF  34,9C
0A7A:  MOVFF  33,9B
0A7E:  MOVFF  32,9A
0A82:  MOVFF  31,99
0A86:  RCALL  07F2
....................       y= (y<<1)+1; 
0A88:  BCF    FD8.0
0A8A:  RLCF   31,W
0A8C:  MOVWF  x9A
0A8E:  RLCF   32,W
0A90:  MOVWF  x9B
0A92:  RLCF   33,W
0A94:  MOVWF  x9C
0A96:  RLCF   34,W
0A98:  MOVWF  x9D
0A9A:  MOVLW  01
0A9C:  ADDWF  x9A,W
0A9E:  MOVWF  31
0AA0:  MOVLW  00
0AA2:  ADDWFC x9B,W
0AA4:  MOVWF  32
0AA6:  MOVLW  00
0AA8:  ADDWFC x9C,W
0AAA:  MOVWF  33
0AAC:  MOVLW  00
0AAE:  ADDWFC x9D,W
0AB0:  MOVWF  34
....................       delay_chon(dl,chondelay); 
0AB2:  MOVFF  97,99
0AB6:  MOVFF  98,9A
0ABA:  RCALL  08F8
....................    } 
0ABC:  BRA    0AEE
....................    else  if (dem_led<64) 
0ABE:  MOVF   53,W
0AC0:  SUBLW  3F
0AC2:  BNC   0AEC
....................    {   
....................       xuat_32led_don_1dw(y);    
0AC4:  MOVFF  34,9C
0AC8:  MOVFF  33,9B
0ACC:  MOVFF  32,9A
0AD0:  MOVFF  31,99
0AD4:  RCALL  07F2
....................       y= (y<<1);  
0AD6:  BCF    FD8.0
0AD8:  RLCF   31,F
0ADA:  RLCF   32,F
0ADC:  RLCF   33,F
0ADE:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
0AE0:  MOVFF  97,99
0AE4:  MOVFF  98,9A
0AE8:  RCALL  08F8
....................    }  
0AEA:  BRA    0AEE
....................    else reset_toan_bo_bien(); 
0AEC:  RCALL  0832
0AEE:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
0B52:  MOVF   53,W
0B54:  SUBLW  1F
0B56:  BNC   0B96
....................       {   
....................          xuat_32led_don_1dw(y); 
0B58:  MOVFF  34,9C
0B5C:  MOVFF  33,9B
0B60:  MOVFF  32,9A
0B64:  MOVFF  31,99
0B68:  RCALL  07F2
....................          y= (y>>1)+0x80000000;  
0B6A:  BCF    FD8.0
0B6C:  RRCF   34,W
0B6E:  MOVWF  x9D
0B70:  RRCF   33,W
0B72:  MOVWF  x9C
0B74:  RRCF   32,W
0B76:  MOVWF  x9B
0B78:  RRCF   31,W
0B7A:  MOVWF  31
0B7C:  MOVFF  9B,32
0B80:  MOVFF  9C,33
0B84:  MOVLW  80
0B86:  ADDWF  x9D,W
0B88:  MOVWF  34
....................          delay_chon(dl,chondelay);       
0B8A:  MOVFF  97,99
0B8E:  MOVFF  98,9A
0B92:  RCALL  08F8
....................       } 
0B94:  BRA    0BC6
....................       else 
....................       if (dem_led<64) 
0B96:  MOVF   53,W
0B98:  SUBLW  3F
0B9A:  BNC   0BC4
....................       {   
....................          xuat_32led_don_1dw(y);  
0B9C:  MOVFF  34,9C
0BA0:  MOVFF  33,9B
0BA4:  MOVFF  32,9A
0BA8:  MOVFF  31,99
0BAC:  RCALL  07F2
....................          y= (y>>1); 
0BAE:  BCF    FD8.0
0BB0:  RRCF   34,F
0BB2:  RRCF   33,F
0BB4:  RRCF   32,F
0BB6:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
0BB8:  MOVFF  97,99
0BBC:  MOVFF  98,9A
0BC0:  RCALL  08F8
....................       }  
0BC2:  BRA    0BC6
....................       else reset_toan_bo_bien(); 
0BC4:  RCALL  0832
0BC6:  GOTO   0F82 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
09EE:  BTFSC  54.7
09F0:  BRA    0A6C
09F2:  MOVF   54,W
09F4:  SUBLW  00
09F6:  BC    0A6C
....................    { 
....................       if(j32<i32) 
09F8:  MOVF   55,W
09FA:  XORLW  80
09FC:  MOVWF  00
09FE:  MOVF   54,W
0A00:  XORLW  80
0A02:  SUBWF  00,W
0A04:  BC    0A46
....................       { 
....................          y = y_codinh|yp_chay; 
0A06:  MOVF   3D,W
0A08:  IORWF  35,W
0A0A:  MOVWF  31
0A0C:  MOVF   3E,W
0A0E:  IORWF  36,W
0A10:  MOVWF  32
0A12:  MOVF   3F,W
0A14:  IORWF  37,W
0A16:  MOVWF  33
0A18:  MOVF   40,W
0A1A:  IORWF  38,W
0A1C:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
0A1E:  MOVFF  34,9C
0A22:  MOVFF  33,9B
0A26:  MOVFF  32,9A
0A2A:  MOVFF  31,99
0A2E:  RCALL  07F2
....................          delay_chon(dl,chondelay);        
0A30:  MOVFF  97,99
0A34:  MOVFF  98,9A
0A38:  RCALL  08F8
....................          yp_chay = yp_chay <<1; 
0A3A:  BCF    FD8.0
0A3C:  RLCF   35,F
0A3E:  RLCF   36,F
0A40:  RLCF   37,F
0A42:  RLCF   38,F
....................          j32++; 
0A44:  INCF   55,F
....................       } 
....................       if (j32==i32)  
0A46:  MOVF   54,W
0A48:  SUBWF  55,W
0A4A:  BNZ   0A6A
....................       { 
....................          i32--; 
0A4C:  DECF   54,F
....................          j32=0;          
0A4E:  CLRF   55
....................          y_codinh=y; 
0A50:  MOVFF  34,40
0A54:  MOVFF  33,3F
0A58:  MOVFF  32,3E
0A5C:  MOVFF  31,3D
....................          yp_chay = 1; 
0A60:  CLRF   38
0A62:  CLRF   37
0A64:  CLRF   36
0A66:  MOVLW  01
0A68:  MOVWF  35
....................       } 
....................    } 
0A6A:  BRA    0A6E
....................    else reset_toan_bo_bien(); 
0A6C:  RCALL  0832
0A6E:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
01E8:  BSF    x73.0
01EA:  MOVFF  73,A0
01EE:  MOVFF  9F,A1
01F2:  RCALL  01D8
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
01F4:  BCF    x73.0
01F6:  MOVFF  73,A0
01FA:  MOVFF  9F,A1
01FE:  RCALL  01D8
0200:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0202:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0204:  MOVFF  9B,9F
0208:  RCALL  01E8
....................       delay_us(20); 
020A:  MOVLW  21
020C:  MOVWF  00
020E:  DECFSZ 00,F
0210:  BRA    020E
0212:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0292:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0294:  MOVFF  9E,9F
0298:  RCALL  01E8
....................       delay_us(20); 
029A:  MOVLW  21
029C:  MOVWF  00
029E:  DECFSZ 00,F
02A0:  BRA    029E
02A2:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
023A:  BCF    x73.0
....................          lcd_rw = 0;  
023C:  BCF    x73.1
....................          lcd_rs = 1;  
023E:  BSF    x73.2
....................          lcd_p =0; 
0240:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
0242:  MOVLW  38
0244:  MOVWF  x9B
0246:  RCALL  0202
....................          delay_us(40); 
0248:  MOVLW  42
024A:  MOVWF  00
024C:  DECFSZ 00,F
024E:  BRA    024C
0250:  NOP   
....................          lcd_command(lcd_display_control);    
0252:  MOVLW  0C
0254:  MOVWF  x9B
0256:  RCALL  0202
....................          delay_us(40); 
0258:  MOVLW  42
025A:  MOVWF  00
025C:  DECFSZ 00,F
025E:  BRA    025C
0260:  NOP   
....................          lcd_command(lcd_clear_display);       
0262:  MOVLW  01
0264:  MOVWF  x9B
0266:  RCALL  0202
....................          delay_ms(2); 
0268:  MOVLW  02
026A:  MOVWF  x9C
026C:  RCALL  0214
....................          lcd_command(lcd_entry_mode);        
026E:  MOVLW  06
0270:  MOVWF  x9B
0272:  RCALL  0202
....................          delay_us(40);                 
0274:  MOVLW  42
0276:  MOVWF  00
0278:  DECFSZ 00,F
027A:  BRA    0278
027C:  NOP   
027E:  GOTO   0E36 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
0282:  CLRF   03
0284:  MOVF   x98,W
0286:  RCALL  00FC
0288:  ADDWF  x99,W
028A:  MOVWF  x9A
028C:  MOVWF  x9B
028E:  RCALL  0202
0290:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
....................  
....................  
....................  
....................  
.................... signed int8 giay,bdn,phut = 19,gio = 13,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... int8 max = 100; 
.................... signed int8 read = 0; 
.................... unsigned int8 count = 0,countT = 0; 
.................... signed int8 display[20] = {0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60}; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
0110:  INCF   x75,F
....................    set_timer1(3036); //3036 
0112:  MOVLW  0B
0114:  MOVWF  FCF
0116:  MOVLW  DC
0118:  MOVWF  FCE
011A:  BCF    F9E.0
011C:  GOTO   0060
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
030C:  MOVFF  74,97
0310:  MOVLW  0A
0312:  MOVWF  x98
0314:  RCALL  02C4
0316:  CLRF   03
0318:  MOVF   00,W
031A:  RCALL  00AE
031C:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
031E:  MOVFF  74,97
0322:  MOVLW  0A
0324:  MOVWF  x98
0326:  RCALL  02C4
0328:  CLRF   03
032A:  MOVF   01,W
032C:  RCALL  00AE
032E:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0330:  MOVFF  76,97
0334:  MOVLW  0A
0336:  MOVWF  x98
0338:  RCALL  02C4
033A:  CLRF   03
033C:  MOVF   00,W
033E:  RCALL  00AE
0340:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0342:  MOVFF  76,97
0346:  MOVLW  0A
0348:  MOVWF  x98
034A:  RCALL  02C4
034C:  CLRF   03
034E:  MOVF   01,W
0350:  RCALL  00AE
0352:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0354:  MOVFF  77,97
0358:  MOVLW  0A
035A:  MOVWF  x98
035C:  RCALL  02C4
035E:  CLRF   03
0360:  MOVF   00,W
0362:  RCALL  00AE
0364:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0366:  MOVFF  77,97
036A:  MOVLW  0A
036C:  MOVWF  x98
036E:  RCALL  02C4
0370:  CLRF   03
0372:  MOVF   01,W
0374:  RCALL  00AE
0376:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
0378:  DECFSZ x7B,W
037A:  BRA    0380
037C:  BCF    26.7
037E:  BRA    0392
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
0380:  MOVF   x7B,W
0382:  SUBLW  02
0384:  BNZ   038A
0386:  BCF    29.7
0388:  BRA    0392
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
038A:  MOVF   x7B,W
038C:  SUBLW  03
038E:  BNZ   0392
0390:  BCF    2C.7
0392:  RETURN 0
.................... } 
.................... void LCD_DISPLAY() {   
....................       lcd_goto_xy(3,5); 
*
0542:  MOVLW  03
0544:  MOVWF  x98
0546:  MOVLW  05
0548:  MOVWF  x99
054A:  RCALL  0282
....................       printf(lcd_data,"%2dH:",gio); 
054C:  MOVFF  77,98
0550:  MOVLW  11
0552:  MOVWF  x99
0554:  RCALL  0484
0556:  MOVLW  48
0558:  MOVWF  x9E
055A:  RCALL  0292
055C:  MOVLW  3A
055E:  MOVWF  x9E
0560:  RCALL  0292
....................       delay_quet_8led(1); 
0562:  CLRF   x99
0564:  MOVLW  01
0566:  MOVWF  x98
0568:  RCALL  052E
....................       printf(lcd_data,"%2dM:",phut); 
056A:  MOVFF  76,98
056E:  MOVLW  11
0570:  MOVWF  x99
0572:  RCALL  0484
0574:  MOVLW  4D
0576:  MOVWF  x9E
0578:  RCALL  0292
057A:  MOVLW  3A
057C:  MOVWF  x9E
057E:  RCALL  0292
....................       delay_quet_8led(1); 
0580:  CLRF   x99
0582:  MOVLW  01
0584:  MOVWF  x98
0586:  RCALL  052E
....................       printf(lcd_data,"%2dS:",giay); 
0588:  MOVFF  74,98
058C:  MOVLW  11
058E:  MOVWF  x99
0590:  RCALL  0484
0592:  MOVLW  53
0594:  MOVWF  x9E
0596:  RCALL  0292
0598:  MOVLW  3A
059A:  MOVWF  x9E
059C:  RCALL  0292
....................       delay_quet_8led(2); 
059E:  CLRF   x99
05A0:  MOVLW  02
05A2:  MOVWF  x98
05A4:  RCALL  052E
....................       lcd_goto_xy(2,5); 
05A6:  MOVLW  02
05A8:  MOVWF  x98
05AA:  MOVLW  05
05AC:  MOVWF  x99
05AE:  RCALL  0282
....................       lcd_data("ITEMS:"); 
05B0:  MOVLW  20
05B2:  MOVWF  FF6
05B4:  MOVLW  01
05B6:  MOVWF  FF7
05B8:  RCALL  02A4
....................       lcd_goto_xy(2,11); 
05BA:  MOVLW  02
05BC:  MOVWF  x98
05BE:  MOVLW  0B
05C0:  MOVWF  x99
05C2:  RCALL  0282
....................       printf(lcd_data,"%3d",count); 
05C4:  MOVFF  7E,98
05C8:  MOVLW  13
05CA:  MOVWF  x99
05CC:  RCALL  0484
....................       lcd_command(lcd_addr_line1); 
05CE:  MOVLW  80
05D0:  MOVWF  x9B
05D2:  RCALL  0202
....................       for (int i = 0; i<20; i++) {  
05D4:  CLRF   x97
05D6:  MOVF   x97,W
05D8:  SUBLW  13
05DA:  BNC   0632
....................          if (display[i] < 10)  
05DC:  CLRF   03
05DE:  MOVF   x97,W
05E0:  ADDLW  80
05E2:  MOVWF  FE9
05E4:  MOVLW  00
05E6:  ADDWFC 03,W
05E8:  MOVWF  FEA
05EA:  BTFSC  FEF.7
05EC:  BRA    05F4
05EE:  MOVF   FEF,W
05F0:  SUBLW  09
05F2:  BNC   060E
....................          { 
....................             lcd_data(display[i]+0x30);  
05F4:  CLRF   03
05F6:  MOVF   x97,W
05F8:  ADDLW  80
05FA:  MOVWF  FE9
05FC:  MOVLW  00
05FE:  ADDWFC 03,W
0600:  MOVWF  FEA
0602:  MOVLW  30
0604:  ADDWF  FEF,W
0606:  MOVWF  x98
0608:  MOVWF  x9E
060A:  RCALL  0292
....................          } 
060C:  BRA    0626
....................          else 
....................          { 
....................             lcd_data(display[i]+0x37);  
060E:  CLRF   03
0610:  MOVF   x97,W
0612:  ADDLW  80
0614:  MOVWF  FE9
0616:  MOVLW  00
0618:  ADDWFC 03,W
061A:  MOVWF  FEA
061C:  MOVLW  37
061E:  ADDWF  FEF,W
0620:  MOVWF  x98
0622:  MOVWF  x9E
0624:  RCALL  0292
....................          } 
....................       delay_quet_8led(1);  
0626:  CLRF   x99
0628:  MOVLW  01
062A:  MOVWF  x98
062C:  RCALL  052E
062E:  INCF   x97,F
0630:  BRA    05D6
....................       }        
0632:  RETURN 0
.................... } 
....................  
.................... /*void phim_up(){ 
....................    if (phim_bt0(5)) { 
....................       max++; 
....................       delay_quet_8led(1); 
....................    } 
.................... }*/ 
....................  
.................... /*void phim_dw(){ 
....................    if (phim_bt1(5)) { 
....................       max--; 
....................       delay_quet_8led(1); 
....................    } 
.................... } */ 
....................  
.................... /*void phim_clr(){ 
....................    if (!input(clr)) { 
....................       delay_quet_8led(10); 
....................       if (!input(clr)) 
....................       { 
....................          max = 1; 
....................       } 
....................    } 
.................... }*/ 
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
.................... } 
....................  
....................  
.................... void shift_display() { 
....................    for (int i =0; i < 19;i++){ 
*
0CB6:  CLRF   x97
0CB8:  MOVF   x97,W
0CBA:  SUBLW  12
0CBC:  BNC   0CF2
....................       display[i] = display[i+1]; 
0CBE:  CLRF   03
0CC0:  MOVF   x97,W
0CC2:  ADDLW  80
0CC4:  MOVWF  01
0CC6:  MOVLW  00
0CC8:  ADDWFC 03,F
0CCA:  MOVFF  03,99
0CCE:  MOVLW  01
0CD0:  ADDWF  x97,W
0CD2:  CLRF   03
0CD4:  ADDLW  80
0CD6:  MOVWF  FE9
0CD8:  MOVLW  00
0CDA:  ADDWFC 03,W
0CDC:  MOVWF  FEA
0CDE:  MOVFF  FEF,9A
0CE2:  MOVFF  99,FEA
0CE6:  MOVFF  01,FE9
0CEA:  MOVFF  9A,FEF
0CEE:  INCF   x97,F
0CF0:  BRA    0CB8
....................    } 
....................    display[19] = read;   
0CF2:  MOVFF  7D,93
0CF6:  GOTO   0FB2 (RETURN)
.................... } 
....................  
.................... void main() 
0CFA:  CLRF   FF8
0CFC:  BCF    FD0.7
0CFE:  BSF    07.7
0D00:  BSF    F93.1
0D02:  BSF    F93.0
0D04:  MOVLW  31
0D06:  MOVWF  FC8
0D08:  MOVLW  28
0D0A:  MOVWF  FC6
0D0C:  BSF    FC7.7
0D0E:  BCF    FC7.6
0D10:  CLRF   1B
0D12:  CLRF   22
0D14:  CLRF   23
0D16:  CLRF   24
0D18:  CLRF   25
0D1A:  CLRF   2E
0D1C:  CLRF   2F
0D1E:  CLRF   30
0D20:  CLRF   34
0D22:  CLRF   33
0D24:  CLRF   32
0D26:  CLRF   31
0D28:  CLRF   38
0D2A:  CLRF   37
0D2C:  CLRF   36
0D2E:  MOVLW  01
0D30:  MOVWF  35
0D32:  MOVLW  80
0D34:  MOVWF  3C
0D36:  CLRF   3B
0D38:  CLRF   3A
0D3A:  CLRF   39
0D3C:  CLRF   40
0D3E:  CLRF   3F
0D40:  CLRF   3E
0D42:  CLRF   3D
0D44:  MOVWF  44
0D46:  CLRF   43
0D48:  CLRF   46
0D4A:  MOVLW  01
0D4C:  MOVWF  45
0D4E:  CLRF   48
0D50:  CLRF   47
0D52:  MOVLW  80
0D54:  MOVWF  4C
0D56:  CLRF   4B
0D58:  CLRF   4E
0D5A:  MOVLW  01
0D5C:  MOVWF  4D
0D5E:  CLRF   50
0D60:  CLRF   4F
0D62:  CLRF   52
0D64:  CLRF   51
0D66:  CLRF   53
0D68:  MOVLW  20
0D6A:  MOVWF  54
0D6C:  CLRF   55
0D6E:  MOVLW  01
0D70:  MOVWF  56
0D72:  MOVLW  10
0D74:  MOVWF  57
0D76:  CLRF   58
0D78:  CLRF   5C
0D7A:  CLRF   5B
0D7C:  CLRF   5A
0D7E:  MOVLW  01
0D80:  MOVWF  59
0D82:  CLRF   x60
0D84:  CLRF   5F
0D86:  CLRF   5E
0D88:  MOVWF  5D
0D8A:  SETF   x64
0D8C:  SETF   x63
0D8E:  SETF   x62
0D90:  MOVLW  FE
0D92:  MOVWF  x61
0D94:  MOVLW  80
0D96:  MOVWF  x68
0D98:  CLRF   x67
0D9A:  CLRF   x66
0D9C:  CLRF   x65
0D9E:  MOVWF  x6C
0DA0:  CLRF   x6B
0DA2:  CLRF   x6A
0DA4:  CLRF   x69
0DA6:  MOVLW  7F
0DA8:  MOVWF  x70
0DAA:  SETF   x6F
0DAC:  SETF   x6E
0DAE:  SETF   x6D
0DB0:  MOVLW  01
0DB2:  MOVWF  x71
0DB4:  MOVWF  x72
0DB6:  MOVLW  13
0DB8:  MOVWF  x76
0DBA:  MOVLW  0D
0DBC:  MOVWF  x77
0DBE:  CLRF   x78
0DC0:  CLRF   x79
0DC2:  CLRF   x7A
0DC4:  CLRF   x7B
0DC6:  MOVLW  64
0DC8:  MOVWF  x7C
0DCA:  CLRF   x7D
0DCC:  CLRF   x7E
0DCE:  CLRF   x7F
0DD0:  CLRF   x95
0DD2:  CLRF   x94
0DD4:  MOVF   FC1,W
0DD6:  ANDLW  C0
0DD8:  IORLW  0F
0DDA:  MOVWF  FC1
0DDC:  MOVLW  07
0DDE:  MOVWF  FB4
0DE0:  BRA    0DEC
0DE2:  DATA 08,40
0DE4:  DATA 26,FF
0DE6:  DATA 14,40
0DE8:  DATA 80,60
0DEA:  DATA 00,00
0DEC:  MOVLW  00
0DEE:  MOVWF  FF8
0DF0:  MOVLW  0D
0DF2:  MOVWF  FF7
0DF4:  MOVLW  E2
0DF6:  MOVWF  FF6
0DF8:  TBLRD*+
0DFA:  MOVF   FF5,W
0DFC:  MOVWF  00
0DFE:  XORLW  00
0E00:  BZ    0E28
0E02:  TBLRD*+
0E04:  MOVF   FF5,W
0E06:  MOVWF  01
0E08:  BTFSC  FE8.7
0E0A:  BRA    0E16
0E0C:  ANDLW  0F
0E0E:  MOVWF  FEA
0E10:  TBLRD*+
0E12:  MOVFF  FF5,FE9
0E16:  BTFSC  01.6
0E18:  TBLRD*+
0E1A:  BTFSS  01.6
0E1C:  TBLRD*+
0E1E:  MOVFF  FF5,FEE
0E22:  DCFSNZ 00,F
0E24:  BRA    0DF8
0E26:  BRA    0E1A
0E28:  CLRF   FF8
.................... { 
....................    set_up_port_ic_chot(); 
0E2A:  GOTO   0136
....................    set_tris_b(0x3c); 
0E2E:  MOVLW  3C
0E30:  MOVWF  F93
....................    setup_lcd(); 
0E32:  GOTO   023A
....................  
....................    lcd_goto_xy(1,4); 
0E36:  MOVLW  01
0E38:  MOVWF  x98
0E3A:  MOVLW  04
0E3C:  MOVWF  x99
0E3E:  CALL   0282
....................    lcd_data("HAY NHAN PHIM"); 
0E42:  MOVLW  28
0E44:  MOVWF  FF6
0E46:  MOVLW  01
0E48:  MOVWF  FF7
0E4A:  CALL   02A4
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
0E4E:  MOVLW  A8
0E50:  MOVWF  FD5
....................    set_timer0(0);    
0E52:  CLRF   FD7
0E54:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0E56:  MOVLW  B5
0E58:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
0E5A:  MOVLW  0B
0E5C:  MOVWF  FCF
0E5E:  MOVLW  DC
0E60:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
0E62:  MOVLW  C0
0E64:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
0E66:  BSF    F9D.0
....................  
....................  
....................    bdn = 0; 
0E68:  CLRF   x75
....................    giai_ma(); 
0E6A:  CALL   030C
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
0E6E:  BTFSC  x75.7
0E70:  BRA    0E7A
0E72:  MOVF   x75,W
0E74:  SUBLW  09
0E76:  BTFSS  FD8.0
0E78:  BRA    0FB4
....................          hien_thi_8led_7doan_quet_all(); 
0E7A:  CALL   042A
....................          LCD_DISPLAY(); 
0E7E:  CALL   0542
....................          //phim_up(); 
....................          //phim_dw(); 
....................          //phim_clr();          
....................          count = get_timer0(); 
0E82:  MOVF   FD6,W
0E84:  MOVWF  x7E
....................          if (count != countT) { 
0E86:  MOVF   x7F,W
0E88:  SUBWF  x7E,W
0E8A:  BZ    0EA4
....................             countT = count; 
0E8C:  MOVFF  7E,7F
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
0E90:  CLRF   x98
0E92:  MOVFF  7E,97
0E96:  BRA    06A2
....................             if (count >= max) set_timer0(1); 
0E98:  MOVF   x7C,W
0E9A:  SUBWF  x7E,W
0E9C:  BNC   0EA4
0E9E:  CLRF   FD7
0EA0:  MOVLW  01
0EA2:  MOVWF  FD6
....................          } 
....................          if(ttct_td==1) sang_tat_32led(5,1); 
0EA4:  DECFSZ 56,W
0EA6:  BRA    0EB2
0EA8:  MOVLW  05
0EAA:  MOVWF  x97
0EAC:  MOVLW  01
0EAE:  MOVWF  x98
0EB0:  RCALL  090C
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
0EB2:  MOVF   56,W
0EB4:  SUBLW  02
0EB6:  BNZ   0EC2
0EB8:  MOVLW  05
0EBA:  MOVWF  x97
0EBC:  MOVLW  01
0EBE:  MOVWF  x98
0EC0:  RCALL  0970
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
0EC2:  MOVF   56,W
0EC4:  SUBLW  03
0EC6:  BNZ   0ED2
0EC8:  MOVLW  05
0ECA:  MOVWF  x97
0ECC:  MOVLW  01
0ECE:  MOVWF  x98
0ED0:  RCALL  09EE
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
0ED2:  MOVF   56,W
0ED4:  SUBLW  04
0ED6:  BNZ   0EE2
0ED8:  MOVLW  05
0EDA:  MOVWF  x97
0EDC:  MOVLW  01
0EDE:  MOVWF  x98
0EE0:  RCALL  0A70
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
0EE2:  MOVF   56,W
0EE4:  SUBLW  05
0EE6:  BNZ   0EF2
0EE8:  MOVLW  05
0EEA:  MOVWF  x97
0EEC:  MOVLW  01
0EEE:  MOVWF  x98
0EF0:  RCALL  0AF0
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
0EF2:  MOVF   56,W
0EF4:  SUBLW  06
0EF6:  BNZ   0F02
0EF8:  MOVLW  05
0EFA:  MOVWF  x97
0EFC:  MOVLW  01
0EFE:  MOVWF  x98
0F00:  RCALL  09EE
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
0F02:  MOVF   56,W
0F04:  SUBLW  07
0F06:  BNZ   0F12
0F08:  MOVLW  05
0F0A:  MOVWF  x97
0F0C:  MOVLW  01
0F0E:  MOVWF  x98
0F10:  RCALL  09EE
....................          if(ttct_td==8) sang_tat_32led(5,1); 
0F12:  MOVF   56,W
0F14:  SUBLW  08
0F16:  BNZ   0F22
0F18:  MOVLW  05
0F1A:  MOVWF  x97
0F1C:  MOVLW  01
0F1E:  MOVWF  x98
0F20:  RCALL  090C
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
0F22:  MOVF   56,W
0F24:  SUBLW  09
0F26:  BNZ   0F32
0F28:  MOVLW  05
0F2A:  MOVWF  x97
0F2C:  MOVLW  01
0F2E:  MOVWF  x98
0F30:  RCALL  0970
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
0F32:  MOVF   56,W
0F34:  SUBLW  0A
0F36:  BNZ   0F42
0F38:  MOVLW  05
0F3A:  MOVWF  x97
0F3C:  MOVLW  01
0F3E:  MOVWF  x98
0F40:  RCALL  09EE
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
0F42:  MOVF   56,W
0F44:  SUBLW  0B
0F46:  BNZ   0F52
0F48:  MOVLW  05
0F4A:  MOVWF  x97
0F4C:  MOVLW  01
0F4E:  MOVWF  x98
0F50:  RCALL  0A70
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
0F52:  MOVF   56,W
0F54:  SUBLW  0C
0F56:  BNZ   0F62
0F58:  MOVLW  05
0F5A:  MOVWF  x97
0F5C:  MOVLW  01
0F5E:  MOVWF  x98
0F60:  RCALL  0AF0
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
0F62:  MOVF   56,W
0F64:  SUBLW  0D
0F66:  BNZ   0F72
0F68:  MOVLW  05
0F6A:  MOVWF  x97
0F6C:  MOVLW  01
0F6E:  MOVWF  x98
0F70:  RCALL  0A70
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
0F72:  MOVF   56,W
0F74:  SUBLW  0E
0F76:  BNZ   0F82
0F78:  MOVLW  05
0F7A:  MOVWF  x97
0F7C:  MOVLW  01
0F7E:  MOVWF  x98
0F80:  BRA    0B52
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
0F82:  MOVF   56,W
0F84:  SUBLW  0F
0F86:  BNZ   0F92
0F88:  MOVLW  05
0F8A:  MOVWF  x97
0F8C:  MOVLW  01
0F8E:  MOVWF  x98
0F90:  RCALL  09EE
....................          if(ttct_td>15) ttct_td =1; 
0F92:  BTFSC  56.7
0F94:  BRA    0FA0
0F96:  MOVF   56,W
0F98:  SUBLW  0F
0F9A:  BC    0FA0
0F9C:  MOVLW  01
0F9E:  MOVWF  56
....................          signed int8 mp = key_4x4_dw(); 
0FA0:  BRA    0C88
0FA2:  MOVFF  01,96
....................          if (mp != 0xff) { 
0FA6:  INCFSZ x96,W
0FA8:  BRA    0FAC
0FAA:  BRA    0FB2
....................             read = mp; 
0FAC:  MOVFF  96,7D
....................             shift_display();               
0FB0:  BRA    0CB6
....................          } 
....................       } 
0FB2:  BRA    0FE8
....................       else  
....................       { 
....................          bdn = bdn -10; 
0FB4:  MOVLW  0A
0FB6:  SUBWF  x75,F
....................          dem_tg_exit++; 
0FB8:  INCF   x78,F
....................          if (dem_tg_exit == 20) mode = 0; giay++; 
0FBA:  MOVF   x78,W
0FBC:  SUBLW  14
0FBE:  BTFSC  FD8.2
0FC0:  CLRF   x7B
0FC2:  INCF   x74,F
....................             if (giay==60) { giay = 0; phut++; 
0FC4:  MOVF   x74,W
0FC6:  SUBLW  3C
0FC8:  BNZ   0FE0
0FCA:  CLRF   x74
0FCC:  INCF   x76,F
....................                if (phut == 60) { phut = 0; gio++;  
0FCE:  MOVF   x76,W
0FD0:  SUBLW  3C
0FD2:  BNZ   0FE0
0FD4:  CLRF   x76
0FD6:  INCF   x77,F
....................                   if (gio == 24) gio = 0; 
0FD8:  MOVF   x77,W
0FDA:  SUBLW  18
0FDC:  BNZ   0FE0
0FDE:  CLRF   x77
....................                }  
....................             } 
....................          LCD_DISPLAY();        
0FE0:  CALL   0542
....................          giai_ma(); 
0FE4:  CALL   030C
....................       } 
0FE8:  BRA    0E6E
....................    }            
.................... } 
....................  
0FEA:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
