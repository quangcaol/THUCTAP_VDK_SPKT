CCS PCH C Compiler, Version 5.078, 43599               23-Nov-20 14:23

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK8\633\631.lst

               ROM used:   4202 bytes (13%)
                           Largest free fragment is 28562
               RAM used:   135 (7%) at main() level
                           159 (8%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0D34
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0138
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 3F,7F
00FA:  DATA BF,FF
00FC:  CLRF   FF7
00FE:  ADDLW  0C
0100:  MOVWF  FF6
0102:  MOVLW  01
0104:  ADDWFC FF7,F
0106:  TBLRD*+
0108:  MOVF   FF5,W
010A:  RETURN 0
010C:  DATA 80,C0
010E:  DATA 94,D4
0110:  CLRF   FF7
0112:  ADDLW  20
0114:  MOVWF  FF6
0116:  MOVLW  01
0118:  ADDWFC FF7,F
011A:  TBLRD*+
011C:  MOVF   FF5,W
011E:  RETURN 0
0120:  DATA 11,0E
0122:  DATA 00,00
0124:  DATA 00,00
0126:  DATA 00,1F
0128:  DATA 1F,10
012A:  DATA 10,10
012C:  DATA 10,10
012E:  DATA 10,1F
0130:  DATA 1F,01
0132:  DATA 01,01
0134:  DATA 01,01
0136:  DATA 01,1F
*
0148:  DATA 20,00
014A:  DATA 49,54
014C:  DATA 45,4D
014E:  DATA 53,3A
0150:  DATA 00,00
0152:  DATA 4D,41
0154:  DATA 58,00
*
02D6:  MOVF   x86,W
02D8:  XORWF  x87,W
02DA:  ANDLW  80
02DC:  MOVWF  x89
02DE:  BTFSS  x86.7
02E0:  BRA    02E6
02E2:  COMF   x86,F
02E4:  INCF   x86,F
02E6:  BTFSS  x87.7
02E8:  BRA    02EE
02EA:  COMF   x87,F
02EC:  INCF   x87,F
02EE:  MOVF   x87,W
02F0:  CLRF   01
02F2:  SUBWF  x86,W
02F4:  BC    02FC
02F6:  MOVFF  86,00
02FA:  BRA    0314
02FC:  CLRF   00
02FE:  MOVLW  08
0300:  MOVWF  x88
0302:  RLCF   x86,F
0304:  RLCF   00,F
0306:  MOVF   x87,W
0308:  SUBWF  00,W
030A:  BTFSC  FD8.0
030C:  MOVWF  00
030E:  RLCF   01,F
0310:  DECFSZ x88,F
0312:  BRA    0302
0314:  BTFSS  x89.7
0316:  BRA    031C
0318:  COMF   01,F
031A:  INCF   01,F
031C:  RETURN 0
*
046E:  CLRF   01
0470:  CLRF   02
0472:  CLRF   00
0474:  CLRF   03
0476:  MOVF   x8D,W
0478:  BNZ   047E
047A:  MOVF   x8C,W
047C:  BZ    04AE
047E:  MOVLW  10
0480:  MOVWF  x8E
0482:  BCF    FD8.0
0484:  RLCF   x8A,F
0486:  RLCF   x8B,F
0488:  RLCF   00,F
048A:  RLCF   03,F
048C:  MOVF   x8D,W
048E:  SUBWF  03,W
0490:  BNZ   0496
0492:  MOVF   x8C,W
0494:  SUBWF  00,W
0496:  BNC   04A6
0498:  MOVF   x8C,W
049A:  SUBWF  00,F
049C:  BTFSS  FD8.0
049E:  DECF   03,F
04A0:  MOVF   x8D,W
04A2:  SUBWF  03,F
04A4:  BSF    FD8.0
04A6:  RLCF   01,F
04A8:  RLCF   02,F
04AA:  DECFSZ x8E,F
04AC:  BRA    0482
04AE:  RETURN 0
*
05DC:  MOVF   x8D,W
05DE:  CLRF   01
05E0:  SUBWF  x8C,W
05E2:  BC    05EA
05E4:  MOVFF  8C,00
05E8:  BRA    0602
05EA:  CLRF   00
05EC:  MOVLW  08
05EE:  MOVWF  x8E
05F0:  RLCF   x8C,F
05F2:  RLCF   00,F
05F4:  MOVF   x8D,W
05F6:  SUBWF  00,W
05F8:  BTFSC  FD8.0
05FA:  MOVWF  00
05FC:  RLCF   01,F
05FE:  DECFSZ x8E,F
0600:  BRA    05F0
0602:  RETURN 0
0604:  MOVLW  20
0606:  BTFSS  x87.4
0608:  MOVLW  30
060A:  MOVWF  x88
060C:  MOVFF  86,00
0610:  BTFSS  x86.7
0612:  BRA    0624
0614:  COMF   00,F
0616:  INCF   00,F
0618:  MOVFF  00,86
061C:  MOVLW  2D
061E:  MOVWF  x88
0620:  BSF    x87.7
0622:  BSF    x87.0
0624:  MOVF   01,W
0626:  MOVFF  86,8C
062A:  MOVLW  64
062C:  MOVWF  x8D
062E:  RCALL  05DC
0630:  MOVFF  00,86
0634:  MOVLW  30
0636:  ADDWF  01,W
0638:  MOVWF  x89
063A:  MOVFF  86,8C
063E:  MOVLW  0A
0640:  MOVWF  x8D
0642:  RCALL  05DC
0644:  MOVLW  30
0646:  ADDWF  00,W
0648:  MOVWF  x8B
064A:  MOVLW  30
064C:  ADDWF  01,W
064E:  MOVWF  x8A
0650:  MOVFF  88,00
0654:  MOVLW  30
0656:  SUBWF  x89,W
0658:  BZ    0662
065A:  BSF    x87.1
065C:  BTFSC  x87.7
065E:  BSF    x87.2
0660:  BRA    0686
0662:  MOVFF  88,89
0666:  MOVLW  20
0668:  MOVWF  x88
066A:  MOVLW  30
066C:  SUBWF  x8A,W
066E:  BZ    0678
0670:  BSF    x87.0
0672:  BTFSC  x87.7
0674:  BSF    x87.1
0676:  BRA    0686
0678:  BTFSS  FD8.2
067A:  BSF    x87.0
067C:  BNZ   0686
067E:  MOVFF  89,8A
0682:  MOVLW  20
0684:  MOVWF  x89
0686:  BTFSC  x87.2
0688:  BRA    0694
068A:  BTFSC  x87.1
068C:  BRA    069A
068E:  BTFSC  x87.0
0690:  BRA    06A0
0692:  BRA    06A6
0694:  MOVFF  88,8C
0698:  RCALL  02A2
069A:  MOVFF  89,8C
069E:  RCALL  02A2
06A0:  MOVFF  8A,8C
06A4:  RCALL  02A2
06A6:  MOVFF  8B,8C
06AA:  RCALL  02A2
06AC:  RETURN 0
*
0AEE:  CLRF   00
0AF0:  CLRF   01
0AF2:  MOVF   x89,W
0AF4:  BCF    FD8.0
0AF6:  BTFSC  x8A.0
0AF8:  ADDWF  00,F
0AFA:  RRCF   00,F
0AFC:  RRCF   01,F
0AFE:  BTFSC  x8A.1
0B00:  ADDWF  00,F
0B02:  RRCF   00,F
0B04:  RRCF   01,F
0B06:  BTFSC  x8A.2
0B08:  ADDWF  00,F
0B0A:  RRCF   00,F
0B0C:  RRCF   01,F
0B0E:  BTFSC  x8A.3
0B10:  ADDWF  00,F
0B12:  RRCF   00,F
0B14:  RRCF   01,F
0B16:  BTFSC  x8A.4
0B18:  ADDWF  00,F
0B1A:  RRCF   00,F
0B1C:  RRCF   01,F
0B1E:  BTFSC  x8A.5
0B20:  ADDWF  00,F
0B22:  RRCF   00,F
0B24:  RRCF   01,F
0B26:  BTFSC  x8A.6
0B28:  ADDWF  00,F
0B2A:  RRCF   00,F
0B2C:  RRCF   01,F
0B2E:  BTFSC  x8A.7
0B30:  ADDWF  00,F
0B32:  RRCF   00,F
0B34:  RRCF   01,F
0B36:  RETURN 0
*
0C06:  TBLRD*+
0C08:  MOVF   FF5,F
0C0A:  BZ    0C26
0C0C:  MOVFF  FF6,86
0C10:  MOVFF  FF7,87
0C14:  MOVFF  FF5,8C
0C18:  CALL   02A2
0C1C:  MOVFF  86,FF6
0C20:  MOVFF  87,FF7
0C24:  BRA    0C06
0C26:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
0234:  CLRF   FEA
0236:  MOVLW  8B
0238:  MOVWF  FE9
023A:  MOVF   FEF,W
023C:  BZ    0258
023E:  MOVLW  06
0240:  MOVWF  01
0242:  CLRF   00
0244:  DECFSZ 00,F
0246:  BRA    0244
0248:  DECFSZ 01,F
024A:  BRA    0242
024C:  MOVLW  7B
024E:  MOVWF  00
0250:  DECFSZ 00,F
0252:  BRA    0250
0254:  DECFSZ FEF,F
0256:  BRA    023E
0258:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
0174:  MOVFF  9C,9E
....................    for (sb=0;sb<8;sb++) 
0178:  CLRF   x9D
017A:  MOVF   x9D,W
017C:  SUBLW  07
017E:  BNC   019C
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0180:  BTFSC  x9E.7
0182:  BRA    0188
0184:  BCF    F8D.2
0186:  BRA    018A
0188:  BSF    F8D.2
018A:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
018C:  BCF    F96.0
018E:  BCF    F8D.0
0190:  BCF    F96.0
0192:  BSF    F8D.0
....................          x= x<<1;          
0194:  BCF    FD8.0
0196:  RLCF   x9E,F
0198:  INCF   x9D,F
019A:  BRA    017A
....................      } 
019C:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
06C6:  MOVFF  98,9C
06CA:  RCALL  0174
....................       xuat_1byte(bld2); 
06CC:  MOVFF  99,9C
06D0:  RCALL  0174
....................       xuat_1byte(bld1);           
06D2:  MOVFF  9A,9C
06D6:  RCALL  0174
....................       xuat_1byte(bld0);             
06D8:  MOVFF  9B,9C
06DC:  RCALL  0174
....................       mo_32_led_don;       
06DE:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
06E0:  RCALL  019E
....................       output_high(rck_32led);    output_low(rck_32led); 
06E2:  BCF    F95.5
06E4:  BSF    F8C.5
06E6:  BCF    F95.5
06E8:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
06EA:  BCF    F95.1
06EC:  BCF    F8C.1
06EE:  GOTO   0714 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
06F2:  MOVFF  91,94
06F6:  MOVFF  90,95
....................      b1 = wld0>>8;  b0 = wld0; 
06FA:  MOVFF  93,96
06FE:  MOVFF  92,97
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0702:  MOVFF  94,98
0706:  MOVFF  95,99
070A:  MOVFF  96,9A
070E:  MOVFF  97,9B
0712:  BRA    06C6
0714:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
0716:  MOVFF  8A,8C
071A:  MOVFF  8B,8D
071E:  MOVFF  89,8F
0722:  MOVFF  88,8E
....................      xuat_32led_don_2word(wd1,wd0); 
0726:  MOVFF  8D,91
072A:  MOVFF  8C,90
072E:  MOVFF  8F,93
0732:  MOVFF  8E,92
0736:  RCALL  06F2
0738:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
0156:  MOVLW  00
0158:  MOVWF  F95
....................       set_tris_e(0x00); 
015A:  MOVWF  F96
....................       output_d(0xff); 
015C:  CLRF   F95
015E:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0160:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
0162:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
0164:  BCF    F95.1
0166:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
0168:  BCF    F95.0
016A:  BCF    F8C.0
....................       rbdc=0; 
016C:  CLRF   1D
016E:  CLRF   1C
0170:  GOTO   0E2A (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
019E:  CLRF   F95
01A0:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
01A2:  BTFSC  19.4
01A4:  BRA    01AA
01A6:  BCF    F8C.4
01A8:  BRA    01AC
01AA:  BSF    F8C.4
01AC:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
01AE:  BTFSC  19.6
01B0:  BRA    01B6
01B2:  BCF    F8C.6
01B4:  BRA    01B8
01B6:  BSF    F8C.6
01B8:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
01BA:  BTFSC  19.2
01BC:  BRA    01C2
01BE:  BCF    F8C.2
01C0:  BRA    01C4
01C2:  BSF    F8C.2
01C4:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
01C6:  BCF    F95.1
01C8:  BSF    F8C.1
01CA:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
03A6:  CLRF   F95
03A8:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
03AA:  BTFSC  1A.6
03AC:  BRA    03B2
03AE:  BCF    F8C.6
03B0:  BRA    03B4
03B2:  BSF    F8C.6
03B4:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
03B6:  BTFSC  1A.4
03B8:  BRA    03BE
03BA:  BCF    F8C.4
03BC:  BRA    03C0
03BE:  BSF    F8C.4
03C0:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
03C2:  BTFSC  1A.2
03C4:  BRA    03CA
03C6:  BCF    F8C.2
03C8:  BRA    03CC
03CA:  BSF    F8C.2
03CC:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
03CE:  BCF    F95.0
03D0:  BSF    F8C.0
03D2:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
04B0:  MOVFF  8B,9C
04B4:  RCALL  0174
04B6:  MOVFF  8A,9C
04BA:  RCALL  0174
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
04BC:  MOVFF  89,9C
04C0:  RCALL  0174
04C2:  MOVFF  88,9C
04C6:  RCALL  0174
....................        
....................       mo_4_led_7doan; 
04C8:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
04CA:  RCALL  019E
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
04CC:  BCF    F95.7
04CE:  BCF    F8C.7
04D0:  BCF    F95.7
04D2:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
04D4:  BCF    F95.1
04D6:  BCF    F8C.1
04D8:  GOTO   05D8 (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
04DC:  MOVFF  87,8B
04E0:  MOVFF  86,8A
04E4:  CLRF   x8D
04E6:  MOVLW  0A
04E8:  MOVWF  x8C
04EA:  RCALL  046E
04EC:  MOVFF  00,88
04F0:  MOVFF  03,89
04F4:  MOVFF  03,03
04F8:  MOVF   00,W
04FA:  RCALL  00AE
04FC:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
04FE:  MOVFF  87,8B
0502:  MOVFF  86,8A
0506:  CLRF   x8D
0508:  MOVLW  0A
050A:  MOVWF  x8C
050C:  RCALL  046E
050E:  MOVFF  02,89
0512:  MOVFF  01,88
0516:  MOVFF  02,8B
051A:  MOVFF  01,8A
051E:  CLRF   x8D
0520:  MOVLW  0A
0522:  MOVWF  x8C
0524:  RCALL  046E
0526:  MOVFF  00,88
052A:  MOVFF  03,89
052E:  MOVFF  03,03
0532:  MOVF   00,W
0534:  RCALL  00AE
0536:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
0538:  MOVFF  87,8B
053C:  MOVFF  86,8A
0540:  CLRF   x8D
0542:  MOVLW  64
0544:  MOVWF  x8C
0546:  RCALL  046E
0548:  MOVFF  02,89
054C:  MOVFF  01,88
0550:  MOVFF  02,8B
0554:  MOVFF  01,8A
0558:  CLRF   x8D
055A:  MOVLW  0A
055C:  MOVWF  x8C
055E:  RCALL  046E
0560:  MOVFF  00,88
0564:  MOVFF  03,89
0568:  MOVFF  03,03
056C:  MOVF   00,W
056E:  RCALL  00AE
0570:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
0572:  MOVFF  87,8B
0576:  MOVFF  86,8A
057A:  MOVLW  03
057C:  MOVWF  x8D
057E:  MOVLW  E8
0580:  MOVWF  x8C
0582:  RCALL  046E
0584:  MOVFF  02,89
0588:  MOVFF  01,88
058C:  MOVFF  02,8B
0590:  MOVFF  01,8A
0594:  CLRF   x8D
0596:  MOVLW  0A
0598:  MOVWF  x8C
059A:  RCALL  046E
059C:  MOVFF  00,88
05A0:  MOVFF  03,89
05A4:  MOVFF  03,03
05A8:  MOVF   00,W
05AA:  RCALL  00AE
05AC:  MOVWF  21
....................       if (ngan4==0xc0) 
05AE:  MOVF   21,W
05B0:  SUBLW  C0
05B2:  BNZ   05C6
....................       { 
....................          ngan4=0xff; 
05B4:  SETF   21
....................          if (tram4==0xc0) 
05B6:  MOVF   20,W
05B8:  SUBLW  C0
05BA:  BNZ   05C6
....................          { 
....................             tram4=0xff; 
05BC:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
05BE:  MOVF   1F,W
05C0:  SUBLW  C0
05C2:  BNZ   05C6
05C4:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
05C6:  MOVFF  21,88
05CA:  MOVFF  20,89
05CE:  MOVFF  1F,8A
05D2:  MOVFF  1E,8B
05D6:  BRA    04B0
05D8:  GOTO   0EB8 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
01CC:  MOVFF  25,9C
01D0:  RCALL  0174
....................     xuat_1byte(glcddata); 
01D2:  MOVFF  24,9C
01D6:  RCALL  0174
....................     xuat_1byte(lcdcontrol);        
01D8:  MOVFF  23,9C
01DC:  RCALL  0174
....................     xuat_1byte(lcddata);       
01DE:  MOVFF  22,9C
01E2:  RCALL  0174
....................        
....................     mo_glcd_lcd; 
01E4:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
01E6:  RCALL  019E
....................     output_high(rck_lcd20x4);      
01E8:  BCF    F95.3
01EA:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
01EC:  BCF    F95.3
01EE:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
01F0:  BCF    F95.1
01F2:  BCF    F8C.1
01F4:  GOTO   0206 (RETURN)
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
01F8:  MOVF   x8E,W
01FA:  MOVWF  23
01FC:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
01FE:  MOVFF  8F,22
0202:  COMF   22,F
....................     xuat_glcd_lcd(); 
0204:  BRA    01CC
0206:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
....................     glcddata    = ~glcd_ins_hthi;      
....................     xuat_glcd_lcd(); 
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0406:  MOVF   x8C,W
0408:  MOVWF  x8E
040A:  COMF   x8E,F
040C:  MOVFF  8E,9C
0410:  RCALL  0174
0412:  MOVFF  8D,8E
0416:  COMF   x8E,F
0418:  MOVFF  8E,9C
041C:  RCALL  0174
....................        
....................       mo_8_led_quet; 
041E:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0420:  RCALL  03A6
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0422:  BCF    F95.5
0424:  BSF    F8C.5
0426:  BCF    F95.5
0428:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
042A:  BCF    F95.0
042C:  BCF    F8C.0
042E:  GOTO   0438 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0432:  SETF   x8C
0434:  SETF   x8D
0436:  BRA    0406
0438:  GOTO   0468 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
03D4:  CLRF   03
03D6:  MOVF   x8D,W
03D8:  RCALL  00D0
03DA:  MOVWF  01
03DC:  MOVWF  x8F
03DE:  COMF   x8F,F
03E0:  MOVFF  8F,9C
03E4:  RCALL  0174
03E6:  MOVFF  8E,8F
03EA:  COMF   x8F,F
03EC:  MOVFF  8F,9C
03F0:  RCALL  0174
....................       mo_8_led_quet; 
03F2:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
03F4:  RCALL  03A6
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
03F6:  BCF    F95.5
03F8:  BSF    F8C.5
03FA:  BCF    F95.5
03FC:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
03FE:  BCF    F95.0
0400:  BCF    F8C.0
0402:  GOTO   045C (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
043C:  CLRF   2E
043E:  MOVF   2E,W
0440:  SUBLW  07
0442:  BNC   046C
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0444:  CLRF   03
0446:  MOVF   2E,W
0448:  ADDLW  26
044A:  MOVWF  FE9
044C:  MOVLW  00
044E:  ADDWFC 03,W
0450:  MOVWF  FEA
0452:  MOVFF  FEF,8E
0456:  MOVFF  2E,8D
045A:  BRA    03D4
....................             delay_us(100); 
045C:  MOVLW  A6
045E:  MOVWF  00
0460:  DECFSZ 00,F
0462:  BRA    0460
0464:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
0466:  BRA    0432
0468:  INCF   2E,F
046A:  BRA    043E
....................             } 
046C:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0BF2:  CLRF   x88
0BF4:  MOVF   x87,F
0BF6:  BNZ   0BFE
0BF8:  MOVF   x86,W
0BFA:  SUBWF  x88,W
0BFC:  BC    0C04
....................       hien_thi_8led_7doan_quet_all(); 
0BFE:  RCALL  043C
0C00:  INCF   x88,F
0C02:  BRA    0BF4
0C04:  RETURN 0
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
*
0B38:  SETF   x87
0B3A:  MOVFF  87,86
....................       for(cot=0;cot<4;cot++) 
0B3E:  CLRF   x88
0B40:  BTFSC  x88.7
0B42:  BRA    0B4A
0B44:  MOVF   x88,W
0B46:  SUBLW  03
0B48:  BNC   0B8E
....................             {    
....................                output_b(maquetkey[cot]); 
0B4A:  CLRF   03
0B4C:  MOVF   x88,W
0B4E:  CALL   00E8
0B52:  CLRF   F93
0B54:  MOVWF  F8A
....................                if         (!input(pin_b2))      {hang=3;   break;} 
0B56:  BSF    F93.2
0B58:  BTFSC  F81.2
0B5A:  BRA    0B64
0B5C:  MOVLW  03
0B5E:  MOVWF  x87
0B60:  BRA    0B8E
0B62:  BRA    0B8A
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
0B64:  BSF    F93.3
0B66:  BTFSC  F81.3
0B68:  BRA    0B72
0B6A:  MOVLW  02
0B6C:  MOVWF  x87
0B6E:  BRA    0B8E
0B70:  BRA    0B8A
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
0B72:  BSF    F93.4
0B74:  BTFSC  F81.4
0B76:  BRA    0B80
0B78:  MOVLW  01
0B7A:  MOVWF  x87
0B7C:  BRA    0B8E
0B7E:  BRA    0B8A
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
0B80:  BSF    F93.5
0B82:  BTFSC  F81.5
0B84:  BRA    0B8A
0B86:  CLRF   x87
0B88:  BRA    0B8E
0B8A:  INCF   x88,F
0B8C:  BRA    0B40
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
0B8E:  INCFSZ x87,W
0B90:  BRA    0B94
0B92:  BRA    0BA4
0B94:  MOVFF  88,89
0B98:  MOVLW  04
0B9A:  MOVWF  x8A
0B9C:  RCALL  0AEE
0B9E:  MOVF   x87,W
0BA0:  ADDWF  01,W
0BA2:  MOVWF  x86
....................          return(maphim); 
0BA4:  MOVFF  86,01
0BA8:  RETURN 0
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
0BAA:  RCALL  0B38
0BAC:  MOVFF  01,2F
....................       if (mpt1!=0xff)    
0BB0:  INCFSZ 2F,W
0BB2:  BRA    0BB6
0BB4:  BRA    0BD0
....................       {  delay_ms(1);   
0BB6:  MOVLW  01
0BB8:  MOVWF  x8B
0BBA:  CALL   0234
....................          mpt1=key_nhan(); 
0BBE:  RCALL  0B38
0BC0:  MOVFF  01,2F
....................          do{mpt2=key_nhan();} 
0BC4:  RCALL  0B38
0BC6:  MOVFF  01,30
....................          while (mpt2==mpt1); 
0BCA:  MOVF   2F,W
0BCC:  SUBWF  30,W
0BCE:  BZ    0BC4
....................       }              
....................       return(mpt1); 
0BD0:  MOVFF  2F,01
0BD4:  GOTO   0FD0 (RETURN)
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0756:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0758:  CLRF   34
075A:  CLRF   33
075C:  CLRF   32
075E:  CLRF   31
0760:  CLRF   38
0762:  CLRF   37
0764:  CLRF   36
0766:  MOVLW  01
0768:  MOVWF  35
076A:  MOVLW  80
076C:  MOVWF  3C
076E:  CLRF   3B
0770:  CLRF   3A
0772:  CLRF   39
0774:  CLRF   40
0776:  CLRF   3F
0778:  CLRF   3E
077A:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
077C:  MOVWF  44
077E:  CLRF   43
0780:  CLRF   46
0782:  MOVLW  01
0784:  MOVWF  45
0786:  CLRF   48
0788:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
078A:  MOVLW  80
078C:  MOVWF  4C
078E:  CLRF   4B
0790:  CLRF   4E
0792:  MOVLW  01
0794:  MOVWF  4D
0796:  CLRF   50
0798:  CLRF   4F
....................       zt=zp=0; 
079A:  CLRF   4A
079C:  CLRF   49
079E:  MOVFF  4A,42
07A2:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
07A6:  MOVLW  20
07A8:  MOVWF  54
07AA:  CLRF   55
07AC:  MOVLW  10
07AE:  MOVWF  57
07B0:  CLRF   58
....................       dem_led=0; 
07B2:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
07B4:  CLRF   5C
07B6:  CLRF   5B
07B8:  CLRF   5A
07BA:  MOVLW  01
07BC:  MOVWF  59
07BE:  CLRF   x60
07C0:  CLRF   5F
07C2:  CLRF   5E
07C4:  MOVWF  5D
07C6:  SETF   x64
07C8:  SETF   x63
07CA:  SETF   x62
07CC:  MOVLW  FE
07CE:  MOVWF  x61
07D0:  MOVLW  01
07D2:  MOVWF  x71
07D4:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
07D6:  MOVLW  80
07D8:  MOVWF  x68
07DA:  CLRF   x67
07DC:  CLRF   x66
07DE:  CLRF   x65
07E0:  MOVWF  x6C
07E2:  CLRF   x6B
07E4:  CLRF   x6A
07E6:  CLRF   x69
07E8:  MOVLW  7F
07EA:  MOVWF  x70
07EC:  SETF   x6F
07EE:  SETF   x6E
07F0:  SETF   x6D
....................      tgdlay = 0; 
07F2:  CLRF   52
07F4:  CLRF   51
07F6:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0808:  CLRF   x8B
080A:  MOVF   x8A,W
080C:  SUBWF  x8B,W
080E:  BC    0816
....................       hien_thi_8led_7doan_quet_all(); 
0810:  RCALL  043C
0812:  INCF   x8B,F
0814:  BRA    080A
....................       dem_led++; 
0816:  INCF   53,F
0818:  GOTO   082E (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
07F8:  MOVF   x8A,F
07FA:  BZ    0802
07FC:  MOVFF  8A,8B
0800:  RCALL  0234
....................       dem_led++; 
0802:  INCF   53,F
0804:  GOTO   082E (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
081C:  MOVF   x89,F
081E:  BNZ   0828
0820:  MOVFF  88,8A
0824:  BRA    07F8
0826:  BRA    082E
....................    else              tang_dem_led_delay_1(dl); 
0828:  MOVFF  88,8A
082C:  BRA    0808
082E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
073A:  COMF   31,F
073C:  COMF   32,F
073E:  COMF   33,F
0740:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
0742:  MOVFF  34,8B
0746:  MOVFF  33,8A
074A:  MOVFF  32,89
074E:  MOVFF  31,88
0752:  RCALL  0716
0754:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
0830:  DECFSZ 51,W
0832:  BRA    084C
0834:  MOVF   52,F
0836:  BNZ   084C
0838:  MOVFF  34,8B
083C:  MOVFF  33,8A
0840:  MOVFF  32,89
0844:  MOVFF  31,88
0848:  RCALL  0716
084A:  BRA    0882
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
084C:  MOVF   51,W
084E:  SUBLW  32
0850:  BNZ   085A
0852:  MOVF   52,F
0854:  BNZ   085A
0856:  RCALL  073A
0858:  BRA    0882
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
085A:  MOVF   51,W
085C:  SUBLW  64
085E:  BNZ   0868
0860:  MOVF   52,F
0862:  BNZ   0868
0864:  RCALL  073A
0866:  BRA    0882
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
0868:  MOVF   51,W
086A:  SUBLW  96
086C:  BNZ   0876
086E:  MOVF   52,F
0870:  BNZ   0876
0872:  RCALL  073A
0874:  BRA    0882
....................       else if (tgdlay==200)   
0876:  MOVF   51,W
0878:  SUBLW  C8
087A:  BNZ   0882
087C:  MOVF   52,F
087E:  BNZ   0882
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
0880:  RCALL  0756
....................       } 
....................       tgdlay++; 
0882:  INCF   51,F
0884:  BTFSC  FD8.2
0886:  INCF   52,F
....................       delay_chon(dl,chondelay); 
0888:  MOVFF  86,88
088C:  MOVFF  87,89
0890:  RCALL  081C
0892:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
0894:  MOVF   53,W
0896:  SUBLW  0F
0898:  BNC   08DE
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
089A:  MOVFF  4A,91
089E:  MOVFF  49,90
08A2:  MOVFF  42,93
08A6:  MOVFF  41,92
08AA:  RCALL  06F2
....................       zp= (zp<<1)+1;  
08AC:  BCF    FD8.0
08AE:  RLCF   49,W
08B0:  MOVWF  x88
08B2:  RLCF   4A,W
08B4:  MOVWF  x89
08B6:  MOVLW  01
08B8:  ADDWF  x88,W
08BA:  MOVWF  49
08BC:  MOVLW  00
08BE:  ADDWFC x89,W
08C0:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
08C2:  BCF    FD8.0
08C4:  RRCF   42,W
08C6:  MOVWF  x89
08C8:  RRCF   41,W
08CA:  MOVWF  41
08CC:  MOVLW  80
08CE:  ADDWF  x89,W
08D0:  MOVWF  42
....................       delay_chon(dl,chondelay); 
08D2:  MOVFF  86,88
08D6:  MOVFF  87,89
08DA:  RCALL  081C
....................    } 
08DC:  BRA    0910
....................    else  if (dem_led<32) 
08DE:  MOVF   53,W
08E0:  SUBLW  1F
08E2:  BNC   090E
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
08E4:  MOVFF  4A,91
08E8:  MOVFF  49,90
08EC:  MOVFF  42,93
08F0:  MOVFF  41,92
08F4:  RCALL  06F2
....................       zp= (zp<<1);  
08F6:  BCF    FD8.0
08F8:  RLCF   49,F
08FA:  RLCF   4A,F
....................       zt= (zt>>1); 
08FC:  BCF    FD8.0
08FE:  RRCF   42,F
0900:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
0902:  MOVFF  86,88
0906:  MOVFF  87,89
090A:  RCALL  081C
....................    } 
090C:  BRA    0910
....................    else reset_toan_bo_bien(); 
090E:  RCALL  0756
0910:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
0A14:  MOVF   53,W
0A16:  SUBLW  0F
0A18:  BNC   0A48
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
0A1A:  MOVFF  4A,91
0A1E:  MOVFF  49,90
0A22:  MOVFF  4A,93
0A26:  MOVFF  49,92
0A2A:  RCALL  06F2
....................       zp= (zp>>1)+0x8000; 
0A2C:  BCF    FD8.0
0A2E:  RRCF   4A,W
0A30:  MOVWF  x89
0A32:  RRCF   49,W
0A34:  MOVWF  49
0A36:  MOVLW  80
0A38:  ADDWF  x89,W
0A3A:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
0A3C:  MOVFF  86,88
0A40:  MOVFF  87,89
0A44:  RCALL  081C
....................    } 
0A46:  BRA    0A74
....................    else  if (dem_led<32) 
0A48:  MOVF   53,W
0A4A:  SUBLW  1F
0A4C:  BNC   0A72
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
0A4E:  MOVFF  4A,91
0A52:  MOVFF  49,90
0A56:  MOVFF  4A,93
0A5A:  MOVFF  49,92
0A5E:  RCALL  06F2
....................       zp= (zp>>1); 
0A60:  BCF    FD8.0
0A62:  RRCF   4A,F
0A64:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
0A66:  MOVFF  86,88
0A6A:  MOVFF  87,89
0A6E:  RCALL  081C
....................     } 
0A70:  BRA    0A74
....................    else reset_toan_bo_bien(); 
0A72:  RCALL  0756
0A74:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
0994:  MOVF   53,W
0996:  SUBLW  1F
0998:  BNC   09E2
....................    {   
....................       xuat_32led_don_1dw(y); 
099A:  MOVFF  34,8B
099E:  MOVFF  33,8A
09A2:  MOVFF  32,89
09A6:  MOVFF  31,88
09AA:  RCALL  0716
....................       y= (y<<1)+1; 
09AC:  BCF    FD8.0
09AE:  RLCF   31,W
09B0:  MOVWF  x89
09B2:  RLCF   32,W
09B4:  MOVWF  x8A
09B6:  RLCF   33,W
09B8:  MOVWF  x8B
09BA:  RLCF   34,W
09BC:  MOVWF  x8C
09BE:  MOVLW  01
09C0:  ADDWF  x89,W
09C2:  MOVWF  31
09C4:  MOVLW  00
09C6:  ADDWFC x8A,W
09C8:  MOVWF  32
09CA:  MOVLW  00
09CC:  ADDWFC x8B,W
09CE:  MOVWF  33
09D0:  MOVLW  00
09D2:  ADDWFC x8C,W
09D4:  MOVWF  34
....................       delay_chon(dl,chondelay); 
09D6:  MOVFF  86,88
09DA:  MOVFF  87,89
09DE:  RCALL  081C
....................    } 
09E0:  BRA    0A12
....................    else  if (dem_led<64) 
09E2:  MOVF   53,W
09E4:  SUBLW  3F
09E6:  BNC   0A10
....................    {   
....................       xuat_32led_don_1dw(y);    
09E8:  MOVFF  34,8B
09EC:  MOVFF  33,8A
09F0:  MOVFF  32,89
09F4:  MOVFF  31,88
09F8:  RCALL  0716
....................       y= (y<<1);  
09FA:  BCF    FD8.0
09FC:  RLCF   31,F
09FE:  RLCF   32,F
0A00:  RLCF   33,F
0A02:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
0A04:  MOVFF  86,88
0A08:  MOVFF  87,89
0A0C:  RCALL  081C
....................    }  
0A0E:  BRA    0A12
....................    else reset_toan_bo_bien(); 
0A10:  RCALL  0756
0A12:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
0A76:  MOVF   53,W
0A78:  SUBLW  1F
0A7A:  BNC   0ABA
....................       {   
....................          xuat_32led_don_1dw(y); 
0A7C:  MOVFF  34,8B
0A80:  MOVFF  33,8A
0A84:  MOVFF  32,89
0A88:  MOVFF  31,88
0A8C:  RCALL  0716
....................          y= (y>>1)+0x80000000;  
0A8E:  BCF    FD8.0
0A90:  RRCF   34,W
0A92:  MOVWF  x8C
0A94:  RRCF   33,W
0A96:  MOVWF  x8B
0A98:  RRCF   32,W
0A9A:  MOVWF  x8A
0A9C:  RRCF   31,W
0A9E:  MOVWF  31
0AA0:  MOVFF  8A,32
0AA4:  MOVFF  8B,33
0AA8:  MOVLW  80
0AAA:  ADDWF  x8C,W
0AAC:  MOVWF  34
....................          delay_chon(dl,chondelay);       
0AAE:  MOVFF  86,88
0AB2:  MOVFF  87,89
0AB6:  RCALL  081C
....................       } 
0AB8:  BRA    0AEA
....................       else 
....................       if (dem_led<64) 
0ABA:  MOVF   53,W
0ABC:  SUBLW  3F
0ABE:  BNC   0AE8
....................       {   
....................          xuat_32led_don_1dw(y);  
0AC0:  MOVFF  34,8B
0AC4:  MOVFF  33,8A
0AC8:  MOVFF  32,89
0ACC:  MOVFF  31,88
0AD0:  RCALL  0716
....................          y= (y>>1); 
0AD2:  BCF    FD8.0
0AD4:  RRCF   34,F
0AD6:  RRCF   33,F
0AD8:  RRCF   32,F
0ADA:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
0ADC:  MOVFF  86,88
0AE0:  MOVFF  87,89
0AE4:  RCALL  081C
....................       }  
0AE6:  BRA    0AEA
....................       else reset_toan_bo_bien(); 
0AE8:  RCALL  0756
0AEA:  GOTO   0FB0 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
0912:  BTFSC  54.7
0914:  BRA    0990
0916:  MOVF   54,W
0918:  SUBLW  00
091A:  BC    0990
....................    { 
....................       if(j32<i32) 
091C:  MOVF   55,W
091E:  XORLW  80
0920:  MOVWF  00
0922:  MOVF   54,W
0924:  XORLW  80
0926:  SUBWF  00,W
0928:  BC    096A
....................       { 
....................          y = y_codinh|yp_chay; 
092A:  MOVF   3D,W
092C:  IORWF  35,W
092E:  MOVWF  31
0930:  MOVF   3E,W
0932:  IORWF  36,W
0934:  MOVWF  32
0936:  MOVF   3F,W
0938:  IORWF  37,W
093A:  MOVWF  33
093C:  MOVF   40,W
093E:  IORWF  38,W
0940:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
0942:  MOVFF  34,8B
0946:  MOVFF  33,8A
094A:  MOVFF  32,89
094E:  MOVFF  31,88
0952:  RCALL  0716
....................          delay_chon(dl,chondelay);        
0954:  MOVFF  86,88
0958:  MOVFF  87,89
095C:  RCALL  081C
....................          yp_chay = yp_chay <<1; 
095E:  BCF    FD8.0
0960:  RLCF   35,F
0962:  RLCF   36,F
0964:  RLCF   37,F
0966:  RLCF   38,F
....................          j32++; 
0968:  INCF   55,F
....................       } 
....................       if (j32==i32)  
096A:  MOVF   54,W
096C:  SUBWF  55,W
096E:  BNZ   098E
....................       { 
....................          i32--; 
0970:  DECF   54,F
....................          j32=0;          
0972:  CLRF   55
....................          y_codinh=y; 
0974:  MOVFF  34,40
0978:  MOVFF  33,3F
097C:  MOVFF  32,3E
0980:  MOVFF  31,3D
....................          yp_chay = 1; 
0984:  CLRF   38
0986:  CLRF   37
0988:  CLRF   36
098A:  MOVLW  01
098C:  MOVWF  35
....................       } 
....................    } 
098E:  BRA    0992
....................    else reset_toan_bo_bien(); 
0990:  RCALL  0756
0992:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
0208:  BSF    x73.0
020A:  MOVFF  73,8E
020E:  MOVFF  8D,8F
0212:  RCALL  01F8
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
0214:  BCF    x73.0
0216:  MOVFF  73,8E
021A:  MOVFF  8D,8F
021E:  RCALL  01F8
0220:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0222:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0224:  MOVFF  8A,8D
0228:  RCALL  0208
....................       delay_us(20); 
022A:  MOVLW  21
022C:  MOVWF  00
022E:  DECFSZ 00,F
0230:  BRA    022E
0232:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
02A2:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
02A4:  MOVFF  8C,8D
02A8:  RCALL  0208
....................       delay_us(20); 
02AA:  MOVLW  21
02AC:  MOVWF  00
02AE:  DECFSZ 00,F
02B0:  BRA    02AE
02B2:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
025A:  BCF    x73.0
....................          lcd_rw = 0;  
025C:  BCF    x73.1
....................          lcd_rs = 1;  
025E:  BSF    x73.2
....................          lcd_p =0; 
0260:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
0262:  MOVLW  38
0264:  MOVWF  x8A
0266:  RCALL  0222
....................          delay_us(40); 
0268:  MOVLW  42
026A:  MOVWF  00
026C:  DECFSZ 00,F
026E:  BRA    026C
0270:  NOP   
....................          lcd_command(lcd_display_control);    
0272:  MOVLW  0C
0274:  MOVWF  x8A
0276:  RCALL  0222
....................          delay_us(40); 
0278:  MOVLW  42
027A:  MOVWF  00
027C:  DECFSZ 00,F
027E:  BRA    027C
0280:  NOP   
....................          lcd_command(lcd_clear_display);       
0282:  MOVLW  01
0284:  MOVWF  x8A
0286:  RCALL  0222
....................          delay_ms(2); 
0288:  MOVLW  02
028A:  MOVWF  x8B
028C:  RCALL  0234
....................          lcd_command(lcd_entry_mode);        
028E:  MOVLW  06
0290:  MOVWF  x8A
0292:  RCALL  0222
....................          delay_us(40);                 
0294:  MOVLW  42
0296:  MOVWF  00
0298:  DECFSZ 00,F
029A:  BRA    0298
029C:  NOP   
029E:  GOTO   0E32 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
02B4:  CLRF   03
02B6:  MOVF   x87,W
02B8:  RCALL  00FC
02BA:  ADDWF  x88,W
02BC:  MOVWF  x89
02BE:  MOVWF  x8A
02C0:  RCALL  0222
02C2:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... signed int8 max = 100; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0; 
.................... int8 pos = 0; 
.................... int1 status = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
0138:  INCF   x75,F
....................    set_timer1(3036); //3036 
013A:  MOVLW  0B
013C:  MOVWF  FCF
013E:  MOVLW  DC
0140:  MOVWF  FCE
0142:  BCF    F9E.0
0144:  GOTO   0060
.................... } 
....................  
.................... void LCD_APPLE(){ 
....................    lcd_data(1); 
*
02C4:  MOVLW  01
02C6:  MOVWF  x8C
02C8:  RCALL  02A2
....................    lcd_data(0); 
02CA:  CLRF   x8C
02CC:  RCALL  02A2
....................    lcd_data(2);    
02CE:  MOVLW  02
02D0:  MOVWF  x8C
02D2:  RCALL  02A2
02D4:  RETURN 0
.................... } 
.................... void LCD_REMOVE(){ 
....................    lcd_data(" "); 
*
0C28:  MOVLW  48
0C2A:  MOVWF  FF6
0C2C:  MOVLW  01
0C2E:  MOVWF  FF7
0C30:  RCALL  0C06
0C32:  RETURN 0
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
031E:  MOVFF  74,86
0322:  MOVLW  0A
0324:  MOVWF  x87
0326:  RCALL  02D6
0328:  CLRF   03
032A:  MOVF   00,W
032C:  RCALL  00AE
032E:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0330:  MOVFF  74,86
0334:  MOVLW  0A
0336:  MOVWF  x87
0338:  RCALL  02D6
033A:  CLRF   03
033C:  MOVF   01,W
033E:  RCALL  00AE
0340:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0342:  MOVFF  76,86
0346:  MOVLW  0A
0348:  MOVWF  x87
034A:  RCALL  02D6
034C:  CLRF   03
034E:  MOVF   00,W
0350:  RCALL  00AE
0352:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0354:  MOVFF  76,86
0358:  MOVLW  0A
035A:  MOVWF  x87
035C:  RCALL  02D6
035E:  CLRF   03
0360:  MOVF   01,W
0362:  RCALL  00AE
0364:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0366:  MOVFF  77,86
036A:  MOVLW  0A
036C:  MOVWF  x87
036E:  RCALL  02D6
0370:  CLRF   03
0372:  MOVF   00,W
0374:  RCALL  00AE
0376:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0378:  MOVFF  77,86
037C:  MOVLW  0A
037E:  MOVWF  x87
0380:  RCALL  02D6
0382:  CLRF   03
0384:  MOVF   01,W
0386:  RCALL  00AE
0388:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
038A:  DECFSZ x7B,W
038C:  BRA    0392
038E:  BCF    26.7
0390:  BRA    03A4
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
0392:  MOVF   x7B,W
0394:  SUBLW  02
0396:  BNZ   039C
0398:  BCF    29.7
039A:  BRA    03A4
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
039C:  MOVF   x7B,W
039E:  SUBLW  03
03A0:  BNZ   03A4
03A2:  BCF    2C.7
03A4:  RETURN 0
.................... } 
.................... void LCD_DISPLAY() {   
....................       lcd_goto_xy(3,5); 
*
0C34:  MOVLW  03
0C36:  MOVWF  x87
0C38:  MOVLW  05
0C3A:  MOVWF  x88
0C3C:  CALL   02B4
....................       printf(lcd_data,"%2d:",gio); 
0C40:  MOVFF  77,86
0C44:  MOVLW  11
0C46:  MOVWF  x87
0C48:  RCALL  0604
0C4A:  MOVLW  3A
0C4C:  MOVWF  x8C
0C4E:  CALL   02A2
....................       delay_quet_8led(1); 
0C52:  CLRF   x87
0C54:  MOVLW  01
0C56:  MOVWF  x86
0C58:  RCALL  0BF2
....................       printf(lcd_data,"%2d:",phut); 
0C5A:  MOVFF  76,86
0C5E:  MOVLW  11
0C60:  MOVWF  x87
0C62:  RCALL  0604
0C64:  MOVLW  3A
0C66:  MOVWF  x8C
0C68:  CALL   02A2
....................       delay_quet_8led(1); 
0C6C:  CLRF   x87
0C6E:  MOVLW  01
0C70:  MOVWF  x86
0C72:  RCALL  0BF2
....................       printf(lcd_data,"%2d",giay); 
0C74:  MOVFF  74,86
0C78:  MOVLW  11
0C7A:  MOVWF  x87
0C7C:  RCALL  0604
....................       delay_quet_8led(2); 
0C7E:  CLRF   x87
0C80:  MOVLW  02
0C82:  MOVWF  x86
0C84:  RCALL  0BF2
....................       lcd_goto_xy(2,5); 
0C86:  MOVLW  02
0C88:  MOVWF  x87
0C8A:  MOVLW  05
0C8C:  MOVWF  x88
0C8E:  CALL   02B4
....................       lcd_data("ITEMS:"); 
0C92:  MOVLW  4A
0C94:  MOVWF  FF6
0C96:  MOVLW  01
0C98:  MOVWF  FF7
0C9A:  RCALL  0C06
....................       lcd_goto_xy(2,11); 
0C9C:  MOVLW  02
0C9E:  MOVWF  x87
0CA0:  MOVLW  0B
0CA2:  MOVWF  x88
0CA4:  CALL   02B4
....................       printf(lcd_data,"%3d",POS); 
0CA8:  MOVFF  80,86
0CAC:  MOVLW  13
0CAE:  MOVWF  x87
0CB0:  RCALL  0604
....................       lcd_goto_xy(1,4); 
0CB2:  MOVLW  01
0CB4:  MOVWF  x87
0CB6:  MOVLW  04
0CB8:  MOVWF  x88
0CBA:  CALL   02B4
....................       lcd_data("MAX"); 
0CBE:  MOVLW  52
0CC0:  MOVWF  FF6
0CC2:  MOVLW  01
0CC4:  MOVWF  FF7
0CC6:  RCALL  0C06
....................       lcd_goto_xy(1,8); 
0CC8:  MOVLW  01
0CCA:  MOVWF  x87
0CCC:  MOVLW  08
0CCE:  MOVWF  x88
0CD0:  CALL   02B4
....................       printf(lcd_data,"%3d",max); 
0CD4:  MOVFF  7C,86
0CD8:  MOVLW  13
0CDA:  MOVWF  x87
0CDC:  RCALL  0604
....................       if (!status) { 
0CDE:  BTFSC  x81.0
0CE0:  BRA    0D02
....................       lcd_goto_xy(0,pos-1); 
0CE2:  MOVLW  01
0CE4:  SUBWF  x80,W
0CE6:  MOVWF  x86
0CE8:  CLRF   x87
0CEA:  MOVWF  x88
0CEC:  CALL   02B4
....................       LCD_REMOVE();    
0CF0:  RCALL  0C28
....................       lcd_goto_xy(0,pos); 
0CF2:  CLRF   x87
0CF4:  MOVFF  80,88
0CF8:  CALL   02B4
....................       LCD_APPLE();} 
0CFC:  CALL   02C4
0D00:  BRA    0D30
....................       else { 
....................       lcd_goto_xy(0,pos+2); 
0D02:  MOVLW  02
0D04:  ADDWF  x80,W
0D06:  MOVWF  x86
0D08:  CLRF   x87
0D0A:  MOVWF  x88
0D0C:  CALL   02B4
....................       LCD_REMOVE(); 
0D10:  RCALL  0C28
....................       lcd_goto_xy(0,pos+3); 
0D12:  MOVLW  03
0D14:  ADDWF  x80,W
0D16:  MOVWF  x86
0D18:  CLRF   x87
0D1A:  MOVWF  x88
0D1C:  CALL   02B4
....................       LCD_REMOVE();          
0D20:  RCALL  0C28
....................       lcd_goto_xy(0,pos); 
0D22:  CLRF   x87
0D24:  MOVFF  80,88
0D28:  CALL   02B4
....................       LCD_APPLE();          
0D2C:  CALL   02C4
....................       } 
0D30:  GOTO   1052 (RETURN)
.................... } 
.................... void LCD_DISPLAY_COUNTER(){ 
....................    lcd_goto_xy(2,11); 
*
06AE:  MOVLW  02
06B0:  MOVWF  x87
06B2:  MOVLW  0B
06B4:  MOVWF  x88
06B6:  RCALL  02B4
....................    printf(lcd_data,"%3d",count); 
06B8:  MOVFF  7D,86
06BC:  MOVLW  13
06BE:  MOVWF  x87
06C0:  RCALL  0604
06C2:  GOTO   0ED2 (RETURN)
.................... } 
....................  
.................... void LCD_DISPLAY_MAX(){ 
....................    lcd_goto_xy(1,8); 
*
0BD8:  MOVLW  01
0BDA:  MOVWF  x87
0BDC:  MOVLW  08
0BDE:  MOVWF  x88
0BE0:  CALL   02B4
....................    printf(lcd_data,"%3d",max);   
0BE4:  MOVFF  7C,86
0BE8:  MOVLW  13
0BEA:  MOVWF  x87
0BEC:  RCALL  0604
0BEE:  GOTO   1018 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
.................... } 
....................  
.................... void main() 
*
0D34:  CLRF   FF8
0D36:  BCF    FD0.7
0D38:  BSF    07.7
0D3A:  BSF    F93.1
0D3C:  BSF    F93.0
0D3E:  MOVLW  31
0D40:  MOVWF  FC8
0D42:  MOVLW  28
0D44:  MOVWF  FC6
0D46:  BSF    FC7.7
0D48:  BCF    FC7.6
0D4A:  CLRF   1B
0D4C:  CLRF   22
0D4E:  CLRF   23
0D50:  CLRF   24
0D52:  CLRF   25
0D54:  CLRF   2E
0D56:  CLRF   2F
0D58:  CLRF   30
0D5A:  CLRF   34
0D5C:  CLRF   33
0D5E:  CLRF   32
0D60:  CLRF   31
0D62:  CLRF   38
0D64:  CLRF   37
0D66:  CLRF   36
0D68:  MOVLW  01
0D6A:  MOVWF  35
0D6C:  MOVLW  80
0D6E:  MOVWF  3C
0D70:  CLRF   3B
0D72:  CLRF   3A
0D74:  CLRF   39
0D76:  CLRF   40
0D78:  CLRF   3F
0D7A:  CLRF   3E
0D7C:  CLRF   3D
0D7E:  MOVWF  44
0D80:  CLRF   43
0D82:  CLRF   46
0D84:  MOVLW  01
0D86:  MOVWF  45
0D88:  CLRF   48
0D8A:  CLRF   47
0D8C:  MOVLW  80
0D8E:  MOVWF  4C
0D90:  CLRF   4B
0D92:  CLRF   4E
0D94:  MOVLW  01
0D96:  MOVWF  4D
0D98:  CLRF   50
0D9A:  CLRF   4F
0D9C:  CLRF   52
0D9E:  CLRF   51
0DA0:  CLRF   53
0DA2:  MOVLW  20
0DA4:  MOVWF  54
0DA6:  CLRF   55
0DA8:  MOVLW  01
0DAA:  MOVWF  56
0DAC:  MOVLW  10
0DAE:  MOVWF  57
0DB0:  CLRF   58
0DB2:  CLRF   5C
0DB4:  CLRF   5B
0DB6:  CLRF   5A
0DB8:  MOVLW  01
0DBA:  MOVWF  59
0DBC:  CLRF   x60
0DBE:  CLRF   5F
0DC0:  CLRF   5E
0DC2:  MOVWF  5D
0DC4:  SETF   x64
0DC6:  SETF   x63
0DC8:  SETF   x62
0DCA:  MOVLW  FE
0DCC:  MOVWF  x61
0DCE:  MOVLW  80
0DD0:  MOVWF  x68
0DD2:  CLRF   x67
0DD4:  CLRF   x66
0DD6:  CLRF   x65
0DD8:  MOVWF  x6C
0DDA:  CLRF   x6B
0DDC:  CLRF   x6A
0DDE:  CLRF   x69
0DE0:  MOVLW  7F
0DE2:  MOVWF  x70
0DE4:  SETF   x6F
0DE6:  SETF   x6E
0DE8:  SETF   x6D
0DEA:  MOVLW  01
0DEC:  MOVWF  x71
0DEE:  MOVWF  x72
0DF0:  CLRF   x78
0DF2:  CLRF   x79
0DF4:  CLRF   x7A
0DF6:  CLRF   x7B
0DF8:  MOVLW  64
0DFA:  MOVWF  x7C
0DFC:  CLRF   x7D
0DFE:  CLRF   x7E
0E00:  CLRF   x7F
0E02:  CLRF   x80
0E04:  BCF    x81.0
0E06:  CLRF   x83
0E08:  CLRF   x82
0E0A:  MOVF   FC1,W
0E0C:  ANDLW  C0
0E0E:  IORLW  0F
0E10:  MOVWF  FC1
0E12:  MOVLW  07
0E14:  MOVWF  FB4
0E16:  SETF   26
0E18:  SETF   27
0E1A:  SETF   28
0E1C:  SETF   29
0E1E:  SETF   2A
0E20:  SETF   2B
0E22:  SETF   2C
0E24:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
0E26:  GOTO   0156
....................    set_tris_b(0x3c); 
0E2A:  MOVLW  3C
0E2C:  MOVWF  F93
....................    setup_lcd(); 
0E2E:  GOTO   025A
....................  
....................  
....................    lcd_command(0x40); 
0E32:  MOVLW  40
0E34:  MOVWF  x8A
0E36:  CALL   0222
....................    for (int i = 0; i<64;i++){ 
0E3A:  CLRF   x84
0E3C:  MOVF   x84,W
0E3E:  SUBLW  3F
0E40:  BNC   0E56
....................       lcd_data(hang2[i]); 
0E42:  CLRF   03
0E44:  MOVF   x84,W
0E46:  CALL   0110
0E4A:  MOVWF  x86
0E4C:  MOVWF  x8C
0E4E:  CALL   02A2
0E52:  INCF   x84,F
0E54:  BRA    0E3C
....................    } 
....................  
....................    lcd_goto_xy(0,pos); 
0E56:  CLRF   x87
0E58:  MOVFF  80,88
0E5C:  CALL   02B4
....................    LCD_APPLE(); 
0E60:  CALL   02C4
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
0E64:  MOVLW  A8
0E66:  MOVWF  FD5
....................    set_timer0(0);    
0E68:  CLRF   FD7
0E6A:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0E6C:  MOVLW  B5
0E6E:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
0E70:  MOVLW  0B
0E72:  MOVWF  FCF
0E74:  MOVLW  DC
0E76:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
0E78:  MOVLW  C0
0E7A:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
0E7C:  BSF    F9D.0
....................  
....................  
....................    giay = 30; 
0E7E:  MOVLW  1E
0E80:  MOVWF  x74
....................    bdn = 0; 
0E82:  CLRF   x75
....................    phut = 29; 
0E84:  MOVLW  1D
0E86:  MOVWF  x76
....................    gio = 15; 
0E88:  MOVLW  0F
0E8A:  MOVWF  x77
....................    giai_ma(); 
0E8C:  CALL   031E
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
0E90:  BTFSC  x75.7
0E92:  BRA    0E9C
0E94:  MOVF   x75,W
0E96:  SUBLW  09
0E98:  BTFSS  FD8.0
0E9A:  BRA    101A
....................          hien_thi_8led_7doan_quet_all();      
0E9C:  CALL   043C
....................          count = get_timer0(); 
0EA0:  MOVF   FD6,W
0EA2:  MOVWF  x7D
....................          if (count != countT) { 
0EA4:  MOVF   x7E,W
0EA6:  SUBWF  x7D,W
0EA8:  BZ    0ED2
....................             countT = count; 
0EAA:  MOVFF  7D,7E
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
0EAE:  CLRF   x87
0EB0:  MOVFF  7D,86
0EB4:  GOTO   04DC
....................             if (count >= max+1) set_timer0(1); 
0EB8:  MOVLW  01
0EBA:  ADDWF  x7C,W
0EBC:  MOVWF  00
0EBE:  BTFSC  FE8.7
0EC0:  BRA    0EC8
0EC2:  MOVF   00,W
0EC4:  SUBWF  x7D,W
0EC6:  BNC   0ECE
0EC8:  CLRF   FD7
0ECA:  MOVLW  01
0ECC:  MOVWF  FD6
....................             LCD_DISPLAY_COUNTER(); 
0ECE:  GOTO   06AE
....................          } 
....................          if(ttct_td==1) sang_tat_32led(5,1); 
0ED2:  DECFSZ 56,W
0ED4:  BRA    0EE0
0ED6:  MOVLW  05
0ED8:  MOVWF  x86
0EDA:  MOVLW  01
0EDC:  MOVWF  x87
0EDE:  RCALL  0830
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
0EE0:  MOVF   56,W
0EE2:  SUBLW  02
0EE4:  BNZ   0EF0
0EE6:  MOVLW  05
0EE8:  MOVWF  x86
0EEA:  MOVLW  01
0EEC:  MOVWF  x87
0EEE:  RCALL  0894
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
0EF0:  MOVF   56,W
0EF2:  SUBLW  03
0EF4:  BNZ   0F00
0EF6:  MOVLW  05
0EF8:  MOVWF  x86
0EFA:  MOVLW  01
0EFC:  MOVWF  x87
0EFE:  RCALL  0912
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
0F00:  MOVF   56,W
0F02:  SUBLW  04
0F04:  BNZ   0F10
0F06:  MOVLW  05
0F08:  MOVWF  x86
0F0A:  MOVLW  01
0F0C:  MOVWF  x87
0F0E:  RCALL  0994
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
0F10:  MOVF   56,W
0F12:  SUBLW  05
0F14:  BNZ   0F20
0F16:  MOVLW  05
0F18:  MOVWF  x86
0F1A:  MOVLW  01
0F1C:  MOVWF  x87
0F1E:  RCALL  0A14
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
0F20:  MOVF   56,W
0F22:  SUBLW  06
0F24:  BNZ   0F30
0F26:  MOVLW  05
0F28:  MOVWF  x86
0F2A:  MOVLW  01
0F2C:  MOVWF  x87
0F2E:  RCALL  0912
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
0F30:  MOVF   56,W
0F32:  SUBLW  07
0F34:  BNZ   0F40
0F36:  MOVLW  05
0F38:  MOVWF  x86
0F3A:  MOVLW  01
0F3C:  MOVWF  x87
0F3E:  RCALL  0912
....................          if(ttct_td==8) sang_tat_32led(5,1); 
0F40:  MOVF   56,W
0F42:  SUBLW  08
0F44:  BNZ   0F50
0F46:  MOVLW  05
0F48:  MOVWF  x86
0F4A:  MOVLW  01
0F4C:  MOVWF  x87
0F4E:  RCALL  0830
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
0F50:  MOVF   56,W
0F52:  SUBLW  09
0F54:  BNZ   0F60
0F56:  MOVLW  05
0F58:  MOVWF  x86
0F5A:  MOVLW  01
0F5C:  MOVWF  x87
0F5E:  RCALL  0894
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
0F60:  MOVF   56,W
0F62:  SUBLW  0A
0F64:  BNZ   0F70
0F66:  MOVLW  05
0F68:  MOVWF  x86
0F6A:  MOVLW  01
0F6C:  MOVWF  x87
0F6E:  RCALL  0912
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
0F70:  MOVF   56,W
0F72:  SUBLW  0B
0F74:  BNZ   0F80
0F76:  MOVLW  05
0F78:  MOVWF  x86
0F7A:  MOVLW  01
0F7C:  MOVWF  x87
0F7E:  RCALL  0994
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
0F80:  MOVF   56,W
0F82:  SUBLW  0C
0F84:  BNZ   0F90
0F86:  MOVLW  05
0F88:  MOVWF  x86
0F8A:  MOVLW  01
0F8C:  MOVWF  x87
0F8E:  RCALL  0A14
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
0F90:  MOVF   56,W
0F92:  SUBLW  0D
0F94:  BNZ   0FA0
0F96:  MOVLW  05
0F98:  MOVWF  x86
0F9A:  MOVLW  01
0F9C:  MOVWF  x87
0F9E:  RCALL  0994
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
0FA0:  MOVF   56,W
0FA2:  SUBLW  0E
0FA4:  BNZ   0FB0
0FA6:  MOVLW  05
0FA8:  MOVWF  x86
0FAA:  MOVLW  01
0FAC:  MOVWF  x87
0FAE:  BRA    0A76
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
0FB0:  MOVF   56,W
0FB2:  SUBLW  0F
0FB4:  BNZ   0FC0
0FB6:  MOVLW  05
0FB8:  MOVWF  x86
0FBA:  MOVLW  01
0FBC:  MOVWF  x87
0FBE:  RCALL  0912
....................          if(ttct_td>15) ttct_td =1; 
0FC0:  BTFSC  56.7
0FC2:  BRA    0FCE
0FC4:  MOVF   56,W
0FC6:  SUBLW  0F
0FC8:  BC    0FCE
0FCA:  MOVLW  01
0FCC:  MOVWF  56
....................          signed int8 mp = key_4x4_dw(); 
0FCE:  BRA    0BAA
0FD0:  MOVFF  01,85
....................          if (mp != 0xFF ) { 
0FD4:  INCFSZ x85,W
0FD6:  BRA    0FDA
0FD8:  BRA    1018
....................             if (mp < 10 && donvi <= 2) { 
0FDA:  BTFSC  x85.7
0FDC:  BRA    0FE4
0FDE:  MOVF   x85,W
0FE0:  SUBLW  09
0FE2:  BNC   100A
0FE4:  MOVF   x7F,W
0FE6:  SUBLW  02
0FE8:  BNC   100A
....................                if (donvi == 0) max = mp; 
0FEA:  MOVF   x7F,F
0FEC:  BTFSC  FD8.2
0FEE:  MOVFF  85,7C
....................                if (donvi == 1) max = max*10 + mp;; 
0FF2:  DECFSZ x7F,W
0FF4:  BRA    1006
0FF6:  MOVFF  7C,89
0FFA:  MOVLW  0A
0FFC:  MOVWF  x8A
0FFE:  RCALL  0AEE
1000:  MOVF   x85,W
1002:  ADDWF  01,W
1004:  MOVWF  x7C
....................                donvi++;  
1006:  INCF   x7F,F
....................             } 
1008:  BRA    1016
....................             else if (mp == 12) {max = 1; donvi = 0;} 
100A:  MOVF   x85,W
100C:  SUBLW  0C
100E:  BNZ   1016
1010:  MOVLW  01
1012:  MOVWF  x7C
1014:  CLRF   x7F
....................             LCD_DISPLAY_MAX(); 
1016:  BRA    0BD8
....................          }          
....................  
....................       } 
1018:  BRA    106A
....................       else  
....................       { 
....................          bdn = bdn -10; 
101A:  MOVLW  0A
101C:  SUBWF  x75,F
....................          dem_tg_exit++; 
101E:  INCF   x78,F
....................          if (dem_tg_exit == 20) mode = 0; giay++; 
1020:  MOVF   x78,W
1022:  SUBLW  14
1024:  BTFSC  FD8.2
1026:  CLRF   x7B
1028:  INCF   x74,F
....................             if (giay==60) { giay = 0; phut++; 
102A:  MOVF   x74,W
102C:  SUBLW  3C
102E:  BNZ   1046
1030:  CLRF   x74
1032:  INCF   x76,F
....................                if (phut == 60) { phut = 0; gio++;  
1034:  MOVF   x76,W
1036:  SUBLW  3C
1038:  BNZ   1046
103A:  CLRF   x76
103C:  INCF   x77,F
....................                   if (gio == 24) gio = 0; 
103E:  MOVF   x77,W
1040:  SUBLW  18
1042:  BNZ   1046
1044:  CLRF   x77
....................                }  
....................             } 
....................          if(!status) {POS++;} 
1046:  BTFSC  x81.0
1048:  BRA    104E
104A:  INCF   x80,F
104C:  BRA    1050
....................          else POS--; 
104E:  DECF   x80,F
....................          LCD_DISPLAY(); 
1050:  BRA    0C34
....................          if (POS == 17 || POS == 0) if (status) status = 0; else status = 1;           
1052:  MOVF   x80,W
1054:  SUBLW  11
1056:  BZ    105C
1058:  MOVF   x80,F
105A:  BNZ   1066
105C:  BTFSS  x81.0
105E:  BRA    1064
1060:  BCF    x81.0
1062:  BRA    1066
1064:  BSF    x81.0
....................          giai_ma(); 
1066:  CALL   031E
....................       } 
106A:  BRA    0E90
....................    }            
.................... } 
....................  
106C:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
