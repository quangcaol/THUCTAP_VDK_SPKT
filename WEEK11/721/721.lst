CCS PCH C Compiler, Version 5.078, 43599               14-Dec-20 13:24

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\721\721.lst

               ROM used:   6008 bytes (18%)
                           Largest free fragment is 26760
               RAM used:   1161 (57%) at main() level
                           1186 (58%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   1404
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
0024:  DATA 7F,00
0026:  CLRF   FF7
0028:  ADDLW  36
002A:  MOVWF  FF6
002C:  MOVLW  00
002E:  ADDWFC FF7,F
0030:  TBLRD*+
0032:  MOVF   FF5,W
0034:  RETURN 0
0036:  DATA 7F,BF
0038:  DATA DF,EF
003A:  DATA F7,FB
003C:  DATA FD,FE
003E:  CLRF   FF7
0040:  ADDLW  4E
0042:  MOVWF  FF6
0044:  MOVLW  00
0046:  ADDWFC FF7,F
0048:  TBLRD*+
004A:  MOVF   FF5,W
004C:  RETURN 0
004E:  DATA 07,0F
0050:  DATA 1F,1F
0052:  DATA 1F,1F
0054:  DATA 1F,1F
0056:  DATA 1F,1F
0058:  DATA 1F,00
005A:  DATA 00,00
005C:  DATA 00,00
005E:  DATA 1C,1E
0060:  DATA 1F,1F
0062:  DATA 1F,1F
0064:  DATA 1F,1F
0066:  DATA 00,00
0068:  DATA 00,00
006A:  DATA 00,1F
006C:  DATA 1F,1F
006E:  DATA 1F,1F
0070:  DATA 1F,1F
0072:  DATA 1F,1F
0074:  DATA 1E,1C
0076:  DATA 1F,1F
0078:  DATA 1F,1F
007A:  DATA 1F,1F
007C:  DATA 0F,07
007E:  DATA 1F,1F
0080:  DATA 1F,00
0082:  DATA 00,00
0084:  DATA 1F,1F
0086:  DATA 1F,1F
0088:  DATA 1F,1F
008A:  DATA 1F,1F
008C:  DATA 1F,1F
008E:  CLRF   FF7
0090:  ADDLW  9E
0092:  MOVWF  FF6
0094:  MOVLW  00
0096:  ADDWFC FF7,F
0098:  TBLRD*+
009A:  MOVF   FF5,W
009C:  RETURN 0
009E:  DATA 80,C0
00A0:  DATA 94,D4
*
02B0:  MOVLW  8E
02B2:  MOVWF  00
02B4:  MOVLB  4
02B6:  MOVF   x8E,W
02B8:  SUBWF  00,F
02BA:  MOVFF  48F,02
02BE:  MOVFF  490,01
02C2:  BSF    02.7
02C4:  MOVF   00,F
02C6:  BZ    02DA
02C8:  BCF    FD8.0
02CA:  MOVF   02,F
02CC:  BNZ   02D2
02CE:  MOVF   01,F
02D0:  BZ    02DA
02D2:  RRCF   02,F
02D4:  RRCF   01,F
02D6:  DECFSZ 00,F
02D8:  BRA    02C8
02DA:  BTFSS  x8F.7
02DC:  BRA    02E8
02DE:  COMF   01,F
02E0:  COMF   02,F
02E2:  INCF   01,F
02E4:  BTFSC  FD8.2
02E6:  INCF   02,F
02E8:  MOVLB  0
02EA:  RETURN 0
02EC:  CLRF   01
02EE:  CLRF   02
02F0:  CLRF   00
02F2:  CLRF   03
02F4:  MOVLB  4
02F6:  MOVF   x95,W
02F8:  BNZ   02FE
02FA:  MOVF   x94,W
02FC:  BZ    032E
02FE:  MOVLW  10
0300:  MOVWF  x96
0302:  BCF    FD8.0
0304:  RLCF   x92,F
0306:  RLCF   x93,F
0308:  RLCF   00,F
030A:  RLCF   03,F
030C:  MOVF   x95,W
030E:  SUBWF  03,W
0310:  BNZ   0316
0312:  MOVF   x94,W
0314:  SUBWF  00,W
0316:  BNC   0326
0318:  MOVF   x94,W
031A:  SUBWF  00,F
031C:  BTFSS  FD8.0
031E:  DECF   03,F
0320:  MOVF   x95,W
0322:  SUBWF  03,F
0324:  BSF    FD8.0
0326:  RLCF   01,F
0328:  RLCF   02,F
032A:  DECFSZ x96,F
032C:  BRA    0302
032E:  MOVLB  0
0330:  RETURN 0
*
04B2:  MOVLB  4
04B4:  MOVF   x88,W
04B6:  XORWF  x89,W
04B8:  ANDLW  80
04BA:  MOVWF  x8B
04BC:  BTFSS  x88.7
04BE:  BRA    04C4
04C0:  COMF   x88,F
04C2:  INCF   x88,F
04C4:  BTFSS  x89.7
04C6:  BRA    04CC
04C8:  COMF   x89,F
04CA:  INCF   x89,F
04CC:  MOVF   x89,W
04CE:  CLRF   01
04D0:  SUBWF  x88,W
04D2:  BC    04DA
04D4:  MOVFF  488,00
04D8:  BRA    04F2
04DA:  CLRF   00
04DC:  MOVLW  08
04DE:  MOVWF  x8A
04E0:  RLCF   x88,F
04E2:  RLCF   00,F
04E4:  MOVF   x89,W
04E6:  SUBWF  00,W
04E8:  BTFSC  FD8.0
04EA:  MOVWF  00
04EC:  RLCF   01,F
04EE:  DECFSZ x8A,F
04F0:  BRA    04E0
04F2:  BTFSS  x8B.7
04F4:  BRA    04FA
04F6:  COMF   01,F
04F8:  INCF   01,F
04FA:  MOVLB  0
04FC:  RETURN 0
*
06DA:  MOVLW  8E
06DC:  MOVWF  00
06DE:  MOVFF  48B,01
06E2:  MOVFF  48A,02
06E6:  CLRF   03
06E8:  MOVF   01,F
06EA:  BNZ   06FE
06EC:  MOVFF  02,01
06F0:  CLRF   02
06F2:  MOVLW  08
06F4:  SUBWF  00,F
06F6:  MOVF   01,F
06F8:  BNZ   06FE
06FA:  CLRF   00
06FC:  BRA    070E
06FE:  BCF    FD8.0
0700:  BTFSC  01.7
0702:  BRA    070C
0704:  RLCF   02,F
0706:  RLCF   01,F
0708:  DECF   00,F
070A:  BRA    06FE
070C:  BCF    01.7
070E:  RETURN 0
0710:  MOVLB  4
0712:  MOVF   x95,W
0714:  BTFSC  FD8.2
0716:  BRA    07FA
0718:  MOVWF  00
071A:  MOVF   x99,W
071C:  BTFSC  FD8.2
071E:  BRA    07FA
0720:  ADDWF  00,F
0722:  BNC   072C
0724:  MOVLW  81
0726:  ADDWF  00,F
0728:  BC    07FA
072A:  BRA    0734
072C:  MOVLW  7F
072E:  SUBWF  00,F
0730:  BNC   07FA
0732:  BZ    07FA
0734:  MOVFF  496,49D
0738:  MOVF   x9A,W
073A:  XORWF  x9D,F
073C:  BSF    x96.7
073E:  BSF    x9A.7
0740:  MOVF   x98,W
0742:  MULWF  x9C
0744:  MOVFF  FF4,49F
0748:  MOVF   x97,W
074A:  MULWF  x9B
074C:  MOVFF  FF4,03
0750:  MOVFF  FF3,49E
0754:  MULWF  x9C
0756:  MOVF   FF3,W
0758:  ADDWF  x9F,F
075A:  MOVF   FF4,W
075C:  ADDWFC x9E,F
075E:  MOVLW  00
0760:  ADDWFC 03,F
0762:  MOVF   x98,W
0764:  MULWF  x9B
0766:  MOVF   FF3,W
0768:  ADDWF  x9F,F
076A:  MOVF   FF4,W
076C:  ADDWFC x9E,F
076E:  MOVLW  00
0770:  CLRF   02
0772:  ADDWFC 03,F
0774:  ADDWFC 02,F
0776:  MOVF   x96,W
0778:  MULWF  x9C
077A:  MOVF   FF3,W
077C:  ADDWF  x9E,F
077E:  MOVF   FF4,W
0780:  ADDWFC 03,F
0782:  MOVLW  00
0784:  ADDWFC 02,F
0786:  MOVF   x96,W
0788:  MULWF  x9B
078A:  MOVF   FF3,W
078C:  ADDWF  03,F
078E:  MOVF   FF4,W
0790:  ADDWFC 02,F
0792:  MOVLW  00
0794:  CLRF   01
0796:  ADDWFC 01,F
0798:  MOVF   x98,W
079A:  MULWF  x9A
079C:  MOVF   FF3,W
079E:  ADDWF  x9E,F
07A0:  MOVF   FF4,W
07A2:  ADDWFC 03,F
07A4:  MOVLW  00
07A6:  ADDWFC 02,F
07A8:  ADDWFC 01,F
07AA:  MOVF   x97,W
07AC:  MULWF  x9A
07AE:  MOVF   FF3,W
07B0:  ADDWF  03,F
07B2:  MOVF   FF4,W
07B4:  ADDWFC 02,F
07B6:  MOVLW  00
07B8:  ADDWFC 01,F
07BA:  MOVF   x96,W
07BC:  MULWF  x9A
07BE:  MOVF   FF3,W
07C0:  ADDWF  02,F
07C2:  MOVF   FF4,W
07C4:  ADDWFC 01,F
07C6:  INCF   00,F
07C8:  BTFSC  01.7
07CA:  BRA    07D6
07CC:  RLCF   x9E,F
07CE:  RLCF   03,F
07D0:  RLCF   02,F
07D2:  RLCF   01,F
07D4:  DECF   00,F
07D6:  MOVLW  00
07D8:  BTFSS  x9E.7
07DA:  BRA    07F0
07DC:  INCF   03,F
07DE:  ADDWFC 02,F
07E0:  ADDWFC 01,F
07E2:  MOVF   01,W
07E4:  BNZ   07F0
07E6:  MOVF   02,W
07E8:  BNZ   07F0
07EA:  MOVF   03,W
07EC:  BNZ   07F0
07EE:  INCF   00,F
07F0:  BTFSC  x9D.7
07F2:  BSF    01.7
07F4:  BTFSS  x9D.7
07F6:  BCF    01.7
07F8:  BRA    0802
07FA:  CLRF   00
07FC:  CLRF   01
07FE:  CLRF   02
0800:  CLRF   03
0802:  MOVLB  0
0804:  RETURN 0
*
0CF4:  MOVLB  4
0CF6:  MOVF   x8A,W
0CF8:  BTFSC  FD8.2
0CFA:  BRA    0E46
0CFC:  MOVWF  x96
0CFE:  MOVF   x8E,W
0D00:  BTFSC  FD8.2
0D02:  BRA    0E46
0D04:  SUBWF  x96,F
0D06:  BNC   0D12
0D08:  MOVLW  7F
0D0A:  ADDWF  x96,F
0D0C:  BTFSC  FD8.0
0D0E:  BRA    0E46
0D10:  BRA    0D1E
0D12:  MOVLW  81
0D14:  SUBWF  x96,F
0D16:  BTFSS  FD8.0
0D18:  BRA    0E46
0D1A:  BTFSC  FD8.2
0D1C:  BRA    0E46
0D1E:  MOVFF  496,00
0D22:  CLRF   01
0D24:  CLRF   02
0D26:  CLRF   03
0D28:  CLRF   x95
0D2A:  MOVFF  48B,494
0D2E:  BSF    x94.7
0D30:  MOVFF  48C,493
0D34:  MOVFF  48D,492
0D38:  MOVLW  19
0D3A:  MOVWF  x96
0D3C:  MOVF   x91,W
0D3E:  SUBWF  x92,F
0D40:  BC    0D5C
0D42:  MOVLW  01
0D44:  SUBWF  x93,F
0D46:  BC    0D5C
0D48:  SUBWF  x94,F
0D4A:  BC    0D5C
0D4C:  SUBWF  x95,F
0D4E:  BC    0D5C
0D50:  INCF   x95,F
0D52:  INCF   x94,F
0D54:  INCF   x93,F
0D56:  MOVF   x91,W
0D58:  ADDWF  x92,F
0D5A:  BRA    0DAC
0D5C:  MOVF   x90,W
0D5E:  SUBWF  x93,F
0D60:  BC    0D86
0D62:  MOVLW  01
0D64:  SUBWF  x94,F
0D66:  BC    0D86
0D68:  SUBWF  x95,F
0D6A:  BC    0D86
0D6C:  INCF   x95,F
0D6E:  INCF   x94,F
0D70:  MOVF   x90,W
0D72:  ADDWF  x93,F
0D74:  MOVF   x91,W
0D76:  ADDWF  x92,F
0D78:  BNC   0DAC
0D7A:  INCF   x93,F
0D7C:  BNZ   0DAC
0D7E:  INCF   x94,F
0D80:  BNZ   0DAC
0D82:  INCF   x95,F
0D84:  BRA    0DAC
0D86:  MOVF   x8F,W
0D88:  IORLW  80
0D8A:  SUBWF  x94,F
0D8C:  BC    0DAA
0D8E:  MOVLW  01
0D90:  SUBWF  x95,F
0D92:  BC    0DAA
0D94:  INCF   x95,F
0D96:  MOVF   x8F,W
0D98:  IORLW  80
0D9A:  ADDWF  x94,F
0D9C:  MOVF   x90,W
0D9E:  ADDWF  x93,F
0DA0:  BNC   0D74
0DA2:  INCF   x94,F
0DA4:  BNZ   0D74
0DA6:  INCF   x95,F
0DA8:  BRA    0D74
0DAA:  BSF    03.0
0DAC:  DECFSZ x96,F
0DAE:  BRA    0DB2
0DB0:  BRA    0DC8
0DB2:  BCF    FD8.0
0DB4:  RLCF   x92,F
0DB6:  RLCF   x93,F
0DB8:  RLCF   x94,F
0DBA:  RLCF   x95,F
0DBC:  BCF    FD8.0
0DBE:  RLCF   03,F
0DC0:  RLCF   02,F
0DC2:  RLCF   01,F
0DC4:  RLCF   x97,F
0DC6:  BRA    0D3C
0DC8:  BTFSS  x97.0
0DCA:  BRA    0DD8
0DCC:  BCF    FD8.0
0DCE:  RRCF   01,F
0DD0:  RRCF   02,F
0DD2:  RRCF   03,F
0DD4:  RRCF   x97,F
0DD6:  BRA    0DDC
0DD8:  DECF   00,F
0DDA:  BZ    0E46
0DDC:  BTFSC  x97.7
0DDE:  BRA    0E1C
0DE0:  BCF    FD8.0
0DE2:  RLCF   x92,F
0DE4:  RLCF   x93,F
0DE6:  RLCF   x94,F
0DE8:  RLCF   x95,F
0DEA:  MOVF   x91,W
0DEC:  SUBWF  x92,F
0DEE:  BC    0DFE
0DF0:  MOVLW  01
0DF2:  SUBWF  x93,F
0DF4:  BC    0DFE
0DF6:  SUBWF  x94,F
0DF8:  BC    0DFE
0DFA:  SUBWF  x95,F
0DFC:  BNC   0E32
0DFE:  MOVF   x90,W
0E00:  SUBWF  x93,F
0E02:  BC    0E0E
0E04:  MOVLW  01
0E06:  SUBWF  x94,F
0E08:  BC    0E0E
0E0A:  SUBWF  x95,F
0E0C:  BNC   0E32
0E0E:  MOVF   x8F,W
0E10:  IORLW  80
0E12:  SUBWF  x94,F
0E14:  BC    0E1C
0E16:  MOVLW  01
0E18:  SUBWF  x95,F
0E1A:  BNC   0E32
0E1C:  INCF   03,F
0E1E:  BNZ   0E32
0E20:  INCF   02,F
0E22:  BNZ   0E32
0E24:  INCF   01,F
0E26:  BNZ   0E32
0E28:  INCF   00,F
0E2A:  BZ    0E46
0E2C:  RRCF   01,F
0E2E:  RRCF   02,F
0E30:  RRCF   03,F
0E32:  MOVFF  48B,496
0E36:  MOVF   x8F,W
0E38:  XORWF  x96,F
0E3A:  BTFSS  x96.7
0E3C:  BRA    0E42
0E3E:  BSF    01.7
0E40:  BRA    0E4E
0E42:  BCF    01.7
0E44:  BRA    0E4E
0E46:  CLRF   00
0E48:  CLRF   01
0E4A:  CLRF   02
0E4C:  CLRF   03
0E4E:  MOVLB  0
0E50:  RETURN 0
*
0F64:  MOVLB  4
0F66:  MOVF   x95,W
0F68:  SUBLW  B6
0F6A:  MOVWF  x95
0F6C:  CLRF   03
0F6E:  MOVFF  496,499
0F72:  BSF    x96.7
0F74:  BCF    FD8.0
0F76:  RRCF   x96,F
0F78:  RRCF   x97,F
0F7A:  RRCF   x98,F
0F7C:  RRCF   03,F
0F7E:  RRCF   02,F
0F80:  RRCF   01,F
0F82:  RRCF   00,F
0F84:  DECFSZ x95,F
0F86:  BRA    0F74
0F88:  BTFSS  x99.7
0F8A:  BRA    0FA2
0F8C:  COMF   00,F
0F8E:  COMF   01,F
0F90:  COMF   02,F
0F92:  COMF   03,F
0F94:  INCF   00,F
0F96:  BTFSC  FD8.2
0F98:  INCF   01,F
0F9A:  BTFSC  FD8.2
0F9C:  INCF   02,F
0F9E:  BTFSC  FD8.2
0FA0:  INCF   03,F
0FA2:  MOVLB  0
0FA4:  GOTO   1094 (RETURN)
0FA8:  BTFSC  FD8.1
0FAA:  BRA    0FB4
0FAC:  MOVLW  04
0FAE:  MOVWF  FEA
0FB0:  MOVLW  9D
0FB2:  MOVWF  FE9
0FB4:  CLRF   00
0FB6:  CLRF   01
0FB8:  CLRF   02
0FBA:  CLRF   03
0FBC:  MOVLB  4
0FBE:  CLRF   x9D
0FC0:  CLRF   x9E
0FC2:  CLRF   x9F
0FC4:  CLRF   xA0
0FC6:  MOVF   x9C,W
0FC8:  IORWF  x9B,W
0FCA:  IORWF  x9A,W
0FCC:  IORWF  x99,W
0FCE:  BZ    1028
0FD0:  MOVLW  20
0FD2:  MOVWF  xA1
0FD4:  BCF    FD8.0
0FD6:  RLCF   x95,F
0FD8:  RLCF   x96,F
0FDA:  RLCF   x97,F
0FDC:  RLCF   x98,F
0FDE:  RLCF   x9D,F
0FE0:  RLCF   x9E,F
0FE2:  RLCF   x9F,F
0FE4:  RLCF   xA0,F
0FE6:  MOVF   x9C,W
0FE8:  SUBWF  xA0,W
0FEA:  BNZ   0FFC
0FEC:  MOVF   x9B,W
0FEE:  SUBWF  x9F,W
0FF0:  BNZ   0FFC
0FF2:  MOVF   x9A,W
0FF4:  SUBWF  x9E,W
0FF6:  BNZ   0FFC
0FF8:  MOVF   x99,W
0FFA:  SUBWF  x9D,W
0FFC:  BNC   101C
0FFE:  MOVF   x99,W
1000:  SUBWF  x9D,F
1002:  MOVF   x9A,W
1004:  BTFSS  FD8.0
1006:  INCFSZ x9A,W
1008:  SUBWF  x9E,F
100A:  MOVF   x9B,W
100C:  BTFSS  FD8.0
100E:  INCFSZ x9B,W
1010:  SUBWF  x9F,F
1012:  MOVF   x9C,W
1014:  BTFSS  FD8.0
1016:  INCFSZ x9C,W
1018:  SUBWF  xA0,F
101A:  BSF    FD8.0
101C:  RLCF   00,F
101E:  RLCF   01,F
1020:  RLCF   02,F
1022:  RLCF   03,F
1024:  DECFSZ xA1,F
1026:  BRA    0FD4
1028:  MOVFF  49D,FEF
102C:  MOVFF  49E,FEC
1030:  MOVFF  49F,FEC
1034:  MOVFF  4A0,FEC
1038:  MOVLB  0
103A:  RETURN 0
103C:  MOVF   FE9,W
103E:  MOVLB  4
1040:  MOVWF  x8D
1042:  MOVF   x8C,W
1044:  MOVWF  x8F
1046:  BZ    1080
1048:  MOVFF  48B,498
104C:  MOVFF  48A,497
1050:  MOVFF  489,496
1054:  MOVFF  488,495
1058:  CLRF   x9C
105A:  CLRF   x9B
105C:  MOVLW  20
105E:  MOVWF  x9A
1060:  MOVLW  82
1062:  MOVWF  x99
1064:  MOVLB  0
1066:  CALL   0710
106A:  MOVFF  03,48B
106E:  MOVFF  02,48A
1072:  MOVFF  01,489
1076:  MOVFF  00,488
107A:  MOVLB  4
107C:  DECFSZ x8F,F
107E:  BRA    1048
1080:  MOVFF  48B,498
1084:  MOVFF  48A,497
1088:  MOVFF  489,496
108C:  MOVFF  488,495
1090:  MOVLB  0
1092:  BRA    0F64
1094:  MOVFF  03,48B
1098:  MOVFF  02,48A
109C:  MOVFF  01,489
10A0:  MOVFF  00,488
10A4:  MOVLB  4
10A6:  BTFSS  x8B.7
10A8:  BRA    10C4
10AA:  DECF   x8D,F
10AC:  BSF    x8D.5
10AE:  COMF   x88,F
10B0:  COMF   x89,F
10B2:  COMF   x8A,F
10B4:  COMF   x8B,F
10B6:  INCF   x88,F
10B8:  BTFSC  FD8.2
10BA:  INCF   x89,F
10BC:  BTFSC  FD8.2
10BE:  INCF   x8A,F
10C0:  BTFSC  FD8.2
10C2:  INCF   x8B,F
10C4:  MOVLW  3B
10C6:  MOVWF  x94
10C8:  MOVLW  9A
10CA:  MOVWF  x93
10CC:  MOVLW  CA
10CE:  MOVWF  x92
10D0:  CLRF   x91
10D2:  MOVLW  0A
10D4:  MOVWF  x8F
10D6:  MOVF   x8C,W
10D8:  BTFSC  FD8.2
10DA:  INCF   x8D,F
10DC:  BSF    FD8.1
10DE:  MOVLW  04
10E0:  MOVWF  FEA
10E2:  MOVLW  88
10E4:  MOVWF  FE9
10E6:  MOVFF  48B,498
10EA:  MOVFF  48A,497
10EE:  MOVFF  489,496
10F2:  MOVFF  488,495
10F6:  MOVFF  494,49C
10FA:  MOVFF  493,49B
10FE:  MOVFF  492,49A
1102:  MOVFF  491,499
1106:  MOVLB  0
1108:  RCALL  0FA8
110A:  MOVF   01,W
110C:  MOVF   00,F
110E:  BNZ   1136
1110:  MOVLB  4
1112:  INCF   x8C,W
1114:  SUBWF  x8F,W
1116:  BTFSS  FD8.2
1118:  BRA    111E
111A:  MOVLB  0
111C:  BRA    1136
111E:  MOVF   x8D,W
1120:  BZ    113C
1122:  ANDLW  0F
1124:  SUBWF  x8F,W
1126:  BZ    112A
1128:  BC    11B2
112A:  BTFSC  x8D.7
112C:  BRA    11B2
112E:  BTFSC  x8D.6
1130:  BRA    113C
1132:  MOVLW  20
1134:  BRA    11A4
1136:  MOVLW  20
1138:  MOVLB  4
113A:  ANDWF  x8D,F
113C:  BTFSS  x8D.5
113E:  BRA    115E
1140:  BCF    x8D.5
1142:  MOVF   x8C,W
1144:  BTFSS  FD8.2
1146:  DECF   x8D,F
1148:  MOVF   00,W
114A:  MOVWF  x8D
114C:  MOVLW  2D
114E:  MOVWF  x95
1150:  MOVLB  0
1152:  CALL   029E
1156:  MOVLB  4
1158:  MOVF   x8D,W
115A:  MOVWF  00
115C:  CLRF   x8D
115E:  MOVF   x8C,W
1160:  SUBWF  x8F,W
1162:  BNZ   117E
1164:  MOVF   00,W
1166:  MOVWF  x8D
1168:  MOVLW  2E
116A:  MOVWF  x95
116C:  MOVLB  0
116E:  CALL   029E
1172:  MOVLB  4
1174:  MOVF   x8D,W
1176:  MOVWF  00
1178:  MOVLW  20
117A:  ANDWF  x8D,F
117C:  MOVLW  00
117E:  MOVLW  30
1180:  BTFSS  x8D.5
1182:  BRA    11A4
1184:  BCF    x8D.5
1186:  MOVF   x8C,W
1188:  BTFSS  FD8.2
118A:  DECF   x8D,F
118C:  MOVF   00,W
118E:  MOVWF  x8D
1190:  MOVLW  2D
1192:  MOVWF  x95
1194:  MOVLB  0
1196:  CALL   029E
119A:  MOVLB  4
119C:  MOVF   x8D,W
119E:  MOVWF  00
11A0:  CLRF   x8D
11A2:  MOVLW  30
11A4:  ADDWF  00,F
11A6:  MOVFF  00,495
11AA:  MOVLB  0
11AC:  CALL   029E
11B0:  MOVLB  4
11B2:  BCF    FD8.1
11B4:  MOVFF  494,498
11B8:  MOVFF  493,497
11BC:  MOVFF  492,496
11C0:  MOVFF  491,495
11C4:  CLRF   x9C
11C6:  CLRF   x9B
11C8:  CLRF   x9A
11CA:  MOVLW  0A
11CC:  MOVWF  x99
11CE:  MOVLB  0
11D0:  RCALL  0FA8
11D2:  MOVFF  03,494
11D6:  MOVFF  02,493
11DA:  MOVFF  01,492
11DE:  MOVFF  00,491
11E2:  MOVLB  4
11E4:  DECFSZ x8F,F
11E6:  BRA    10DC
11E8:  MOVLB  0
11EA:  GOTO   13E4 (RETURN)
11EE:  MOVFF  FEA,490
11F2:  MOVFF  FE9,48F
11F6:  MOVLB  4
11F8:  BTFSS  x89.7
11FA:  BRA    120C
11FC:  BSF    x8F.7
11FE:  BTFSS  x8F.4
1200:  INCF   x8F,F
1202:  COMF   x88,F
1204:  COMF   x89,F
1206:  INCF   x88,F
1208:  BTFSC  FD8.2
120A:  INCF   x89,F
120C:  SWAPF  x89,W
120E:  IORLW  F0
1210:  MOVWF  x8B
1212:  ADDWF  x8B,F
1214:  ADDLW  E2
1216:  MOVWF  x8C
1218:  ADDLW  32
121A:  MOVWF  x8E
121C:  MOVF   x89,W
121E:  ANDLW  0F
1220:  ADDWF  x8C,F
1222:  ADDWF  x8C,F
1224:  ADDWF  x8E,F
1226:  ADDLW  E9
1228:  MOVWF  x8D
122A:  ADDWF  x8D,F
122C:  ADDWF  x8D,F
122E:  SWAPF  x88,W
1230:  ANDLW  0F
1232:  ADDWF  x8D,F
1234:  ADDWF  x8E,F
1236:  RLCF   x8D,F
1238:  RLCF   x8E,F
123A:  COMF   x8E,F
123C:  RLCF   x8E,F
123E:  MOVF   x88,W
1240:  ANDLW  0F
1242:  ADDWF  x8E,F
1244:  RLCF   x8B,F
1246:  MOVLW  07
1248:  MOVWF  x8A
124A:  MOVLW  0A
124C:  DECF   x8D,F
124E:  ADDWF  x8E,F
1250:  BNC   124C
1252:  DECF   x8C,F
1254:  ADDWF  x8D,F
1256:  BNC   1252
1258:  DECF   x8B,F
125A:  ADDWF  x8C,F
125C:  BNC   1258
125E:  DECF   x8A,F
1260:  ADDWF  x8B,F
1262:  BNC   125E
1264:  MOVLW  04
1266:  MOVWF  FEA
1268:  MOVLW  8A
126A:  MOVWF  FE9
126C:  MOVLW  07
126E:  ANDWF  x8F,W
1270:  BCF    x8F.6
1272:  MOVF   FED,F
1274:  ANDWF  x8F,W
1276:  BNZ   1286
1278:  BTFSC  x8F.4
127A:  MOVF   FEE,F
127C:  BTFSC  x8F.4
127E:  BRA    1286
1280:  MOVLW  20
1282:  MOVWF  00
1284:  BRA    12C8
1286:  ADDWF  FE9,F
1288:  MOVLW  00
128A:  ADDWFC FEA,F
128C:  MOVF   FE9,W
128E:  SUBLW  8E
1290:  BNZ   129A
1292:  MOVF   FEA,W
1294:  SUBLW  04
1296:  BNZ   129A
1298:  BSF    x8F.6
129A:  MOVF   FEF,W
129C:  MOVWF  00
129E:  BNZ   12B0
12A0:  BTFSC  x8F.6
12A2:  BRA    12B0
12A4:  BTFSC  x8F.4
12A6:  BRA    12E4
12A8:  BTFSC  x8F.3
12AA:  BRA    12B0
12AC:  MOVLW  20
12AE:  BRA    12C6
12B0:  BTFSS  x8F.7
12B2:  BRA    12C0
12B4:  MOVLW  2D
12B6:  MOVWF  00
12B8:  MOVF   FED,W
12BA:  BCF    x8F.6
12BC:  BCF    x8F.7
12BE:  BRA    12C8
12C0:  BSF    x8F.3
12C2:  BCF    x8F.4
12C4:  MOVLW  30
12C6:  ADDWF  00,F
12C8:  MOVFF  FEA,489
12CC:  MOVFF  FE9,488
12D0:  MOVFF  00,495
12D4:  MOVLB  0
12D6:  CALL   029E
12DA:  MOVFF  489,FEA
12DE:  MOVFF  488,FE9
12E2:  MOVLB  4
12E4:  MOVF   FEE,W
12E6:  BTFSS  x8F.6
12E8:  BRA    128C
12EA:  MOVLB  0
12EC:  GOTO   1400 (RETURN)
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
0186:  MOVLW  04
0188:  MOVWF  FEA
018A:  MOVLW  8D
018C:  MOVWF  FE9
018E:  MOVF   FEF,W
0190:  BZ    01AC
0192:  MOVLW  06
0194:  MOVWF  01
0196:  CLRF   00
0198:  DECFSZ 00,F
019A:  BRA    0198
019C:  DECFSZ 01,F
019E:  BRA    0196
01A0:  MOVLW  7B
01A2:  MOVWF  00
01A4:  DECFSZ 00,F
01A6:  BRA    01A4
01A8:  DECFSZ FEF,F
01AA:  BRA    0192
01AC:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
00C0:  MOVFF  49E,4A0
....................    for (sb=0;sb<8;sb++) 
00C4:  MOVLB  4
00C6:  CLRF   x9F
00C8:  MOVF   x9F,W
00CA:  SUBLW  07
00CC:  BNC   00EA
....................       {                                                  
....................          output_bit(ssdo,bseri);     
00CE:  BTFSC  xA0.7
00D0:  BRA    00D6
00D2:  BCF    F8D.2
00D4:  BRA    00D8
00D6:  BSF    F8D.2
00D8:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
00DA:  BCF    F96.0
00DC:  BCF    F8D.0
00DE:  BCF    F96.0
00E0:  BSF    F8D.0
....................          x= x<<1;          
00E2:  BCF    FD8.0
00E4:  RLCF   xA0,F
00E6:  INCF   x9F,F
00E8:  BRA    00C8
....................      } 
00EA:  MOVLB  0
00EC:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
08A2:  MOVFF  49A,49E
08A6:  RCALL  00C0
....................       xuat_1byte(bld2); 
08A8:  MOVFF  49B,49E
08AC:  RCALL  00C0
....................       xuat_1byte(bld1);           
08AE:  MOVFF  49C,49E
08B2:  RCALL  00C0
....................       xuat_1byte(bld0);             
08B4:  MOVFF  49D,49E
08B8:  RCALL  00C0
....................       mo_32_led_don;       
08BA:  BCF    04.4
....................       mo_ic_74573_a_thong_dl();             
08BC:  RCALL  00EE
....................       output_high(rck_32led);    output_low(rck_32led); 
08BE:  BCF    F95.5
08C0:  BSF    F8C.5
08C2:  BCF    F95.5
08C4:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
08C6:  BCF    F95.1
08C8:  BCF    F8C.1
08CA:  GOTO   08F0 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
08CE:  MOVFF  493,496
08D2:  MOVFF  492,497
....................      b1 = wld0>>8;  b0 = wld0; 
08D6:  MOVFF  495,498
08DA:  MOVFF  494,499
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
08DE:  MOVFF  496,49A
08E2:  MOVFF  497,49B
08E6:  MOVFF  498,49C
08EA:  MOVFF  499,49D
08EE:  BRA    08A2
08F0:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
08F2:  MOVFF  48C,48E
08F6:  MOVFF  48D,48F
08FA:  MOVFF  48B,491
08FE:  MOVFF  48A,490
....................      xuat_32led_don_2word(wd1,wd0); 
0902:  MOVFF  48F,493
0906:  MOVFF  48E,492
090A:  MOVFF  491,495
090E:  MOVFF  490,494
0912:  RCALL  08CE
0914:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
00A2:  MOVLW  00
00A4:  MOVWF  F95
....................       set_tris_e(0x00); 
00A6:  MOVWF  F96
....................       output_d(0xff); 
00A8:  CLRF   F95
00AA:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
00AC:  SETF   04
....................       tin_hieu_dk_74573_b=0xff;       
00AE:  SETF   05
....................       chot_ic_74573_a_goi_du_lieu; 
00B0:  BCF    F95.1
00B2:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
00B4:  BCF    F95.0
00B6:  BCF    F8C.0
....................       rbdc=0; 
00B8:  CLRF   08
00BA:  CLRF   07
00BC:  GOTO   1504 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
00EE:  CLRF   F95
00F0:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
00F2:  BTFSC  04.4
00F4:  BRA    00FA
00F6:  BCF    F8C.4
00F8:  BRA    00FC
00FA:  BSF    F8C.4
00FC:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
00FE:  BTFSC  04.6
0100:  BRA    0106
0102:  BCF    F8C.6
0104:  BRA    0108
0106:  BSF    F8C.6
0108:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
010A:  BTFSC  04.2
010C:  BRA    0112
010E:  BCF    F8C.2
0110:  BRA    0114
0112:  BSF    F8C.2
0114:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
0116:  BCF    F95.1
0118:  BSF    F8C.1
011A:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0584:  CLRF   F95
0586:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0588:  BTFSC  05.6
058A:  BRA    0590
058C:  BCF    F8C.6
058E:  BRA    0592
0590:  BSF    F8C.6
0592:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0594:  BTFSC  05.4
0596:  BRA    059C
0598:  BCF    F8C.4
059A:  BRA    059E
059C:  BSF    F8C.4
059E:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
05A0:  BTFSC  05.2
05A2:  BRA    05A8
05A4:  BCF    F8C.2
05A6:  BRA    05AA
05A8:  BSF    F8C.2
05AA:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
05AC:  BCF    F95.0
05AE:  BSF    F8C.0
05B0:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
0332:  MOVFF  493,49E
0336:  RCALL  00C0
0338:  MOVFF  492,49E
033C:  RCALL  00C0
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
033E:  MOVFF  491,49E
0342:  RCALL  00C0
0344:  MOVFF  490,49E
0348:  RCALL  00C0
....................        
....................       mo_4_led_7doan; 
034A:  BCF    04.6
....................       mo_ic_74573_a_thong_dl(); 
034C:  RCALL  00EE
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
034E:  BCF    F95.7
0350:  BCF    F8C.7
0352:  BCF    F95.7
0354:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
0356:  BCF    F95.1
0358:  BCF    F8C.1
035A:  GOTO   0486 (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
035E:  MOVFF  48F,493
0362:  MOVFF  48E,492
0366:  MOVLB  4
0368:  CLRF   x95
036A:  MOVLW  0A
036C:  MOVWF  x94
036E:  MOVLB  0
0370:  RCALL  02EC
0372:  MOVFF  00,490
0376:  MOVLB  4
0378:  MOVFF  03,491
037C:  MOVFF  03,03
0380:  MOVF   00,W
0382:  MOVLB  0
0384:  RCALL  0004
0386:  MOVWF  09
....................       chuc4  = ma7doan[tam/10%10]; 
0388:  MOVFF  48F,493
038C:  MOVFF  48E,492
0390:  MOVLB  4
0392:  CLRF   x95
0394:  MOVLW  0A
0396:  MOVWF  x94
0398:  MOVLB  0
039A:  RCALL  02EC
039C:  MOVFF  02,491
03A0:  MOVFF  01,490
03A4:  MOVFF  02,493
03A8:  MOVFF  01,492
03AC:  MOVLB  4
03AE:  CLRF   x95
03B0:  MOVLW  0A
03B2:  MOVWF  x94
03B4:  MOVLB  0
03B6:  RCALL  02EC
03B8:  MOVFF  00,490
03BC:  MOVLB  4
03BE:  MOVFF  03,491
03C2:  MOVFF  03,03
03C6:  MOVF   00,W
03C8:  MOVLB  0
03CA:  RCALL  0004
03CC:  MOVWF  0A
....................       tram4  = ma7doan[tam/100%10];  
03CE:  MOVFF  48F,493
03D2:  MOVFF  48E,492
03D6:  MOVLB  4
03D8:  CLRF   x95
03DA:  MOVLW  64
03DC:  MOVWF  x94
03DE:  MOVLB  0
03E0:  RCALL  02EC
03E2:  MOVFF  02,491
03E6:  MOVFF  01,490
03EA:  MOVFF  02,493
03EE:  MOVFF  01,492
03F2:  MOVLB  4
03F4:  CLRF   x95
03F6:  MOVLW  0A
03F8:  MOVWF  x94
03FA:  MOVLB  0
03FC:  RCALL  02EC
03FE:  MOVFF  00,490
0402:  MOVLB  4
0404:  MOVFF  03,491
0408:  MOVFF  03,03
040C:  MOVF   00,W
040E:  MOVLB  0
0410:  RCALL  0004
0412:  MOVWF  0B
....................       ngan4  = ma7doan[tam/1000%10];        
0414:  MOVFF  48F,493
0418:  MOVFF  48E,492
041C:  MOVLW  03
041E:  MOVLB  4
0420:  MOVWF  x95
0422:  MOVLW  E8
0424:  MOVWF  x94
0426:  MOVLB  0
0428:  RCALL  02EC
042A:  MOVFF  02,491
042E:  MOVFF  01,490
0432:  MOVFF  02,493
0436:  MOVFF  01,492
043A:  MOVLB  4
043C:  CLRF   x95
043E:  MOVLW  0A
0440:  MOVWF  x94
0442:  MOVLB  0
0444:  RCALL  02EC
0446:  MOVFF  00,490
044A:  MOVLB  4
044C:  MOVFF  03,491
0450:  MOVFF  03,03
0454:  MOVF   00,W
0456:  MOVLB  0
0458:  RCALL  0004
045A:  MOVWF  0C
....................       if (ngan4==0xc0) 
045C:  MOVF   0C,W
045E:  SUBLW  C0
0460:  BNZ   0474
....................       { 
....................          ngan4=0xff; 
0462:  SETF   0C
....................          if (tram4==0xc0) 
0464:  MOVF   0B,W
0466:  SUBLW  C0
0468:  BNZ   0474
....................          { 
....................             tram4=0xff; 
046A:  SETF   0B
....................             if (chuc4==0xc0)   chuc4=0xff; 
046C:  MOVF   0A,W
046E:  SUBLW  C0
0470:  BNZ   0474
0472:  SETF   0A
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
0474:  MOVFF  0C,490
0478:  MOVFF  0B,491
047C:  MOVFF  0A,492
0480:  MOVFF  09,493
0484:  BRA    0332
0486:  GOTO   04AE (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
011C:  MOVFF  10,49E
0120:  RCALL  00C0
....................     xuat_1byte(glcddata); 
0122:  MOVFF  0F,49E
0126:  RCALL  00C0
....................     xuat_1byte(lcdcontrol);        
0128:  MOVFF  0E,49E
012C:  RCALL  00C0
....................     xuat_1byte(lcddata);       
012E:  MOVFF  0D,49E
0132:  RCALL  00C0
....................        
....................     mo_glcd_lcd; 
0134:  BCF    04.2
....................     mo_ic_74573_a_thong_dl();             
0136:  RCALL  00EE
....................     output_high(rck_lcd20x4);      
0138:  BCF    F95.3
013A:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
013C:  BCF    F95.3
013E:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0140:  BCF    F95.1
0142:  BCF    F8C.1
0144:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
0146:  MOVLB  4
0148:  MOVFF  497,0E
014C:  COMF   0E,F
....................     lcddata    = ~lcd_ins_hthi;       
014E:  MOVFF  498,0D
0152:  COMF   0D,F
....................     xuat_glcd_lcd(); 
0154:  MOVLB  0
0156:  RCALL  011C
0158:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
020A:  MOVLB  4
020C:  MOVFF  48B,10
0210:  COMF   10,F
....................     glcddata    = ~glcd_ins_hthi;      
0212:  MOVFF  48C,0F
0216:  COMF   0F,F
....................     xuat_glcd_lcd(); 
0218:  MOVLB  0
021A:  RCALL  011C
021C:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
05F0:  MOVLB  4
05F2:  MOVFF  48E,490
05F6:  COMF   x90,F
05F8:  MOVFF  490,49E
05FC:  MOVLB  0
05FE:  RCALL  00C0
0600:  MOVLB  4
0602:  MOVFF  48F,490
0606:  COMF   x90,F
0608:  MOVFF  490,49E
060C:  MOVLB  0
060E:  RCALL  00C0
....................        
....................       mo_8_led_quet; 
0610:  BCF    05.4
....................       mo_ic_74573_b_thong_dl(); 
0612:  RCALL  0584
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0614:  BCF    F95.5
0616:  BSF    F8C.5
0618:  BCF    F95.5
061A:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
061C:  BCF    F95.0
061E:  BCF    F8C.0
0620:  GOTO   062E (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0624:  MOVLB  4
0626:  SETF   x8E
0628:  SETF   x8F
062A:  MOVLB  0
062C:  BRA    05F0
062E:  GOTO   065E (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
05B2:  CLRF   03
05B4:  MOVLB  4
05B6:  MOVF   x8F,W
05B8:  MOVLB  0
05BA:  RCALL  0026
05BC:  MOVWF  01
05BE:  MOVLB  4
05C0:  MOVWF  x91
05C2:  COMF   x91,F
05C4:  MOVFF  491,49E
05C8:  MOVLB  0
05CA:  RCALL  00C0
05CC:  MOVLB  4
05CE:  MOVFF  490,491
05D2:  COMF   x91,F
05D4:  MOVFF  491,49E
05D8:  MOVLB  0
05DA:  RCALL  00C0
....................       mo_8_led_quet; 
05DC:  BCF    05.4
....................       mo_ic_74573_b_thong_dl(); 
05DE:  RCALL  0584
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
05E0:  BCF    F95.5
05E2:  BSF    F8C.5
05E4:  BCF    F95.5
05E6:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
05E8:  BCF    F95.0
05EA:  BCF    F8C.0
05EC:  GOTO   0652 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0632:  CLRF   19
0634:  MOVF   19,W
0636:  SUBLW  07
0638:  BNC   0662
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
063A:  CLRF   03
063C:  MOVF   19,W
063E:  ADDLW  11
0640:  MOVWF  FE9
0642:  MOVLW  00
0644:  ADDWFC 03,W
0646:  MOVWF  FEA
0648:  MOVFF  FEF,490
064C:  MOVFF  19,48F
0650:  BRA    05B2
....................             delay_us(100); 
0652:  MOVLW  A6
0654:  MOVWF  00
0656:  DECFSZ 00,F
0658:  BRA    0656
065A:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
065C:  BRA    0624
065E:  INCF   19,F
0660:  BRA    0634
....................             } 
0662:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0F28:  MOVLB  4
0F2A:  CLRF   x8A
0F2C:  MOVF   x89,F
0F2E:  BNZ   0F36
0F30:  MOVF   x88,W
0F32:  SUBWF  x8A,W
0F34:  BC    0F42
....................       hien_thi_8led_7doan_quet_all(); 
0F36:  MOVLB  0
0F38:  CALL   0632
0F3C:  MOVLB  4
0F3E:  INCF   x8A,F
0F40:  BRA    0F2C
0F42:  MOVLB  0
0F44:  GOTO   12FC (RETURN)
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
0664:  MOVFF  07,488
0668:  MOVFF  08,489
....................       xuat_1byte(rbdc2);       
066C:  MOVFF  489,49E
0670:  RCALL  00C0
....................       xuat_1byte(rbdc1); 
0672:  MOVFF  488,49E
0676:  RCALL  00C0
....................       mo_relay_buzzer_dc; 
0678:  BCF    05.2
....................       mo_ic_74573_b_thong_dl(); 
067A:  RCALL  0584
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
067C:  BCF    F95.3
067E:  BSF    F8C.3
0680:  BCF    F95.3
0682:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
0684:  BCF    F95.0
0686:  BCF    F8C.0
0688:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
*
0692:  BSF    08.2
....................       xuat_buzzer_relay();          
0694:  RCALL  0664
0696:  GOTO   06D2 (RETURN)
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
*
068A:  BCF    08.2
....................       xuat_buzzer_relay();          
068C:  RCALL  0664
068E:  GOTO   06B4 (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0932:  INCF   41,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0934:  CLRF   1F
0936:  CLRF   1E
0938:  CLRF   1D
093A:  CLRF   1C
093C:  CLRF   23
093E:  CLRF   22
0940:  CLRF   21
0942:  MOVLW  01
0944:  MOVWF  20
0946:  MOVLW  80
0948:  MOVWF  27
094A:  CLRF   26
094C:  CLRF   25
094E:  CLRF   24
0950:  CLRF   2B
0952:  CLRF   2A
0954:  CLRF   29
0956:  CLRF   28
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
0958:  MOVWF  2F
095A:  CLRF   2E
095C:  CLRF   31
095E:  MOVLW  01
0960:  MOVWF  30
0962:  CLRF   33
0964:  CLRF   32
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
0966:  MOVLW  80
0968:  MOVWF  37
096A:  CLRF   36
096C:  CLRF   39
096E:  MOVLW  01
0970:  MOVWF  38
0972:  CLRF   3B
0974:  CLRF   3A
....................       zt=zp=0; 
0976:  CLRF   35
0978:  CLRF   34
097A:  MOVFF  35,2D
097E:  MOVFF  34,2C
....................       i32=32;j32=0;i16=16,j16=0; 
0982:  MOVLW  20
0984:  MOVWF  3F
0986:  CLRF   40
0988:  MOVLW  10
098A:  MOVWF  42
098C:  CLRF   43
....................       dem_led=0; 
098E:  CLRF   3E
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
0990:  CLRF   47
0992:  CLRF   46
0994:  CLRF   45
0996:  MOVLW  01
0998:  MOVWF  44
099A:  CLRF   4B
099C:  CLRF   4A
099E:  CLRF   49
09A0:  MOVWF  48
09A2:  SETF   4F
09A4:  SETF   4E
09A6:  SETF   4D
09A8:  MOVLW  FE
09AA:  MOVWF  4C
09AC:  MOVLW  01
09AE:  MOVWF  5C
09B0:  MOVWF  5D
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
09B2:  MOVLW  80
09B4:  MOVWF  53
09B6:  CLRF   52
09B8:  CLRF   51
09BA:  CLRF   50
09BC:  MOVWF  57
09BE:  CLRF   56
09C0:  CLRF   55
09C2:  CLRF   54
09C4:  MOVLW  7F
09C6:  MOVWF  5B
09C8:  SETF   5A
09CA:  SETF   59
09CC:  SETF   58
....................      tgdlay = 0; 
09CE:  CLRF   3D
09D0:  CLRF   3C
09D2:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
09EE:  MOVLB  4
09F0:  CLRF   x8D
09F2:  MOVF   x8C,W
09F4:  SUBWF  x8D,W
09F6:  BC    0A02
....................       hien_thi_8led_7doan_quet_all(); 
09F8:  MOVLB  0
09FA:  RCALL  0632
09FC:  MOVLB  4
09FE:  INCF   x8D,F
0A00:  BRA    09F2
....................       dem_led++; 
0A02:  INCF   3E,F
0A04:  MOVLB  0
0A06:  GOTO   0A24 (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
09D4:  MOVLB  4
09D6:  MOVF   x8C,F
09D8:  BZ    09E6
09DA:  MOVFF  48C,48D
09DE:  MOVLB  0
09E0:  CALL   0186
09E4:  MOVLB  4
....................       dem_led++; 
09E6:  INCF   3E,F
09E8:  MOVLB  0
09EA:  GOTO   0A24 (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
0A0A:  MOVLB  4
0A0C:  MOVF   x8B,F
0A0E:  BNZ   0A1C
0A10:  MOVFF  48A,48C
0A14:  MOVLB  0
0A16:  BRA    09D4
0A18:  MOVLB  0
0A1A:  BRA    0A24
....................    else              tang_dem_led_delay_1(dl); 
0A1C:  MOVFF  48A,48C
0A20:  MOVLB  0
0A22:  BRA    09EE
0A24:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
0916:  COMF   1C,F
0918:  COMF   1D,F
091A:  COMF   1E,F
091C:  COMF   1F,F
....................    xuat_32led_don_1dw(y);  
091E:  MOVFF  1F,48D
0922:  MOVFF  1E,48C
0926:  MOVFF  1D,48B
092A:  MOVFF  1C,48A
092E:  RCALL  08F2
0930:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
0A26:  DECFSZ 3C,W
0A28:  BRA    0A42
0A2A:  MOVF   3D,F
0A2C:  BNZ   0A42
0A2E:  MOVFF  1F,48D
0A32:  MOVFF  1E,48C
0A36:  MOVFF  1D,48B
0A3A:  MOVFF  1C,48A
0A3E:  RCALL  08F2
0A40:  BRA    0A78
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
0A42:  MOVF   3C,W
0A44:  SUBLW  32
0A46:  BNZ   0A50
0A48:  MOVF   3D,F
0A4A:  BNZ   0A50
0A4C:  RCALL  0916
0A4E:  BRA    0A78
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
0A50:  MOVF   3C,W
0A52:  SUBLW  64
0A54:  BNZ   0A5E
0A56:  MOVF   3D,F
0A58:  BNZ   0A5E
0A5A:  RCALL  0916
0A5C:  BRA    0A78
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
0A5E:  MOVF   3C,W
0A60:  SUBLW  96
0A62:  BNZ   0A6C
0A64:  MOVF   3D,F
0A66:  BNZ   0A6C
0A68:  RCALL  0916
0A6A:  BRA    0A78
....................       else if (tgdlay==200)   
0A6C:  MOVF   3C,W
0A6E:  SUBLW  C8
0A70:  BNZ   0A78
0A72:  MOVF   3D,F
0A74:  BNZ   0A78
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
0A76:  RCALL  0932
....................       } 
....................       tgdlay++; 
0A78:  INCF   3C,F
0A7A:  BTFSC  FD8.2
0A7C:  INCF   3D,F
....................       delay_chon(dl,chondelay); 
0A7E:  MOVFF  488,48A
0A82:  MOVFF  489,48B
0A86:  RCALL  0A0A
0A88:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
0A8A:  MOVF   3E,W
0A8C:  SUBLW  0F
0A8E:  BNC   0AD8
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
0A90:  MOVFF  35,493
0A94:  MOVFF  34,492
0A98:  MOVFF  2D,495
0A9C:  MOVFF  2C,494
0AA0:  RCALL  08CE
....................       zp= (zp<<1)+1;  
0AA2:  BCF    FD8.0
0AA4:  RLCF   34,W
0AA6:  MOVLB  4
0AA8:  MOVWF  x8A
0AAA:  RLCF   35,W
0AAC:  MOVWF  x8B
0AAE:  MOVLW  01
0AB0:  ADDWF  x8A,W
0AB2:  MOVWF  34
0AB4:  MOVLW  00
0AB6:  ADDWFC x8B,W
0AB8:  MOVWF  35
....................       zt= (zt>>1)+0x8000; 
0ABA:  BCF    FD8.0
0ABC:  RRCF   2D,W
0ABE:  MOVWF  x8B
0AC0:  RRCF   2C,W
0AC2:  MOVWF  2C
0AC4:  MOVLW  80
0AC6:  ADDWF  x8B,W
0AC8:  MOVWF  2D
....................       delay_chon(dl,chondelay); 
0ACA:  MOVFF  488,48A
0ACE:  MOVFF  489,48B
0AD2:  MOVLB  0
0AD4:  RCALL  0A0A
....................    } 
0AD6:  BRA    0B0A
....................    else  if (dem_led<32) 
0AD8:  MOVF   3E,W
0ADA:  SUBLW  1F
0ADC:  BNC   0B08
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
0ADE:  MOVFF  35,493
0AE2:  MOVFF  34,492
0AE6:  MOVFF  2D,495
0AEA:  MOVFF  2C,494
0AEE:  RCALL  08CE
....................       zp= (zp<<1);  
0AF0:  BCF    FD8.0
0AF2:  RLCF   34,F
0AF4:  RLCF   35,F
....................       zt= (zt>>1); 
0AF6:  BCF    FD8.0
0AF8:  RRCF   2D,F
0AFA:  RRCF   2C,F
....................       delay_chon(dl,chondelay); 
0AFC:  MOVFF  488,48A
0B00:  MOVFF  489,48B
0B04:  RCALL  0A0A
....................    } 
0B06:  BRA    0B0A
....................    else reset_toan_bo_bien(); 
0B08:  RCALL  0932
0B0A:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
0C12:  MOVF   3E,W
0C14:  SUBLW  0F
0C16:  BNC   0C4A
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
0C18:  MOVFF  35,493
0C1C:  MOVFF  34,492
0C20:  MOVFF  35,495
0C24:  MOVFF  34,494
0C28:  RCALL  08CE
....................       zp= (zp>>1)+0x8000; 
0C2A:  BCF    FD8.0
0C2C:  RRCF   35,W
0C2E:  MOVLB  4
0C30:  MOVWF  x8B
0C32:  RRCF   34,W
0C34:  MOVWF  34
0C36:  MOVLW  80
0C38:  ADDWF  x8B,W
0C3A:  MOVWF  35
....................       delay_chon(dl,chondelay); 
0C3C:  MOVFF  488,48A
0C40:  MOVFF  489,48B
0C44:  MOVLB  0
0C46:  RCALL  0A0A
....................    } 
0C48:  BRA    0C76
....................    else  if (dem_led<32) 
0C4A:  MOVF   3E,W
0C4C:  SUBLW  1F
0C4E:  BNC   0C74
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
0C50:  MOVFF  35,493
0C54:  MOVFF  34,492
0C58:  MOVFF  35,495
0C5C:  MOVFF  34,494
0C60:  RCALL  08CE
....................       zp= (zp>>1); 
0C62:  BCF    FD8.0
0C64:  RRCF   35,F
0C66:  RRCF   34,F
....................       delay_chon(dl,chondelay); 
0C68:  MOVFF  488,48A
0C6C:  MOVFF  489,48B
0C70:  RCALL  0A0A
....................     } 
0C72:  BRA    0C76
....................    else reset_toan_bo_bien(); 
0C74:  RCALL  0932
0C76:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
0B8E:  MOVF   3E,W
0B90:  SUBLW  1F
0B92:  BNC   0BE0
....................    {   
....................       xuat_32led_don_1dw(y); 
0B94:  MOVFF  1F,48D
0B98:  MOVFF  1E,48C
0B9C:  MOVFF  1D,48B
0BA0:  MOVFF  1C,48A
0BA4:  RCALL  08F2
....................       y= (y<<1)+1; 
0BA6:  BCF    FD8.0
0BA8:  RLCF   1C,W
0BAA:  MOVLB  4
0BAC:  MOVWF  x8B
0BAE:  RLCF   1D,W
0BB0:  MOVWF  x8C
0BB2:  RLCF   1E,W
0BB4:  MOVWF  x8D
0BB6:  RLCF   1F,W
0BB8:  MOVWF  x8E
0BBA:  MOVLW  01
0BBC:  ADDWF  x8B,W
0BBE:  MOVWF  1C
0BC0:  MOVLW  00
0BC2:  ADDWFC x8C,W
0BC4:  MOVWF  1D
0BC6:  MOVLW  00
0BC8:  ADDWFC x8D,W
0BCA:  MOVWF  1E
0BCC:  MOVLW  00
0BCE:  ADDWFC x8E,W
0BD0:  MOVWF  1F
....................       delay_chon(dl,chondelay); 
0BD2:  MOVFF  488,48A
0BD6:  MOVFF  489,48B
0BDA:  MOVLB  0
0BDC:  RCALL  0A0A
....................    } 
0BDE:  BRA    0C10
....................    else  if (dem_led<64) 
0BE0:  MOVF   3E,W
0BE2:  SUBLW  3F
0BE4:  BNC   0C0E
....................    {   
....................       xuat_32led_don_1dw(y);    
0BE6:  MOVFF  1F,48D
0BEA:  MOVFF  1E,48C
0BEE:  MOVFF  1D,48B
0BF2:  MOVFF  1C,48A
0BF6:  RCALL  08F2
....................       y= (y<<1);  
0BF8:  BCF    FD8.0
0BFA:  RLCF   1C,F
0BFC:  RLCF   1D,F
0BFE:  RLCF   1E,F
0C00:  RLCF   1F,F
....................       delay_chon(dl,chondelay); 
0C02:  MOVFF  488,48A
0C06:  MOVFF  489,48B
0C0A:  RCALL  0A0A
....................    }  
0C0C:  BRA    0C10
....................    else reset_toan_bo_bien(); 
0C0E:  RCALL  0932
0C10:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
0C78:  MOVF   3E,W
0C7A:  SUBLW  1F
0C7C:  BNC   0CC0
....................       {   
....................          xuat_32led_don_1dw(y); 
0C7E:  MOVFF  1F,48D
0C82:  MOVFF  1E,48C
0C86:  MOVFF  1D,48B
0C8A:  MOVFF  1C,48A
0C8E:  RCALL  08F2
....................          y= (y>>1)+0x80000000;  
0C90:  BCF    FD8.0
0C92:  RRCF   1F,W
0C94:  MOVLB  4
0C96:  MOVWF  x8E
0C98:  RRCF   1E,W
0C9A:  MOVWF  x8D
0C9C:  RRCF   1D,W
0C9E:  MOVWF  x8C
0CA0:  RRCF   1C,W
0CA2:  MOVWF  1C
0CA4:  MOVFF  48C,1D
0CA8:  MOVFF  48D,1E
0CAC:  MOVLW  80
0CAE:  ADDWF  x8E,W
0CB0:  MOVWF  1F
....................          delay_chon(dl,chondelay);       
0CB2:  MOVFF  488,48A
0CB6:  MOVFF  489,48B
0CBA:  MOVLB  0
0CBC:  RCALL  0A0A
....................       } 
0CBE:  BRA    0CF0
....................       else 
....................       if (dem_led<64) 
0CC0:  MOVF   3E,W
0CC2:  SUBLW  3F
0CC4:  BNC   0CEE
....................       {   
....................          xuat_32led_don_1dw(y);  
0CC6:  MOVFF  1F,48D
0CCA:  MOVFF  1E,48C
0CCE:  MOVFF  1D,48B
0CD2:  MOVFF  1C,48A
0CD6:  RCALL  08F2
....................          y= (y>>1); 
0CD8:  BCF    FD8.0
0CDA:  RRCF   1F,F
0CDC:  RRCF   1E,F
0CDE:  RRCF   1D,F
0CE0:  RRCF   1C,F
....................          delay_chon(dl,chondelay); 
0CE2:  MOVFF  488,48A
0CE6:  MOVFF  489,48B
0CEA:  RCALL  0A0A
....................       }  
0CEC:  BRA    0CF0
....................       else reset_toan_bo_bien(); 
0CEE:  RCALL  0932
0CF0:  GOTO   1716 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
0B0C:  BTFSC  3F.7
0B0E:  BRA    0B8A
0B10:  MOVF   3F,W
0B12:  SUBLW  00
0B14:  BC    0B8A
....................    { 
....................       if(j32<i32) 
0B16:  MOVF   40,W
0B18:  XORLW  80
0B1A:  MOVWF  00
0B1C:  MOVF   3F,W
0B1E:  XORLW  80
0B20:  SUBWF  00,W
0B22:  BC    0B64
....................       { 
....................          y = y_codinh|yp_chay; 
0B24:  MOVF   28,W
0B26:  IORWF  20,W
0B28:  MOVWF  1C
0B2A:  MOVF   29,W
0B2C:  IORWF  21,W
0B2E:  MOVWF  1D
0B30:  MOVF   2A,W
0B32:  IORWF  22,W
0B34:  MOVWF  1E
0B36:  MOVF   2B,W
0B38:  IORWF  23,W
0B3A:  MOVWF  1F
....................          xuat_32led_don_1dw(y); 
0B3C:  MOVFF  1F,48D
0B40:  MOVFF  1E,48C
0B44:  MOVFF  1D,48B
0B48:  MOVFF  1C,48A
0B4C:  RCALL  08F2
....................          delay_chon(dl,chondelay);        
0B4E:  MOVFF  488,48A
0B52:  MOVFF  489,48B
0B56:  RCALL  0A0A
....................          yp_chay = yp_chay <<1; 
0B58:  BCF    FD8.0
0B5A:  RLCF   20,F
0B5C:  RLCF   21,F
0B5E:  RLCF   22,F
0B60:  RLCF   23,F
....................          j32++; 
0B62:  INCF   40,F
....................       } 
....................       if (j32==i32)  
0B64:  MOVF   3F,W
0B66:  SUBWF  40,W
0B68:  BNZ   0B88
....................       { 
....................          i32--; 
0B6A:  DECF   3F,F
....................          j32=0;          
0B6C:  CLRF   40
....................          y_codinh=y; 
0B6E:  MOVFF  1F,2B
0B72:  MOVFF  1E,2A
0B76:  MOVFF  1D,29
0B7A:  MOVFF  1C,28
....................          yp_chay = 1; 
0B7E:  CLRF   23
0B80:  CLRF   22
0B82:  CLRF   21
0B84:  MOVLW  01
0B86:  MOVWF  20
....................       } 
....................    } 
0B88:  BRA    0B8C
....................    else reset_toan_bo_bien(); 
0B8A:  RCALL  0932
0B8C:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
015A:  BSF    5E.0
015C:  MOVFF  5E,497
0160:  MOVFF  496,498
0164:  RCALL  0146
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
0166:  BCF    5E.0
0168:  MOVFF  5E,497
016C:  MOVFF  496,498
0170:  RCALL  0146
0172:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0174:  BCF    5E.2
....................       lcd_xuat_8bit(lcd_data_x); 
0176:  MOVFF  48B,496
017A:  RCALL  015A
....................       delay_us(20); 
017C:  MOVLW  21
017E:  MOVWF  00
0180:  DECFSZ 00,F
0182:  BRA    0180
0184:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
029E:  BSF    5E.2
....................       lcd_xuat_8bit(lcd_data_x); 
02A0:  MOVFF  495,496
02A4:  RCALL  015A
....................       delay_us(20); 
02A6:  MOVLW  21
02A8:  MOVWF  00
02AA:  DECFSZ 00,F
02AC:  BRA    02AA
02AE:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
01AE:  BCF    5E.0
....................          lcd_rw = 0;  
01B0:  BCF    5E.1
....................          lcd_rs = 1;  
01B2:  BSF    5E.2
....................          lcd_p =0; 
01B4:  BCF    5E.3
....................          lcd_command(lcd_function_set);          
01B6:  MOVLW  38
01B8:  MOVLB  4
01BA:  MOVWF  x8B
01BC:  MOVLB  0
01BE:  RCALL  0174
....................          delay_us(40); 
01C0:  MOVLW  42
01C2:  MOVWF  00
01C4:  DECFSZ 00,F
01C6:  BRA    01C4
01C8:  NOP   
....................          lcd_command(lcd_display_control);    
01CA:  MOVLW  0C
01CC:  MOVLB  4
01CE:  MOVWF  x8B
01D0:  MOVLB  0
01D2:  RCALL  0174
....................          delay_us(40); 
01D4:  MOVLW  42
01D6:  MOVWF  00
01D8:  DECFSZ 00,F
01DA:  BRA    01D8
01DC:  NOP   
....................          lcd_command(lcd_clear_display);       
01DE:  MOVLW  01
01E0:  MOVLB  4
01E2:  MOVWF  x8B
01E4:  MOVLB  0
01E6:  RCALL  0174
....................          delay_ms(2); 
01E8:  MOVLW  02
01EA:  MOVLB  4
01EC:  MOVWF  x8D
01EE:  MOVLB  0
01F0:  RCALL  0186
....................          lcd_command(lcd_entry_mode);        
01F2:  MOVLW  06
01F4:  MOVLB  4
01F6:  MOVWF  x8B
01F8:  MOVLB  0
01FA:  RCALL  0174
....................          delay_us(40);                 
01FC:  MOVLW  42
01FE:  MOVWF  00
0200:  DECFSZ 00,F
0202:  BRA    0200
0204:  NOP   
0206:  GOTO   150C (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
0F48:  CLRF   03
0F4A:  MOVLB  4
0F4C:  MOVF   x88,W
0F4E:  MOVLB  0
0F50:  CALL   008E
0F54:  MOVLB  4
0F56:  ADDWF  x89,W
0F58:  MOVWF  x8A
0F5A:  MOVWF  x8B
0F5C:  MOVLB  0
0F5E:  CALL   0174
0F62:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
021E:  BSF    5F.2
0220:  MOVFF  5F,48B
0224:  MOVFF  48A,48C
0228:  RCALL  020A
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
022A:  BCF    5F.2
022C:  MOVFF  5F,48B
0230:  MOVFF  48A,48C
0234:  RCALL  020A
0236:  GOTO   0242 (RETURN)
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
023A:  BCF    5F.4
....................       glcd_xuat_8bit(glcd_data2);       
023C:  MOVFF  489,48A
0240:  BRA    021E
0242:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(glcd_data3);      
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
0244:  BSF    5F.0
....................          glcd_cs2 = 1; 
0246:  BSF    5F.1
....................          glcd_e  = 0; 
0248:  BCF    5F.2
....................          glcd_rw = 0;           
024A:  BCF    5F.3
....................          glcd_p =0;          
024C:  BCF    5F.5
....................          glcd_command(glcd_function_set_mode);          
024E:  MOVFF  488,489
0252:  RCALL  023A
....................          delay_us(10); 
0254:  MOVLW  10
0256:  MOVWF  00
0258:  DECFSZ 00,F
025A:  BRA    0258
025C:  NOP   
....................          glcd_command(glcd_cursor_display);        
025E:  MOVLW  0C
0260:  MOVLB  4
0262:  MOVWF  x89
0264:  MOVLB  0
0266:  RCALL  023A
....................          delay_us(10);     
0268:  MOVLW  10
026A:  MOVWF  00
026C:  DECFSZ 00,F
026E:  BRA    026C
0270:  NOP   
....................          glcd_command(glcd_clear_display);       
0272:  MOVLW  01
0274:  MOVLB  4
0276:  MOVWF  x89
0278:  MOVLB  0
027A:  RCALL  023A
....................          delay_ms(2); 
027C:  MOVLW  02
027E:  MOVLB  4
0280:  MOVWF  x8D
0282:  MOVLB  0
0284:  RCALL  0186
....................          glcd_command(glcd_entry_mode);       
0286:  MOVLW  06
0288:  MOVLB  4
028A:  MOVWF  x89
028C:  MOVLB  0
028E:  RCALL  023A
....................          delay_us(10);                           
0290:  MOVLW  10
0292:  MOVWF  00
0294:  DECFSZ 00,F
0296:  BRA    0294
0298:  NOP   
029A:  GOTO   1518 (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
....................   for (doc=0; doc < glcd_doc; doc++)  
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
....................     }  
....................   }  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
....................   doc = y;  
....................   ngang = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
....................       }  
....................     }  
....................     gdram_vdk.refresh = false;  
....................   }  
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio; 
.................... int8 dem = 0; 
.................... int16 lm35a = 0,lm35b = 0; 
.................... int1 ttqn = 0; 
.................... signed int8 max = 100,D,C,E; 
.................... int8 maxT = 40; 
.................... int16 conv = 1; 
.................... int8 row = 0; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0, j; 
.................... unsigned int16 kqadc; 
.................... float k_cach, clk_cach, kcs; 
....................  
.................... /*#int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
....................    set_timer1(3036); //3036 
.................... }*/ 
....................  
....................  
.................... void BaoChay(){ 
....................    if ((lm35a>maxT) && (lm35b>maxT)){ 
*
069A:  MOVLB  4
069C:  MOVF   x69,F
069E:  BNZ   06A6
06A0:  MOVF   x68,W
06A2:  SUBWF  x71,W
06A4:  BC    06B6
06A6:  MOVF   x6B,F
06A8:  BNZ   06B0
06AA:  MOVF   x6A,W
06AC:  SUBWF  x71,W
06AE:  BC    06B6
....................       triac_2_off(); 
06B0:  MOVLB  0
06B2:  BRA    068A
06B4:  MOVLB  4
....................    } 
....................    if ((lm35a<maxT - 5)  && (lm35b<maxT -5)){ 
06B6:  MOVLW  05
06B8:  SUBWF  x71,W
06BA:  MOVF   x69,F
06BC:  BNZ   06D4
06BE:  SUBWF  x68,W
06C0:  BC    06D4
06C2:  MOVLW  05
06C4:  SUBWF  x71,W
06C6:  MOVF   x6B,F
06C8:  BNZ   06D4
06CA:  SUBWF  x6A,W
06CC:  BC    06D4
....................       triac_2_on(); 
06CE:  MOVLB  0
06D0:  BRA    0692
06D2:  MOVLB  4
....................    } 
06D4:  MOVLB  0
06D6:  GOTO   15DC (RETURN)
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
....................    for (int i = 0; i<6;i++){ 
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
....................       lcd_data(lcd_so_x[lcd_so][i]); 
....................    } 
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
04FE:  MOVFF  463,488
0502:  MOVLW  0A
0504:  MOVLB  4
0506:  MOVWF  x89
0508:  MOVLB  0
050A:  RCALL  04B2
050C:  CLRF   03
050E:  MOVF   00,W
0510:  RCALL  0004
0512:  MOVWF  11
....................    led_7dq[1] = ma7doan[giay/10]; 
0514:  MOVFF  463,488
0518:  MOVLW  0A
051A:  MOVLB  4
051C:  MOVWF  x89
051E:  MOVLB  0
0520:  RCALL  04B2
0522:  CLRF   03
0524:  MOVF   01,W
0526:  RCALL  0004
0528:  MOVWF  12
....................    led_7dq[3] = ma7doan[phut%10]; 
052A:  MOVFF  465,488
052E:  MOVLW  0A
0530:  MOVLB  4
0532:  MOVWF  x89
0534:  MOVLB  0
0536:  RCALL  04B2
0538:  CLRF   03
053A:  MOVF   00,W
053C:  RCALL  0004
053E:  MOVWF  14
....................    led_7dq[4] = ma7doan[phut/10]; 
0540:  MOVFF  465,488
0544:  MOVLW  0A
0546:  MOVLB  4
0548:  MOVWF  x89
054A:  MOVLB  0
054C:  RCALL  04B2
054E:  CLRF   03
0550:  MOVF   01,W
0552:  RCALL  0004
0554:  MOVWF  15
....................    led_7dq[6] = ma7doan[gio%10]; 
0556:  MOVFF  466,488
055A:  MOVLW  0A
055C:  MOVLB  4
055E:  MOVWF  x89
0560:  MOVLB  0
0562:  RCALL  04B2
0564:  CLRF   03
0566:  MOVF   00,W
0568:  RCALL  0004
056A:  MOVWF  17
....................    led_7dq[7] = ma7doan[gio/10]; 
056C:  MOVFF  466,488
0570:  MOVLW  0A
0572:  MOVLB  4
0574:  MOVWF  x89
0576:  MOVLB  0
0578:  RCALL  04B2
057A:  CLRF   03
057C:  MOVF   01,W
057E:  RCALL  0004
0580:  MOVWF  18
0582:  RETURN 0
....................    /*lcd_command(lcd_addr_line1); 
....................    printf(lcd_data,"NHIET DO LM35B: %ld",lm35a); 
....................    lcd_command(lcd_addr_line2); 
....................    printf(lcd_data,"NHIET DO LM35A: %ld",lm35b); */ 
.................... } 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    unsigned int8 DM = (unsigned int8)kcs; 
....................    D = DM/100; 
....................    C = DM/10%10; 
....................    E = DM%10; 
....................    LCD_SO_LON(D,2,0); 
....................    LCD_SO_LON(C,2,3); 
....................    LCD_SO_LON(E,2,7); 
.................... }*/ 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    lcd_command(lcd_addr_line3); 
....................    printf(lcd_data,"DEM SAN PHAM: %d",count); 
.................... }*/ 
....................  
.................... void read_temp(){ 
....................    set_adc_channel(0);  
*
0E52:  MOVLW  00
0E54:  MOVWF  01
0E56:  MOVF   FC2,W
0E58:  ANDLW  C3
0E5A:  IORWF  01,W
0E5C:  MOVWF  FC2
....................    lm35a = read_adc()/2.046; 
0E5E:  BSF    FC2.1
0E60:  BTFSC  FC2.1
0E62:  BRA    0E60
0E64:  MOVFF  FC4,489
0E68:  MOVFF  FC3,488
0E6C:  MOVFF  FC4,48B
0E70:  MOVFF  FC3,48A
0E74:  MOVLB  0
0E76:  RCALL  06DA
0E78:  MOVFF  03,48D
0E7C:  MOVFF  02,48C
0E80:  MOVFF  01,48B
0E84:  MOVFF  00,48A
0E88:  MOVLW  AA
0E8A:  MOVLB  4
0E8C:  MOVWF  x91
0E8E:  MOVLW  F1
0E90:  MOVWF  x90
0E92:  MOVLW  02
0E94:  MOVWF  x8F
0E96:  MOVLW  80
0E98:  MOVWF  x8E
0E9A:  MOVLB  0
0E9C:  RCALL  0CF4
0E9E:  MOVFF  03,491
0EA2:  MOVFF  02,490
0EA6:  MOVFF  01,48F
0EAA:  MOVFF  00,48E
0EAE:  CALL   02B0
0EB2:  MOVFF  02,469
0EB6:  MOVFF  01,468
....................    set_adc_channel(1); 
0EBA:  MOVLW  04
0EBC:  MOVWF  01
0EBE:  MOVF   FC2,W
0EC0:  ANDLW  C3
0EC2:  IORWF  01,W
0EC4:  MOVWF  FC2
....................    lm35b = read_adc()/2.046; 
0EC6:  BSF    FC2.1
0EC8:  BTFSC  FC2.1
0ECA:  BRA    0EC8
0ECC:  MOVFF  FC4,489
0ED0:  MOVFF  FC3,488
0ED4:  MOVFF  FC4,48B
0ED8:  MOVFF  FC3,48A
0EDC:  MOVLB  0
0EDE:  CALL   06DA
0EE2:  MOVFF  03,48D
0EE6:  MOVFF  02,48C
0EEA:  MOVFF  01,48B
0EEE:  MOVFF  00,48A
0EF2:  MOVLW  AA
0EF4:  MOVLB  4
0EF6:  MOVWF  x91
0EF8:  MOVLW  F1
0EFA:  MOVWF  x90
0EFC:  MOVLW  02
0EFE:  MOVWF  x8F
0F00:  MOVLW  80
0F02:  MOVWF  x8E
0F04:  MOVLB  0
0F06:  RCALL  0CF4
0F08:  MOVFF  03,491
0F0C:  MOVFF  02,490
0F10:  MOVFF  01,48F
0F14:  MOVFF  00,48E
0F18:  CALL   02B0
0F1C:  MOVFF  02,46B
0F20:  MOVFF  01,46A
0F24:  GOTO   174C (RETURN)
.................... } 
....................  
.................... void phim_up() { 
....................    if (!input(bt0)) { 
*
0806:  BSF    F93.5
0808:  BTFSC  F81.5
080A:  BRA    086E
....................       delay_ms(5); 
080C:  MOVLW  05
080E:  MOVLB  4
0810:  MOVWF  x8D
0812:  MOVLB  0
0814:  RCALL  0186
....................       if (!input(bt0)) 
0816:  BSF    F93.5
0818:  BTFSC  F81.5
081A:  BRA    086E
....................       { 
....................          row++; 
081C:  MOVLB  4
081E:  INCF   x74,F
....................          conv *= kcs; 
0820:  MOVFF  473,48B
0824:  MOVFF  472,48A
0828:  MOVLB  0
082A:  RCALL  06DA
082C:  MOVFF  03,498
0830:  MOVFF  02,497
0834:  MOVFF  01,496
0838:  MOVFF  00,495
083C:  MOVFF  486,49C
0840:  MOVFF  485,49B
0844:  MOVFF  484,49A
0848:  MOVFF  483,499
084C:  RCALL  0710
084E:  MOVFF  03,491
0852:  MOVFF  02,490
0856:  MOVFF  01,48F
085A:  MOVFF  00,48E
085E:  RCALL  02B0
0860:  MOVFF  02,473
0864:  MOVFF  01,472
....................          while(!input(bt0)); 
0868:  BSF    F93.5
086A:  BTFSS  F81.5
086C:  BRA    0868
....................       } 
....................    } 
086E:  GOTO   15E0 (RETURN)
.................... } 
.................... void phim_dw() { 
....................    if (!input(bt1)) { 
0872:  BSF    F93.4
0874:  BTFSC  F81.4
0876:  BRA    089C
....................       delay_ms(5); 
0878:  MOVLW  05
087A:  MOVLB  4
087C:  MOVWF  x8D
087E:  MOVLB  0
0880:  RCALL  0186
....................       if (!input(bt1)) 
0882:  BSF    F93.4
0884:  BTFSC  F81.4
0886:  BRA    089C
....................       { 
....................          lcd_command(lcd_clear_display); 
0888:  MOVLW  01
088A:  MOVLB  4
088C:  MOVWF  x8B
088E:  MOVLB  0
0890:  RCALL  0174
....................          row = 0; 
0892:  MOVLB  4
0894:  CLRF   x74
....................          while (!input(bt1)); 
0896:  BSF    F93.4
0898:  BTFSS  F81.4
089A:  BRA    0896
089C:  MOVLB  0
....................       } 
....................    } 
089E:  GOTO   15E4 (RETURN)
.................... } 
....................  
.................... void dispDistance(float tam){ 
*
048A:  MOVFF  48B,491
048E:  MOVFF  48A,490
0492:  MOVFF  489,48F
0496:  MOVFF  488,48E
049A:  RCALL  02B0
049C:  MOVFF  02,48D
04A0:  MOVFF  01,48C
....................    unsigned int16 x = (unsigned int16)tam; 
....................    xuat_4led_7doan_giaima_xoa_so0(x); 
04A4:  MOVFF  48D,48F
04A8:  MOVFF  48C,48E
04AC:  BRA    035E
04AE:  GOTO   1582 (RETURN)
.................... } 
....................  
.................... void readSR_04() { 
....................    delay_quet_8led(30); 
*
12F0:  MOVLB  4
12F2:  CLRF   x89
12F4:  MOVLW  1E
12F6:  MOVWF  x88
12F8:  MOVLB  0
12FA:  BRA    0F28
....................  
....................    output_high(trigger); 
12FC:  BCF    F96.2
12FE:  BSF    F8D.2
....................    delay_ms(10); 
1300:  MOVLW  0A
1302:  MOVLB  4
1304:  MOVWF  x8D
1306:  MOVLB  0
1308:  CALL   0186
....................    output_low(trigger); 
130C:  BCF    F96.2
130E:  BCF    F8D.2
....................  
....................    set_timer1(0); 
1310:  CLRF   FCF
1312:  CLRF   FCE
....................    while (!input(echo)); 
1314:  BSF    F96.1
1316:  BTFSS  F84.1
1318:  BRA    1314
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_4); 
131A:  MOVLW  A5
131C:  MOVWF  FCD
....................  
....................    while(input(echo)); 
131E:  BSF    F96.1
1320:  BTFSC  F84.1
1322:  BRA    131E
....................    kcs = get_timer1(); 
1324:  MOVF   FCE,W
1326:  MOVFF  FCF,03
132A:  MOVLB  4
132C:  MOVWF  x8A
132E:  MOVFF  FCF,48B
1332:  MOVLB  0
1334:  CALL   06DA
1338:  MOVFF  03,486
133C:  MOVFF  02,485
1340:  MOVFF  01,484
1344:  MOVFF  00,483
....................    set_timer1(T1_DISABLED); 
1348:  CLRF   FCF
134A:  CLRF   FCE
....................  
....................    kcs = kcs*0.8; 
134C:  MOVFF  486,498
1350:  MOVFF  485,497
1354:  MOVFF  484,496
1358:  MOVFF  483,495
135C:  MOVLW  CD
135E:  MOVLB  4
1360:  MOVWF  x9C
1362:  MOVLW  CC
1364:  MOVWF  x9B
1366:  MOVLW  4C
1368:  MOVWF  x9A
136A:  MOVLW  7E
136C:  MOVWF  x99
136E:  MOVLB  0
1370:  CALL   0710
1374:  MOVFF  03,486
1378:  MOVFF  02,485
137C:  MOVFF  01,484
1380:  MOVFF  00,483
....................    kcs = (kcs/58); 
1384:  MOVFF  486,48D
1388:  MOVFF  485,48C
138C:  MOVFF  484,48B
1390:  MOVFF  483,48A
1394:  MOVLB  4
1396:  CLRF   x91
1398:  CLRF   x90
139A:  MOVLW  68
139C:  MOVWF  x8F
139E:  MOVLW  84
13A0:  MOVWF  x8E
13A2:  MOVLB  0
13A4:  RCALL  0CF4
13A6:  MOVFF  03,486
13AA:  MOVFF  02,485
13AE:  MOVFF  01,484
13B2:  MOVFF  00,483
....................     
....................    if (row != 2)  
13B6:  MOVLB  4
13B8:  MOVF   x74,W
13BA:  SUBLW  02
13BC:  BZ    13E8
....................    { 
....................       lcd_goto_xy(row,0); 
13BE:  MOVFF  474,488
13C2:  CLRF   x89
13C4:  MOVLB  0
13C6:  RCALL  0F48
....................       printf(lcd_data,"%3.0f",kcs); 
13C8:  MOVLW  02
13CA:  MOVWF  FE9
13CC:  MOVFF  486,48B
13D0:  MOVFF  485,48A
13D4:  MOVFF  484,489
13D8:  MOVFF  483,488
13DC:  MOVLB  4
13DE:  CLRF   x8C
13E0:  MOVLB  0
13E2:  BRA    103C
....................    } 
13E4:  BRA    1400
13E6:  MOVLB  4
....................    else 
....................    { 
....................       lcd_goto_xy(row,0); 
13E8:  MOVFF  474,488
13EC:  CLRF   x89
13EE:  MOVLB  0
13F0:  RCALL  0F48
....................       printf(lcd_data,"%ld",conv);       
13F2:  MOVLW  10
13F4:  MOVWF  FE9
13F6:  MOVFF  473,489
13FA:  MOVFF  472,488
13FE:  BRA    11EE
....................    } 
1400:  GOTO   1772 (RETURN)
....................     
.................... } 
....................  
.................... void readGP2D12() { 
....................    set_adc_channel(2); 
....................    kqadc = 0; 
....................    for (j = 0; j<5; j++){ 
....................       kqadc = kqadc + read_adc(); 
....................       delay_quet_8led(1); 
....................    } 
....................    kqadc = kqadc /5; 
....................    k_cach = pow(4277/kqadc,1.106); 
....................    if (k_cach >80) k_cach = 80; 
.................... } 
....................  
....................  
.................... void main() 
1404:  CLRF   FF8
1406:  BCF    FD0.7
1408:  BSF    F93.1
140A:  BSF    F93.0
140C:  MOVLW  31
140E:  MOVWF  FC8
1410:  MOVLW  28
1412:  MOVWF  FC6
1414:  BSF    FC7.7
1416:  BCF    FC7.6
1418:  CLRF   06
141A:  CLRF   0D
141C:  CLRF   0E
141E:  CLRF   0F
1420:  CLRF   10
1422:  CLRF   19
1424:  CLRF   1A
1426:  CLRF   1B
1428:  CLRF   1F
142A:  CLRF   1E
142C:  CLRF   1D
142E:  CLRF   1C
1430:  CLRF   23
1432:  CLRF   22
1434:  CLRF   21
1436:  MOVLW  01
1438:  MOVWF  20
143A:  MOVLW  80
143C:  MOVWF  27
143E:  CLRF   26
1440:  CLRF   25
1442:  CLRF   24
1444:  CLRF   2B
1446:  CLRF   2A
1448:  CLRF   29
144A:  CLRF   28
144C:  MOVWF  2F
144E:  CLRF   2E
1450:  CLRF   31
1452:  MOVLW  01
1454:  MOVWF  30
1456:  CLRF   33
1458:  CLRF   32
145A:  MOVLW  80
145C:  MOVWF  37
145E:  CLRF   36
1460:  CLRF   39
1462:  MOVLW  01
1464:  MOVWF  38
1466:  CLRF   3B
1468:  CLRF   3A
146A:  CLRF   3D
146C:  CLRF   3C
146E:  CLRF   3E
1470:  MOVLW  20
1472:  MOVWF  3F
1474:  CLRF   40
1476:  MOVLW  01
1478:  MOVWF  41
147A:  MOVLW  10
147C:  MOVWF  42
147E:  CLRF   43
1480:  CLRF   47
1482:  CLRF   46
1484:  CLRF   45
1486:  MOVLW  01
1488:  MOVWF  44
148A:  CLRF   4B
148C:  CLRF   4A
148E:  CLRF   49
1490:  MOVWF  48
1492:  SETF   4F
1494:  SETF   4E
1496:  SETF   4D
1498:  MOVLW  FE
149A:  MOVWF  4C
149C:  MOVLW  80
149E:  MOVWF  53
14A0:  CLRF   52
14A2:  CLRF   51
14A4:  CLRF   50
14A6:  MOVWF  57
14A8:  CLRF   56
14AA:  CLRF   55
14AC:  CLRF   54
14AE:  MOVLW  7F
14B0:  MOVWF  5B
14B2:  SETF   5A
14B4:  SETF   59
14B6:  SETF   58
14B8:  MOVLW  01
14BA:  MOVWF  5C
14BC:  MOVWF  5D
14BE:  MOVLB  4
14C0:  CLRF   x67
14C2:  CLRF   x69
14C4:  CLRF   x68
14C6:  CLRF   x6B
14C8:  CLRF   x6A
14CA:  BCF    x6C.0
14CC:  MOVLW  64
14CE:  MOVWF  x6D
14D0:  MOVLW  28
14D2:  MOVWF  x71
14D4:  CLRF   x73
14D6:  MOVLW  01
14D8:  MOVWF  x72
14DA:  CLRF   x74
14DC:  CLRF   x75
14DE:  CLRF   x76
14E0:  CLRF   x77
14E2:  MOVF   FC1,W
14E4:  ANDLW  C0
14E6:  IORLW  0F
14E8:  MOVWF  FC1
14EA:  MOVLW  07
14EC:  MOVWF  FB4
14EE:  SETF   11
14F0:  SETF   12
14F2:  SETF   13
14F4:  SETF   14
14F6:  SETF   15
14F8:  SETF   16
14FA:  SETF   17
14FC:  SETF   18
.................... { 
....................    set_up_port_ic_chot(); 
14FE:  MOVLB  0
1500:  GOTO   00A2
....................    set_tris_b(0x3c); 
1504:  MOVLW  3C
1506:  MOVWF  F93
....................    setup_lcd(); 
1508:  GOTO   01AE
....................    setup_glcd(glcd_graphic_mode); 
150C:  MOVLW  36
150E:  MOVLB  4
1510:  MOVWF  x88
1512:  MOVLB  0
1514:  GOTO   0244
....................  
....................  
....................  
....................    lcd_command(0x40); 
1518:  MOVLW  40
151A:  MOVLB  4
151C:  MOVWF  x8B
151E:  MOVLB  0
1520:  CALL   0174
....................    for (int i = 0; i<64;i++){ 
1524:  MOVLB  4
1526:  CLRF   x87
1528:  MOVF   x87,W
152A:  SUBLW  3F
152C:  BNC   154A
....................       lcd_data(lcd_ma_8doan[i]); 
152E:  CLRF   03
1530:  MOVF   x87,W
1532:  MOVLB  0
1534:  CALL   003E
1538:  MOVLB  4
153A:  MOVWF  x88
153C:  MOVWF  x95
153E:  MOVLB  0
1540:  CALL   029E
1544:  MOVLB  4
1546:  INCF   x87,F
1548:  BRA    1528
....................    } 
....................  
....................  
....................    setup_adc(ADC_CLOCK_DIV_32); 
154A:  MOVF   FC0,W
154C:  ANDLW  C0
154E:  IORLW  02
1550:  MOVWF  FC0
1552:  BSF    FC0.7
1554:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN2|VSS_VDD); 
1556:  MOVF   FC1,W
1558:  ANDLW  C0
155A:  IORLW  0C
155C:  MOVWF  FC1
....................    set_adc_channel(2); 
155E:  MOVLW  08
1560:  MOVWF  01
1562:  MOVF   FC2,W
1564:  ANDLW  C3
1566:  IORWF  01,W
1568:  MOVWF  FC2
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
156A:  MOVLW  A8
156C:  MOVWF  FD5
....................    set_timer0(0);    
156E:  CLRF   FD7
1570:  CLRF   FD6
....................    setup_timer_1(T1_DISABLED); 
1572:  CLRF   FCD
....................    //set_timer1(3036); // 3036 
....................    dispDistance(0); 
1574:  CLRF   x8B
1576:  CLRF   x8A
1578:  CLRF   x89
157A:  CLRF   x88
157C:  MOVLB  0
157E:  GOTO   048A
....................    enable_interrupts(GLOBAL); 
1582:  MOVLW  C0
1584:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
1586:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
1588:  MOVLB  4
158A:  CLRF   x63
....................    bdn = 0; 
158C:  CLRF   x64
....................    phut = 29; 
158E:  MOVLW  1D
1590:  MOVWF  x65
....................    gio = 15; 
1592:  MOVLW  0F
1594:  MOVWF  x66
....................    giai_ma(); 
1596:  MOVLB  0
1598:  CALL   04FE
....................    while(TRUE) 
....................    { 
....................       if (bdn<50) { 
159C:  MOVLB  4
159E:  BTFSC  x64.7
15A0:  BRA    15AA
15A2:  MOVF   x64,W
15A4:  SUBLW  31
15A6:  BTFSS  FD8.0
15A8:  BRA    1740
....................          hien_thi_8led_7doan_quet_all();      
15AA:  MOVLB  0
15AC:  CALL   0632
....................          count = get_timer0(); 
15B0:  MOVF   FD6,W
15B2:  MOVLB  4
15B4:  MOVWF  x75
....................          if (count != countT) { 
15B6:  MOVF   x76,W
15B8:  SUBWF  x75,W
15BA:  BZ    15D6
....................             countT = count;      
15BC:  MOVFF  475,476
....................             if (count >= max+1) {set_timer0(1);}    
15C0:  MOVLW  01
15C2:  ADDWF  x6D,W
15C4:  MOVWF  00
15C6:  BTFSC  FE8.7
15C8:  BRA    15D0
15CA:  MOVF   00,W
15CC:  SUBWF  x75,W
15CE:  BNC   15D6
15D0:  CLRF   FD7
15D2:  MOVLW  01
15D4:  MOVWF  FD6
....................          } 
....................          BaoChay(); 
15D6:  MOVLB  0
15D8:  GOTO   069A
....................          phim_up(); 
15DC:  GOTO   0806
....................          phim_dw(); 
15E0:  GOTO   0872
....................          if(ttct_td==1) sang_tat_32led(10,1); 
15E4:  DECFSZ 41,W
15E6:  BRA    15F8
15E8:  MOVLW  0A
15EA:  MOVLB  4
15EC:  MOVWF  x88
15EE:  MOVLW  01
15F0:  MOVWF  x89
15F2:  MOVLB  0
15F4:  CALL   0A26
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(10,1); 
15F8:  MOVF   41,W
15FA:  SUBLW  02
15FC:  BNZ   160E
15FE:  MOVLW  0A
1600:  MOVLB  4
1602:  MOVWF  x88
1604:  MOVLW  01
1606:  MOVWF  x89
1608:  MOVLB  0
160A:  CALL   0A8A
....................          if(ttct_td==3) sang_don_pst_32led(10,1); 
160E:  MOVF   41,W
1610:  SUBLW  03
1612:  BNZ   1624
1614:  MOVLW  0A
1616:  MOVLB  4
1618:  MOVWF  x88
161A:  MOVLW  01
161C:  MOVWF  x89
161E:  MOVLB  0
1620:  CALL   0B0C
....................          if(ttct_td==4) sang_tat_dan_pst_32led(10,1); 
1624:  MOVF   41,W
1626:  SUBLW  04
1628:  BNZ   163A
162A:  MOVLW  0A
162C:  MOVLB  4
162E:  MOVWF  x88
1630:  MOVLW  01
1632:  MOVWF  x89
1634:  MOVLB  0
1636:  CALL   0B8E
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(10,1); 
163A:  MOVF   41,W
163C:  SUBLW  05
163E:  BNZ   1650
1640:  MOVLW  0A
1642:  MOVLB  4
1644:  MOVWF  x88
1646:  MOVLW  01
1648:  MOVWF  x89
164A:  MOVLB  0
164C:  CALL   0C12
....................          if(ttct_td==6) sang_don_pst_32led(10,1); 
1650:  MOVF   41,W
1652:  SUBLW  06
1654:  BNZ   1666
1656:  MOVLW  0A
1658:  MOVLB  4
165A:  MOVWF  x88
165C:  MOVLW  01
165E:  MOVWF  x89
1660:  MOVLB  0
1662:  CALL   0B0C
....................          if(ttct_td==7) sang_don_pst_32led(10,1); 
1666:  MOVF   41,W
1668:  SUBLW  07
166A:  BNZ   167C
166C:  MOVLW  0A
166E:  MOVLB  4
1670:  MOVWF  x88
1672:  MOVLW  01
1674:  MOVWF  x89
1676:  MOVLB  0
1678:  CALL   0B0C
....................          if(ttct_td==8) sang_tat_32led(10,1); 
167C:  MOVF   41,W
167E:  SUBLW  08
1680:  BNZ   1692
1682:  MOVLW  0A
1684:  MOVLB  4
1686:  MOVWF  x88
1688:  MOVLW  01
168A:  MOVWF  x89
168C:  MOVLB  0
168E:  CALL   0A26
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(10,1); 
1692:  MOVF   41,W
1694:  SUBLW  09
1696:  BNZ   16A8
1698:  MOVLW  0A
169A:  MOVLB  4
169C:  MOVWF  x88
169E:  MOVLW  01
16A0:  MOVWF  x89
16A2:  MOVLB  0
16A4:  CALL   0A8A
....................          if(ttct_td==10) sang_don_pst_32led(10,1); 
16A8:  MOVF   41,W
16AA:  SUBLW  0A
16AC:  BNZ   16BE
16AE:  MOVLW  0A
16B0:  MOVLB  4
16B2:  MOVWF  x88
16B4:  MOVLW  01
16B6:  MOVWF  x89
16B8:  MOVLB  0
16BA:  CALL   0B0C
....................          if(ttct_td==11) sang_tat_dan_pst_32led(10,1); 
16BE:  MOVF   41,W
16C0:  SUBLW  0B
16C2:  BNZ   16D4
16C4:  MOVLW  0A
16C6:  MOVLB  4
16C8:  MOVWF  x88
16CA:  MOVLW  01
16CC:  MOVWF  x89
16CE:  MOVLB  0
16D0:  CALL   0B8E
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(10,1); 
16D4:  MOVF   41,W
16D6:  SUBLW  0C
16D8:  BNZ   16EA
16DA:  MOVLW  0A
16DC:  MOVLB  4
16DE:  MOVWF  x88
16E0:  MOVLW  01
16E2:  MOVWF  x89
16E4:  MOVLB  0
16E6:  CALL   0C12
....................          if(ttct_td==13) sang_tat_dan_pst_32led(10,1); 
16EA:  MOVF   41,W
16EC:  SUBLW  0D
16EE:  BNZ   1700
16F0:  MOVLW  0A
16F2:  MOVLB  4
16F4:  MOVWF  x88
16F6:  MOVLW  01
16F8:  MOVWF  x89
16FA:  MOVLB  0
16FC:  CALL   0B8E
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(10,1); 
1700:  MOVF   41,W
1702:  SUBLW  0E
1704:  BNZ   1716
1706:  MOVLW  0A
1708:  MOVLB  4
170A:  MOVWF  x88
170C:  MOVLW  01
170E:  MOVWF  x89
1710:  MOVLB  0
1712:  GOTO   0C78
....................          if(ttct_td==15) sang_don_pst_32led(10,1); 
1716:  MOVF   41,W
1718:  SUBLW  0F
171A:  BNZ   172C
171C:  MOVLW  0A
171E:  MOVLB  4
1720:  MOVWF  x88
1722:  MOVLW  01
1724:  MOVWF  x89
1726:  MOVLB  0
1728:  CALL   0B0C
....................          if(ttct_td>15) ttct_td =1; 
172C:  BTFSC  41.7
172E:  BRA    173A
1730:  MOVF   41,W
1732:  SUBLW  0F
1734:  BC    173A
1736:  MOVLW  01
1738:  MOVWF  41
....................          bdn++;       
173A:  MOVLB  4
173C:  INCF   x64,F
....................       } 
173E:  BRA    1774
....................       else  
....................       { 
....................          bdn = bdn - 50; 
1740:  MOVLW  32
1742:  SUBWF  x64,F
....................          giay++;  
1744:  INCF   x63,F
....................          read_temp(); 
1746:  MOVLB  0
1748:  GOTO   0E52
....................             if (giay==60) { giay = 0; phut++; 
174C:  MOVLB  4
174E:  MOVF   x63,W
1750:  SUBLW  3C
1752:  BNZ   176A
1754:  CLRF   x63
1756:  INCF   x65,F
....................                if (phut == 60) { phut = 0; gio++;  
1758:  MOVF   x65,W
175A:  SUBLW  3C
175C:  BNZ   176A
175E:  CLRF   x65
1760:  INCF   x66,F
....................                   if (gio == 24) gio = 0; 
1762:  MOVF   x66,W
1764:  SUBLW  18
1766:  BNZ   176A
1768:  CLRF   x66
....................                }  
....................             } 
....................          giai_ma(); 
176A:  MOVLB  0
176C:  CALL   04FE
....................          readSR_04(); 
1770:  BRA    12F0
1772:  MOVLB  4
....................       } 
1774:  BRA    159E
....................    }            
.................... } 
....................  
1776:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
