CCS PCH C Compiler, Version 5.078, 43599               07-Dec-20 15:20

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\704\704.lst

               ROM used:   10704 bytes (33%)
                           Largest free fragment is 22060
               RAM used:   1180 (58%) at main() level
                           1254 (61%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   251E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   019E
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 00,01
00FA:  DATA 02,05
00FC:  DATA 03,04
00FE:  DATA 01,02
0100:  DATA 20,03
0102:  DATA 07,03
0104:  DATA 06,06
0106:  DATA 02,05
0108:  DATA 03,03
010A:  DATA 06,06
010C:  DATA 02,03
010E:  DATA 03,04
0110:  DATA 07,03
0112:  DATA 07,20
0114:  DATA 20,07
0116:  DATA 07,06
0118:  DATA 06,03
011A:  DATA 03,04
011C:  DATA 00,06
011E:  DATA 06,05
0120:  DATA 03,04
0122:  DATA 01,01
0124:  DATA 07,20
0126:  DATA 20,07
0128:  DATA 00,06
012A:  DATA 02,05
012C:  DATA 03,04
012E:  DATA 00,06
0130:  DATA 02,03
0132:  DATA 03,04
0134:  DATA 20,20
0136:  DATA 20,20
0138:  DATA 20,20
013A:  CLRF   FF7
013C:  ADDLW  4A
013E:  MOVWF  FF6
0140:  MOVLW  01
0142:  ADDWFC FF7,F
0144:  TBLRD*+
0146:  MOVF   FF5,W
0148:  RETURN 0
014A:  DATA 07,0F
014C:  DATA 1F,1F
014E:  DATA 1F,1F
0150:  DATA 1F,1F
0152:  DATA 1F,1F
0154:  DATA 1F,00
0156:  DATA 00,00
0158:  DATA 00,00
015A:  DATA 1C,1E
015C:  DATA 1F,1F
015E:  DATA 1F,1F
0160:  DATA 1F,1F
0162:  DATA 00,00
0164:  DATA 00,00
0166:  DATA 00,1F
0168:  DATA 1F,1F
016A:  DATA 1F,1F
016C:  DATA 1F,1F
016E:  DATA 1F,1F
0170:  DATA 1E,1C
0172:  DATA 1F,1F
0174:  DATA 1F,1F
0176:  DATA 1F,1F
0178:  DATA 0F,07
017A:  DATA 1F,1F
017C:  DATA 1F,00
017E:  DATA 00,00
0180:  DATA 1F,1F
0182:  DATA 1F,1F
0184:  DATA 1F,1F
0186:  DATA 1F,1F
0188:  DATA 1F,1F
018A:  CLRF   FF7
018C:  ADDLW  9A
018E:  MOVWF  FF6
0190:  MOVLW  01
0192:  ADDWFC FF7,F
0194:  TBLRD*+
0196:  MOVF   FF5,W
0198:  RETURN 0
019A:  DATA 80,C0
019C:  DATA 94,D4
*
01B2:  DATA 2A,2A
01B4:  DATA 44,45
01B6:  DATA 4D,20
01B8:  DATA 53,41
01BA:  DATA 4E,20
01BC:  DATA 50,48
01BE:  DATA 41,4D
01C0:  DATA 2A,2A
01C2:  DATA 20,00
*
03BC:  MOVLB  4
03BE:  MOVF   xBB,W
03C0:  MULWF  xBD
03C2:  MOVFF  FF3,01
03C6:  MOVFF  FF4,00
03CA:  MULWF  xBE
03CC:  MOVF   FF3,W
03CE:  ADDWF  00,F
03D0:  MOVF   xBC,W
03D2:  MULWF  xBD
03D4:  MOVF   FF3,W
03D6:  ADDWFC 00,W
03D8:  MOVWF  02
03DA:  MOVLB  0
03DC:  RETURN 0
*
06A4:  CLRF   00
06A6:  CLRF   01
06A8:  MOVLB  4
06AA:  MOVF   xA4,W
06AC:  BCF    FD8.0
06AE:  BTFSC  xA5.0
06B0:  ADDWF  00,F
06B2:  RRCF   00,F
06B4:  RRCF   01,F
06B6:  BTFSC  xA5.1
06B8:  ADDWF  00,F
06BA:  RRCF   00,F
06BC:  RRCF   01,F
06BE:  BTFSC  xA5.2
06C0:  ADDWF  00,F
06C2:  RRCF   00,F
06C4:  RRCF   01,F
06C6:  BTFSC  xA5.3
06C8:  ADDWF  00,F
06CA:  RRCF   00,F
06CC:  RRCF   01,F
06CE:  BTFSC  xA5.4
06D0:  ADDWF  00,F
06D2:  RRCF   00,F
06D4:  RRCF   01,F
06D6:  BTFSC  xA5.5
06D8:  ADDWF  00,F
06DA:  RRCF   00,F
06DC:  RRCF   01,F
06DE:  BTFSC  xA5.6
06E0:  ADDWF  00,F
06E2:  RRCF   00,F
06E4:  RRCF   01,F
06E6:  BTFSC  xA5.7
06E8:  ADDWF  00,F
06EA:  RRCF   00,F
06EC:  RRCF   01,F
06EE:  MOVLB  0
06F0:  RETURN 0
*
09FE:  TBLRD*+
0A00:  MOVF   FF5,F
0A02:  BZ    0A1C
0A04:  MOVFF  FF6,49B
0A08:  MOVFF  FF7,49C
0A0C:  MOVFF  FF5,4A8
0A10:  RCALL  09EC
0A12:  MOVFF  49B,FF6
0A16:  MOVFF  49C,FF7
0A1A:  BRA    09FE
0A1C:  GOTO   26AC (RETURN)
0A20:  MOVLB  4
0A22:  MOVF   x9B,W
0A24:  XORWF  x9C,W
0A26:  ANDLW  80
0A28:  MOVWF  x9E
0A2A:  BTFSS  x9B.7
0A2C:  BRA    0A32
0A2E:  COMF   x9B,F
0A30:  INCF   x9B,F
0A32:  BTFSS  x9C.7
0A34:  BRA    0A3A
0A36:  COMF   x9C,F
0A38:  INCF   x9C,F
0A3A:  MOVF   x9C,W
0A3C:  CLRF   01
0A3E:  SUBWF  x9B,W
0A40:  BC    0A48
0A42:  MOVFF  49B,00
0A46:  BRA    0A60
0A48:  CLRF   00
0A4A:  MOVLW  08
0A4C:  MOVWF  x9D
0A4E:  RLCF   x9B,F
0A50:  RLCF   00,F
0A52:  MOVF   x9C,W
0A54:  SUBWF  00,W
0A56:  BTFSC  FD8.0
0A58:  MOVWF  00
0A5A:  RLCF   01,F
0A5C:  DECFSZ x9D,F
0A5E:  BRA    0A4E
0A60:  BTFSS  x9E.7
0A62:  BRA    0A68
0A64:  COMF   01,F
0A66:  INCF   01,F
0A68:  MOVLB  0
0A6A:  RETURN 0
0A6C:  MOVLB  4
0A6E:  MOVF   xD6,W
0A70:  BTFSC  FD8.2
0A72:  BRA    0B56
0A74:  MOVWF  00
0A76:  MOVF   xDA,W
0A78:  BTFSC  FD8.2
0A7A:  BRA    0B56
0A7C:  ADDWF  00,F
0A7E:  BNC   0A88
0A80:  MOVLW  81
0A82:  ADDWF  00,F
0A84:  BC    0B56
0A86:  BRA    0A90
0A88:  MOVLW  7F
0A8A:  SUBWF  00,F
0A8C:  BNC   0B56
0A8E:  BZ    0B56
0A90:  MOVFF  4D7,4DE
0A94:  MOVF   xDB,W
0A96:  XORWF  xDE,F
0A98:  BSF    xD7.7
0A9A:  BSF    xDB.7
0A9C:  MOVF   xD9,W
0A9E:  MULWF  xDD
0AA0:  MOVFF  FF4,4E0
0AA4:  MOVF   xD8,W
0AA6:  MULWF  xDC
0AA8:  MOVFF  FF4,03
0AAC:  MOVFF  FF3,4DF
0AB0:  MULWF  xDD
0AB2:  MOVF   FF3,W
0AB4:  ADDWF  xE0,F
0AB6:  MOVF   FF4,W
0AB8:  ADDWFC xDF,F
0ABA:  MOVLW  00
0ABC:  ADDWFC 03,F
0ABE:  MOVF   xD9,W
0AC0:  MULWF  xDC
0AC2:  MOVF   FF3,W
0AC4:  ADDWF  xE0,F
0AC6:  MOVF   FF4,W
0AC8:  ADDWFC xDF,F
0ACA:  MOVLW  00
0ACC:  CLRF   02
0ACE:  ADDWFC 03,F
0AD0:  ADDWFC 02,F
0AD2:  MOVF   xD7,W
0AD4:  MULWF  xDD
0AD6:  MOVF   FF3,W
0AD8:  ADDWF  xDF,F
0ADA:  MOVF   FF4,W
0ADC:  ADDWFC 03,F
0ADE:  MOVLW  00
0AE0:  ADDWFC 02,F
0AE2:  MOVF   xD7,W
0AE4:  MULWF  xDC
0AE6:  MOVF   FF3,W
0AE8:  ADDWF  03,F
0AEA:  MOVF   FF4,W
0AEC:  ADDWFC 02,F
0AEE:  MOVLW  00
0AF0:  CLRF   01
0AF2:  ADDWFC 01,F
0AF4:  MOVF   xD9,W
0AF6:  MULWF  xDB
0AF8:  MOVF   FF3,W
0AFA:  ADDWF  xDF,F
0AFC:  MOVF   FF4,W
0AFE:  ADDWFC 03,F
0B00:  MOVLW  00
0B02:  ADDWFC 02,F
0B04:  ADDWFC 01,F
0B06:  MOVF   xD8,W
0B08:  MULWF  xDB
0B0A:  MOVF   FF3,W
0B0C:  ADDWF  03,F
0B0E:  MOVF   FF4,W
0B10:  ADDWFC 02,F
0B12:  MOVLW  00
0B14:  ADDWFC 01,F
0B16:  MOVF   xD7,W
0B18:  MULWF  xDB
0B1A:  MOVF   FF3,W
0B1C:  ADDWF  02,F
0B1E:  MOVF   FF4,W
0B20:  ADDWFC 01,F
0B22:  INCF   00,F
0B24:  BTFSC  01.7
0B26:  BRA    0B32
0B28:  RLCF   xDF,F
0B2A:  RLCF   03,F
0B2C:  RLCF   02,F
0B2E:  RLCF   01,F
0B30:  DECF   00,F
0B32:  MOVLW  00
0B34:  BTFSS  xDF.7
0B36:  BRA    0B4C
0B38:  INCF   03,F
0B3A:  ADDWFC 02,F
0B3C:  ADDWFC 01,F
0B3E:  MOVF   01,W
0B40:  BNZ   0B4C
0B42:  MOVF   02,W
0B44:  BNZ   0B4C
0B46:  MOVF   03,W
0B48:  BNZ   0B4C
0B4A:  INCF   00,F
0B4C:  BTFSC  xDE.7
0B4E:  BSF    01.7
0B50:  BTFSS  xDE.7
0B52:  BCF    01.7
0B54:  BRA    0B5E
0B56:  CLRF   00
0B58:  CLRF   01
0B5A:  CLRF   02
0B5C:  CLRF   03
0B5E:  MOVLB  0
0B60:  RETURN 0
0B62:  MOVLB  4
0B64:  MOVF   xA8,W
0B66:  SUBLW  B6
0B68:  MOVWF  xA8
0B6A:  CLRF   03
0B6C:  MOVFF  4A9,4AC
0B70:  BSF    xA9.7
0B72:  BCF    FD8.0
0B74:  RRCF   xA9,F
0B76:  RRCF   xAA,F
0B78:  RRCF   xAB,F
0B7A:  RRCF   03,F
0B7C:  RRCF   02,F
0B7E:  RRCF   01,F
0B80:  RRCF   00,F
0B82:  DECFSZ xA8,F
0B84:  BRA    0B72
0B86:  BTFSS  xAC.7
0B88:  BRA    0BA0
0B8A:  COMF   00,F
0B8C:  COMF   01,F
0B8E:  COMF   02,F
0B90:  COMF   03,F
0B92:  INCF   00,F
0B94:  BTFSC  FD8.2
0B96:  INCF   01,F
0B98:  BTFSC  FD8.2
0B9A:  INCF   02,F
0B9C:  BTFSC  FD8.2
0B9E:  INCF   03,F
0BA0:  MOVLB  0
0BA2:  GOTO   0C90 (RETURN)
0BA6:  BTFSC  FD8.1
0BA8:  BRA    0BB2
0BAA:  MOVLW  04
0BAC:  MOVWF  FEA
0BAE:  MOVLW  B0
0BB0:  MOVWF  FE9
0BB2:  CLRF   00
0BB4:  CLRF   01
0BB6:  CLRF   02
0BB8:  CLRF   03
0BBA:  MOVLB  4
0BBC:  CLRF   xB0
0BBE:  CLRF   xB1
0BC0:  CLRF   xB2
0BC2:  CLRF   xB3
0BC4:  MOVF   xAF,W
0BC6:  IORWF  xAE,W
0BC8:  IORWF  xAD,W
0BCA:  IORWF  xAC,W
0BCC:  BZ    0C26
0BCE:  MOVLW  20
0BD0:  MOVWF  xB4
0BD2:  BCF    FD8.0
0BD4:  RLCF   xA8,F
0BD6:  RLCF   xA9,F
0BD8:  RLCF   xAA,F
0BDA:  RLCF   xAB,F
0BDC:  RLCF   xB0,F
0BDE:  RLCF   xB1,F
0BE0:  RLCF   xB2,F
0BE2:  RLCF   xB3,F
0BE4:  MOVF   xAF,W
0BE6:  SUBWF  xB3,W
0BE8:  BNZ   0BFA
0BEA:  MOVF   xAE,W
0BEC:  SUBWF  xB2,W
0BEE:  BNZ   0BFA
0BF0:  MOVF   xAD,W
0BF2:  SUBWF  xB1,W
0BF4:  BNZ   0BFA
0BF6:  MOVF   xAC,W
0BF8:  SUBWF  xB0,W
0BFA:  BNC   0C1A
0BFC:  MOVF   xAC,W
0BFE:  SUBWF  xB0,F
0C00:  MOVF   xAD,W
0C02:  BTFSS  FD8.0
0C04:  INCFSZ xAD,W
0C06:  SUBWF  xB1,F
0C08:  MOVF   xAE,W
0C0A:  BTFSS  FD8.0
0C0C:  INCFSZ xAE,W
0C0E:  SUBWF  xB2,F
0C10:  MOVF   xAF,W
0C12:  BTFSS  FD8.0
0C14:  INCFSZ xAF,W
0C16:  SUBWF  xB3,F
0C18:  BSF    FD8.0
0C1A:  RLCF   00,F
0C1C:  RLCF   01,F
0C1E:  RLCF   02,F
0C20:  RLCF   03,F
0C22:  DECFSZ xB4,F
0C24:  BRA    0BD2
0C26:  MOVFF  4B0,FEF
0C2A:  MOVFF  4B1,FEC
0C2E:  MOVFF  4B2,FEC
0C32:  MOVFF  4B3,FEC
0C36:  MOVLB  0
0C38:  RETURN 0
0C3A:  MOVF   FE9,W
0C3C:  MOVLB  4
0C3E:  MOVWF  xA0
0C40:  MOVF   x9F,W
0C42:  MOVWF  xA2
0C44:  BZ    0C7C
0C46:  MOVFF  49E,4D9
0C4A:  MOVFF  49D,4D8
0C4E:  MOVFF  49C,4D7
0C52:  MOVFF  49B,4D6
0C56:  CLRF   xDD
0C58:  CLRF   xDC
0C5A:  MOVLW  20
0C5C:  MOVWF  xDB
0C5E:  MOVLW  82
0C60:  MOVWF  xDA
0C62:  MOVLB  0
0C64:  RCALL  0A6C
0C66:  MOVFF  03,49E
0C6A:  MOVFF  02,49D
0C6E:  MOVFF  01,49C
0C72:  MOVFF  00,49B
0C76:  MOVLB  4
0C78:  DECFSZ xA2,F
0C7A:  BRA    0C46
0C7C:  MOVFF  49E,4AB
0C80:  MOVFF  49D,4AA
0C84:  MOVFF  49C,4A9
0C88:  MOVFF  49B,4A8
0C8C:  MOVLB  0
0C8E:  BRA    0B62
0C90:  MOVFF  03,49E
0C94:  MOVFF  02,49D
0C98:  MOVFF  01,49C
0C9C:  MOVFF  00,49B
0CA0:  MOVLB  4
0CA2:  BTFSS  x9E.7
0CA4:  BRA    0CC0
0CA6:  DECF   xA0,F
0CA8:  BSF    xA0.5
0CAA:  COMF   x9B,F
0CAC:  COMF   x9C,F
0CAE:  COMF   x9D,F
0CB0:  COMF   x9E,F
0CB2:  INCF   x9B,F
0CB4:  BTFSC  FD8.2
0CB6:  INCF   x9C,F
0CB8:  BTFSC  FD8.2
0CBA:  INCF   x9D,F
0CBC:  BTFSC  FD8.2
0CBE:  INCF   x9E,F
0CC0:  MOVLW  3B
0CC2:  MOVWF  xA7
0CC4:  MOVLW  9A
0CC6:  MOVWF  xA6
0CC8:  MOVLW  CA
0CCA:  MOVWF  xA5
0CCC:  CLRF   xA4
0CCE:  MOVLW  0A
0CD0:  MOVWF  xA2
0CD2:  MOVF   x9F,W
0CD4:  BTFSC  FD8.2
0CD6:  INCF   xA0,F
0CD8:  BSF    FD8.1
0CDA:  MOVLW  04
0CDC:  MOVWF  FEA
0CDE:  MOVLW  9B
0CE0:  MOVWF  FE9
0CE2:  MOVFF  49E,4AB
0CE6:  MOVFF  49D,4AA
0CEA:  MOVFF  49C,4A9
0CEE:  MOVFF  49B,4A8
0CF2:  MOVFF  4A7,4AF
0CF6:  MOVFF  4A6,4AE
0CFA:  MOVFF  4A5,4AD
0CFE:  MOVFF  4A4,4AC
0D02:  MOVLB  0
0D04:  RCALL  0BA6
0D06:  MOVF   01,W
0D08:  MOVF   00,F
0D0A:  BNZ   0D32
0D0C:  MOVLB  4
0D0E:  INCF   x9F,W
0D10:  SUBWF  xA2,W
0D12:  BTFSS  FD8.2
0D14:  BRA    0D1A
0D16:  MOVLB  0
0D18:  BRA    0D32
0D1A:  MOVF   xA0,W
0D1C:  BZ    0D38
0D1E:  ANDLW  0F
0D20:  SUBWF  xA2,W
0D22:  BZ    0D26
0D24:  BC    0DA6
0D26:  BTFSC  xA0.7
0D28:  BRA    0DA6
0D2A:  BTFSC  xA0.6
0D2C:  BRA    0D38
0D2E:  MOVLW  20
0D30:  BRA    0D9A
0D32:  MOVLW  20
0D34:  MOVLB  4
0D36:  ANDWF  xA0,F
0D38:  BTFSS  xA0.5
0D3A:  BRA    0D58
0D3C:  BCF    xA0.5
0D3E:  MOVF   x9F,W
0D40:  BTFSS  FD8.2
0D42:  DECF   xA0,F
0D44:  MOVF   00,W
0D46:  MOVWF  xA0
0D48:  MOVLW  2D
0D4A:  MOVWF  xA8
0D4C:  MOVLB  0
0D4E:  RCALL  09EC
0D50:  MOVLB  4
0D52:  MOVF   xA0,W
0D54:  MOVWF  00
0D56:  CLRF   xA0
0D58:  MOVF   x9F,W
0D5A:  SUBWF  xA2,W
0D5C:  BNZ   0D76
0D5E:  MOVF   00,W
0D60:  MOVWF  xA0
0D62:  MOVLW  2E
0D64:  MOVWF  xA8
0D66:  MOVLB  0
0D68:  RCALL  09EC
0D6A:  MOVLB  4
0D6C:  MOVF   xA0,W
0D6E:  MOVWF  00
0D70:  MOVLW  20
0D72:  ANDWF  xA0,F
0D74:  MOVLW  00
0D76:  MOVLW  30
0D78:  BTFSS  xA0.5
0D7A:  BRA    0D9A
0D7C:  BCF    xA0.5
0D7E:  MOVF   x9F,W
0D80:  BTFSS  FD8.2
0D82:  DECF   xA0,F
0D84:  MOVF   00,W
0D86:  MOVWF  xA0
0D88:  MOVLW  2D
0D8A:  MOVWF  xA8
0D8C:  MOVLB  0
0D8E:  RCALL  09EC
0D90:  MOVLB  4
0D92:  MOVF   xA0,W
0D94:  MOVWF  00
0D96:  CLRF   xA0
0D98:  MOVLW  30
0D9A:  ADDWF  00,F
0D9C:  MOVFF  00,4A8
0DA0:  MOVLB  0
0DA2:  RCALL  09EC
0DA4:  MOVLB  4
0DA6:  BCF    FD8.1
0DA8:  MOVFF  4A7,4AB
0DAC:  MOVFF  4A6,4AA
0DB0:  MOVFF  4A5,4A9
0DB4:  MOVFF  4A4,4A8
0DB8:  CLRF   xAF
0DBA:  CLRF   xAE
0DBC:  CLRF   xAD
0DBE:  MOVLW  0A
0DC0:  MOVWF  xAC
0DC2:  MOVLB  0
0DC4:  RCALL  0BA6
0DC6:  MOVFF  03,4A7
0DCA:  MOVFF  02,4A6
0DCE:  MOVFF  01,4A5
0DD2:  MOVFF  00,4A4
0DD6:  MOVLB  4
0DD8:  DECFSZ xA2,F
0DDA:  BRA    0CD8
0DDC:  MOVLB  0
0DDE:  GOTO   0EB6 (RETURN)
*
0FA2:  MOVLB  4
0FA4:  MOVF   xA3,W
0FA6:  CLRF   01
0FA8:  SUBWF  xA2,W
0FAA:  BC    0FB2
0FAC:  MOVFF  4A2,00
0FB0:  BRA    0FCA
0FB2:  CLRF   00
0FB4:  MOVLW  08
0FB6:  MOVWF  xA4
0FB8:  RLCF   xA2,F
0FBA:  RLCF   00,F
0FBC:  MOVF   xA3,W
0FBE:  SUBWF  00,W
0FC0:  BTFSC  FD8.0
0FC2:  MOVWF  00
0FC4:  RLCF   01,F
0FC6:  DECFSZ xA4,F
0FC8:  BRA    0FB8
0FCA:  MOVLB  0
0FCC:  RETURN 0
*
109E:  MOVFF  4D3,4DA
10A2:  MOVLB  4
10A4:  MOVF   xD7,W
10A6:  XORWF  xDA,F
10A8:  BTFSS  xDA.7
10AA:  BRA    10B6
10AC:  BCF    FD8.2
10AE:  BCF    FD8.0
10B0:  BTFSC  xD3.7
10B2:  BSF    FD8.0
10B4:  BRA    1114
10B6:  MOVFF  4D3,4DA
10BA:  MOVFF  4D6,4DB
10BE:  MOVF   xD2,W
10C0:  SUBWF  xDB,F
10C2:  BZ    10D0
10C4:  BTFSS  xDA.7
10C6:  BRA    1114
10C8:  MOVF   FD8,W
10CA:  XORLW  01
10CC:  MOVWF  FD8
10CE:  BRA    1114
10D0:  MOVFF  4D7,4DB
10D4:  MOVF   xD3,W
10D6:  SUBWF  xDB,F
10D8:  BZ    10E6
10DA:  BTFSS  xDA.7
10DC:  BRA    1114
10DE:  MOVF   FD8,W
10E0:  XORLW  01
10E2:  MOVWF  FD8
10E4:  BRA    1114
10E6:  MOVFF  4D8,4DB
10EA:  MOVF   xD4,W
10EC:  SUBWF  xDB,F
10EE:  BZ    10FC
10F0:  BTFSS  xDA.7
10F2:  BRA    1114
10F4:  MOVF   FD8,W
10F6:  XORLW  01
10F8:  MOVWF  FD8
10FA:  BRA    1114
10FC:  MOVFF  4D9,4DB
1100:  MOVF   xD5,W
1102:  SUBWF  xDB,F
1104:  BZ    1112
1106:  BTFSS  xDA.7
1108:  BRA    1114
110A:  MOVF   FD8,W
110C:  XORLW  01
110E:  MOVWF  FD8
1110:  BRA    1114
1112:  BCF    FD8.0
1114:  MOVLB  0
1116:  RETURN 0
*
161A:  MOVLW  8E
161C:  MOVWF  00
161E:  MOVLB  4
1620:  MOVF   xD2,W
1622:  SUBWF  00,F
1624:  MOVFF  4D3,02
1628:  MOVFF  4D4,01
162C:  BSF    02.7
162E:  MOVF   00,F
1630:  BZ    1644
1632:  BCF    FD8.0
1634:  MOVF   02,F
1636:  BNZ   163C
1638:  MOVF   01,F
163A:  BZ    1644
163C:  RRCF   02,F
163E:  RRCF   01,F
1640:  DECFSZ 00,F
1642:  BRA    1632
1644:  BTFSS  xD3.7
1646:  BRA    1652
1648:  COMF   01,F
164A:  COMF   02,F
164C:  INCF   01,F
164E:  BTFSC  FD8.2
1650:  INCF   02,F
1652:  MOVLB  0
1654:  RETURN 0
1656:  MOVLW  8E
1658:  MOVWF  00
165A:  MOVFF  4D7,01
165E:  MOVFF  4D6,02
1662:  CLRF   03
1664:  MOVF   01,F
1666:  BNZ   167A
1668:  MOVFF  02,01
166C:  CLRF   02
166E:  MOVLW  08
1670:  SUBWF  00,F
1672:  MOVF   01,F
1674:  BNZ   167A
1676:  CLRF   00
1678:  BRA    168A
167A:  BCF    FD8.0
167C:  BTFSC  01.7
167E:  BRA    1688
1680:  RLCF   02,F
1682:  RLCF   01,F
1684:  DECF   00,F
1686:  BRA    167A
1688:  BCF    01.7
168A:  RETURN 0
168C:  MOVLW  80
168E:  BTFSS  FD8.1
1690:  BRA    1696
1692:  MOVLB  4
1694:  XORWF  xDB,F
1696:  MOVLB  4
1698:  CLRF   xE0
169A:  CLRF   xE1
169C:  MOVFF  4D7,4DF
16A0:  MOVF   xDB,W
16A2:  XORWF  xDF,F
16A4:  MOVF   xD6,W
16A6:  BTFSC  FD8.2
16A8:  BRA    1868
16AA:  MOVWF  xDE
16AC:  MOVWF  00
16AE:  MOVF   xDA,W
16B0:  BTFSC  FD8.2
16B2:  BRA    187A
16B4:  SUBWF  xDE,F
16B6:  BTFSC  FD8.2
16B8:  BRA    17C0
16BA:  BNC   1738
16BC:  MOVFF  4DB,4E4
16C0:  BSF    xE4.7
16C2:  MOVFF  4DC,4E3
16C6:  MOVFF  4DD,4E2
16CA:  CLRF   xE1
16CC:  BCF    FD8.0
16CE:  RRCF   xE4,F
16D0:  RRCF   xE3,F
16D2:  RRCF   xE2,F
16D4:  RRCF   xE1,F
16D6:  DECFSZ xDE,F
16D8:  BRA    16CA
16DA:  BTFSS  xDF.7
16DC:  BRA    16E4
16DE:  BSF    xE0.0
16E0:  BRA    18A2
16E2:  BCF    xE0.0
16E4:  BCF    xDE.0
16E6:  BSF    xE0.4
16E8:  MOVLW  04
16EA:  MOVWF  FEA
16EC:  MOVLW  D9
16EE:  MOVWF  FE9
16F0:  BRA    18C8
16F2:  BCF    xE0.4
16F4:  BTFSC  xDF.7
16F6:  BRA    170C
16F8:  BTFSS  xDE.0
16FA:  BRA    1722
16FC:  RRCF   xE4,F
16FE:  RRCF   xE3,F
1700:  RRCF   xE2,F
1702:  RRCF   xE1,F
1704:  INCF   00,F
1706:  BTFSC  FD8.2
1708:  BRA    1898
170A:  BRA    1722
170C:  BTFSC  xE4.7
170E:  BRA    1728
1710:  BCF    FD8.0
1712:  RLCF   xE1,F
1714:  RLCF   xE2,F
1716:  RLCF   xE3,F
1718:  RLCF   xE4,F
171A:  DECF   00,F
171C:  BTFSC  FD8.2
171E:  BRA    1898
1720:  BRA    170C
1722:  BSF    xE0.6
1724:  BRA    1800
1726:  BCF    xE0.6
1728:  MOVFF  4D7,4DF
172C:  BTFSS  xD7.7
172E:  BRA    1734
1730:  BSF    xE4.7
1732:  BRA    188A
1734:  BCF    xE4.7
1736:  BRA    188A
1738:  MOVFF  4DA,4DE
173C:  MOVFF  4DA,00
1740:  MOVF   xD6,W
1742:  SUBWF  xDE,F
1744:  MOVFF  4D7,4E4
1748:  BSF    xE4.7
174A:  MOVFF  4D8,4E3
174E:  MOVFF  4D9,4E2
1752:  CLRF   xE1
1754:  BCF    FD8.0
1756:  RRCF   xE4,F
1758:  RRCF   xE3,F
175A:  RRCF   xE2,F
175C:  RRCF   xE1,F
175E:  DECFSZ xDE,F
1760:  BRA    1752
1762:  BTFSS  xDF.7
1764:  BRA    176C
1766:  BSF    xE0.1
1768:  BRA    18A2
176A:  BCF    xE0.1
176C:  BCF    xDE.0
176E:  BSF    xE0.5
1770:  MOVLW  04
1772:  MOVWF  FEA
1774:  MOVLW  DD
1776:  MOVWF  FE9
1778:  BRA    18C8
177A:  BCF    xE0.5
177C:  BTFSC  xDF.7
177E:  BRA    1794
1780:  BTFSS  xDE.0
1782:  BRA    17AA
1784:  RRCF   xE4,F
1786:  RRCF   xE3,F
1788:  RRCF   xE2,F
178A:  RRCF   xE1,F
178C:  INCF   00,F
178E:  BTFSC  FD8.2
1790:  BRA    1898
1792:  BRA    17AA
1794:  BTFSC  xE4.7
1796:  BRA    17B0
1798:  BCF    FD8.0
179A:  RLCF   xE1,F
179C:  RLCF   xE2,F
179E:  RLCF   xE3,F
17A0:  RLCF   xE4,F
17A2:  DECF   00,F
17A4:  BTFSC  FD8.2
17A6:  BRA    1898
17A8:  BRA    1794
17AA:  BSF    xE0.7
17AC:  BRA    1800
17AE:  BCF    xE0.7
17B0:  MOVFF  4DB,4DF
17B4:  BTFSS  xDB.7
17B6:  BRA    17BC
17B8:  BSF    xE4.7
17BA:  BRA    188A
17BC:  BCF    xE4.7
17BE:  BRA    188A
17C0:  MOVFF  4DB,4E4
17C4:  BSF    xE4.7
17C6:  MOVFF  4DC,4E3
17CA:  MOVFF  4DD,4E2
17CE:  BTFSS  xDF.7
17D0:  BRA    17DA
17D2:  BCF    xE4.7
17D4:  BSF    xE0.2
17D6:  BRA    18A2
17D8:  BCF    xE0.2
17DA:  CLRF   xE1
17DC:  BCF    xDE.0
17DE:  MOVLW  04
17E0:  MOVWF  FEA
17E2:  MOVLW  D9
17E4:  MOVWF  FE9
17E6:  BRA    18C8
17E8:  BTFSC  xDF.7
17EA:  BRA    1824
17EC:  MOVFF  4D7,4DF
17F0:  BTFSS  xDE.0
17F2:  BRA    1800
17F4:  RRCF   xE4,F
17F6:  RRCF   xE3,F
17F8:  RRCF   xE2,F
17FA:  RRCF   xE1,F
17FC:  INCF   00,F
17FE:  BZ    1898
1800:  BTFSS  xE1.7
1802:  BRA    181A
1804:  INCF   xE2,F
1806:  BNZ   181A
1808:  INCF   xE3,F
180A:  BNZ   181A
180C:  INCF   xE4,F
180E:  BNZ   181A
1810:  RRCF   xE4,F
1812:  RRCF   xE3,F
1814:  RRCF   xE2,F
1816:  INCF   00,F
1818:  BZ    1898
181A:  BTFSC  xE0.6
181C:  BRA    1726
181E:  BTFSC  xE0.7
1820:  BRA    17AE
1822:  BRA    185C
1824:  MOVLW  80
1826:  XORWF  xE4,F
1828:  BTFSS  xE4.7
182A:  BRA    1834
182C:  BRA    18A2
182E:  MOVFF  4DB,4DF
1832:  BRA    1848
1834:  MOVFF  4D7,4DF
1838:  MOVF   xE4,F
183A:  BNZ   1848
183C:  MOVF   xE3,F
183E:  BNZ   1848
1840:  MOVF   xE2,F
1842:  BNZ   1848
1844:  CLRF   00
1846:  BRA    188A
1848:  BTFSC  xE4.7
184A:  BRA    185C
184C:  BCF    FD8.0
184E:  RLCF   xE1,F
1850:  RLCF   xE2,F
1852:  RLCF   xE3,F
1854:  RLCF   xE4,F
1856:  DECFSZ 00,F
1858:  BRA    1848
185A:  BRA    1898
185C:  BTFSS  xDF.7
185E:  BRA    1864
1860:  BSF    xE4.7
1862:  BRA    188A
1864:  BCF    xE4.7
1866:  BRA    188A
1868:  MOVFF  4DA,00
186C:  MOVFF  4DB,4E4
1870:  MOVFF  4DC,4E3
1874:  MOVFF  4DD,4E2
1878:  BRA    188A
187A:  MOVFF  4D6,00
187E:  MOVFF  4D7,4E4
1882:  MOVFF  4D8,4E3
1886:  MOVFF  4D9,4E2
188A:  MOVFF  4E4,01
188E:  MOVFF  4E3,02
1892:  MOVFF  4E2,03
1896:  BRA    1900
1898:  CLRF   00
189A:  CLRF   01
189C:  CLRF   02
189E:  CLRF   03
18A0:  BRA    1900
18A2:  CLRF   xE1
18A4:  COMF   xE2,F
18A6:  COMF   xE3,F
18A8:  COMF   xE4,F
18AA:  COMF   xE1,F
18AC:  INCF   xE1,F
18AE:  BNZ   18BA
18B0:  INCF   xE2,F
18B2:  BNZ   18BA
18B4:  INCF   xE3,F
18B6:  BNZ   18BA
18B8:  INCF   xE4,F
18BA:  BTFSC  xE0.0
18BC:  BRA    16E2
18BE:  BTFSC  xE0.1
18C0:  BRA    176A
18C2:  BTFSC  xE0.2
18C4:  BRA    17D8
18C6:  BRA    182E
18C8:  MOVF   FEF,W
18CA:  ADDWF  xE2,F
18CC:  BNC   18D8
18CE:  INCF   xE3,F
18D0:  BNZ   18D8
18D2:  INCF   xE4,F
18D4:  BTFSC  FD8.2
18D6:  BSF    xDE.0
18D8:  MOVF   FED,F
18DA:  MOVF   FEF,W
18DC:  ADDWF  xE3,F
18DE:  BNC   18E6
18E0:  INCF   xE4,F
18E2:  BTFSC  FD8.2
18E4:  BSF    xDE.0
18E6:  MOVF   FED,F
18E8:  MOVF   FEF,W
18EA:  BTFSC  FEF.7
18EC:  BRA    18F0
18EE:  XORLW  80
18F0:  ADDWF  xE4,F
18F2:  BTFSC  FD8.0
18F4:  BSF    xDE.0
18F6:  BTFSC  xE0.4
18F8:  BRA    16F2
18FA:  BTFSC  xE0.5
18FC:  BRA    177A
18FE:  BRA    17E8
1900:  MOVLB  0
1902:  RETURN 0
*
1E40:  MOVLW  20
1E42:  MOVLB  4
1E44:  BTFSS  x9D.4
1E46:  MOVLW  30
1E48:  MOVWF  x9E
1E4A:  MOVFF  49C,00
1E4E:  BTFSS  00.7
1E50:  BRA    1E62
1E52:  COMF   00,F
1E54:  INCF   00,F
1E56:  MOVFF  00,49C
1E5A:  MOVLW  2D
1E5C:  MOVWF  x9E
1E5E:  BSF    x9D.7
1E60:  BSF    x9D.0
1E62:  MOVF   01,W
1E64:  MOVFF  49C,4A2
1E68:  MOVLW  64
1E6A:  MOVWF  xA3
1E6C:  MOVLB  0
1E6E:  CALL   0FA2
1E72:  MOVFF  00,49C
1E76:  MOVLW  30
1E78:  ADDWF  01,W
1E7A:  MOVLB  4
1E7C:  MOVWF  x9F
1E7E:  MOVFF  49C,4A2
1E82:  MOVLW  0A
1E84:  MOVWF  xA3
1E86:  MOVLB  0
1E88:  CALL   0FA2
1E8C:  MOVLW  30
1E8E:  ADDWF  00,W
1E90:  MOVLB  4
1E92:  MOVWF  xA1
1E94:  MOVLW  30
1E96:  ADDWF  01,W
1E98:  MOVWF  xA0
1E9A:  MOVFF  49E,00
1E9E:  MOVLW  30
1EA0:  SUBWF  x9F,W
1EA2:  BZ    1EAC
1EA4:  BSF    x9D.1
1EA6:  BTFSC  x9D.7
1EA8:  BSF    x9D.2
1EAA:  BRA    1ED0
1EAC:  MOVFF  49E,49F
1EB0:  MOVLW  20
1EB2:  MOVWF  x9E
1EB4:  MOVLW  30
1EB6:  SUBWF  xA0,W
1EB8:  BZ    1EC2
1EBA:  BSF    x9D.0
1EBC:  BTFSC  x9D.7
1EBE:  BSF    x9D.1
1EC0:  BRA    1ED0
1EC2:  BTFSS  FD8.2
1EC4:  BSF    x9D.0
1EC6:  BNZ   1ED0
1EC8:  MOVFF  49F,4A0
1ECC:  MOVLW  20
1ECE:  MOVWF  x9F
1ED0:  BTFSC  x9D.2
1ED2:  BRA    1EDE
1ED4:  BTFSC  x9D.1
1ED6:  BRA    1EE8
1ED8:  BTFSC  x9D.0
1EDA:  BRA    1EF2
1EDC:  BRA    1EFC
1EDE:  MOVFF  49E,4A5
1EE2:  MOVLB  0
1EE4:  CALL   0904
1EE8:  MOVFF  49F,4A5
1EEC:  MOVLB  0
1EEE:  CALL   0904
1EF2:  MOVFF  4A0,4A5
1EF6:  MOVLB  0
1EF8:  CALL   0904
1EFC:  MOVFF  4A1,4A5
1F00:  MOVLB  0
1F02:  CALL   0904
1F06:  RETURN 0
*
2210:  MOVLB  4
2212:  MOVF   x9B,W
2214:  BTFSC  FD8.2
2216:  BRA    2362
2218:  MOVWF  xA7
221A:  MOVF   x9F,W
221C:  BTFSC  FD8.2
221E:  BRA    2362
2220:  SUBWF  xA7,F
2222:  BNC   222E
2224:  MOVLW  7F
2226:  ADDWF  xA7,F
2228:  BTFSC  FD8.0
222A:  BRA    2362
222C:  BRA    223A
222E:  MOVLW  81
2230:  SUBWF  xA7,F
2232:  BTFSS  FD8.0
2234:  BRA    2362
2236:  BTFSC  FD8.2
2238:  BRA    2362
223A:  MOVFF  4A7,00
223E:  CLRF   01
2240:  CLRF   02
2242:  CLRF   03
2244:  CLRF   xA6
2246:  MOVFF  49C,4A5
224A:  BSF    xA5.7
224C:  MOVFF  49D,4A4
2250:  MOVFF  49E,4A3
2254:  MOVLW  19
2256:  MOVWF  xA7
2258:  MOVF   xA2,W
225A:  SUBWF  xA3,F
225C:  BC    2278
225E:  MOVLW  01
2260:  SUBWF  xA4,F
2262:  BC    2278
2264:  SUBWF  xA5,F
2266:  BC    2278
2268:  SUBWF  xA6,F
226A:  BC    2278
226C:  INCF   xA6,F
226E:  INCF   xA5,F
2270:  INCF   xA4,F
2272:  MOVF   xA2,W
2274:  ADDWF  xA3,F
2276:  BRA    22C8
2278:  MOVF   xA1,W
227A:  SUBWF  xA4,F
227C:  BC    22A2
227E:  MOVLW  01
2280:  SUBWF  xA5,F
2282:  BC    22A2
2284:  SUBWF  xA6,F
2286:  BC    22A2
2288:  INCF   xA6,F
228A:  INCF   xA5,F
228C:  MOVF   xA1,W
228E:  ADDWF  xA4,F
2290:  MOVF   xA2,W
2292:  ADDWF  xA3,F
2294:  BNC   22C8
2296:  INCF   xA4,F
2298:  BNZ   22C8
229A:  INCF   xA5,F
229C:  BNZ   22C8
229E:  INCF   xA6,F
22A0:  BRA    22C8
22A2:  MOVF   xA0,W
22A4:  IORLW  80
22A6:  SUBWF  xA5,F
22A8:  BC    22C6
22AA:  MOVLW  01
22AC:  SUBWF  xA6,F
22AE:  BC    22C6
22B0:  INCF   xA6,F
22B2:  MOVF   xA0,W
22B4:  IORLW  80
22B6:  ADDWF  xA5,F
22B8:  MOVF   xA1,W
22BA:  ADDWF  xA4,F
22BC:  BNC   2290
22BE:  INCF   xA5,F
22C0:  BNZ   2290
22C2:  INCF   xA6,F
22C4:  BRA    2290
22C6:  BSF    03.0
22C8:  DECFSZ xA7,F
22CA:  BRA    22CE
22CC:  BRA    22E4
22CE:  BCF    FD8.0
22D0:  RLCF   xA3,F
22D2:  RLCF   xA4,F
22D4:  RLCF   xA5,F
22D6:  RLCF   xA6,F
22D8:  BCF    FD8.0
22DA:  RLCF   03,F
22DC:  RLCF   02,F
22DE:  RLCF   01,F
22E0:  RLCF   xA8,F
22E2:  BRA    2258
22E4:  BTFSS  xA8.0
22E6:  BRA    22F4
22E8:  BCF    FD8.0
22EA:  RRCF   01,F
22EC:  RRCF   02,F
22EE:  RRCF   03,F
22F0:  RRCF   xA8,F
22F2:  BRA    22F8
22F4:  DECF   00,F
22F6:  BZ    2362
22F8:  BTFSC  xA8.7
22FA:  BRA    2338
22FC:  BCF    FD8.0
22FE:  RLCF   xA3,F
2300:  RLCF   xA4,F
2302:  RLCF   xA5,F
2304:  RLCF   xA6,F
2306:  MOVF   xA2,W
2308:  SUBWF  xA3,F
230A:  BC    231A
230C:  MOVLW  01
230E:  SUBWF  xA4,F
2310:  BC    231A
2312:  SUBWF  xA5,F
2314:  BC    231A
2316:  SUBWF  xA6,F
2318:  BNC   234E
231A:  MOVF   xA1,W
231C:  SUBWF  xA4,F
231E:  BC    232A
2320:  MOVLW  01
2322:  SUBWF  xA5,F
2324:  BC    232A
2326:  SUBWF  xA6,F
2328:  BNC   234E
232A:  MOVF   xA0,W
232C:  IORLW  80
232E:  SUBWF  xA5,F
2330:  BC    2338
2332:  MOVLW  01
2334:  SUBWF  xA6,F
2336:  BNC   234E
2338:  INCF   03,F
233A:  BNZ   234E
233C:  INCF   02,F
233E:  BNZ   234E
2340:  INCF   01,F
2342:  BNZ   234E
2344:  INCF   00,F
2346:  BZ    2362
2348:  RRCF   01,F
234A:  RRCF   02,F
234C:  RRCF   03,F
234E:  MOVFF  49C,4A7
2352:  MOVF   xA0,W
2354:  XORWF  xA7,F
2356:  BTFSS  xA7.7
2358:  BRA    235E
235A:  BSF    01.7
235C:  BRA    236A
235E:  BCF    01.7
2360:  BRA    236A
2362:  CLRF   00
2364:  CLRF   01
2366:  CLRF   02
2368:  CLRF   03
236A:  MOVLB  0
236C:  RETURN 0
236E:  CLRF   01
2370:  CLRF   02
2372:  CLRF   00
2374:  CLRF   03
2376:  MOVLB  4
2378:  MOVF   xA3,W
237A:  BNZ   2380
237C:  MOVF   xA2,W
237E:  BZ    23B0
2380:  MOVLW  10
2382:  MOVWF  xA4
2384:  BCF    FD8.0
2386:  RLCF   xA0,F
2388:  RLCF   xA1,F
238A:  RLCF   00,F
238C:  RLCF   03,F
238E:  MOVF   xA3,W
2390:  SUBWF  03,W
2392:  BNZ   2398
2394:  MOVF   xA2,W
2396:  SUBWF  00,W
2398:  BNC   23A8
239A:  MOVF   xA2,W
239C:  SUBWF  00,F
239E:  BTFSS  FD8.0
23A0:  DECF   03,F
23A2:  MOVF   xA3,W
23A4:  SUBWF  03,F
23A6:  BSF    FD8.0
23A8:  RLCF   01,F
23AA:  RLCF   02,F
23AC:  DECFSZ xA4,F
23AE:  BRA    2384
23B0:  MOVLB  0
23B2:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
02A8:  MOVLW  04
02AA:  MOVWF  FEA
02AC:  MOVLW  A0
02AE:  MOVWF  FE9
02B0:  MOVF   FEF,W
02B2:  BZ    02CE
02B4:  MOVLW  06
02B6:  MOVWF  01
02B8:  CLRF   00
02BA:  DECFSZ 00,F
02BC:  BRA    02BA
02BE:  DECFSZ 01,F
02C0:  BRA    02B8
02C2:  MOVLW  7B
02C4:  MOVWF  00
02C6:  DECFSZ 00,F
02C8:  BRA    02C6
02CA:  DECFSZ FEF,F
02CC:  BRA    02B4
02CE:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
01E2:  MOVFF  4B1,4B3
....................    for (sb=0;sb<8;sb++) 
01E6:  MOVLB  4
01E8:  CLRF   xB2
01EA:  MOVF   xB2,W
01EC:  SUBLW  07
01EE:  BNC   020C
....................       {                                                  
....................          output_bit(ssdo,bseri);     
01F0:  BTFSC  xB3.7
01F2:  BRA    01F8
01F4:  BCF    F8D.2
01F6:  BRA    01FA
01F8:  BSF    F8D.2
01FA:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
01FC:  BCF    F96.0
01FE:  BCF    F8D.0
0200:  BCF    F96.0
0202:  BSF    F8D.0
....................          x= x<<1;          
0204:  BCF    FD8.0
0206:  RLCF   xB3,F
0208:  INCF   xB2,F
020A:  BRA    01EA
....................      } 
020C:  MOVLB  0
020E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
11BE:  MOVFF  4AD,4B1
11C2:  CALL   01E2
....................       xuat_1byte(bld2); 
11C6:  MOVFF  4AE,4B1
11CA:  CALL   01E2
....................       xuat_1byte(bld1);           
11CE:  MOVFF  4AF,4B1
11D2:  CALL   01E2
....................       xuat_1byte(bld0);             
11D6:  MOVFF  4B0,4B1
11DA:  CALL   01E2
....................       mo_32_led_don;       
11DE:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
11E0:  CALL   0210
....................       output_high(rck_32led);    output_low(rck_32led); 
11E4:  BCF    F95.5
11E6:  BSF    F8C.5
11E8:  BCF    F95.5
11EA:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
11EC:  BCF    F95.1
11EE:  BCF    F8C.1
11F0:  GOTO   1216 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
11F4:  MOVFF  4A6,4A9
11F8:  MOVFF  4A5,4AA
....................      b1 = wld0>>8;  b0 = wld0; 
11FC:  MOVFF  4A8,4AB
1200:  MOVFF  4A7,4AC
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
1204:  MOVFF  4A9,4AD
1208:  MOVFF  4AA,4AE
120C:  MOVFF  4AB,4AF
1210:  MOVFF  4AC,4B0
1214:  BRA    11BE
1216:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
1218:  MOVFF  49F,4A1
121C:  MOVFF  4A0,4A2
1220:  MOVFF  49E,4A4
1224:  MOVFF  49D,4A3
....................      xuat_32led_don_2word(wd1,wd0); 
1228:  MOVFF  4A2,4A6
122C:  MOVFF  4A1,4A5
1230:  MOVFF  4A4,4A8
1234:  MOVFF  4A3,4A7
1238:  RCALL  11F4
123A:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
01C4:  MOVLW  00
01C6:  MOVWF  F95
....................       set_tris_e(0x00); 
01C8:  MOVWF  F96
....................       output_d(0xff); 
01CA:  CLRF   F95
01CC:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
01CE:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
01D0:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
01D2:  BCF    F95.1
01D4:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
01D6:  BCF    F95.0
01D8:  BCF    F8C.0
....................       rbdc=0; 
01DA:  CLRF   1D
01DC:  CLRF   1C
01DE:  GOTO   2628 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0210:  CLRF   F95
0212:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
0214:  BTFSC  19.4
0216:  BRA    021C
0218:  BCF    F8C.4
021A:  BRA    021E
021C:  BSF    F8C.4
021E:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
0220:  BTFSC  19.6
0222:  BRA    0228
0224:  BCF    F8C.6
0226:  BRA    022A
0228:  BSF    F8C.6
022A:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
022C:  BTFSC  19.2
022E:  BRA    0234
0230:  BCF    F8C.2
0232:  BRA    0236
0234:  BSF    F8C.2
0236:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
0238:  BCF    F95.1
023A:  BSF    F8C.1
023C:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0EB8:  CLRF   F95
0EBA:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0EBC:  BTFSC  1A.6
0EBE:  BRA    0EC4
0EC0:  BCF    F8C.6
0EC2:  BRA    0EC6
0EC4:  BSF    F8C.6
0EC6:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0EC8:  BTFSC  1A.4
0ECA:  BRA    0ED0
0ECC:  BCF    F8C.4
0ECE:  BRA    0ED2
0ED0:  BSF    F8C.4
0ED2:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0ED4:  BTFSC  1A.2
0ED6:  BRA    0EDC
0ED8:  BCF    F8C.2
0EDA:  BRA    0EDE
0EDC:  BSF    F8C.2
0EDE:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
0EE0:  BCF    F95.0
0EE2:  BSF    F8C.0
0EE4:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
23B4:  MOVFF  4A1,4B1
23B8:  CALL   01E2
23BC:  MOVFF  4A0,4B1
23C0:  CALL   01E2
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
23C4:  MOVFF  49F,4B1
23C8:  CALL   01E2
23CC:  MOVFF  49E,4B1
23D0:  CALL   01E2
....................        
....................       mo_4_led_7doan; 
23D4:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
23D6:  CALL   0210
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
23DA:  BCF    F95.7
23DC:  BCF    F8C.7
23DE:  BCF    F95.7
23E0:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
23E2:  BCF    F95.1
23E4:  BCF    F8C.1
23E6:  GOTO   251A (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
23EA:  MOVFF  49D,4A1
23EE:  MOVFF  49C,4A0
23F2:  MOVLB  4
23F4:  CLRF   xA3
23F6:  MOVLW  0A
23F8:  MOVWF  xA2
23FA:  MOVLB  0
23FC:  RCALL  236E
23FE:  MOVFF  00,49E
2402:  MOVLB  4
2404:  MOVFF  03,49F
2408:  MOVFF  03,03
240C:  MOVF   00,W
240E:  MOVLB  0
2410:  CALL   00AE
2414:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
2416:  MOVFF  49D,4A1
241A:  MOVFF  49C,4A0
241E:  MOVLB  4
2420:  CLRF   xA3
2422:  MOVLW  0A
2424:  MOVWF  xA2
2426:  MOVLB  0
2428:  RCALL  236E
242A:  MOVFF  02,49F
242E:  MOVFF  01,49E
2432:  MOVFF  02,4A1
2436:  MOVFF  01,4A0
243A:  MOVLB  4
243C:  CLRF   xA3
243E:  MOVLW  0A
2440:  MOVWF  xA2
2442:  MOVLB  0
2444:  RCALL  236E
2446:  MOVFF  00,49E
244A:  MOVLB  4
244C:  MOVFF  03,49F
2450:  MOVFF  03,03
2454:  MOVF   00,W
2456:  MOVLB  0
2458:  CALL   00AE
245C:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
245E:  MOVFF  49D,4A1
2462:  MOVFF  49C,4A0
2466:  MOVLB  4
2468:  CLRF   xA3
246A:  MOVLW  64
246C:  MOVWF  xA2
246E:  MOVLB  0
2470:  RCALL  236E
2472:  MOVFF  02,49F
2476:  MOVFF  01,49E
247A:  MOVFF  02,4A1
247E:  MOVFF  01,4A0
2482:  MOVLB  4
2484:  CLRF   xA3
2486:  MOVLW  0A
2488:  MOVWF  xA2
248A:  MOVLB  0
248C:  RCALL  236E
248E:  MOVFF  00,49E
2492:  MOVLB  4
2494:  MOVFF  03,49F
2498:  MOVFF  03,03
249C:  MOVF   00,W
249E:  MOVLB  0
24A0:  CALL   00AE
24A4:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
24A6:  MOVFF  49D,4A1
24AA:  MOVFF  49C,4A0
24AE:  MOVLW  03
24B0:  MOVLB  4
24B2:  MOVWF  xA3
24B4:  MOVLW  E8
24B6:  MOVWF  xA2
24B8:  MOVLB  0
24BA:  RCALL  236E
24BC:  MOVFF  02,49F
24C0:  MOVFF  01,49E
24C4:  MOVFF  02,4A1
24C8:  MOVFF  01,4A0
24CC:  MOVLB  4
24CE:  CLRF   xA3
24D0:  MOVLW  0A
24D2:  MOVWF  xA2
24D4:  MOVLB  0
24D6:  RCALL  236E
24D8:  MOVFF  00,49E
24DC:  MOVLB  4
24DE:  MOVFF  03,49F
24E2:  MOVFF  03,03
24E6:  MOVF   00,W
24E8:  MOVLB  0
24EA:  CALL   00AE
24EE:  MOVWF  21
....................       if (ngan4==0xc0) 
24F0:  MOVF   21,W
24F2:  SUBLW  C0
24F4:  BNZ   2508
....................       { 
....................          ngan4=0xff; 
24F6:  SETF   21
....................          if (tram4==0xc0) 
24F8:  MOVF   20,W
24FA:  SUBLW  C0
24FC:  BNZ   2508
....................          { 
....................             tram4=0xff; 
24FE:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
2500:  MOVF   1F,W
2502:  SUBLW  C0
2504:  BNZ   2508
2506:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
2508:  MOVFF  21,49E
250C:  MOVFF  20,49F
2510:  MOVFF  1F,4A0
2514:  MOVFF  1E,4A1
2518:  BRA    23B4
251A:  GOTO   29AC (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
023E:  MOVFF  25,4B1
0242:  RCALL  01E2
....................     xuat_1byte(glcddata); 
0244:  MOVFF  24,4B1
0248:  RCALL  01E2
....................     xuat_1byte(lcdcontrol);        
024A:  MOVFF  23,4B1
024E:  RCALL  01E2
....................     xuat_1byte(lcddata);       
0250:  MOVFF  22,4B1
0254:  RCALL  01E2
....................        
....................     mo_glcd_lcd; 
0256:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
0258:  RCALL  0210
....................     output_high(rck_lcd20x4);      
025A:  BCF    F95.3
025C:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
025E:  BCF    F95.3
0260:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0262:  BCF    F95.1
0264:  BCF    F8C.1
0266:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
0268:  MOVLB  4
026A:  MOVFF  4AA,23
026E:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
0270:  MOVFF  4AB,22
0274:  COMF   22,F
....................     xuat_glcd_lcd(); 
0276:  MOVLB  0
0278:  RCALL  023E
027A:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
032C:  MOVLB  4
032E:  MOVFF  4A7,25
0332:  COMF   25,F
....................     glcddata    = ~glcd_ins_hthi;      
0334:  MOVFF  4A8,24
0338:  COMF   24,F
....................     xuat_glcd_lcd(); 
033A:  MOVLB  0
033C:  RCALL  023E
033E:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0F2A:  MOVLB  4
0F2C:  MOVFF  4A1,4A3
0F30:  COMF   xA3,F
0F32:  MOVFF  4A3,4B1
0F36:  MOVLB  0
0F38:  CALL   01E2
0F3C:  MOVLB  4
0F3E:  MOVFF  4A2,4A3
0F42:  COMF   xA3,F
0F44:  MOVFF  4A3,4B1
0F48:  MOVLB  0
0F4A:  CALL   01E2
....................        
....................       mo_8_led_quet; 
0F4E:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0F50:  RCALL  0EB8
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0F52:  BCF    F95.5
0F54:  BSF    F8C.5
0F56:  BCF    F95.5
0F58:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0F5A:  BCF    F95.0
0F5C:  BCF    F8C.0
0F5E:  GOTO   0F6C (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0F62:  MOVLB  4
0F64:  SETF   xA1
0F66:  SETF   xA2
0F68:  MOVLB  0
0F6A:  BRA    0F2A
0F6C:  GOTO   0F9C (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0EE6:  CLRF   03
0EE8:  MOVLB  4
0EEA:  MOVF   xA2,W
0EEC:  MOVLB  0
0EEE:  CALL   00D0
0EF2:  MOVWF  01
0EF4:  MOVLB  4
0EF6:  MOVWF  xA4
0EF8:  COMF   xA4,F
0EFA:  MOVFF  4A4,4B1
0EFE:  MOVLB  0
0F00:  CALL   01E2
0F04:  MOVLB  4
0F06:  MOVFF  4A3,4A4
0F0A:  COMF   xA4,F
0F0C:  MOVFF  4A4,4B1
0F10:  MOVLB  0
0F12:  CALL   01E2
....................       mo_8_led_quet; 
0F16:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0F18:  RCALL  0EB8
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0F1A:  BCF    F95.5
0F1C:  BSF    F8C.5
0F1E:  BCF    F95.5
0F20:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0F22:  BCF    F95.0
0F24:  BCF    F8C.0
0F26:  GOTO   0F90 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0F70:  CLRF   2E
0F72:  MOVF   2E,W
0F74:  SUBLW  07
0F76:  BNC   0FA0
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0F78:  CLRF   03
0F7A:  MOVF   2E,W
0F7C:  ADDLW  26
0F7E:  MOVWF  FE9
0F80:  MOVLW  00
0F82:  ADDWFC 03,W
0F84:  MOVWF  FEA
0F86:  MOVFF  FEF,4A3
0F8A:  MOVFF  2E,4A2
0F8E:  BRA    0EE6
....................             delay_us(100); 
0F90:  MOVLW  A6
0F92:  MOVWF  00
0F94:  DECFSZ 00,F
0F96:  BRA    0F94
0F98:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
0F9A:  BRA    0F62
0F9C:  INCF   2E,F
0F9E:  BRA    0F72
....................             } 
0FA0:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
1118:  MOVFF  1C,49B
111C:  MOVFF  1D,49C
....................       xuat_1byte(rbdc2);       
1120:  MOVFF  49C,4B1
1124:  CALL   01E2
....................       xuat_1byte(rbdc1); 
1128:  MOVFF  49B,4B1
112C:  CALL   01E2
....................       mo_relay_buzzer_dc; 
1130:  BCF    1A.2
....................       mo_ic_74573_b_thong_dl(); 
1132:  RCALL  0EB8
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
1134:  BCF    F95.3
1136:  BSF    F8C.3
1138:  BCF    F95.3
113A:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
113C:  BCF    F95.0
113E:  BCF    F8C.0
1140:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
*
114A:  BSF    1D.2
....................       xuat_buzzer_relay();          
114C:  RCALL  1118
114E:  GOTO   11BA (RETURN)
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
*
1142:  BCF    1D.2
....................       xuat_buzzer_relay();          
1144:  RCALL  1118
1146:  GOTO   1186 (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
1258:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
125A:  CLRF   34
125C:  CLRF   33
125E:  CLRF   32
1260:  CLRF   31
1262:  CLRF   38
1264:  CLRF   37
1266:  CLRF   36
1268:  MOVLW  01
126A:  MOVWF  35
126C:  MOVLW  80
126E:  MOVWF  3C
1270:  CLRF   3B
1272:  CLRF   3A
1274:  CLRF   39
1276:  CLRF   40
1278:  CLRF   3F
127A:  CLRF   3E
127C:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
127E:  MOVWF  44
1280:  CLRF   43
1282:  CLRF   46
1284:  MOVLW  01
1286:  MOVWF  45
1288:  CLRF   48
128A:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
128C:  MOVLW  80
128E:  MOVWF  4C
1290:  CLRF   4B
1292:  CLRF   4E
1294:  MOVLW  01
1296:  MOVWF  4D
1298:  CLRF   50
129A:  CLRF   4F
....................       zt=zp=0; 
129C:  CLRF   4A
129E:  CLRF   49
12A0:  MOVFF  4A,42
12A4:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
12A8:  MOVLW  20
12AA:  MOVWF  54
12AC:  CLRF   55
12AE:  MOVLW  10
12B0:  MOVWF  57
12B2:  CLRF   58
....................       dem_led=0; 
12B4:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
12B6:  CLRF   5C
12B8:  CLRF   5B
12BA:  CLRF   5A
12BC:  MOVLW  01
12BE:  MOVWF  59
12C0:  CLRF   x60
12C2:  CLRF   5F
12C4:  CLRF   5E
12C6:  MOVWF  5D
12C8:  SETF   x64
12CA:  SETF   x63
12CC:  SETF   x62
12CE:  MOVLW  FE
12D0:  MOVWF  x61
12D2:  MOVLW  01
12D4:  MOVWF  x71
12D6:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
12D8:  MOVLW  80
12DA:  MOVWF  x68
12DC:  CLRF   x67
12DE:  CLRF   x66
12E0:  CLRF   x65
12E2:  MOVWF  x6C
12E4:  CLRF   x6B
12E6:  CLRF   x6A
12E8:  CLRF   x69
12EA:  MOVLW  7F
12EC:  MOVWF  x70
12EE:  SETF   x6F
12F0:  SETF   x6E
12F2:  SETF   x6D
....................      tgdlay = 0; 
12F4:  CLRF   52
12F6:  CLRF   51
12F8:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
1314:  MOVLB  4
1316:  CLRF   xA0
1318:  MOVF   x9F,W
131A:  SUBWF  xA0,W
131C:  BC    1328
....................       hien_thi_8led_7doan_quet_all(); 
131E:  MOVLB  0
1320:  RCALL  0F70
1322:  MOVLB  4
1324:  INCF   xA0,F
1326:  BRA    1318
....................       dem_led++; 
1328:  INCF   53,F
132A:  MOVLB  0
132C:  GOTO   134A (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
12FA:  MOVLB  4
12FC:  MOVF   x9F,F
12FE:  BZ    130C
1300:  MOVFF  49F,4A0
1304:  MOVLB  0
1306:  CALL   02A8
130A:  MOVLB  4
....................       dem_led++; 
130C:  INCF   53,F
130E:  MOVLB  0
1310:  GOTO   134A (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
1330:  MOVLB  4
1332:  MOVF   x9E,F
1334:  BNZ   1342
1336:  MOVFF  49D,49F
133A:  MOVLB  0
133C:  BRA    12FA
133E:  MOVLB  0
1340:  BRA    134A
....................    else              tang_dem_led_delay_1(dl); 
1342:  MOVFF  49D,49F
1346:  MOVLB  0
1348:  BRA    1314
134A:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
123C:  COMF   31,F
123E:  COMF   32,F
1240:  COMF   33,F
1242:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
1244:  MOVFF  34,4A0
1248:  MOVFF  33,49F
124C:  MOVFF  32,49E
1250:  MOVFF  31,49D
1254:  RCALL  1218
1256:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
134C:  DECFSZ 51,W
134E:  BRA    1368
1350:  MOVF   52,F
1352:  BNZ   1368
1354:  MOVFF  34,4A0
1358:  MOVFF  33,49F
135C:  MOVFF  32,49E
1360:  MOVFF  31,49D
1364:  RCALL  1218
1366:  BRA    139E
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
1368:  MOVF   51,W
136A:  SUBLW  32
136C:  BNZ   1376
136E:  MOVF   52,F
1370:  BNZ   1376
1372:  RCALL  123C
1374:  BRA    139E
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
1376:  MOVF   51,W
1378:  SUBLW  64
137A:  BNZ   1384
137C:  MOVF   52,F
137E:  BNZ   1384
1380:  RCALL  123C
1382:  BRA    139E
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
1384:  MOVF   51,W
1386:  SUBLW  96
1388:  BNZ   1392
138A:  MOVF   52,F
138C:  BNZ   1392
138E:  RCALL  123C
1390:  BRA    139E
....................       else if (tgdlay==200)   
1392:  MOVF   51,W
1394:  SUBLW  C8
1396:  BNZ   139E
1398:  MOVF   52,F
139A:  BNZ   139E
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
139C:  RCALL  1258
....................       } 
....................       tgdlay++; 
139E:  INCF   51,F
13A0:  BTFSC  FD8.2
13A2:  INCF   52,F
....................       delay_chon(dl,chondelay); 
13A4:  MOVFF  49B,49D
13A8:  MOVFF  49C,49E
13AC:  RCALL  1330
13AE:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
13B0:  MOVF   53,W
13B2:  SUBLW  0F
13B4:  BNC   13FE
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
13B6:  MOVFF  4A,4A6
13BA:  MOVFF  49,4A5
13BE:  MOVFF  42,4A8
13C2:  MOVFF  41,4A7
13C6:  RCALL  11F4
....................       zp= (zp<<1)+1;  
13C8:  BCF    FD8.0
13CA:  RLCF   49,W
13CC:  MOVLB  4
13CE:  MOVWF  x9D
13D0:  RLCF   4A,W
13D2:  MOVWF  x9E
13D4:  MOVLW  01
13D6:  ADDWF  x9D,W
13D8:  MOVWF  49
13DA:  MOVLW  00
13DC:  ADDWFC x9E,W
13DE:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
13E0:  BCF    FD8.0
13E2:  RRCF   42,W
13E4:  MOVWF  x9E
13E6:  RRCF   41,W
13E8:  MOVWF  41
13EA:  MOVLW  80
13EC:  ADDWF  x9E,W
13EE:  MOVWF  42
....................       delay_chon(dl,chondelay); 
13F0:  MOVFF  49B,49D
13F4:  MOVFF  49C,49E
13F8:  MOVLB  0
13FA:  RCALL  1330
....................    } 
13FC:  BRA    1430
....................    else  if (dem_led<32) 
13FE:  MOVF   53,W
1400:  SUBLW  1F
1402:  BNC   142E
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
1404:  MOVFF  4A,4A6
1408:  MOVFF  49,4A5
140C:  MOVFF  42,4A8
1410:  MOVFF  41,4A7
1414:  RCALL  11F4
....................       zp= (zp<<1);  
1416:  BCF    FD8.0
1418:  RLCF   49,F
141A:  RLCF   4A,F
....................       zt= (zt>>1); 
141C:  BCF    FD8.0
141E:  RRCF   42,F
1420:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
1422:  MOVFF  49B,49D
1426:  MOVFF  49C,49E
142A:  RCALL  1330
....................    } 
142C:  BRA    1430
....................    else reset_toan_bo_bien(); 
142E:  RCALL  1258
1430:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
1538:  MOVF   53,W
153A:  SUBLW  0F
153C:  BNC   1570
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
153E:  MOVFF  4A,4A6
1542:  MOVFF  49,4A5
1546:  MOVFF  4A,4A8
154A:  MOVFF  49,4A7
154E:  RCALL  11F4
....................       zp= (zp>>1)+0x8000; 
1550:  BCF    FD8.0
1552:  RRCF   4A,W
1554:  MOVLB  4
1556:  MOVWF  x9E
1558:  RRCF   49,W
155A:  MOVWF  49
155C:  MOVLW  80
155E:  ADDWF  x9E,W
1560:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
1562:  MOVFF  49B,49D
1566:  MOVFF  49C,49E
156A:  MOVLB  0
156C:  RCALL  1330
....................    } 
156E:  BRA    159C
....................    else  if (dem_led<32) 
1570:  MOVF   53,W
1572:  SUBLW  1F
1574:  BNC   159A
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
1576:  MOVFF  4A,4A6
157A:  MOVFF  49,4A5
157E:  MOVFF  4A,4A8
1582:  MOVFF  49,4A7
1586:  RCALL  11F4
....................       zp= (zp>>1); 
1588:  BCF    FD8.0
158A:  RRCF   4A,F
158C:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
158E:  MOVFF  49B,49D
1592:  MOVFF  49C,49E
1596:  RCALL  1330
....................     } 
1598:  BRA    159C
....................    else reset_toan_bo_bien(); 
159A:  RCALL  1258
159C:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
14B4:  MOVF   53,W
14B6:  SUBLW  1F
14B8:  BNC   1506
....................    {   
....................       xuat_32led_don_1dw(y); 
14BA:  MOVFF  34,4A0
14BE:  MOVFF  33,49F
14C2:  MOVFF  32,49E
14C6:  MOVFF  31,49D
14CA:  RCALL  1218
....................       y= (y<<1)+1; 
14CC:  BCF    FD8.0
14CE:  RLCF   31,W
14D0:  MOVLB  4
14D2:  MOVWF  x9E
14D4:  RLCF   32,W
14D6:  MOVWF  x9F
14D8:  RLCF   33,W
14DA:  MOVWF  xA0
14DC:  RLCF   34,W
14DE:  MOVWF  xA1
14E0:  MOVLW  01
14E2:  ADDWF  x9E,W
14E4:  MOVWF  31
14E6:  MOVLW  00
14E8:  ADDWFC x9F,W
14EA:  MOVWF  32
14EC:  MOVLW  00
14EE:  ADDWFC xA0,W
14F0:  MOVWF  33
14F2:  MOVLW  00
14F4:  ADDWFC xA1,W
14F6:  MOVWF  34
....................       delay_chon(dl,chondelay); 
14F8:  MOVFF  49B,49D
14FC:  MOVFF  49C,49E
1500:  MOVLB  0
1502:  RCALL  1330
....................    } 
1504:  BRA    1536
....................    else  if (dem_led<64) 
1506:  MOVF   53,W
1508:  SUBLW  3F
150A:  BNC   1534
....................    {   
....................       xuat_32led_don_1dw(y);    
150C:  MOVFF  34,4A0
1510:  MOVFF  33,49F
1514:  MOVFF  32,49E
1518:  MOVFF  31,49D
151C:  RCALL  1218
....................       y= (y<<1);  
151E:  BCF    FD8.0
1520:  RLCF   31,F
1522:  RLCF   32,F
1524:  RLCF   33,F
1526:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
1528:  MOVFF  49B,49D
152C:  MOVFF  49C,49E
1530:  RCALL  1330
....................    }  
1532:  BRA    1536
....................    else reset_toan_bo_bien(); 
1534:  RCALL  1258
1536:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
159E:  MOVF   53,W
15A0:  SUBLW  1F
15A2:  BNC   15E6
....................       {   
....................          xuat_32led_don_1dw(y); 
15A4:  MOVFF  34,4A0
15A8:  MOVFF  33,49F
15AC:  MOVFF  32,49E
15B0:  MOVFF  31,49D
15B4:  RCALL  1218
....................          y= (y>>1)+0x80000000;  
15B6:  BCF    FD8.0
15B8:  RRCF   34,W
15BA:  MOVLB  4
15BC:  MOVWF  xA1
15BE:  RRCF   33,W
15C0:  MOVWF  xA0
15C2:  RRCF   32,W
15C4:  MOVWF  x9F
15C6:  RRCF   31,W
15C8:  MOVWF  31
15CA:  MOVFF  49F,32
15CE:  MOVFF  4A0,33
15D2:  MOVLW  80
15D4:  ADDWF  xA1,W
15D6:  MOVWF  34
....................          delay_chon(dl,chondelay);       
15D8:  MOVFF  49B,49D
15DC:  MOVFF  49C,49E
15E0:  MOVLB  0
15E2:  RCALL  1330
....................       } 
15E4:  BRA    1616
....................       else 
....................       if (dem_led<64) 
15E6:  MOVF   53,W
15E8:  SUBLW  3F
15EA:  BNC   1614
....................       {   
....................          xuat_32led_don_1dw(y);  
15EC:  MOVFF  34,4A0
15F0:  MOVFF  33,49F
15F4:  MOVFF  32,49E
15F8:  MOVFF  31,49D
15FC:  RCALL  1218
....................          y= (y>>1); 
15FE:  BCF    FD8.0
1600:  RRCF   34,F
1602:  RRCF   33,F
1604:  RRCF   32,F
1606:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
1608:  MOVFF  49B,49D
160C:  MOVFF  49C,49E
1610:  RCALL  1330
....................       }  
1612:  BRA    1616
....................       else reset_toan_bo_bien(); 
1614:  RCALL  1258
1616:  GOTO   2874 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
1432:  BTFSC  54.7
1434:  BRA    14B0
1436:  MOVF   54,W
1438:  SUBLW  00
143A:  BC    14B0
....................    { 
....................       if(j32<i32) 
143C:  MOVF   55,W
143E:  XORLW  80
1440:  MOVWF  00
1442:  MOVF   54,W
1444:  XORLW  80
1446:  SUBWF  00,W
1448:  BC    148A
....................       { 
....................          y = y_codinh|yp_chay; 
144A:  MOVF   3D,W
144C:  IORWF  35,W
144E:  MOVWF  31
1450:  MOVF   3E,W
1452:  IORWF  36,W
1454:  MOVWF  32
1456:  MOVF   3F,W
1458:  IORWF  37,W
145A:  MOVWF  33
145C:  MOVF   40,W
145E:  IORWF  38,W
1460:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
1462:  MOVFF  34,4A0
1466:  MOVFF  33,49F
146A:  MOVFF  32,49E
146E:  MOVFF  31,49D
1472:  RCALL  1218
....................          delay_chon(dl,chondelay);        
1474:  MOVFF  49B,49D
1478:  MOVFF  49C,49E
147C:  RCALL  1330
....................          yp_chay = yp_chay <<1; 
147E:  BCF    FD8.0
1480:  RLCF   35,F
1482:  RLCF   36,F
1484:  RLCF   37,F
1486:  RLCF   38,F
....................          j32++; 
1488:  INCF   55,F
....................       } 
....................       if (j32==i32)  
148A:  MOVF   54,W
148C:  SUBWF  55,W
148E:  BNZ   14AE
....................       { 
....................          i32--; 
1490:  DECF   54,F
....................          j32=0;          
1492:  CLRF   55
....................          y_codinh=y; 
1494:  MOVFF  34,40
1498:  MOVFF  33,3F
149C:  MOVFF  32,3E
14A0:  MOVFF  31,3D
....................          yp_chay = 1; 
14A4:  CLRF   38
14A6:  CLRF   37
14A8:  CLRF   36
14AA:  MOVLW  01
14AC:  MOVWF  35
....................       } 
....................    } 
14AE:  BRA    14B2
....................    else reset_toan_bo_bien(); 
14B0:  RCALL  1258
14B2:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
027C:  BSF    x73.0
027E:  MOVFF  73,4AA
0282:  MOVFF  4A9,4AB
0286:  RCALL  0268
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
0288:  BCF    x73.0
028A:  MOVFF  73,4AA
028E:  MOVFF  4A9,4AB
0292:  RCALL  0268
0294:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0296:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0298:  MOVFF  4A3,4A9
029C:  RCALL  027C
....................       delay_us(20); 
029E:  MOVLW  21
02A0:  MOVWF  00
02A2:  DECFSZ 00,F
02A4:  BRA    02A2
02A6:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
09EC:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
09EE:  MOVFF  4A8,4A9
09F2:  RCALL  027C
....................       delay_us(20); 
09F4:  MOVLW  21
09F6:  MOVWF  00
09F8:  DECFSZ 00,F
09FA:  BRA    09F8
09FC:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
02D0:  BCF    x73.0
....................          lcd_rw = 0;  
02D2:  BCF    x73.1
....................          lcd_rs = 1;  
02D4:  BSF    x73.2
....................          lcd_p =0; 
02D6:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
02D8:  MOVLW  38
02DA:  MOVLB  4
02DC:  MOVWF  xA3
02DE:  MOVLB  0
02E0:  RCALL  0296
....................          delay_us(40); 
02E2:  MOVLW  42
02E4:  MOVWF  00
02E6:  DECFSZ 00,F
02E8:  BRA    02E6
02EA:  NOP   
....................          lcd_command(lcd_display_control);    
02EC:  MOVLW  0C
02EE:  MOVLB  4
02F0:  MOVWF  xA3
02F2:  MOVLB  0
02F4:  RCALL  0296
....................          delay_us(40); 
02F6:  MOVLW  42
02F8:  MOVWF  00
02FA:  DECFSZ 00,F
02FC:  BRA    02FA
02FE:  NOP   
....................          lcd_command(lcd_clear_display);       
0300:  MOVLW  01
0302:  MOVLB  4
0304:  MOVWF  xA3
0306:  MOVLB  0
0308:  RCALL  0296
....................          delay_ms(2); 
030A:  MOVLW  02
030C:  MOVLB  4
030E:  MOVWF  xA0
0310:  MOVLB  0
0312:  RCALL  02A8
....................          lcd_command(lcd_entry_mode);        
0314:  MOVLW  06
0316:  MOVLB  4
0318:  MOVWF  xA3
031A:  MOVLB  0
031C:  RCALL  0296
....................          delay_us(40);                 
031E:  MOVLW  42
0320:  MOVWF  00
0322:  DECFSZ 00,F
0324:  BRA    0322
0326:  NOP   
0328:  GOTO   2630 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
0FCE:  CLRF   03
0FD0:  MOVLB  4
0FD2:  MOVF   xA0,W
0FD4:  MOVLB  0
0FD6:  CALL   018A
0FDA:  MOVLB  4
0FDC:  ADDWF  xA1,W
0FDE:  MOVWF  xA2
0FE0:  MOVWF  xA3
0FE2:  MOVLB  0
0FE4:  CALL   0296
0FE8:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0340:  BSF    x74.2
0342:  MOVFF  74,4A7
0346:  MOVFF  4A6,4A8
034A:  RCALL  032C
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
034C:  BCF    x74.2
034E:  MOVFF  74,4A7
0352:  MOVFF  4A6,4A8
0356:  RCALL  032C
0358:  RETURN 0
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
035A:  BCF    x74.4
....................       glcd_xuat_8bit(glcd_data2);       
035C:  MOVFF  4A3,4A6
0360:  RCALL  0340
0362:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
*
0904:  BSF    x74.4
....................       glcd_xuat_8bit(glcd_data3);      
0906:  MOVFF  4A5,4A6
090A:  RCALL  0340
090C:  RETURN 0
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
*
0364:  BSF    x74.0
....................          glcd_cs2 = 1; 
0366:  BSF    x74.1
....................          glcd_e  = 0; 
0368:  BCF    x74.2
....................          glcd_rw = 0;           
036A:  BCF    x74.3
....................          glcd_p =0;          
036C:  BCF    x74.5
....................          glcd_command(glcd_function_set_mode);          
036E:  MOVFF  49C,4A3
0372:  RCALL  035A
....................          delay_us(10); 
0374:  MOVLW  10
0376:  MOVWF  00
0378:  DECFSZ 00,F
037A:  BRA    0378
037C:  NOP   
....................          glcd_command(glcd_cursor_display);        
037E:  MOVLW  0C
0380:  MOVLB  4
0382:  MOVWF  xA3
0384:  MOVLB  0
0386:  RCALL  035A
....................          delay_us(10);     
0388:  MOVLW  10
038A:  MOVWF  00
038C:  DECFSZ 00,F
038E:  BRA    038C
0390:  NOP   
....................          glcd_command(glcd_clear_display);       
0392:  MOVLW  01
0394:  MOVLB  4
0396:  MOVWF  xA3
0398:  MOVLB  0
039A:  RCALL  035A
....................          delay_ms(2); 
039C:  MOVLW  02
039E:  MOVLB  4
03A0:  MOVWF  xA0
03A2:  MOVLB  0
03A4:  RCALL  02A8
....................          glcd_command(glcd_entry_mode);       
03A6:  MOVLW  06
03A8:  MOVLB  4
03AA:  MOVWF  xA3
03AC:  MOVLB  0
03AE:  RCALL  035A
....................          delay_us(10);                           
03B0:  MOVLW  10
03B2:  MOVWF  00
03B4:  DECFSZ 00,F
03B6:  BRA    03B4
03B8:  NOP   
03BA:  RETURN 0
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
*
03DE:  MOVLB  4
03E0:  MOVF   x9B,F
03E2:  BZ    03EA
03E4:  SETF   x9D
03E6:  SETF   x9C
03E8:  BRA    03EE
03EA:  CLRF   x9D
03EC:  CLRF   x9C
....................   for (doc=0; doc < glcd_doc; doc++)  
03EE:  MOVLB  0
03F0:  CLRF   x75
03F2:  MOVF   x75,W
03F4:  SUBLW  1F
03F6:  BNC   0458
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
03F8:  CLRF   x76
03FA:  MOVF   x76,W
03FC:  SUBLW  0F
03FE:  BNC   0454
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
0400:  MOVLB  4
0402:  CLRF   xBC
0404:  MOVFF  75,4BB
0408:  CLRF   xBE
040A:  MOVLW  20
040C:  MOVWF  xBD
040E:  MOVLB  0
0410:  RCALL  03BC
0412:  MOVF   01,W
0414:  ADDLW  01
0416:  MOVLB  4
0418:  MOVWF  x9E
041A:  MOVLW  00
041C:  ADDWFC 02,W
041E:  MOVWF  x9F
0420:  CLRF   03
0422:  MOVLB  0
0424:  MOVFF  76,02
0428:  BCF    FD8.0
042A:  RLCF   02,F
042C:  RLCF   03,F
042E:  MOVF   02,W
0430:  MOVLB  4
0432:  ADDWF  x9E,F
0434:  MOVF   03,W
0436:  ADDWFC x9F,F
0438:  MOVLW  77
043A:  ADDWF  x9E,W
043C:  MOVWF  FE9
043E:  MOVLW  00
0440:  ADDWFC x9F,W
0442:  MOVWF  FEA
0444:  MOVFF  49D,FEC
0448:  MOVF   FED,F
044A:  MOVFF  49C,FEF
044E:  MOVLB  0
0450:  INCF   x76,F
0452:  BRA    03FA
....................     }  
0454:  INCF   x75,F
0456:  BRA    03F2
....................   }  
....................   gdram_vdk.refresh = true;  
0458:  BSF    x77.0
045A:  GOTO   2646 (RETURN)
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
045E:  MOVLB  4
0460:  MOVF   xB8,W
0462:  SUBLW  1F
0464:  BC    046E
0466:  MOVLW  80
0468:  ADDWF  xB7,F
046A:  MOVLW  20
046C:  SUBWF  xB8,F
....................   doc = y;  
046E:  MOVFF  4B8,75
....................   ngang = x/16;  
0472:  SWAPF  xB7,W
0474:  MOVLB  0
0476:  MOVWF  x76
0478:  MOVLW  0F
047A:  ANDWF  x76,F
....................   b = 15 - (x % 16);  
047C:  MOVLB  4
047E:  MOVF   xB7,W
0480:  ANDLW  0F
0482:  XORLW  FF
0484:  ADDLW  10
0486:  MOVWF  xBA
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
0488:  DECFSZ xB9,W
048A:  BRA    04F6
048C:  CLRF   xBC
048E:  MOVFF  75,4BB
0492:  CLRF   xBE
0494:  MOVLW  20
0496:  MOVWF  xBD
0498:  MOVLB  0
049A:  RCALL  03BC
049C:  MOVF   01,W
049E:  ADDLW  01
04A0:  MOVLB  4
04A2:  MOVWF  xBB
04A4:  MOVLW  00
04A6:  ADDWFC 02,W
04A8:  MOVWF  xBC
04AA:  CLRF   03
04AC:  MOVLB  0
04AE:  MOVFF  76,02
04B2:  BCF    FD8.0
04B4:  RLCF   02,F
04B6:  RLCF   03,F
04B8:  MOVF   02,W
04BA:  MOVLB  4
04BC:  ADDWF  xBB,F
04BE:  MOVF   03,W
04C0:  ADDWFC xBC,F
04C2:  MOVLW  77
04C4:  ADDWF  xBB,W
04C6:  MOVWF  01
04C8:  MOVLW  00
04CA:  ADDWFC xBC,W
04CC:  MOVWF  03
04CE:  MOVFF  01,FE9
04D2:  MOVWF  FEA
04D4:  CLRF   03
04D6:  MOVLW  01
04D8:  MOVWF  02
04DA:  MOVF   xBA,W
04DC:  MOVWF  00
04DE:  BZ    04EA
04E0:  BCF    FD8.0
04E2:  RLCF   02,F
04E4:  RLCF   03,F
04E6:  DECFSZ 00,F
04E8:  BRA    04E0
04EA:  MOVF   02,W
04EC:  IORWF  FEF,F
04EE:  MOVF   03,W
04F0:  IORWF  FEC,W
04F2:  MOVWF  FEF
04F4:  BRA    0568
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
04F6:  CLRF   xBC
04F8:  MOVFF  75,4BB
04FC:  CLRF   xBE
04FE:  MOVLW  20
0500:  MOVWF  xBD
0502:  MOVLB  0
0504:  RCALL  03BC
0506:  MOVF   01,W
0508:  ADDLW  01
050A:  MOVLB  4
050C:  MOVWF  xBB
050E:  MOVLW  00
0510:  ADDWFC 02,W
0512:  MOVWF  xBC
0514:  CLRF   03
0516:  MOVLB  0
0518:  MOVFF  76,02
051C:  BCF    FD8.0
051E:  RLCF   02,F
0520:  RLCF   03,F
0522:  MOVF   02,W
0524:  MOVLB  4
0526:  ADDWF  xBB,F
0528:  MOVF   03,W
052A:  ADDWFC xBC,F
052C:  MOVLW  77
052E:  ADDWF  xBB,W
0530:  MOVWF  01
0532:  MOVLW  00
0534:  ADDWFC xBC,W
0536:  MOVWF  03
0538:  MOVFF  01,FE9
053C:  MOVWF  FEA
053E:  CLRF   03
0540:  MOVLW  01
0542:  MOVWF  02
0544:  MOVF   xBA,W
0546:  MOVWF  00
0548:  BZ    0554
054A:  BCF    FD8.0
054C:  RLCF   02,F
054E:  RLCF   03,F
0550:  DECFSZ 00,F
0552:  BRA    054A
0554:  MOVF   02,W
0556:  XORLW  FF
0558:  MOVWF  00
055A:  MOVLW  FF
055C:  XORWF  03,F
055E:  MOVF   00,W
0560:  ANDWF  FEF,F
0562:  MOVF   03,W
0564:  ANDWF  FEC,W
0566:  MOVWF  FEF
....................   gdram_vdk.refresh = true;  
0568:  MOVLB  0
056A:  BSF    x77.0
056C:  RETURN 0
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
*
090E:  BTFSS  x77.0
0910:  BRA    09E8
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
0912:  CLRF   x75
0914:  MOVF   x75,W
0916:  SUBLW  1F
0918:  BNC   09E6
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
091A:  MOVF   x75,W
091C:  IORLW  80
091E:  MOVLB  4
0920:  MOVWF  x9B
0922:  MOVWF  xA3
0924:  MOVLB  0
0926:  RCALL  035A
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
0928:  MOVLW  80
092A:  MOVLB  4
092C:  MOVWF  xA3
092E:  MOVLB  0
0930:  RCALL  035A
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
0932:  CLRF   x76
0934:  MOVF   x76,W
0936:  SUBLW  0F
0938:  BNC   09E2
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
093A:  MOVLB  4
093C:  CLRF   xBC
093E:  MOVFF  75,4BB
0942:  CLRF   xBE
0944:  MOVLW  20
0946:  MOVWF  xBD
0948:  MOVLB  0
094A:  RCALL  03BC
094C:  MOVF   01,W
094E:  ADDLW  01
0950:  MOVLB  4
0952:  MOVWF  x9B
0954:  MOVLW  00
0956:  ADDWFC 02,W
0958:  MOVWF  x9C
095A:  CLRF   03
095C:  MOVLB  0
095E:  MOVFF  76,02
0962:  BCF    FD8.0
0964:  RLCF   02,F
0966:  RLCF   03,F
0968:  MOVF   02,W
096A:  MOVLB  4
096C:  ADDWF  x9B,F
096E:  MOVF   03,W
0970:  ADDWFC x9C,F
0972:  MOVLW  01
0974:  ADDWF  x9B,W
0976:  MOVWF  01
0978:  MOVLW  00
097A:  ADDWFC x9C,W
097C:  MOVWF  03
097E:  MOVF   01,W
0980:  ADDLW  77
0982:  MOVWF  FE9
0984:  MOVLW  00
0986:  ADDWFC 03,W
0988:  MOVWF  FEA
098A:  MOVFF  FEF,4A5
098E:  MOVLB  0
0990:  RCALL  0904
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
0992:  MOVLB  4
0994:  CLRF   xBC
0996:  MOVFF  75,4BB
099A:  CLRF   xBE
099C:  MOVLW  20
099E:  MOVWF  xBD
09A0:  MOVLB  0
09A2:  RCALL  03BC
09A4:  MOVF   01,W
09A6:  ADDLW  01
09A8:  MOVLB  4
09AA:  MOVWF  x9B
09AC:  MOVLW  00
09AE:  ADDWFC 02,W
09B0:  MOVWF  x9C
09B2:  CLRF   03
09B4:  MOVLB  0
09B6:  MOVFF  76,02
09BA:  BCF    FD8.0
09BC:  RLCF   02,F
09BE:  RLCF   03,F
09C0:  MOVF   02,W
09C2:  MOVLB  4
09C4:  ADDWF  x9B,F
09C6:  MOVF   03,W
09C8:  ADDWFC x9C,F
09CA:  MOVLW  77
09CC:  ADDWF  x9B,W
09CE:  MOVWF  FE9
09D0:  MOVLW  00
09D2:  ADDWFC x9C,W
09D4:  MOVWF  FEA
09D6:  MOVFF  FEF,4A5
09DA:  MOVLB  0
09DC:  RCALL  0904
09DE:  INCF   x76,F
09E0:  BRA    0934
....................       }  
09E2:  INCF   x75,F
09E4:  BRA    0914
....................     }  
....................     gdram_vdk.refresh = false;  
09E6:  BCF    x77.0
....................   }  
09E8:  GOTO   2664 (RETURN)
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
*
1CD6:  BTFSS  x77.0
1CD8:  BRA    1E3C
....................   {  
....................       if((x/16)!=(x + rong)/16) 
1CDA:  MOVLB  4
1CDC:  SWAPF  x9C,W
1CDE:  MOVWF  xA2
1CE0:  MOVLW  0F
1CE2:  ANDWF  xA2,F
1CE4:  MOVF   x9E,W
1CE6:  ADDWF  x9C,W
1CE8:  MOVWF  00
1CEA:  SWAPF  00,F
1CEC:  MOVLW  0F
1CEE:  ANDWF  00,F
1CF0:  MOVF   00,W
1CF2:  SUBWF  xA2,W
1CF4:  BZ    1D0A
....................             rong=((rong+15)/16)+1; 
1CF6:  MOVLW  0F
1CF8:  ADDWF  x9E,W
1CFA:  MOVWF  00
1CFC:  SWAPF  00,F
1CFE:  MOVLW  0F
1D00:  ANDWF  00,F
1D02:  MOVF   00,W
1D04:  ADDLW  01
1D06:  MOVWF  x9E
1D08:  BRA    1D18
....................       else rong=((rong+15)/16);  
1D0A:  MOVLW  0F
1D0C:  ADDWF  x9E,W
1D0E:  MOVWF  00
1D10:  SWAPF  00,W
1D12:  MOVWF  x9E
1D14:  MOVLW  0F
1D16:  ANDWF  x9E,F
....................        
....................       x = x/16; 
1D18:  SWAPF  x9C,F
1D1A:  MOVLW  0F
1D1C:  ANDWF  x9C,F
....................       for (doc = y; doc <(y+cao); doc++)  
1D1E:  MOVFF  49D,75
1D22:  MOVF   x9F,W
1D24:  ADDWF  x9D,W
1D26:  MOVLB  0
1D28:  SUBWF  x75,W
1D2A:  BTFSC  FD8.0
1D2C:  BRA    1E3A
....................       {  
....................          if(doc>31) 
1D2E:  MOVF   x75,W
1D30:  SUBLW  1F
1D32:  BC    1D4A
....................             {   
....................                hesox = 8+x; 
1D34:  MOVLW  08
1D36:  MOVLB  4
1D38:  ADDWF  x9C,W
1D3A:  MOVWF  xA0
....................                hesoy = doc-32; 
1D3C:  MOVLW  20
1D3E:  MOVLB  0
1D40:  SUBWF  x75,W
1D42:  MOVLB  4
1D44:  MOVWF  xA1
....................                } 
1D46:  BRA    1D54
1D48:  MOVLB  0
....................          else {hesox = x; hesoy = doc;} 
1D4A:  MOVFF  49C,4A0
1D4E:  MOVFF  75,4A1
1D52:  MOVLB  4
....................          glcd_command( 0x80 |hesoy);    
1D54:  MOVF   xA1,W
1D56:  IORLW  80
1D58:  MOVWF  xA2
1D5A:  MOVWF  xA3
1D5C:  MOVLB  0
1D5E:  CALL   035A
....................          glcd_command( 0x80 |hesox);   
1D62:  MOVLB  4
1D64:  MOVF   xA0,W
1D66:  IORLW  80
1D68:  MOVWF  xA2
1D6A:  MOVWF  xA3
1D6C:  MOVLB  0
1D6E:  CALL   035A
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
1D72:  MOVFF  4A0,76
1D76:  MOVLB  4
1D78:  MOVF   x9E,W
1D7A:  ADDWF  xA0,W
1D7C:  MOVLB  0
1D7E:  SUBWF  x76,W
1D80:  BC    1E32
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
1D82:  MOVLB  4
1D84:  CLRF   xBC
1D86:  MOVFF  4A1,4BB
1D8A:  CLRF   xBE
1D8C:  MOVLW  20
1D8E:  MOVWF  xBD
1D90:  MOVLB  0
1D92:  CALL   03BC
1D96:  MOVF   01,W
1D98:  ADDLW  01
1D9A:  MOVLB  4
1D9C:  MOVWF  xA2
1D9E:  MOVLW  00
1DA0:  ADDWFC 02,W
1DA2:  MOVWF  xA3
1DA4:  CLRF   03
1DA6:  MOVLB  0
1DA8:  MOVFF  76,02
1DAC:  BCF    FD8.0
1DAE:  RLCF   02,F
1DB0:  RLCF   03,F
1DB2:  MOVF   02,W
1DB4:  MOVLB  4
1DB6:  ADDWF  xA2,F
1DB8:  MOVF   03,W
1DBA:  ADDWFC xA3,F
1DBC:  MOVLW  01
1DBE:  ADDWF  xA2,W
1DC0:  MOVWF  01
1DC2:  MOVLW  00
1DC4:  ADDWFC xA3,W
1DC6:  MOVWF  03
1DC8:  MOVF   01,W
1DCA:  ADDLW  77
1DCC:  MOVWF  FE9
1DCE:  MOVLW  00
1DD0:  ADDWFC 03,W
1DD2:  MOVWF  FEA
1DD4:  MOVFF  FEF,4A5
1DD8:  MOVLB  0
1DDA:  CALL   0904
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
1DDE:  MOVLB  4
1DE0:  CLRF   xBC
1DE2:  MOVFF  4A1,4BB
1DE6:  CLRF   xBE
1DE8:  MOVLW  20
1DEA:  MOVWF  xBD
1DEC:  MOVLB  0
1DEE:  CALL   03BC
1DF2:  MOVF   01,W
1DF4:  ADDLW  01
1DF6:  MOVLB  4
1DF8:  MOVWF  xA2
1DFA:  MOVLW  00
1DFC:  ADDWFC 02,W
1DFE:  MOVWF  xA3
1E00:  CLRF   03
1E02:  MOVLB  0
1E04:  MOVFF  76,02
1E08:  BCF    FD8.0
1E0A:  RLCF   02,F
1E0C:  RLCF   03,F
1E0E:  MOVF   02,W
1E10:  MOVLB  4
1E12:  ADDWF  xA2,F
1E14:  MOVF   03,W
1E16:  ADDWFC xA3,F
1E18:  MOVLW  77
1E1A:  ADDWF  xA2,W
1E1C:  MOVWF  FE9
1E1E:  MOVLW  00
1E20:  ADDWFC xA3,W
1E22:  MOVWF  FEA
1E24:  MOVFF  FEF,4A5
1E28:  MOVLB  0
1E2A:  CALL   0904
1E2E:  INCF   x76,F
1E30:  BRA    1D76
....................          }  
1E32:  INCF   x75,F
1E34:  MOVLB  4
1E36:  BRA    1D22
1E38:  MOVLB  0
....................        }  
....................     gdram_vdk.refresh = false;  
1E3A:  BCF    x77.0
....................   }       
1E3C:  GOTO   21A6 (RETURN)
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
1904:  MOVLB  4
1906:  CLRF   xB7
1908:  CLRF   xB6
190A:  CLRF   xB5
190C:  MOVLW  7F
190E:  MOVWF  xB4
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
1910:  MOVLW  7E
1912:  MOVWF  xBE
1914:  MOVLW  80
1916:  MOVWF  xBF
1918:  CLRF   xC0
191A:  CLRF   xC1
191C:  MOVLW  7A
191E:  MOVWF  xC2
1920:  MOVLW  2A
1922:  MOVWF  xC3
1924:  MOVLW  AA
1926:  MOVWF  xC4
1928:  MOVLW  A3
192A:  MOVWF  xC5
192C:  MOVLW  75
192E:  MOVWF  xC6
1930:  MOVLW  B6
1932:  MOVWF  xC7
1934:  MOVLW  09
1936:  MOVWF  xC8
1938:  MOVLW  B4
193A:  MOVWF  xC9
193C:  MOVLW  6F
193E:  MOVWF  xCA
1940:  MOVLW  4F
1942:  MOVWF  xCB
1944:  MOVLW  B6
1946:  MOVWF  xCC
1948:  MOVLW  AA
194A:  MOVWF  xCD
194C:  MOVLW  69
194E:  MOVWF  xCE
1950:  MOVLW  8B
1952:  MOVWF  xCF
1954:  MOVLW  F6
1956:  MOVWF  xD0
1958:  MOVLW  E8
195A:  MOVWF  xD1
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
195C:  MOVFF  4AB,4D5
1960:  MOVFF  4AA,4D4
1964:  MOVFF  4A9,4D3
1968:  MOVFF  4A8,4D2
196C:  CLRF   xD9
196E:  CLRF   xD8
1970:  CLRF   xD7
1972:  CLRF   xD6
1974:  MOVLB  0
1976:  CALL   109E
197A:  BNC   1986
197C:  MOVLB  4
197E:  MOVF   xA9,W
1980:  XORLW  80
1982:  MOVWF  xA9
1984:  MOVLB  0
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
1986:  MOVFF  4AB,4D9
198A:  MOVFF  4AA,4D8
198E:  MOVFF  4A9,4D7
1992:  MOVFF  4A8,4D6
1996:  MOVLW  83
1998:  MOVLB  4
199A:  MOVWF  xDD
199C:  MOVLW  F9
199E:  MOVWF  xDC
19A0:  MOVLW  22
19A2:  MOVWF  xDB
19A4:  MOVLW  7E
19A6:  MOVWF  xDA
19A8:  MOVLB  0
19AA:  CALL   0A6C
19AE:  MOVFF  03,4D5
19B2:  MOVFF  02,4D4
19B6:  MOVFF  01,4D3
19BA:  MOVFF  00,4D2
19BE:  RCALL  161A
19C0:  MOVFF  01,4B8
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
19C4:  MOVFF  4AB,4D9
19C8:  MOVFF  4AA,4D8
19CC:  MOVFF  4A9,4D7
19D0:  MOVFF  4A8,4D6
19D4:  MOVLW  83
19D6:  MOVLB  4
19D8:  MOVWF  xDD
19DA:  MOVLW  F9
19DC:  MOVWF  xDC
19DE:  MOVLW  22
19E0:  MOVWF  xDB
19E2:  MOVLW  7E
19E4:  MOVWF  xDA
19E6:  MOVLB  0
19E8:  CALL   0A6C
19EC:  MOVFF  03,4D5
19F0:  MOVFF  02,4D4
19F4:  MOVFF  01,4D3
19F8:  MOVFF  00,4D2
19FC:  MOVLB  4
19FE:  CLRF   xD7
1A00:  MOVFF  4B8,4D6
1A04:  MOVLB  0
1A06:  RCALL  1656
1A08:  BSF    FD8.1
1A0A:  MOVFF  4D5,4D9
1A0E:  MOVFF  4D4,4D8
1A12:  MOVFF  4D3,4D7
1A16:  MOVFF  4D2,4D6
1A1A:  MOVFF  03,4DD
1A1E:  MOVFF  02,4DC
1A22:  MOVFF  01,4DB
1A26:  MOVFF  00,4DA
1A2A:  RCALL  168C
1A2C:  MOVFF  03,4BD
1A30:  MOVFF  02,4BC
1A34:  MOVFF  01,4BB
1A38:  MOVFF  00,4BA
....................    quad = quad % 4;                    // quadrant (0 to 3) 
1A3C:  MOVLW  03
1A3E:  MOVLB  4
1A40:  ANDWF  xB8,F
....................  
....................    if (quad == 0 || quad == 2) 
1A42:  MOVF   xB8,F
1A44:  BZ    1A4C
1A46:  MOVF   xB8,W
1A48:  SUBLW  02
1A4A:  BNZ   1A86
....................       t = frac * PI_DIV_BY_TWO; 
1A4C:  MOVFF  4BD,4D9
1A50:  MOVFF  4BC,4D8
1A54:  MOVFF  4BB,4D7
1A58:  MOVFF  4BA,4D6
1A5C:  MOVLW  DB
1A5E:  MOVWF  xDD
1A60:  MOVLW  0F
1A62:  MOVWF  xDC
1A64:  MOVLW  49
1A66:  MOVWF  xDB
1A68:  MOVLW  7F
1A6A:  MOVWF  xDA
1A6C:  MOVLB  0
1A6E:  CALL   0A6C
1A72:  MOVFF  03,4B3
1A76:  MOVFF  02,4B2
1A7A:  MOVFF  01,4B1
1A7E:  MOVFF  00,4B0
1A82:  BRA    1B5E
1A84:  MOVLB  4
....................    else if (quad == 1) 
1A86:  DECFSZ xB8,W
1A88:  BRA    1AF6
....................       t = (1-frac) * PI_DIV_BY_TWO; 
1A8A:  BSF    FD8.1
1A8C:  CLRF   xD9
1A8E:  CLRF   xD8
1A90:  CLRF   xD7
1A92:  MOVLW  7F
1A94:  MOVWF  xD6
1A96:  MOVFF  4BD,4DD
1A9A:  MOVFF  4BC,4DC
1A9E:  MOVFF  4BB,4DB
1AA2:  MOVFF  4BA,4DA
1AA6:  MOVLB  0
1AA8:  RCALL  168C
1AAA:  MOVFF  03,4D5
1AAE:  MOVFF  02,4D4
1AB2:  MOVFF  01,4D3
1AB6:  MOVFF  00,4D2
1ABA:  MOVFF  03,4D9
1ABE:  MOVFF  02,4D8
1AC2:  MOVFF  01,4D7
1AC6:  MOVFF  00,4D6
1ACA:  MOVLW  DB
1ACC:  MOVLB  4
1ACE:  MOVWF  xDD
1AD0:  MOVLW  0F
1AD2:  MOVWF  xDC
1AD4:  MOVLW  49
1AD6:  MOVWF  xDB
1AD8:  MOVLW  7F
1ADA:  MOVWF  xDA
1ADC:  MOVLB  0
1ADE:  CALL   0A6C
1AE2:  MOVFF  03,4B3
1AE6:  MOVFF  02,4B2
1AEA:  MOVFF  01,4B1
1AEE:  MOVFF  00,4B0
1AF2:  BRA    1B5E
1AF4:  MOVLB  4
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
1AF6:  BSF    FD8.1
1AF8:  MOVFF  4BD,4D9
1AFC:  MOVFF  4BC,4D8
1B00:  MOVFF  4BB,4D7
1B04:  MOVFF  4BA,4D6
1B08:  CLRF   xDD
1B0A:  CLRF   xDC
1B0C:  CLRF   xDB
1B0E:  MOVLW  7F
1B10:  MOVWF  xDA
1B12:  MOVLB  0
1B14:  RCALL  168C
1B16:  MOVFF  03,4D5
1B1A:  MOVFF  02,4D4
1B1E:  MOVFF  01,4D3
1B22:  MOVFF  00,4D2
1B26:  MOVFF  03,4D9
1B2A:  MOVFF  02,4D8
1B2E:  MOVFF  01,4D7
1B32:  MOVFF  00,4D6
1B36:  MOVLW  DB
1B38:  MOVLB  4
1B3A:  MOVWF  xDD
1B3C:  MOVLW  0F
1B3E:  MOVWF  xDC
1B40:  MOVLW  49
1B42:  MOVWF  xDB
1B44:  MOVLW  7F
1B46:  MOVWF  xDA
1B48:  MOVLB  0
1B4A:  CALL   0A6C
1B4E:  MOVFF  03,4B3
1B52:  MOVFF  02,4B2
1B56:  MOVFF  01,4B1
1B5A:  MOVFF  00,4B0
....................  
....................    y = 1.0; 
1B5E:  MOVLB  4
1B60:  CLRF   xAF
1B62:  CLRF   xAE
1B64:  CLRF   xAD
1B66:  MOVLW  7F
1B68:  MOVWF  xAC
....................    t = t * t; 
1B6A:  MOVFF  4B3,4D9
1B6E:  MOVFF  4B2,4D8
1B72:  MOVFF  4B1,4D7
1B76:  MOVFF  4B0,4D6
1B7A:  MOVFF  4B3,4DD
1B7E:  MOVFF  4B2,4DC
1B82:  MOVFF  4B1,4DB
1B86:  MOVFF  4B0,4DA
1B8A:  MOVLB  0
1B8C:  CALL   0A6C
1B90:  MOVFF  03,4B3
1B94:  MOVFF  02,4B2
1B98:  MOVFF  01,4B1
1B9C:  MOVFF  00,4B0
....................    for (i = 0; i <= 4; i++) 
1BA0:  MOVLB  4
1BA2:  CLRF   xB9
1BA4:  MOVF   xB9,W
1BA6:  SUBLW  04
1BA8:  BNC   1C64
....................    { 
....................       t2 = t2 * t; 
1BAA:  MOVFF  4B7,4D9
1BAE:  MOVFF  4B6,4D8
1BB2:  MOVFF  4B5,4D7
1BB6:  MOVFF  4B4,4D6
1BBA:  MOVFF  4B3,4DD
1BBE:  MOVFF  4B2,4DC
1BC2:  MOVFF  4B1,4DB
1BC6:  MOVFF  4B0,4DA
1BCA:  MOVLB  0
1BCC:  CALL   0A6C
1BD0:  MOVFF  03,4B7
1BD4:  MOVFF  02,4B6
1BD8:  MOVFF  01,4B5
1BDC:  MOVFF  00,4B4
....................       y = y + p[i] * t2; 
1BE0:  MOVLB  4
1BE2:  MOVF   xB9,W
1BE4:  MULLW  04
1BE6:  MOVF   FF3,W
1BE8:  CLRF   03
1BEA:  ADDLW  BE
1BEC:  MOVWF  FE9
1BEE:  MOVLW  04
1BF0:  ADDWFC 03,W
1BF2:  MOVWF  FEA
1BF4:  MOVFF  FEF,4D6
1BF8:  MOVFF  FEC,4D7
1BFC:  MOVFF  FEC,4D8
1C00:  MOVFF  FEC,4D9
1C04:  MOVFF  4B7,4DD
1C08:  MOVFF  4B6,4DC
1C0C:  MOVFF  4B5,4DB
1C10:  MOVFF  4B4,4DA
1C14:  MOVLB  0
1C16:  CALL   0A6C
1C1A:  MOVFF  FEA,4D3
1C1E:  MOVFF  FE9,4D2
1C22:  BCF    FD8.1
1C24:  MOVFF  4AF,4D9
1C28:  MOVFF  4AE,4D8
1C2C:  MOVFF  4AD,4D7
1C30:  MOVFF  4AC,4D6
1C34:  MOVFF  03,4DD
1C38:  MOVFF  02,4DC
1C3C:  MOVFF  01,4DB
1C40:  MOVFF  00,4DA
1C44:  RCALL  168C
1C46:  MOVFF  4D3,FEA
1C4A:  MOVFF  4D2,FE9
1C4E:  MOVFF  03,4AF
1C52:  MOVFF  02,4AE
1C56:  MOVFF  01,4AD
1C5A:  MOVFF  00,4AC
1C5E:  MOVLB  4
1C60:  INCF   xB9,F
1C62:  BRA    1BA4
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
1C64:  MOVF   xB8,W
1C66:  SUBLW  02
1C68:  BZ    1C6E
1C6A:  DECFSZ xB8,W
1C6C:  BRA    1C74
....................       y = -y;  // correct sign 
1C6E:  MOVF   xAD,W
1C70:  XORLW  80
1C72:  MOVWF  xAD
....................  
....................    return (y); 
1C74:  MOVFF  4AC,00
1C78:  MOVFF  4AD,01
1C7C:  MOVFF  4AE,02
1C80:  MOVFF  4AF,03
1C84:  MOVLB  0
1C86:  RETURN 0
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
1C88:  BSF    FD8.1
1C8A:  MOVFF  4A3,4D9
1C8E:  MOVFF  4A2,4D8
1C92:  MOVFF  4A1,4D7
1C96:  MOVFF  4A0,4D6
1C9A:  MOVLW  DB
1C9C:  MOVLB  4
1C9E:  MOVWF  xDD
1CA0:  MOVLW  0F
1CA2:  MOVWF  xDC
1CA4:  MOVLW  49
1CA6:  MOVWF  xDB
1CA8:  MOVLW  7F
1CAA:  MOVWF  xDA
1CAC:  MOVLB  0
1CAE:  RCALL  168C
1CB0:  MOVFF  03,4A7
1CB4:  MOVFF  02,4A6
1CB8:  MOVFF  01,4A5
1CBC:  MOVFF  00,4A4
1CC0:  MOVFF  03,4AB
1CC4:  MOVFF  02,4AA
1CC8:  MOVFF  01,4A9
1CCC:  MOVFF  00,4A8
1CD0:  RCALL  1904
1CD2:  GOTO   20DE (RETURN)
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
056E:  MOVLW  01
0570:  MOVLB  4
0572:  MOVWF  xB0
0574:  MOVWF  xB1
0576:  CLRF   xB6
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0578:  MOVF   xA7,W
057A:  SUBWF  xA9,W
057C:  MOVWF  xB7
057E:  MOVF   xB7,W
0580:  BTFSS  xB7.7
0582:  BRA    058A
0584:  MOVLW  00
0586:  BSF    FD8.0
0588:  SUBFWB xB7,W
058A:  CLRF   03
058C:  MOVWF  xAE
058E:  MOVFF  03,4AF
....................    dy = abs((signed int8)(y2 - y1)); 
0592:  MOVF   xA8,W
0594:  SUBWF  xAA,W
0596:  MOVWF  xB7
0598:  MOVF   xB7,W
059A:  BTFSS  xB7.7
059C:  BRA    05A4
059E:  MOVLW  00
05A0:  BSF    FD8.0
05A2:  SUBFWB xB7,W
05A4:  CLRF   03
05A6:  MOVWF  xAC
05A8:  MOVFF  03,4AD
....................    #endif 
....................  
....................    if(x1 > x2) 
05AC:  MOVF   xA7,W
05AE:  SUBWF  xA9,W
05B0:  BC    05B4
....................       addx = -1; 
05B2:  SETF   xB0
....................    if(y1 > y2) 
05B4:  MOVF   xA8,W
05B6:  SUBWF  xAA,W
05B8:  BC    05BC
....................       addy = -1; 
05BA:  SETF   xB1
....................  
....................    if(dx >= dy) 
05BC:  MOVF   xAD,W
05BE:  SUBWF  xAF,W
05C0:  BNC   0636
05C2:  BNZ   05CA
05C4:  MOVF   xAC,W
05C6:  SUBWF  xAE,W
05C8:  BNC   0636
....................    { 
....................       dy *= 2; 
05CA:  BCF    FD8.0
05CC:  RLCF   xAC,F
05CE:  RLCF   xAD,F
....................       P = dy - dx; 
05D0:  MOVF   xAE,W
05D2:  SUBWF  xAC,W
05D4:  MOVWF  00
05D6:  MOVF   xAF,W
05D8:  SUBWFB xAD,W
05DA:  MOVFF  00,4B2
05DE:  MOVWF  xB3
....................       diff = P - dx; 
05E0:  MOVF   xAE,W
05E2:  SUBWF  xB2,W
05E4:  MOVWF  xB4
05E6:  MOVF   xAF,W
05E8:  SUBWFB xB3,W
05EA:  MOVWF  xB5
....................  
....................       for(; i<=dx; ++i) 
05EC:  MOVF   xAF,F
05EE:  BNZ   05F6
05F0:  MOVF   xB6,W
05F2:  SUBWF  xAE,W
05F4:  BNC   0634
....................       { 
....................          glcd_pixel(x1, y1, color); 
05F6:  MOVFF  4A7,4B7
05FA:  MOVFF  4A8,4B8
05FE:  MOVFF  4AB,4B9
0602:  MOVLB  0
0604:  RCALL  045E
....................  
....................          if(P < 0) 
0606:  MOVLB  4
0608:  BTFSS  xB3.7
060A:  BRA    061C
....................          { 
....................             P  += dy; 
060C:  MOVF   xAC,W
060E:  ADDWF  xB2,F
0610:  MOVF   xAD,W
0612:  ADDWFC xB3,F
....................             x1 += addx; 
0614:  MOVF   xB0,W
0616:  ADDWF  xA7,W
0618:  MOVWF  xA7
....................          } 
061A:  BRA    0630
....................          else 
....................          { 
....................             P  += diff; 
061C:  MOVF   xB4,W
061E:  ADDWF  xB2,F
0620:  MOVF   xB5,W
0622:  ADDWFC xB3,F
....................             x1 += addx; 
0624:  MOVF   xB0,W
0626:  ADDWF  xA7,W
0628:  MOVWF  xA7
....................             y1 += addy; 
062A:  MOVF   xB1,W
062C:  ADDWF  xA8,W
062E:  MOVWF  xA8
....................          } 
0630:  INCF   xB6,F
0632:  BRA    05EC
....................       } 
....................    } 
0634:  BRA    06A0
....................    else 
....................    { 
....................       dx *= 2; 
0636:  BCF    FD8.0
0638:  RLCF   xAE,F
063A:  RLCF   xAF,F
....................       P = dx - dy; 
063C:  MOVF   xAC,W
063E:  SUBWF  xAE,W
0640:  MOVWF  00
0642:  MOVF   xAD,W
0644:  SUBWFB xAF,W
0646:  MOVFF  00,4B2
064A:  MOVWF  xB3
....................       diff = P - dy; 
064C:  MOVF   xAC,W
064E:  SUBWF  xB2,W
0650:  MOVWF  xB4
0652:  MOVF   xAD,W
0654:  SUBWFB xB3,W
0656:  MOVWF  xB5
....................  
....................       for(; i<=dy; ++i) 
0658:  MOVF   xAD,F
065A:  BNZ   0662
065C:  MOVF   xB6,W
065E:  SUBWF  xAC,W
0660:  BNC   06A0
....................       { 
....................          glcd_pixel(x1, y1, color); 
0662:  MOVFF  4A7,4B7
0666:  MOVFF  4A8,4B8
066A:  MOVFF  4AB,4B9
066E:  MOVLB  0
0670:  RCALL  045E
....................  
....................          if(P < 0) 
0672:  MOVLB  4
0674:  BTFSS  xB3.7
0676:  BRA    0688
....................          { 
....................             P  += dx; 
0678:  MOVF   xAE,W
067A:  ADDWF  xB2,F
067C:  MOVF   xAF,W
067E:  ADDWFC xB3,F
....................             y1 += addy; 
0680:  MOVF   xB1,W
0682:  ADDWF  xA8,W
0684:  MOVWF  xA8
....................          } 
0686:  BRA    069C
....................          else 
....................          { 
....................             P  += diff; 
0688:  MOVF   xB4,W
068A:  ADDWF  xB2,F
068C:  MOVF   xB5,W
068E:  ADDWFC xB3,F
....................             x1 += addx; 
0690:  MOVF   xB0,W
0692:  ADDWF  xA7,W
0694:  MOVWF  xA7
....................             y1 += addy; 
0696:  MOVF   xB1,W
0698:  ADDWF  xA8,W
069A:  MOVWF  xA8
....................          } 
069C:  INCF   xB6,F
069E:  BRA    0658
....................       } 
....................    } 
06A0:  MOVLB  0
06A2:  RETURN 0
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
06F2:  MOVLB  4
06F4:  CLRF   xA0
....................    b = radius; 
06F6:  MOVFF  49D,4A1
....................    P = 1 - radius; 
06FA:  MOVLW  01
06FC:  BSF    FD8.0
06FE:  SUBFWB x9D,W
0700:  MOVWF  xA2
....................  
....................    do 
....................    { 
....................       if(fill) 
0702:  MOVF   x9E,F
0704:  BZ    07C8
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
0706:  MOVF   xA0,W
0708:  SUBWF  x9B,W
070A:  MOVWF  xA3
070C:  MOVF   xA1,W
070E:  ADDWF  x9C,W
0710:  MOVWF  xA4
0712:  MOVF   xA0,W
0714:  ADDWF  x9B,W
0716:  MOVWF  xA5
0718:  MOVF   xA1,W
071A:  ADDWF  x9C,W
071C:  MOVWF  xA6
071E:  MOVFF  4A3,4A7
0722:  MOVFF  4A4,4A8
0726:  MOVFF  4A5,4A9
072A:  MOVWF  xAA
072C:  MOVFF  49F,4AB
0730:  MOVLB  0
0732:  RCALL  056E
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
0734:  MOVLB  4
0736:  MOVF   xA0,W
0738:  SUBWF  x9B,W
073A:  MOVWF  xA3
073C:  MOVF   xA1,W
073E:  SUBWF  x9C,W
0740:  MOVWF  xA4
0742:  MOVF   xA0,W
0744:  ADDWF  x9B,W
0746:  MOVWF  xA5
0748:  MOVF   xA1,W
074A:  SUBWF  x9C,W
074C:  MOVWF  xA6
074E:  MOVFF  4A3,4A7
0752:  MOVFF  4A4,4A8
0756:  MOVFF  4A5,4A9
075A:  MOVWF  xAA
075C:  MOVFF  49F,4AB
0760:  MOVLB  0
0762:  RCALL  056E
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
0764:  MOVLB  4
0766:  MOVF   xA1,W
0768:  SUBWF  x9B,W
076A:  MOVWF  xA3
076C:  MOVF   xA0,W
076E:  ADDWF  x9C,W
0770:  MOVWF  xA4
0772:  MOVF   xA1,W
0774:  ADDWF  x9B,W
0776:  MOVWF  xA5
0778:  MOVF   xA0,W
077A:  ADDWF  x9C,W
077C:  MOVWF  xA6
077E:  MOVFF  4A3,4A7
0782:  MOVFF  4A4,4A8
0786:  MOVFF  4A5,4A9
078A:  MOVWF  xAA
078C:  MOVFF  49F,4AB
0790:  MOVLB  0
0792:  RCALL  056E
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
0794:  MOVLB  4
0796:  MOVF   xA1,W
0798:  SUBWF  x9B,W
079A:  MOVWF  xA3
079C:  MOVF   xA0,W
079E:  SUBWF  x9C,W
07A0:  MOVWF  xA4
07A2:  MOVF   xA1,W
07A4:  ADDWF  x9B,W
07A6:  MOVWF  xA5
07A8:  MOVF   xA0,W
07AA:  SUBWF  x9C,W
07AC:  MOVWF  xA6
07AE:  MOVFF  4A3,4A7
07B2:  MOVFF  4A4,4A8
07B6:  MOVFF  4A5,4A9
07BA:  MOVWF  xAA
07BC:  MOVFF  49F,4AB
07C0:  MOVLB  0
07C2:  RCALL  056E
....................       } 
07C4:  BRA    08A6
07C6:  MOVLB  4
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
07C8:  MOVF   x9B,W
07CA:  ADDWF  xA0,W
07CC:  MOVWF  xA3
07CE:  MOVF   x9C,W
07D0:  ADDWF  xA1,W
07D2:  MOVWF  xA4
07D4:  MOVFF  4A3,4B7
07D8:  MOVWF  xB8
07DA:  MOVFF  49F,4B9
07DE:  MOVLB  0
07E0:  RCALL  045E
....................          glcd_pixel(b+x, a+y, color); 
07E2:  MOVLB  4
07E4:  MOVF   x9B,W
07E6:  ADDWF  xA1,W
07E8:  MOVWF  xA3
07EA:  MOVF   x9C,W
07EC:  ADDWF  xA0,W
07EE:  MOVWF  xA4
07F0:  MOVFF  4A3,4B7
07F4:  MOVWF  xB8
07F6:  MOVFF  49F,4B9
07FA:  MOVLB  0
07FC:  RCALL  045E
....................          glcd_pixel(x-a, b+y, color); 
07FE:  MOVLB  4
0800:  MOVF   xA0,W
0802:  SUBWF  x9B,W
0804:  MOVWF  xA3
0806:  MOVF   x9C,W
0808:  ADDWF  xA1,W
080A:  MOVWF  xA4
080C:  MOVFF  4A3,4B7
0810:  MOVWF  xB8
0812:  MOVFF  49F,4B9
0816:  MOVLB  0
0818:  RCALL  045E
....................          glcd_pixel(x-b, a+y, color); 
081A:  MOVLB  4
081C:  MOVF   xA1,W
081E:  SUBWF  x9B,W
0820:  MOVWF  xA3
0822:  MOVF   x9C,W
0824:  ADDWF  xA0,W
0826:  MOVWF  xA4
0828:  MOVFF  4A3,4B7
082C:  MOVWF  xB8
082E:  MOVFF  49F,4B9
0832:  MOVLB  0
0834:  RCALL  045E
....................          glcd_pixel(b+x, y-a, color); 
0836:  MOVLB  4
0838:  MOVF   x9B,W
083A:  ADDWF  xA1,W
083C:  MOVWF  xA3
083E:  MOVF   xA0,W
0840:  SUBWF  x9C,W
0842:  MOVWF  xA4
0844:  MOVFF  4A3,4B7
0848:  MOVWF  xB8
084A:  MOVFF  49F,4B9
084E:  MOVLB  0
0850:  RCALL  045E
....................          glcd_pixel(a+x, y-b, color); 
0852:  MOVLB  4
0854:  MOVF   x9B,W
0856:  ADDWF  xA0,W
0858:  MOVWF  xA3
085A:  MOVF   xA1,W
085C:  SUBWF  x9C,W
085E:  MOVWF  xA4
0860:  MOVFF  4A3,4B7
0864:  MOVWF  xB8
0866:  MOVFF  49F,4B9
086A:  MOVLB  0
086C:  RCALL  045E
....................          glcd_pixel(x-a, y-b, color); 
086E:  MOVLB  4
0870:  MOVF   xA0,W
0872:  SUBWF  x9B,W
0874:  MOVWF  xA3
0876:  MOVF   xA1,W
0878:  SUBWF  x9C,W
087A:  MOVWF  xA4
087C:  MOVFF  4A3,4B7
0880:  MOVWF  xB8
0882:  MOVFF  49F,4B9
0886:  MOVLB  0
0888:  RCALL  045E
....................          glcd_pixel(x-b, y-a, color); 
088A:  MOVLB  4
088C:  MOVF   xA1,W
088E:  SUBWF  x9B,W
0890:  MOVWF  xA3
0892:  MOVF   xA0,W
0894:  SUBWF  x9C,W
0896:  MOVWF  xA4
0898:  MOVFF  4A3,4B7
089C:  MOVWF  xB8
089E:  MOVFF  49F,4B9
08A2:  MOVLB  0
08A4:  RCALL  045E
....................       } 
....................  
....................       if(P < 0) 
08A6:  MOVLB  4
08A8:  BTFSS  xA2.7
08AA:  BRA    08C8
....................          P += 3 + 2 * a++; 
08AC:  MOVF   xA0,W
08AE:  INCF   xA0,F
08B0:  MOVWF  xA3
08B2:  MOVLW  02
08B4:  MOVWF  xA4
08B6:  MOVFF  4A3,4A5
08BA:  MOVLB  0
08BC:  RCALL  06A4
08BE:  MOVF   01,W
08C0:  ADDLW  03
08C2:  MOVLB  4
08C4:  ADDWF  xA2,F
08C6:  BRA    08EA
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
08C8:  MOVF   xA0,W
08CA:  INCF   xA0,F
08CC:  MOVWF  xA3
08CE:  MOVF   xA1,W
08D0:  DECF   xA1,F
08D2:  SUBWF  xA3,W
08D4:  MOVWF  xA3
08D6:  MOVLW  02
08D8:  MOVWF  xA4
08DA:  MOVFF  4A3,4A5
08DE:  MOVLB  0
08E0:  RCALL  06A4
08E2:  MOVF   01,W
08E4:  ADDLW  05
08E6:  MOVLB  4
08E8:  ADDWF  xA2,F
....................     } while(a <= b); 
08EA:  MOVF   xA0,W
08EC:  XORLW  80
08EE:  MOVWF  00
08F0:  MOVF   xA1,W
08F2:  XORLW  80
08F4:  SUBWF  00,W
08F6:  BTFSC  FD8.2
08F8:  BRA    0702
08FA:  BTFSS  FD8.0
08FC:  BRA    0702
08FE:  MOVLB  0
0900:  GOTO   2660 (RETURN)
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... float temp = 0, lm35 = 0; 
.................... int try = 0; 
.................... int1 ttqn = 0; 
.................... float M,N; 
.................... signed int8 max = 120,D,C; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
019E:  MOVLB  4
01A0:  INCF   x79,F
....................    set_timer1(3036); //3036 
01A2:  MOVLW  0B
01A4:  MOVWF  FCF
01A6:  MOVLW  DC
01A8:  MOVWF  FCE
01AA:  BCF    F9E.0
01AC:  MOVLB  0
01AE:  GOTO   0060
.................... } 
....................  
.................... void draw(int8 Number) { 
....................    glcd_line(64,32,(int)M,(int)N,0); 
*
1F08:  MOVFF  48D,4D5
1F0C:  MOVFF  48C,4D4
1F10:  MOVFF  48B,4D3
1F14:  MOVFF  48A,4D2
1F18:  CALL   161A
1F1C:  MOVFF  01,49C
1F20:  MOVFF  491,4D5
1F24:  MOVFF  490,4D4
1F28:  MOVFF  48F,4D3
1F2C:  MOVFF  48E,4D2
1F30:  CALL   161A
1F34:  MOVFF  01,49D
1F38:  MOVLW  40
1F3A:  MOVLB  4
1F3C:  MOVWF  xA7
1F3E:  MOVLW  20
1F40:  MOVWF  xA8
1F42:  MOVFF  49C,4A9
1F46:  MOVFF  01,4AA
1F4A:  CLRF   xAB
1F4C:  MOVLB  0
1F4E:  CALL   056E
....................    M = 64+31*cos(Number*0.104-1.57); 
1F52:  MOVLB  4
1F54:  CLRF   xD7
1F56:  MOVFF  49B,4D6
1F5A:  MOVLB  0
1F5C:  CALL   1656
1F60:  MOVFF  03,4D9
1F64:  MOVFF  02,4D8
1F68:  MOVFF  01,4D7
1F6C:  MOVFF  00,4D6
1F70:  MOVLW  F4
1F72:  MOVLB  4
1F74:  MOVWF  xDD
1F76:  MOVLW  FD
1F78:  MOVWF  xDC
1F7A:  MOVLW  54
1F7C:  MOVWF  xDB
1F7E:  MOVLW  7B
1F80:  MOVWF  xDA
1F82:  MOVLB  0
1F84:  CALL   0A6C
1F88:  MOVFF  03,49F
1F8C:  MOVFF  02,49E
1F90:  MOVFF  01,49D
1F94:  MOVFF  00,49C
1F98:  BSF    FD8.1
1F9A:  MOVFF  03,4D9
1F9E:  MOVFF  02,4D8
1FA2:  MOVFF  01,4D7
1FA6:  MOVFF  00,4D6
1FAA:  MOVLW  C3
1FAC:  MOVLB  4
1FAE:  MOVWF  xDD
1FB0:  MOVLW  F5
1FB2:  MOVWF  xDC
1FB4:  MOVLW  48
1FB6:  MOVWF  xDB
1FB8:  MOVLW  7F
1FBA:  MOVWF  xDA
1FBC:  MOVLB  0
1FBE:  CALL   168C
1FC2:  MOVFF  03,49F
1FC6:  MOVFF  02,49E
1FCA:  MOVFF  01,49D
1FCE:  MOVFF  00,49C
1FD2:  MOVFF  03,4AB
1FD6:  MOVFF  02,4AA
1FDA:  MOVFF  01,4A9
1FDE:  MOVFF  00,4A8
1FE2:  RCALL  1904
1FE4:  MOVLB  4
1FE6:  CLRF   xD9
1FE8:  CLRF   xD8
1FEA:  MOVLW  78
1FEC:  MOVWF  xD7
1FEE:  MOVLW  83
1FF0:  MOVWF  xD6
1FF2:  MOVFF  03,4DD
1FF6:  MOVFF  02,4DC
1FFA:  MOVFF  01,4DB
1FFE:  MOVFF  00,4DA
2002:  MOVLB  0
2004:  CALL   0A6C
2008:  MOVFF  FEA,49D
200C:  MOVFF  FE9,49C
2010:  BCF    FD8.1
2012:  MOVLB  4
2014:  CLRF   xD9
2016:  CLRF   xD8
2018:  CLRF   xD7
201A:  MOVLW  85
201C:  MOVWF  xD6
201E:  MOVFF  03,4DD
2022:  MOVFF  02,4DC
2026:  MOVFF  01,4DB
202A:  MOVFF  00,4DA
202E:  MOVLB  0
2030:  CALL   168C
2034:  MOVFF  49D,FEA
2038:  MOVFF  49C,FE9
203C:  MOVFF  03,48D
2040:  MOVFF  02,48C
2044:  MOVFF  01,48B
2048:  MOVFF  00,48A
....................    N = 31+31*sin(Number*0.104-1.57);    
204C:  MOVLB  4
204E:  CLRF   xD7
2050:  MOVFF  49B,4D6
2054:  MOVLB  0
2056:  CALL   1656
205A:  MOVFF  03,4D9
205E:  MOVFF  02,4D8
2062:  MOVFF  01,4D7
2066:  MOVFF  00,4D6
206A:  MOVLW  F4
206C:  MOVLB  4
206E:  MOVWF  xDD
2070:  MOVLW  FD
2072:  MOVWF  xDC
2074:  MOVLW  54
2076:  MOVWF  xDB
2078:  MOVLW  7B
207A:  MOVWF  xDA
207C:  MOVLB  0
207E:  CALL   0A6C
2082:  MOVFF  03,49F
2086:  MOVFF  02,49E
208A:  MOVFF  01,49D
208E:  MOVFF  00,49C
2092:  BSF    FD8.1
2094:  MOVFF  03,4D9
2098:  MOVFF  02,4D8
209C:  MOVFF  01,4D7
20A0:  MOVFF  00,4D6
20A4:  MOVLW  C3
20A6:  MOVLB  4
20A8:  MOVWF  xDD
20AA:  MOVLW  F5
20AC:  MOVWF  xDC
20AE:  MOVLW  48
20B0:  MOVWF  xDB
20B2:  MOVLW  7F
20B4:  MOVWF  xDA
20B6:  MOVLB  0
20B8:  CALL   168C
20BC:  MOVFF  03,49F
20C0:  MOVFF  02,49E
20C4:  MOVFF  01,49D
20C8:  MOVFF  00,49C
20CC:  MOVFF  03,4A3
20D0:  MOVFF  02,4A2
20D4:  MOVFF  01,4A1
20D8:  MOVFF  00,4A0
20DC:  BRA    1C88
20DE:  MOVLB  4
20E0:  CLRF   xD9
20E2:  CLRF   xD8
20E4:  MOVLW  78
20E6:  MOVWF  xD7
20E8:  MOVLW  83
20EA:  MOVWF  xD6
20EC:  MOVFF  03,4DD
20F0:  MOVFF  02,4DC
20F4:  MOVFF  01,4DB
20F8:  MOVFF  00,4DA
20FC:  MOVLB  0
20FE:  CALL   0A6C
2102:  MOVFF  FEA,49D
2106:  MOVFF  FE9,49C
210A:  BCF    FD8.1
210C:  MOVLB  4
210E:  CLRF   xD9
2110:  CLRF   xD8
2112:  MOVLW  78
2114:  MOVWF  xD7
2116:  MOVLW  83
2118:  MOVWF  xD6
211A:  MOVFF  03,4DD
211E:  MOVFF  02,4DC
2122:  MOVFF  01,4DB
2126:  MOVFF  00,4DA
212A:  MOVLB  0
212C:  CALL   168C
2130:  MOVFF  49D,FEA
2134:  MOVFF  49C,FE9
2138:  MOVFF  03,491
213C:  MOVFF  02,490
2140:  MOVFF  01,48F
2144:  MOVFF  00,48E
....................    glcd_line(64,32,(int)M,(int)N,1); 
2148:  MOVFF  48D,4D5
214C:  MOVFF  48C,4D4
2150:  MOVFF  48B,4D3
2154:  MOVFF  48A,4D2
2158:  CALL   161A
215C:  MOVFF  01,49C
2160:  MOVFF  491,4D5
2164:  MOVFF  490,4D4
2168:  MOVFF  48F,4D3
216C:  MOVFF  48E,4D2
2170:  CALL   161A
2174:  MOVFF  01,49D
2178:  MOVLW  40
217A:  MOVLB  4
217C:  MOVWF  xA7
217E:  MOVLW  20
2180:  MOVWF  xA8
2182:  MOVFF  49C,4A9
2186:  MOVFF  01,4AA
218A:  MOVLW  01
218C:  MOVWF  xAB
218E:  MOVLB  0
2190:  CALL   056E
....................    gdram_vdk_to_gdram_glcd_area(32,0,64,64); 
2194:  MOVLW  20
2196:  MOVLB  4
2198:  MOVWF  x9C
219A:  CLRF   x9D
219C:  MOVLW  40
219E:  MOVWF  x9E
21A0:  MOVWF  x9F
21A2:  MOVLB  0
21A4:  BRA    1CD6
....................    setup_glcd(glcd_text_mode); 
21A6:  MOVLW  30
21A8:  MOVLB  4
21AA:  MOVWF  x9C
21AC:  MOVLB  0
21AE:  CALL   0364
....................    glcd_command(glcd_addr_line1); 
21B2:  MOVLW  80
21B4:  MOVLB  4
21B6:  MOVWF  xA3
21B8:  MOVLB  0
21BA:  CALL   035A
....................    printf(glcd_data,"%d",gio); 
21BE:  MOVFF  47B,49C
21C2:  MOVLW  18
21C4:  MOVLB  4
21C6:  MOVWF  x9D
21C8:  MOVLB  0
21CA:  RCALL  1E40
....................    glcd_command(glcd_addr_line2); 
21CC:  MOVLW  90
21CE:  MOVLB  4
21D0:  MOVWF  xA3
21D2:  MOVLB  0
21D4:  CALL   035A
....................    printf(glcd_data,"%d",phut); 
21D8:  MOVFF  47A,49C
21DC:  MOVLW  18
21DE:  MOVLB  4
21E0:  MOVWF  x9D
21E2:  MOVLB  0
21E4:  RCALL  1E40
....................    glcd_command(glcd_addr_line3);    
21E6:  MOVLW  88
21E8:  MOVLB  4
21EA:  MOVWF  xA3
21EC:  MOVLB  0
21EE:  CALL   035A
....................    printf(glcd_data,"%d",giay); 
21F2:  MOVFF  478,49C
21F6:  MOVLW  18
21F8:  MOVLB  4
21FA:  MOVWF  x9D
21FC:  MOVLB  0
21FE:  RCALL  1E40
....................    setup_glcd(glcd_graphic_mode);     
2200:  MOVLW  36
2202:  MOVLB  4
2204:  MOVWF  x9C
2206:  MOVLB  0
2208:  CALL   0364
220C:  GOTO   28B6 (RETURN)
.................... } 
....................  
.................... void BaoChay(){ 
....................    if ((lm35>40) && (ttqn==0)){ 
*
1152:  MOVLB  4
1154:  CLRF   xD5
1156:  CLRF   xD4
1158:  MOVLW  20
115A:  MOVWF  xD3
115C:  MOVLW  84
115E:  MOVWF  xD2
1160:  MOVFF  487,4D9
1164:  MOVFF  486,4D8
1168:  MOVFF  485,4D7
116C:  MOVFF  484,4D6
1170:  MOVLB  0
1172:  RCALL  109E
1174:  BNC   1186
1176:  MOVLB  4
1178:  BTFSS  x89.0
117A:  BRA    1180
117C:  MOVLB  0
117E:  BRA    1186
....................       ttqn = 1; 
1180:  BSF    x89.0
....................       triac_2_off(); 
1182:  MOVLB  0
1184:  BRA    1142
....................    } 
....................    if ((lm35<40)&&(ttqn==1)){ 
1186:  MOVFF  487,4D5
118A:  MOVFF  486,4D4
118E:  MOVFF  485,4D3
1192:  MOVFF  484,4D2
1196:  MOVLB  4
1198:  CLRF   xD9
119A:  CLRF   xD8
119C:  MOVLW  20
119E:  MOVWF  xD7
11A0:  MOVLW  84
11A2:  MOVWF  xD6
11A4:  MOVLB  0
11A6:  RCALL  109E
11A8:  BNC   11BA
11AA:  MOVLB  4
11AC:  BTFSC  x89.0
11AE:  BRA    11B4
11B0:  MOVLB  0
11B2:  BRA    11BA
....................       ttqn = 0; 
11B4:  BCF    x89.0
....................       triac_2_on(); 
11B6:  MOVLB  0
11B8:  BRA    114A
....................    } 
11BA:  GOTO   2742 (RETURN)
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
*
0FEA:  MOVFF  49C,4A0
0FEE:  MOVFF  49D,4A1
0FF2:  RCALL  0FCE
....................    for (int i = 0; i<6;i++){ 
0FF4:  MOVLB  4
0FF6:  CLRF   x9E
0FF8:  MOVF   x9E,W
0FFA:  SUBLW  05
0FFC:  BNC   1050
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
0FFE:  MOVF   x9E,W
1000:  SUBLW  03
1002:  BNZ   1016
1004:  MOVLW  01
1006:  ADDWF  x9C,W
1008:  MOVWF  x9F
100A:  MOVWF  xA0
100C:  MOVFF  49D,4A1
1010:  MOVLB  0
1012:  RCALL  0FCE
1014:  MOVLB  4
....................       lcd_data(lcd_so_x[lcd_so][i]); 
1016:  MOVFF  49B,4A4
101A:  MOVLW  06
101C:  MOVWF  xA5
101E:  MOVLB  0
1020:  CALL   06A4
1024:  MOVF   01,W
1026:  MOVLB  4
1028:  CLRF   xA0
102A:  MOVWF  x9F
102C:  CLRF   03
102E:  MOVF   x9E,W
1030:  ADDWF  x9F,W
1032:  MOVWF  01
1034:  MOVF   xA0,W
1036:  ADDWFC 03,F
1038:  MOVF   01,W
103A:  MOVLB  0
103C:  CALL   00E8
1040:  MOVLB  4
1042:  MOVWF  x9F
1044:  MOVWF  xA8
1046:  MOVLB  0
1048:  RCALL  09EC
104A:  MOVLB  4
104C:  INCF   x9E,F
104E:  BRA    0FF8
....................    } 
1050:  MOVLB  0
1052:  RETURN 0
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0DE2:  MOVFF  478,49B
0DE6:  MOVLW  0A
0DE8:  MOVLB  4
0DEA:  MOVWF  x9C
0DEC:  MOVLB  0
0DEE:  RCALL  0A20
0DF0:  CLRF   03
0DF2:  MOVF   00,W
0DF4:  CALL   00AE
0DF8:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0DFA:  MOVFF  478,49B
0DFE:  MOVLW  0A
0E00:  MOVLB  4
0E02:  MOVWF  x9C
0E04:  MOVLB  0
0E06:  RCALL  0A20
0E08:  CLRF   03
0E0A:  MOVF   01,W
0E0C:  CALL   00AE
0E10:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0E12:  MOVFF  47A,49B
0E16:  MOVLW  0A
0E18:  MOVLB  4
0E1A:  MOVWF  x9C
0E1C:  MOVLB  0
0E1E:  RCALL  0A20
0E20:  CLRF   03
0E22:  MOVF   00,W
0E24:  CALL   00AE
0E28:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0E2A:  MOVFF  47A,49B
0E2E:  MOVLW  0A
0E30:  MOVLB  4
0E32:  MOVWF  x9C
0E34:  MOVLB  0
0E36:  RCALL  0A20
0E38:  CLRF   03
0E3A:  MOVF   01,W
0E3C:  CALL   00AE
0E40:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0E42:  MOVFF  47B,49B
0E46:  MOVLW  0A
0E48:  MOVLB  4
0E4A:  MOVWF  x9C
0E4C:  MOVLB  0
0E4E:  RCALL  0A20
0E50:  CLRF   03
0E52:  MOVF   00,W
0E54:  CALL   00AE
0E58:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0E5A:  MOVFF  47B,49B
0E5E:  MOVLW  0A
0E60:  MOVLB  4
0E62:  MOVWF  x9C
0E64:  MOVLB  0
0E66:  RCALL  0A20
0E68:  CLRF   03
0E6A:  MOVF   01,W
0E6C:  CALL   00AE
0E70:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
0E72:  MOVLB  4
0E74:  DECFSZ x7F,W
0E76:  BRA    0E7C
0E78:  BCF    26.7
0E7A:  BRA    0E8E
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
0E7C:  MOVF   x7F,W
0E7E:  SUBLW  02
0E80:  BNZ   0E86
0E82:  BCF    29.7
0E84:  BRA    0E8E
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
0E86:  MOVF   x7F,W
0E88:  SUBLW  03
0E8A:  BNZ   0E8E
0E8C:  BCF    2C.7
....................    lcd_command(lcd_addr_line4); 
0E8E:  MOVLW  D4
0E90:  MOVWF  xA3
0E92:  MOVLB  0
0E94:  CALL   0296
....................    printf(lcd_data,"%.1f",lm35); 
0E98:  MOVLW  89
0E9A:  MOVWF  FE9
0E9C:  MOVFF  487,49E
0EA0:  MOVFF  486,49D
0EA4:  MOVFF  485,49C
0EA8:  MOVFF  484,49B
0EAC:  MOVLW  01
0EAE:  MOVLB  4
0EB0:  MOVWF  x9F
0EB2:  MOVLB  0
0EB4:  BRA    0C3A
0EB6:  RETURN 0
.................... } 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    D = count/10; 
*
1054:  MOVFF  495,4A2
1058:  MOVLW  0A
105A:  MOVLB  4
105C:  MOVWF  xA3
105E:  MOVLB  0
1060:  RCALL  0FA2
1062:  MOVFF  01,493
1066:  MOVLB  4
....................    C = count%10; 
1068:  MOVFF  495,4A2
106C:  MOVLW  0A
106E:  MOVWF  xA3
1070:  MOVLB  0
1072:  RCALL  0FA2
1074:  MOVFF  00,494
1078:  MOVLB  4
....................    LCD_SO_LON(D,1,0); 
107A:  MOVFF  493,49B
107E:  MOVLW  01
1080:  MOVWF  x9C
1082:  CLRF   x9D
1084:  MOVLB  0
1086:  RCALL  0FEA
....................    LCD_SO_LON(C,1,3); 
1088:  MOVFF  494,49B
108C:  MOVLW  01
108E:  MOVLB  4
1090:  MOVWF  x9C
1092:  MOVLW  03
1094:  MOVWF  x9D
1096:  MOVLB  0
1098:  RCALL  0FEA
109A:  GOTO   2724 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
.................... } 
....................  
.................... void main() 
*
251E:  CLRF   FF8
2520:  BCF    FD0.7
2522:  BSF    07.7
2524:  BSF    F93.1
2526:  BSF    F93.0
2528:  MOVLW  31
252A:  MOVWF  FC8
252C:  MOVLW  28
252E:  MOVWF  FC6
2530:  BSF    FC7.7
2532:  BCF    FC7.6
2534:  CLRF   1B
2536:  CLRF   22
2538:  CLRF   23
253A:  CLRF   24
253C:  CLRF   25
253E:  CLRF   2E
2540:  CLRF   2F
2542:  CLRF   30
2544:  CLRF   34
2546:  CLRF   33
2548:  CLRF   32
254A:  CLRF   31
254C:  CLRF   38
254E:  CLRF   37
2550:  CLRF   36
2552:  MOVLW  01
2554:  MOVWF  35
2556:  MOVLW  80
2558:  MOVWF  3C
255A:  CLRF   3B
255C:  CLRF   3A
255E:  CLRF   39
2560:  CLRF   40
2562:  CLRF   3F
2564:  CLRF   3E
2566:  CLRF   3D
2568:  MOVWF  44
256A:  CLRF   43
256C:  CLRF   46
256E:  MOVLW  01
2570:  MOVWF  45
2572:  CLRF   48
2574:  CLRF   47
2576:  MOVLW  80
2578:  MOVWF  4C
257A:  CLRF   4B
257C:  CLRF   4E
257E:  MOVLW  01
2580:  MOVWF  4D
2582:  CLRF   50
2584:  CLRF   4F
2586:  CLRF   52
2588:  CLRF   51
258A:  CLRF   53
258C:  MOVLW  20
258E:  MOVWF  54
2590:  CLRF   55
2592:  MOVLW  01
2594:  MOVWF  56
2596:  MOVLW  10
2598:  MOVWF  57
259A:  CLRF   58
259C:  CLRF   5C
259E:  CLRF   5B
25A0:  CLRF   5A
25A2:  MOVLW  01
25A4:  MOVWF  59
25A6:  CLRF   x60
25A8:  CLRF   5F
25AA:  CLRF   5E
25AC:  MOVWF  5D
25AE:  SETF   x64
25B0:  SETF   x63
25B2:  SETF   x62
25B4:  MOVLW  FE
25B6:  MOVWF  x61
25B8:  MOVLW  80
25BA:  MOVWF  x68
25BC:  CLRF   x67
25BE:  CLRF   x66
25C0:  CLRF   x65
25C2:  MOVWF  x6C
25C4:  CLRF   x6B
25C6:  CLRF   x6A
25C8:  CLRF   x69
25CA:  MOVLW  7F
25CC:  MOVWF  x70
25CE:  SETF   x6F
25D0:  SETF   x6E
25D2:  SETF   x6D
25D4:  MOVLW  01
25D6:  MOVWF  x71
25D8:  MOVWF  x72
25DA:  MOVLB  4
25DC:  CLRF   x7C
25DE:  CLRF   x7D
25E0:  CLRF   x7E
25E2:  CLRF   x7F
25E4:  CLRF   x83
25E6:  CLRF   x82
25E8:  CLRF   x81
25EA:  CLRF   x80
25EC:  CLRF   x87
25EE:  CLRF   x86
25F0:  CLRF   x85
25F2:  CLRF   x84
25F4:  CLRF   x88
25F6:  BCF    x89.0
25F8:  MOVLW  78
25FA:  MOVWF  x92
25FC:  CLRF   x95
25FE:  CLRF   x96
2600:  CLRF   x97
2602:  CLRF   x99
2604:  CLRF   x98
2606:  MOVF   FC1,W
2608:  ANDLW  C0
260A:  IORLW  0F
260C:  MOVWF  FC1
260E:  MOVLW  07
2610:  MOVWF  FB4
2612:  SETF   26
2614:  SETF   27
2616:  SETF   28
2618:  SETF   29
261A:  SETF   2A
261C:  SETF   2B
261E:  SETF   2C
2620:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
2622:  MOVLB  0
2624:  GOTO   01C4
....................    set_tris_b(0x3c); 
2628:  MOVLW  3C
262A:  MOVWF  F93
....................    setup_lcd(); 
262C:  GOTO   02D0
....................    setup_glcd(glcd_graphic_mode); 
2630:  MOVLW  36
2632:  MOVLB  4
2634:  MOVWF  x9C
2636:  MOVLB  0
2638:  CALL   0364
....................  
....................    glcd_mau_nen(0); 
263C:  MOVLB  4
263E:  CLRF   x9B
2640:  MOVLB  0
2642:  GOTO   03DE
....................    glcd_circle(64,32,31,0,1); 
2646:  MOVLW  40
2648:  MOVLB  4
264A:  MOVWF  x9B
264C:  MOVLW  20
264E:  MOVWF  x9C
2650:  MOVLW  1F
2652:  MOVWF  x9D
2654:  CLRF   x9E
2656:  MOVLW  01
2658:  MOVWF  x9F
265A:  MOVLB  0
265C:  GOTO   06F2
....................    gdram_vdk_to_gdram_glcd_all(); 
2660:  GOTO   090E
....................  
....................  
....................    lcd_command(0x40); 
2664:  MOVLW  40
2666:  MOVLB  4
2668:  MOVWF  xA3
266A:  MOVLB  0
266C:  CALL   0296
....................    for (int i = 0; i<64;i++){ 
2670:  MOVLB  4
2672:  CLRF   x9A
2674:  MOVF   x9A,W
2676:  SUBLW  3F
2678:  BNC   2696
....................       lcd_data(lcd_ma_8doan[i]); 
267A:  CLRF   03
267C:  MOVF   x9A,W
267E:  MOVLB  0
2680:  CALL   013A
2684:  MOVLB  4
2686:  MOVWF  x9B
2688:  MOVWF  xA8
268A:  MOVLB  0
268C:  CALL   09EC
2690:  MOVLB  4
2692:  INCF   x9A,F
2694:  BRA    2674
....................    } 
....................  
....................    lcd_command(lcd_addr_line1); 
2696:  MOVLW  80
2698:  MOVWF  xA3
269A:  MOVLB  0
269C:  CALL   0296
....................    lcd_data("**DEM SAN PHAM** "); 
26A0:  MOVLW  B2
26A2:  MOVWF  FF6
26A4:  MOVLW  01
26A6:  MOVWF  FF7
26A8:  GOTO   09FE
....................  
....................    setup_adc(ADC_CLOCK_DIV_32); 
26AC:  MOVF   FC0,W
26AE:  ANDLW  C0
26B0:  IORLW  02
26B2:  MOVWF  FC0
26B4:  BSF    FC0.7
26B6:  BSF    FC2.0
....................    setup_adc_ports(an0|VSS_VDD); 
26B8:  MOVF   FC1,W
26BA:  ANDLW  C0
26BC:  IORLW  0E
26BE:  MOVWF  FC1
....................    set_adc_channel(0); 
26C0:  MOVLW  00
26C2:  MOVWF  01
26C4:  MOVF   FC2,W
26C6:  ANDLW  C3
26C8:  IORWF  01,W
26CA:  MOVWF  FC2
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
26CC:  MOVLW  A8
26CE:  MOVWF  FD5
....................    set_timer0(0);    
26D0:  CLRF   FD7
26D2:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
26D4:  MOVLW  B5
26D6:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
26D8:  MOVLW  0B
26DA:  MOVWF  FCF
26DC:  MOVLW  DC
26DE:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
26E0:  MOVLW  C0
26E2:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
26E4:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
26E6:  MOVLB  4
26E8:  CLRF   x78
....................    bdn = 0; 
26EA:  CLRF   x79
....................    phut = 29; 
26EC:  MOVLW  1D
26EE:  MOVWF  x7A
....................    gio = 15; 
26F0:  MOVLW  0F
26F2:  MOVWF  x7B
....................    giai_ma(); 
26F4:  MOVLB  0
26F6:  CALL   0DE2
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
26FA:  MOVLB  4
26FC:  BTFSC  x79.7
26FE:  BRA    2708
2700:  MOVF   x79,W
2702:  SUBLW  09
2704:  BTFSS  FD8.0
2706:  BRA    289C
....................          hien_thi_8led_7doan_quet_all();      
2708:  MOVLB  0
270A:  CALL   0F70
....................          count = get_timer0(); 
270E:  MOVF   FD6,W
2710:  MOVLB  4
2712:  MOVWF  x95
....................          if (count != countT) { 
2714:  MOVF   x96,W
2716:  SUBWF  x95,W
2718:  BZ    273C
....................             countT = count;          
271A:  MOVFF  495,496
....................             LCD_DISPLAY_COUNTER(); 
271E:  MOVLB  0
2720:  GOTO   1054
....................             if (count >= max+1) {set_timer0(1);}    
2724:  MOVLW  01
2726:  MOVLB  4
2728:  ADDWF  x92,W
272A:  MOVWF  00
272C:  BTFSC  FE8.7
272E:  BRA    2736
2730:  MOVF   00,W
2732:  SUBWF  x95,W
2734:  BNC   273C
2736:  CLRF   FD7
2738:  MOVLW  01
273A:  MOVWF  FD6
....................          } 
....................          BaoChay(); 
273C:  MOVLB  0
273E:  GOTO   1152
....................          if(ttct_td==1) sang_tat_32led(5,1); 
2742:  DECFSZ 56,W
2744:  BRA    2756
2746:  MOVLW  05
2748:  MOVLB  4
274A:  MOVWF  x9B
274C:  MOVLW  01
274E:  MOVWF  x9C
2750:  MOVLB  0
2752:  CALL   134C
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
2756:  MOVF   56,W
2758:  SUBLW  02
275A:  BNZ   276C
275C:  MOVLW  05
275E:  MOVLB  4
2760:  MOVWF  x9B
2762:  MOVLW  01
2764:  MOVWF  x9C
2766:  MOVLB  0
2768:  CALL   13B0
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
276C:  MOVF   56,W
276E:  SUBLW  03
2770:  BNZ   2782
2772:  MOVLW  05
2774:  MOVLB  4
2776:  MOVWF  x9B
2778:  MOVLW  01
277A:  MOVWF  x9C
277C:  MOVLB  0
277E:  CALL   1432
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
2782:  MOVF   56,W
2784:  SUBLW  04
2786:  BNZ   2798
2788:  MOVLW  05
278A:  MOVLB  4
278C:  MOVWF  x9B
278E:  MOVLW  01
2790:  MOVWF  x9C
2792:  MOVLB  0
2794:  CALL   14B4
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
2798:  MOVF   56,W
279A:  SUBLW  05
279C:  BNZ   27AE
279E:  MOVLW  05
27A0:  MOVLB  4
27A2:  MOVWF  x9B
27A4:  MOVLW  01
27A6:  MOVWF  x9C
27A8:  MOVLB  0
27AA:  CALL   1538
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
27AE:  MOVF   56,W
27B0:  SUBLW  06
27B2:  BNZ   27C4
27B4:  MOVLW  05
27B6:  MOVLB  4
27B8:  MOVWF  x9B
27BA:  MOVLW  01
27BC:  MOVWF  x9C
27BE:  MOVLB  0
27C0:  CALL   1432
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
27C4:  MOVF   56,W
27C6:  SUBLW  07
27C8:  BNZ   27DA
27CA:  MOVLW  05
27CC:  MOVLB  4
27CE:  MOVWF  x9B
27D0:  MOVLW  01
27D2:  MOVWF  x9C
27D4:  MOVLB  0
27D6:  CALL   1432
....................          if(ttct_td==8) sang_tat_32led(5,1); 
27DA:  MOVF   56,W
27DC:  SUBLW  08
27DE:  BNZ   27F0
27E0:  MOVLW  05
27E2:  MOVLB  4
27E4:  MOVWF  x9B
27E6:  MOVLW  01
27E8:  MOVWF  x9C
27EA:  MOVLB  0
27EC:  CALL   134C
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
27F0:  MOVF   56,W
27F2:  SUBLW  09
27F4:  BNZ   2806
27F6:  MOVLW  05
27F8:  MOVLB  4
27FA:  MOVWF  x9B
27FC:  MOVLW  01
27FE:  MOVWF  x9C
2800:  MOVLB  0
2802:  CALL   13B0
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
2806:  MOVF   56,W
2808:  SUBLW  0A
280A:  BNZ   281C
280C:  MOVLW  05
280E:  MOVLB  4
2810:  MOVWF  x9B
2812:  MOVLW  01
2814:  MOVWF  x9C
2816:  MOVLB  0
2818:  CALL   1432
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
281C:  MOVF   56,W
281E:  SUBLW  0B
2820:  BNZ   2832
2822:  MOVLW  05
2824:  MOVLB  4
2826:  MOVWF  x9B
2828:  MOVLW  01
282A:  MOVWF  x9C
282C:  MOVLB  0
282E:  CALL   14B4
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
2832:  MOVF   56,W
2834:  SUBLW  0C
2836:  BNZ   2848
2838:  MOVLW  05
283A:  MOVLB  4
283C:  MOVWF  x9B
283E:  MOVLW  01
2840:  MOVWF  x9C
2842:  MOVLB  0
2844:  CALL   1538
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
2848:  MOVF   56,W
284A:  SUBLW  0D
284C:  BNZ   285E
284E:  MOVLW  05
2850:  MOVLB  4
2852:  MOVWF  x9B
2854:  MOVLW  01
2856:  MOVWF  x9C
2858:  MOVLB  0
285A:  CALL   14B4
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
285E:  MOVF   56,W
2860:  SUBLW  0E
2862:  BNZ   2874
2864:  MOVLW  05
2866:  MOVLB  4
2868:  MOVWF  x9B
286A:  MOVLW  01
286C:  MOVWF  x9C
286E:  MOVLB  0
2870:  GOTO   159E
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
2874:  MOVF   56,W
2876:  SUBLW  0F
2878:  BNZ   288A
287A:  MOVLW  05
287C:  MOVLB  4
287E:  MOVWF  x9B
2880:  MOVLW  01
2882:  MOVWF  x9C
2884:  MOVLB  0
2886:  CALL   1432
....................          if(ttct_td>15) ttct_td =1;       
288A:  BTFSC  56.7
288C:  BRA    2898
288E:  MOVF   56,W
2890:  SUBLW  0F
2892:  BC    2898
2894:  MOVLW  01
2896:  MOVWF  56
....................       } 
2898:  BRA    29D0
289A:  MOVLB  4
....................       else  
....................       { 
....................          bdn = bdn -10; 
289C:  MOVLW  0A
289E:  SUBWF  x79,F
....................          dem_tg_exit++; 
28A0:  INCF   x7C,F
....................          if (dem_tg_exit == 20) mode = 0;  
28A2:  MOVF   x7C,W
28A4:  SUBLW  14
28A6:  BNZ   28AA
28A8:  CLRF   x7F
....................          giay++;  
28AA:  INCF   x78,F
....................          draw(giay);  
28AC:  MOVFF  478,49B
28B0:  MOVLB  0
28B2:  GOTO   1F08
....................          temp = temp + read_adc();  
28B6:  BSF    FC2.1
28B8:  BTFSC  FC2.1
28BA:  BRA    28B8
28BC:  MOVFF  FC4,4D7
28C0:  MOVFF  FC3,4D6
28C4:  MOVLB  0
28C6:  CALL   1656
28CA:  BCF    FD8.1
28CC:  MOVFF  483,4D9
28D0:  MOVFF  482,4D8
28D4:  MOVFF  481,4D7
28D8:  MOVFF  480,4D6
28DC:  MOVFF  03,4DD
28E0:  MOVFF  02,4DC
28E4:  MOVFF  01,4DB
28E8:  MOVFF  00,4DA
28EC:  CALL   168C
28F0:  MOVFF  03,483
28F4:  MOVFF  02,482
28F8:  MOVFF  01,481
28FC:  MOVFF  00,480
....................          try++;  
2900:  MOVLB  4
2902:  INCF   x88,F
....................          delay_ms(1); 
2904:  MOVLW  01
2906:  MOVWF  xA0
2908:  MOVLB  0
290A:  CALL   02A8
....................          if (try == 2) { 
290E:  MOVLB  4
2910:  MOVF   x88,W
2912:  SUBLW  02
2914:  BNZ   29AE
....................             lm35 = temp /2.046;  
2916:  MOVFF  483,49E
291A:  MOVFF  482,49D
291E:  MOVFF  481,49C
2922:  MOVFF  480,49B
2926:  MOVLW  AA
2928:  MOVWF  xA2
292A:  MOVLW  F1
292C:  MOVWF  xA1
292E:  MOVLW  02
2930:  MOVWF  xA0
2932:  MOVLW  80
2934:  MOVWF  x9F
2936:  MOVLB  0
2938:  RCALL  2210
293A:  MOVFF  03,487
293E:  MOVFF  02,486
2942:  MOVFF  01,485
2946:  MOVFF  00,484
....................             lm35 = lm35 /2;  
294A:  MOVFF  487,49E
294E:  MOVFF  486,49D
2952:  MOVFF  485,49C
2956:  MOVFF  484,49B
295A:  MOVLB  4
295C:  CLRF   xA2
295E:  CLRF   xA1
2960:  CLRF   xA0
2962:  MOVLW  80
2964:  MOVWF  x9F
2966:  MOVLB  0
2968:  RCALL  2210
296A:  MOVFF  03,487
296E:  MOVFF  02,486
2972:  MOVFF  01,485
2976:  MOVFF  00,484
....................             try = 0;  
297A:  MOVLB  4
297C:  CLRF   x88
....................             temp = 0; 
297E:  CLRF   x83
2980:  CLRF   x82
2982:  CLRF   x81
2984:  CLRF   x80
....................             xuat_4led_7doan_giaima_xoa_so0((int)lm35); 
2986:  MOVFF  487,4D5
298A:  MOVFF  486,4D4
298E:  MOVFF  485,4D3
2992:  MOVFF  484,4D2
2996:  MOVLB  0
2998:  CALL   161A
299C:  MOVFF  01,49B
29A0:  MOVLB  4
29A2:  CLRF   x9D
29A4:  MOVFF  01,49C
29A8:  MOVLB  0
29AA:  BRA    23EA
29AC:  MOVLB  4
....................             } 
....................             if (giay==60) { giay = 0; phut++; 
29AE:  MOVF   x78,W
29B0:  SUBLW  3C
29B2:  BNZ   29CA
29B4:  CLRF   x78
29B6:  INCF   x7A,F
....................                if (phut == 60) { phut = 0; gio++;  
29B8:  MOVF   x7A,W
29BA:  SUBLW  3C
29BC:  BNZ   29CA
29BE:  CLRF   x7A
29C0:  INCF   x7B,F
....................                   if (gio == 24) gio = 0; 
29C2:  MOVF   x7B,W
29C4:  SUBLW  18
29C6:  BNZ   29CA
29C8:  CLRF   x7B
....................                }  
....................             } 
....................          giai_ma(); 
29CA:  MOVLB  0
29CC:  CALL   0DE2
....................       } 
29D0:  BRA    26FA
....................    }            
.................... } 
....................  
29D2:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
