CCS PCH C Compiler, Version 5.078, 43599               07-Dec-20 14:16

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\665\665.lst

               ROM used:   9196 bytes (28%)
                           Largest free fragment is 23568
               RAM used:   1170 (57%) at main() level
                           1244 (61%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   2062
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   019E
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 00,01
00FA:  DATA 02,05
00FC:  DATA 03,04
00FE:  DATA 01,02
0100:  DATA 20,03
0102:  DATA 07,03
0104:  DATA 06,06
0106:  DATA 02,05
0108:  DATA 03,03
010A:  DATA 06,06
010C:  DATA 02,03
010E:  DATA 03,04
0110:  DATA 07,03
0112:  DATA 07,20
0114:  DATA 20,07
0116:  DATA 07,06
0118:  DATA 06,03
011A:  DATA 03,04
011C:  DATA 00,06
011E:  DATA 06,05
0120:  DATA 03,04
0122:  DATA 01,01
0124:  DATA 07,20
0126:  DATA 20,07
0128:  DATA 00,06
012A:  DATA 02,05
012C:  DATA 03,04
012E:  DATA 00,06
0130:  DATA 02,03
0132:  DATA 03,04
0134:  DATA 20,20
0136:  DATA 20,20
0138:  DATA 20,20
013A:  CLRF   FF7
013C:  ADDLW  4A
013E:  MOVWF  FF6
0140:  MOVLW  01
0142:  ADDWFC FF7,F
0144:  TBLRD*+
0146:  MOVF   FF5,W
0148:  RETURN 0
014A:  DATA 07,0F
014C:  DATA 1F,1F
014E:  DATA 1F,1F
0150:  DATA 1F,1F
0152:  DATA 1F,1F
0154:  DATA 1F,00
0156:  DATA 00,00
0158:  DATA 00,00
015A:  DATA 1C,1E
015C:  DATA 1F,1F
015E:  DATA 1F,1F
0160:  DATA 1F,1F
0162:  DATA 00,00
0164:  DATA 00,00
0166:  DATA 00,1F
0168:  DATA 1F,1F
016A:  DATA 1F,1F
016C:  DATA 1F,1F
016E:  DATA 1F,1F
0170:  DATA 1E,1C
0172:  DATA 1F,1F
0174:  DATA 1F,1F
0176:  DATA 1F,1F
0178:  DATA 0F,07
017A:  DATA 1F,1F
017C:  DATA 1F,00
017E:  DATA 00,00
0180:  DATA 1F,1F
0182:  DATA 1F,1F
0184:  DATA 1F,1F
0186:  DATA 1F,1F
0188:  DATA 1F,1F
018A:  CLRF   FF7
018C:  ADDLW  9A
018E:  MOVWF  FF6
0190:  MOVLW  01
0192:  ADDWFC FF7,F
0194:  TBLRD*+
0196:  MOVF   FF5,W
0198:  RETURN 0
019A:  DATA 80,C0
019C:  DATA 94,D4
*
01B2:  DATA 2A,2A
01B4:  DATA 44,45
01B6:  DATA 4D,20
01B8:  DATA 53,41
01BA:  DATA 4E,20
01BC:  DATA 50,48
01BE:  DATA 41,4D
01C0:  DATA 2A,2A
01C2:  DATA 20,00
*
03BC:  MOVLB  4
03BE:  MOVF   xB1,W
03C0:  MULWF  xB3
03C2:  MOVFF  FF3,01
03C6:  MOVFF  FF4,00
03CA:  MULWF  xB4
03CC:  MOVF   FF3,W
03CE:  ADDWF  00,F
03D0:  MOVF   xB2,W
03D2:  MULWF  xB3
03D4:  MOVF   FF3,W
03D6:  ADDWFC 00,W
03D8:  MOVWF  02
03DA:  MOVLB  0
03DC:  RETURN 0
*
06A4:  CLRF   00
06A6:  CLRF   01
06A8:  MOVLB  4
06AA:  MOVF   x9A,W
06AC:  BCF    FD8.0
06AE:  BTFSC  x9B.0
06B0:  ADDWF  00,F
06B2:  RRCF   00,F
06B4:  RRCF   01,F
06B6:  BTFSC  x9B.1
06B8:  ADDWF  00,F
06BA:  RRCF   00,F
06BC:  RRCF   01,F
06BE:  BTFSC  x9B.2
06C0:  ADDWF  00,F
06C2:  RRCF   00,F
06C4:  RRCF   01,F
06C6:  BTFSC  x9B.3
06C8:  ADDWF  00,F
06CA:  RRCF   00,F
06CC:  RRCF   01,F
06CE:  BTFSC  x9B.4
06D0:  ADDWF  00,F
06D2:  RRCF   00,F
06D4:  RRCF   01,F
06D6:  BTFSC  x9B.5
06D8:  ADDWF  00,F
06DA:  RRCF   00,F
06DC:  RRCF   01,F
06DE:  BTFSC  x9B.6
06E0:  ADDWF  00,F
06E2:  RRCF   00,F
06E4:  RRCF   01,F
06E6:  BTFSC  x9B.7
06E8:  ADDWF  00,F
06EA:  RRCF   00,F
06EC:  RRCF   01,F
06EE:  MOVLB  0
06F0:  RETURN 0
*
09FE:  TBLRD*+
0A00:  MOVF   FF5,F
0A02:  BZ    0A1C
0A04:  MOVFF  FF6,491
0A08:  MOVFF  FF7,492
0A0C:  MOVFF  FF5,496
0A10:  RCALL  09EC
0A12:  MOVFF  491,FF6
0A16:  MOVFF  492,FF7
0A1A:  BRA    09FE
0A1C:  GOTO   21DC (RETURN)
0A20:  MOVLB  4
0A22:  MOVF   x91,W
0A24:  XORWF  x92,W
0A26:  ANDLW  80
0A28:  MOVWF  x94
0A2A:  BTFSS  x91.7
0A2C:  BRA    0A32
0A2E:  COMF   x91,F
0A30:  INCF   x91,F
0A32:  BTFSS  x92.7
0A34:  BRA    0A3A
0A36:  COMF   x92,F
0A38:  INCF   x92,F
0A3A:  MOVF   x92,W
0A3C:  CLRF   01
0A3E:  SUBWF  x91,W
0A40:  BC    0A48
0A42:  MOVFF  491,00
0A46:  BRA    0A60
0A48:  CLRF   00
0A4A:  MOVLW  08
0A4C:  MOVWF  x93
0A4E:  RLCF   x91,F
0A50:  RLCF   00,F
0A52:  MOVF   x92,W
0A54:  SUBWF  00,W
0A56:  BTFSC  FD8.0
0A58:  MOVWF  00
0A5A:  RLCF   01,F
0A5C:  DECFSZ x93,F
0A5E:  BRA    0A4E
0A60:  BTFSS  x94.7
0A62:  BRA    0A68
0A64:  COMF   01,F
0A66:  INCF   01,F
0A68:  MOVLB  0
0A6A:  RETURN 0
*
0C06:  CLRF   01
0C08:  CLRF   02
0C0A:  CLRF   00
0C0C:  CLRF   03
0C0E:  MOVLB  4
0C10:  MOVF   x98,W
0C12:  BNZ   0C18
0C14:  MOVF   x97,W
0C16:  BZ    0C48
0C18:  MOVLW  10
0C1A:  MOVWF  x99
0C1C:  BCF    FD8.0
0C1E:  RLCF   x95,F
0C20:  RLCF   x96,F
0C22:  RLCF   00,F
0C24:  RLCF   03,F
0C26:  MOVF   x98,W
0C28:  SUBWF  03,W
0C2A:  BNZ   0C30
0C2C:  MOVF   x97,W
0C2E:  SUBWF  00,W
0C30:  BNC   0C40
0C32:  MOVF   x97,W
0C34:  SUBWF  00,F
0C36:  BTFSS  FD8.0
0C38:  DECF   03,F
0C3A:  MOVF   x98,W
0C3C:  SUBWF  03,F
0C3E:  BSF    FD8.0
0C40:  RLCF   01,F
0C42:  RLCF   02,F
0C44:  DECFSZ x99,F
0C46:  BRA    0C1C
0C48:  MOVLB  0
0C4A:  RETURN 0
*
0DB6:  MOVLB  4
0DB8:  MOVF   x99,W
0DBA:  CLRF   01
0DBC:  SUBWF  x98,W
0DBE:  BC    0DC6
0DC0:  MOVFF  498,00
0DC4:  BRA    0DDE
0DC6:  CLRF   00
0DC8:  MOVLW  08
0DCA:  MOVWF  x9A
0DCC:  RLCF   x98,F
0DCE:  RLCF   00,F
0DD0:  MOVF   x99,W
0DD2:  SUBWF  00,W
0DD4:  BTFSC  FD8.0
0DD6:  MOVWF  00
0DD8:  RLCF   01,F
0DDA:  DECFSZ x9A,F
0DDC:  BRA    0DCC
0DDE:  MOVLB  0
0DE0:  RETURN 0
*
130C:  MOVLW  8E
130E:  MOVWF  00
1310:  MOVLB  4
1312:  MOVF   xC8,W
1314:  SUBWF  00,F
1316:  MOVFF  4C9,02
131A:  MOVFF  4CA,01
131E:  BSF    02.7
1320:  MOVF   00,F
1322:  BZ    1336
1324:  BCF    FD8.0
1326:  MOVF   02,F
1328:  BNZ   132E
132A:  MOVF   01,F
132C:  BZ    1336
132E:  RRCF   02,F
1330:  RRCF   01,F
1332:  DECFSZ 00,F
1334:  BRA    1324
1336:  BTFSS  xC9.7
1338:  BRA    1344
133A:  COMF   01,F
133C:  COMF   02,F
133E:  INCF   01,F
1340:  BTFSC  FD8.2
1342:  INCF   02,F
1344:  MOVLB  0
1346:  RETURN 0
1348:  MOVLW  8E
134A:  MOVWF  00
134C:  MOVFF  4CD,01
1350:  MOVFF  4CC,02
1354:  CLRF   03
1356:  MOVF   01,F
1358:  BNZ   136C
135A:  MOVFF  02,01
135E:  CLRF   02
1360:  MOVLW  08
1362:  SUBWF  00,F
1364:  MOVF   01,F
1366:  BNZ   136C
1368:  CLRF   00
136A:  BRA    137C
136C:  BCF    FD8.0
136E:  BTFSC  01.7
1370:  BRA    137A
1372:  RLCF   02,F
1374:  RLCF   01,F
1376:  DECF   00,F
1378:  BRA    136C
137A:  BCF    01.7
137C:  RETURN 0
137E:  MOVLB  4
1380:  MOVF   xCC,W
1382:  BTFSC  FD8.2
1384:  BRA    1468
1386:  MOVWF  00
1388:  MOVF   xD0,W
138A:  BTFSC  FD8.2
138C:  BRA    1468
138E:  ADDWF  00,F
1390:  BNC   139A
1392:  MOVLW  81
1394:  ADDWF  00,F
1396:  BC    1468
1398:  BRA    13A2
139A:  MOVLW  7F
139C:  SUBWF  00,F
139E:  BNC   1468
13A0:  BZ    1468
13A2:  MOVFF  4CD,4D4
13A6:  MOVF   xD1,W
13A8:  XORWF  xD4,F
13AA:  BSF    xCD.7
13AC:  BSF    xD1.7
13AE:  MOVF   xCF,W
13B0:  MULWF  xD3
13B2:  MOVFF  FF4,4D6
13B6:  MOVF   xCE,W
13B8:  MULWF  xD2
13BA:  MOVFF  FF4,03
13BE:  MOVFF  FF3,4D5
13C2:  MULWF  xD3
13C4:  MOVF   FF3,W
13C6:  ADDWF  xD6,F
13C8:  MOVF   FF4,W
13CA:  ADDWFC xD5,F
13CC:  MOVLW  00
13CE:  ADDWFC 03,F
13D0:  MOVF   xCF,W
13D2:  MULWF  xD2
13D4:  MOVF   FF3,W
13D6:  ADDWF  xD6,F
13D8:  MOVF   FF4,W
13DA:  ADDWFC xD5,F
13DC:  MOVLW  00
13DE:  CLRF   02
13E0:  ADDWFC 03,F
13E2:  ADDWFC 02,F
13E4:  MOVF   xCD,W
13E6:  MULWF  xD3
13E8:  MOVF   FF3,W
13EA:  ADDWF  xD5,F
13EC:  MOVF   FF4,W
13EE:  ADDWFC 03,F
13F0:  MOVLW  00
13F2:  ADDWFC 02,F
13F4:  MOVF   xCD,W
13F6:  MULWF  xD2
13F8:  MOVF   FF3,W
13FA:  ADDWF  03,F
13FC:  MOVF   FF4,W
13FE:  ADDWFC 02,F
1400:  MOVLW  00
1402:  CLRF   01
1404:  ADDWFC 01,F
1406:  MOVF   xCF,W
1408:  MULWF  xD1
140A:  MOVF   FF3,W
140C:  ADDWF  xD5,F
140E:  MOVF   FF4,W
1410:  ADDWFC 03,F
1412:  MOVLW  00
1414:  ADDWFC 02,F
1416:  ADDWFC 01,F
1418:  MOVF   xCE,W
141A:  MULWF  xD1
141C:  MOVF   FF3,W
141E:  ADDWF  03,F
1420:  MOVF   FF4,W
1422:  ADDWFC 02,F
1424:  MOVLW  00
1426:  ADDWFC 01,F
1428:  MOVF   xCD,W
142A:  MULWF  xD1
142C:  MOVF   FF3,W
142E:  ADDWF  02,F
1430:  MOVF   FF4,W
1432:  ADDWFC 01,F
1434:  INCF   00,F
1436:  BTFSC  01.7
1438:  BRA    1444
143A:  RLCF   xD5,F
143C:  RLCF   03,F
143E:  RLCF   02,F
1440:  RLCF   01,F
1442:  DECF   00,F
1444:  MOVLW  00
1446:  BTFSS  xD5.7
1448:  BRA    145E
144A:  INCF   03,F
144C:  ADDWFC 02,F
144E:  ADDWFC 01,F
1450:  MOVF   01,W
1452:  BNZ   145E
1454:  MOVF   02,W
1456:  BNZ   145E
1458:  MOVF   03,W
145A:  BNZ   145E
145C:  INCF   00,F
145E:  BTFSC  xD4.7
1460:  BSF    01.7
1462:  BTFSS  xD4.7
1464:  BCF    01.7
1466:  BRA    1470
1468:  CLRF   00
146A:  CLRF   01
146C:  CLRF   02
146E:  CLRF   03
1470:  MOVLB  0
1472:  RETURN 0
1474:  MOVLW  80
1476:  BTFSS  FD8.1
1478:  BRA    147E
147A:  MOVLB  4
147C:  XORWF  xD1,F
147E:  MOVLB  4
1480:  CLRF   xD6
1482:  CLRF   xD7
1484:  MOVFF  4CD,4D5
1488:  MOVF   xD1,W
148A:  XORWF  xD5,F
148C:  MOVF   xCC,W
148E:  BTFSC  FD8.2
1490:  BRA    1650
1492:  MOVWF  xD4
1494:  MOVWF  00
1496:  MOVF   xD0,W
1498:  BTFSC  FD8.2
149A:  BRA    1662
149C:  SUBWF  xD4,F
149E:  BTFSC  FD8.2
14A0:  BRA    15A8
14A2:  BNC   1520
14A4:  MOVFF  4D1,4DA
14A8:  BSF    xDA.7
14AA:  MOVFF  4D2,4D9
14AE:  MOVFF  4D3,4D8
14B2:  CLRF   xD7
14B4:  BCF    FD8.0
14B6:  RRCF   xDA,F
14B8:  RRCF   xD9,F
14BA:  RRCF   xD8,F
14BC:  RRCF   xD7,F
14BE:  DECFSZ xD4,F
14C0:  BRA    14B2
14C2:  BTFSS  xD5.7
14C4:  BRA    14CC
14C6:  BSF    xD6.0
14C8:  BRA    168A
14CA:  BCF    xD6.0
14CC:  BCF    xD4.0
14CE:  BSF    xD6.4
14D0:  MOVLW  04
14D2:  MOVWF  FEA
14D4:  MOVLW  CF
14D6:  MOVWF  FE9
14D8:  BRA    16B0
14DA:  BCF    xD6.4
14DC:  BTFSC  xD5.7
14DE:  BRA    14F4
14E0:  BTFSS  xD4.0
14E2:  BRA    150A
14E4:  RRCF   xDA,F
14E6:  RRCF   xD9,F
14E8:  RRCF   xD8,F
14EA:  RRCF   xD7,F
14EC:  INCF   00,F
14EE:  BTFSC  FD8.2
14F0:  BRA    1680
14F2:  BRA    150A
14F4:  BTFSC  xDA.7
14F6:  BRA    1510
14F8:  BCF    FD8.0
14FA:  RLCF   xD7,F
14FC:  RLCF   xD8,F
14FE:  RLCF   xD9,F
1500:  RLCF   xDA,F
1502:  DECF   00,F
1504:  BTFSC  FD8.2
1506:  BRA    1680
1508:  BRA    14F4
150A:  BSF    xD6.6
150C:  BRA    15E8
150E:  BCF    xD6.6
1510:  MOVFF  4CD,4D5
1514:  BTFSS  xCD.7
1516:  BRA    151C
1518:  BSF    xDA.7
151A:  BRA    1672
151C:  BCF    xDA.7
151E:  BRA    1672
1520:  MOVFF  4D0,4D4
1524:  MOVFF  4D0,00
1528:  MOVF   xCC,W
152A:  SUBWF  xD4,F
152C:  MOVFF  4CD,4DA
1530:  BSF    xDA.7
1532:  MOVFF  4CE,4D9
1536:  MOVFF  4CF,4D8
153A:  CLRF   xD7
153C:  BCF    FD8.0
153E:  RRCF   xDA,F
1540:  RRCF   xD9,F
1542:  RRCF   xD8,F
1544:  RRCF   xD7,F
1546:  DECFSZ xD4,F
1548:  BRA    153A
154A:  BTFSS  xD5.7
154C:  BRA    1554
154E:  BSF    xD6.1
1550:  BRA    168A
1552:  BCF    xD6.1
1554:  BCF    xD4.0
1556:  BSF    xD6.5
1558:  MOVLW  04
155A:  MOVWF  FEA
155C:  MOVLW  D3
155E:  MOVWF  FE9
1560:  BRA    16B0
1562:  BCF    xD6.5
1564:  BTFSC  xD5.7
1566:  BRA    157C
1568:  BTFSS  xD4.0
156A:  BRA    1592
156C:  RRCF   xDA,F
156E:  RRCF   xD9,F
1570:  RRCF   xD8,F
1572:  RRCF   xD7,F
1574:  INCF   00,F
1576:  BTFSC  FD8.2
1578:  BRA    1680
157A:  BRA    1592
157C:  BTFSC  xDA.7
157E:  BRA    1598
1580:  BCF    FD8.0
1582:  RLCF   xD7,F
1584:  RLCF   xD8,F
1586:  RLCF   xD9,F
1588:  RLCF   xDA,F
158A:  DECF   00,F
158C:  BTFSC  FD8.2
158E:  BRA    1680
1590:  BRA    157C
1592:  BSF    xD6.7
1594:  BRA    15E8
1596:  BCF    xD6.7
1598:  MOVFF  4D1,4D5
159C:  BTFSS  xD1.7
159E:  BRA    15A4
15A0:  BSF    xDA.7
15A2:  BRA    1672
15A4:  BCF    xDA.7
15A6:  BRA    1672
15A8:  MOVFF  4D1,4DA
15AC:  BSF    xDA.7
15AE:  MOVFF  4D2,4D9
15B2:  MOVFF  4D3,4D8
15B6:  BTFSS  xD5.7
15B8:  BRA    15C2
15BA:  BCF    xDA.7
15BC:  BSF    xD6.2
15BE:  BRA    168A
15C0:  BCF    xD6.2
15C2:  CLRF   xD7
15C4:  BCF    xD4.0
15C6:  MOVLW  04
15C8:  MOVWF  FEA
15CA:  MOVLW  CF
15CC:  MOVWF  FE9
15CE:  BRA    16B0
15D0:  BTFSC  xD5.7
15D2:  BRA    160C
15D4:  MOVFF  4CD,4D5
15D8:  BTFSS  xD4.0
15DA:  BRA    15E8
15DC:  RRCF   xDA,F
15DE:  RRCF   xD9,F
15E0:  RRCF   xD8,F
15E2:  RRCF   xD7,F
15E4:  INCF   00,F
15E6:  BZ    1680
15E8:  BTFSS  xD7.7
15EA:  BRA    1602
15EC:  INCF   xD8,F
15EE:  BNZ   1602
15F0:  INCF   xD9,F
15F2:  BNZ   1602
15F4:  INCF   xDA,F
15F6:  BNZ   1602
15F8:  RRCF   xDA,F
15FA:  RRCF   xD9,F
15FC:  RRCF   xD8,F
15FE:  INCF   00,F
1600:  BZ    1680
1602:  BTFSC  xD6.6
1604:  BRA    150E
1606:  BTFSC  xD6.7
1608:  BRA    1596
160A:  BRA    1644
160C:  MOVLW  80
160E:  XORWF  xDA,F
1610:  BTFSS  xDA.7
1612:  BRA    161C
1614:  BRA    168A
1616:  MOVFF  4D1,4D5
161A:  BRA    1630
161C:  MOVFF  4CD,4D5
1620:  MOVF   xDA,F
1622:  BNZ   1630
1624:  MOVF   xD9,F
1626:  BNZ   1630
1628:  MOVF   xD8,F
162A:  BNZ   1630
162C:  CLRF   00
162E:  BRA    1672
1630:  BTFSC  xDA.7
1632:  BRA    1644
1634:  BCF    FD8.0
1636:  RLCF   xD7,F
1638:  RLCF   xD8,F
163A:  RLCF   xD9,F
163C:  RLCF   xDA,F
163E:  DECFSZ 00,F
1640:  BRA    1630
1642:  BRA    1680
1644:  BTFSS  xD5.7
1646:  BRA    164C
1648:  BSF    xDA.7
164A:  BRA    1672
164C:  BCF    xDA.7
164E:  BRA    1672
1650:  MOVFF  4D0,00
1654:  MOVFF  4D1,4DA
1658:  MOVFF  4D2,4D9
165C:  MOVFF  4D3,4D8
1660:  BRA    1672
1662:  MOVFF  4CC,00
1666:  MOVFF  4CD,4DA
166A:  MOVFF  4CE,4D9
166E:  MOVFF  4CF,4D8
1672:  MOVFF  4DA,01
1676:  MOVFF  4D9,02
167A:  MOVFF  4D8,03
167E:  BRA    16E8
1680:  CLRF   00
1682:  CLRF   01
1684:  CLRF   02
1686:  CLRF   03
1688:  BRA    16E8
168A:  CLRF   xD7
168C:  COMF   xD8,F
168E:  COMF   xD9,F
1690:  COMF   xDA,F
1692:  COMF   xD7,F
1694:  INCF   xD7,F
1696:  BNZ   16A2
1698:  INCF   xD8,F
169A:  BNZ   16A2
169C:  INCF   xD9,F
169E:  BNZ   16A2
16A0:  INCF   xDA,F
16A2:  BTFSC  xD6.0
16A4:  BRA    14CA
16A6:  BTFSC  xD6.1
16A8:  BRA    1552
16AA:  BTFSC  xD6.2
16AC:  BRA    15C0
16AE:  BRA    1616
16B0:  MOVF   FEF,W
16B2:  ADDWF  xD8,F
16B4:  BNC   16C0
16B6:  INCF   xD9,F
16B8:  BNZ   16C0
16BA:  INCF   xDA,F
16BC:  BTFSC  FD8.2
16BE:  BSF    xD4.0
16C0:  MOVF   FED,F
16C2:  MOVF   FEF,W
16C4:  ADDWF  xD9,F
16C6:  BNC   16CE
16C8:  INCF   xDA,F
16CA:  BTFSC  FD8.2
16CC:  BSF    xD4.0
16CE:  MOVF   FED,F
16D0:  MOVF   FEF,W
16D2:  BTFSC  FEF.7
16D4:  BRA    16D8
16D6:  XORLW  80
16D8:  ADDWF  xDA,F
16DA:  BTFSC  FD8.0
16DC:  BSF    xD4.0
16DE:  BTFSC  xD6.4
16E0:  BRA    14DA
16E2:  BTFSC  xD6.5
16E4:  BRA    1562
16E6:  BRA    15D0
16E8:  MOVLB  0
16EA:  RETURN 0
16EC:  MOVFF  4C9,4D0
16F0:  MOVLB  4
16F2:  MOVF   xCD,W
16F4:  XORWF  xD0,F
16F6:  BTFSS  xD0.7
16F8:  BRA    1704
16FA:  BCF    FD8.2
16FC:  BCF    FD8.0
16FE:  BTFSC  xC9.7
1700:  BSF    FD8.0
1702:  BRA    1762
1704:  MOVFF  4C9,4D0
1708:  MOVFF  4CC,4D1
170C:  MOVF   xC8,W
170E:  SUBWF  xD1,F
1710:  BZ    171E
1712:  BTFSS  xD0.7
1714:  BRA    1762
1716:  MOVF   FD8,W
1718:  XORLW  01
171A:  MOVWF  FD8
171C:  BRA    1762
171E:  MOVFF  4CD,4D1
1722:  MOVF   xC9,W
1724:  SUBWF  xD1,F
1726:  BZ    1734
1728:  BTFSS  xD0.7
172A:  BRA    1762
172C:  MOVF   FD8,W
172E:  XORLW  01
1730:  MOVWF  FD8
1732:  BRA    1762
1734:  MOVFF  4CE,4D1
1738:  MOVF   xCA,W
173A:  SUBWF  xD1,F
173C:  BZ    174A
173E:  BTFSS  xD0.7
1740:  BRA    1762
1742:  MOVF   FD8,W
1744:  XORLW  01
1746:  MOVWF  FD8
1748:  BRA    1762
174A:  MOVFF  4CF,4D1
174E:  MOVF   xCB,W
1750:  SUBWF  xD1,F
1752:  BZ    1760
1754:  BTFSS  xD0.7
1756:  BRA    1762
1758:  MOVF   FD8,W
175A:  XORLW  01
175C:  MOVWF  FD8
175E:  BRA    1762
1760:  BCF    FD8.0
1762:  MOVLB  0
1764:  GOTO   17DC (RETURN)
*
1C92:  MOVLW  20
1C94:  MOVLB  4
1C96:  BTFSS  x93.4
1C98:  MOVLW  30
1C9A:  MOVWF  x94
1C9C:  MOVFF  492,00
1CA0:  BTFSS  00.7
1CA2:  BRA    1CB4
1CA4:  COMF   00,F
1CA6:  INCF   00,F
1CA8:  MOVFF  00,492
1CAC:  MOVLW  2D
1CAE:  MOVWF  x94
1CB0:  BSF    x93.7
1CB2:  BSF    x93.0
1CB4:  MOVF   01,W
1CB6:  MOVFF  492,498
1CBA:  MOVLW  64
1CBC:  MOVWF  x99
1CBE:  MOVLB  0
1CC0:  CALL   0DB6
1CC4:  MOVFF  00,492
1CC8:  MOVLW  30
1CCA:  ADDWF  01,W
1CCC:  MOVLB  4
1CCE:  MOVWF  x95
1CD0:  MOVFF  492,498
1CD4:  MOVLW  0A
1CD6:  MOVWF  x99
1CD8:  MOVLB  0
1CDA:  CALL   0DB6
1CDE:  MOVLW  30
1CE0:  ADDWF  00,W
1CE2:  MOVLB  4
1CE4:  MOVWF  x97
1CE6:  MOVLW  30
1CE8:  ADDWF  01,W
1CEA:  MOVWF  x96
1CEC:  MOVFF  494,00
1CF0:  MOVLW  30
1CF2:  SUBWF  x95,W
1CF4:  BZ    1CFE
1CF6:  BSF    x93.1
1CF8:  BTFSC  x93.7
1CFA:  BSF    x93.2
1CFC:  BRA    1D22
1CFE:  MOVFF  494,495
1D02:  MOVLW  20
1D04:  MOVWF  x94
1D06:  MOVLW  30
1D08:  SUBWF  x96,W
1D0A:  BZ    1D14
1D0C:  BSF    x93.0
1D0E:  BTFSC  x93.7
1D10:  BSF    x93.1
1D12:  BRA    1D22
1D14:  BTFSS  FD8.2
1D16:  BSF    x93.0
1D18:  BNZ   1D22
1D1A:  MOVFF  495,496
1D1E:  MOVLW  20
1D20:  MOVWF  x95
1D22:  BTFSC  x93.2
1D24:  BRA    1D30
1D26:  BTFSC  x93.1
1D28:  BRA    1D3A
1D2A:  BTFSC  x93.0
1D2C:  BRA    1D44
1D2E:  BRA    1D4E
1D30:  MOVFF  494,49B
1D34:  MOVLB  0
1D36:  CALL   0904
1D3A:  MOVFF  495,49B
1D3E:  MOVLB  0
1D40:  CALL   0904
1D44:  MOVFF  496,49B
1D48:  MOVLB  0
1D4A:  CALL   0904
1D4E:  MOVFF  497,49B
1D52:  MOVLB  0
1D54:  CALL   0904
1D58:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
02A8:  MOVLW  04
02AA:  MOVWF  FEA
02AC:  MOVLW  96
02AE:  MOVWF  FE9
02B0:  MOVF   FEF,W
02B2:  BZ    02CE
02B4:  MOVLW  06
02B6:  MOVWF  01
02B8:  CLRF   00
02BA:  DECFSZ 00,F
02BC:  BRA    02BA
02BE:  DECFSZ 01,F
02C0:  BRA    02B8
02C2:  MOVLW  7B
02C4:  MOVWF  00
02C6:  DECFSZ 00,F
02C8:  BRA    02C6
02CA:  DECFSZ FEF,F
02CC:  BRA    02B4
02CE:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
01E2:  MOVFF  4A7,4A9
....................    for (sb=0;sb<8;sb++) 
01E6:  MOVLB  4
01E8:  CLRF   xA8
01EA:  MOVF   xA8,W
01EC:  SUBLW  07
01EE:  BNC   020C
....................       {                                                  
....................          output_bit(ssdo,bseri);     
01F0:  BTFSC  xA9.7
01F2:  BRA    01F8
01F4:  BCF    F8D.2
01F6:  BRA    01FA
01F8:  BSF    F8D.2
01FA:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
01FC:  BCF    F96.0
01FE:  BCF    F8D.0
0200:  BCF    F96.0
0202:  BSF    F8D.0
....................          x= x<<1;          
0204:  BCF    FD8.0
0206:  RLCF   xA9,F
0208:  INCF   xA8,F
020A:  BRA    01EA
....................      } 
020C:  MOVLB  0
020E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
0EB0:  MOVFF  4A3,4A7
0EB4:  CALL   01E2
....................       xuat_1byte(bld2); 
0EB8:  MOVFF  4A4,4A7
0EBC:  CALL   01E2
....................       xuat_1byte(bld1);           
0EC0:  MOVFF  4A5,4A7
0EC4:  CALL   01E2
....................       xuat_1byte(bld0);             
0EC8:  MOVFF  4A6,4A7
0ECC:  CALL   01E2
....................       mo_32_led_don;       
0ED0:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
0ED2:  CALL   0210
....................       output_high(rck_32led);    output_low(rck_32led); 
0ED6:  BCF    F95.5
0ED8:  BSF    F8C.5
0EDA:  BCF    F95.5
0EDC:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
0EDE:  BCF    F95.1
0EE0:  BCF    F8C.1
0EE2:  GOTO   0F08 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
0EE6:  MOVFF  49C,49F
0EEA:  MOVFF  49B,4A0
....................      b1 = wld0>>8;  b0 = wld0; 
0EEE:  MOVFF  49E,4A1
0EF2:  MOVFF  49D,4A2
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0EF6:  MOVFF  49F,4A3
0EFA:  MOVFF  4A0,4A4
0EFE:  MOVFF  4A1,4A5
0F02:  MOVFF  4A2,4A6
0F06:  BRA    0EB0
0F08:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
0F0A:  MOVFF  495,497
0F0E:  MOVFF  496,498
0F12:  MOVFF  494,49A
0F16:  MOVFF  493,499
....................      xuat_32led_don_2word(wd1,wd0); 
0F1A:  MOVFF  498,49C
0F1E:  MOVFF  497,49B
0F22:  MOVFF  49A,49E
0F26:  MOVFF  499,49D
0F2A:  RCALL  0EE6
0F2C:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
01C4:  MOVLW  00
01C6:  MOVWF  F95
....................       set_tris_e(0x00); 
01C8:  MOVWF  F96
....................       output_d(0xff); 
01CA:  CLRF   F95
01CC:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
01CE:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
01D0:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
01D2:  BCF    F95.1
01D4:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
01D6:  BCF    F95.0
01D8:  BCF    F8C.0
....................       rbdc=0; 
01DA:  CLRF   1D
01DC:  CLRF   1C
01DE:  GOTO   2158 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0210:  CLRF   F95
0212:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
0214:  BTFSC  19.4
0216:  BRA    021C
0218:  BCF    F8C.4
021A:  BRA    021E
021C:  BSF    F8C.4
021E:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
0220:  BTFSC  19.6
0222:  BRA    0228
0224:  BCF    F8C.6
0226:  BRA    022A
0228:  BSF    F8C.6
022A:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
022C:  BTFSC  19.2
022E:  BRA    0234
0230:  BCF    F8C.2
0232:  BRA    0236
0234:  BSF    F8C.2
0236:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
0238:  BCF    F95.1
023A:  BSF    F8C.1
023C:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0B1C:  CLRF   F95
0B1E:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0B20:  BTFSC  1A.6
0B22:  BRA    0B28
0B24:  BCF    F8C.6
0B26:  BRA    0B2A
0B28:  BSF    F8C.6
0B2A:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0B2C:  BTFSC  1A.4
0B2E:  BRA    0B34
0B30:  BCF    F8C.4
0B32:  BRA    0B36
0B34:  BSF    F8C.4
0B36:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0B38:  BTFSC  1A.2
0B3A:  BRA    0B40
0B3C:  BCF    F8C.2
0B3E:  BRA    0B42
0B40:  BSF    F8C.2
0B42:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
0B44:  BCF    F95.0
0B46:  BSF    F8C.0
0B48:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
0C4C:  MOVFF  496,4A7
0C50:  CALL   01E2
0C54:  MOVFF  495,4A7
0C58:  CALL   01E2
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
0C5C:  MOVFF  494,4A7
0C60:  CALL   01E2
0C64:  MOVFF  493,4A7
0C68:  CALL   01E2
....................        
....................       mo_4_led_7doan; 
0C6C:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
0C6E:  CALL   0210
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
0C72:  BCF    F95.7
0C74:  BCF    F8C.7
0C76:  BCF    F95.7
0C78:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
0C7A:  BCF    F95.1
0C7C:  BCF    F8C.1
0C7E:  GOTO   0DB2 (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
0C82:  MOVFF  492,496
0C86:  MOVFF  491,495
0C8A:  MOVLB  4
0C8C:  CLRF   x98
0C8E:  MOVLW  0A
0C90:  MOVWF  x97
0C92:  MOVLB  0
0C94:  RCALL  0C06
0C96:  MOVFF  00,493
0C9A:  MOVLB  4
0C9C:  MOVFF  03,494
0CA0:  MOVFF  03,03
0CA4:  MOVF   00,W
0CA6:  MOVLB  0
0CA8:  CALL   00AE
0CAC:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
0CAE:  MOVFF  492,496
0CB2:  MOVFF  491,495
0CB6:  MOVLB  4
0CB8:  CLRF   x98
0CBA:  MOVLW  0A
0CBC:  MOVWF  x97
0CBE:  MOVLB  0
0CC0:  RCALL  0C06
0CC2:  MOVFF  02,494
0CC6:  MOVFF  01,493
0CCA:  MOVFF  02,496
0CCE:  MOVFF  01,495
0CD2:  MOVLB  4
0CD4:  CLRF   x98
0CD6:  MOVLW  0A
0CD8:  MOVWF  x97
0CDA:  MOVLB  0
0CDC:  RCALL  0C06
0CDE:  MOVFF  00,493
0CE2:  MOVLB  4
0CE4:  MOVFF  03,494
0CE8:  MOVFF  03,03
0CEC:  MOVF   00,W
0CEE:  MOVLB  0
0CF0:  CALL   00AE
0CF4:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
0CF6:  MOVFF  492,496
0CFA:  MOVFF  491,495
0CFE:  MOVLB  4
0D00:  CLRF   x98
0D02:  MOVLW  64
0D04:  MOVWF  x97
0D06:  MOVLB  0
0D08:  RCALL  0C06
0D0A:  MOVFF  02,494
0D0E:  MOVFF  01,493
0D12:  MOVFF  02,496
0D16:  MOVFF  01,495
0D1A:  MOVLB  4
0D1C:  CLRF   x98
0D1E:  MOVLW  0A
0D20:  MOVWF  x97
0D22:  MOVLB  0
0D24:  RCALL  0C06
0D26:  MOVFF  00,493
0D2A:  MOVLB  4
0D2C:  MOVFF  03,494
0D30:  MOVFF  03,03
0D34:  MOVF   00,W
0D36:  MOVLB  0
0D38:  CALL   00AE
0D3C:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
0D3E:  MOVFF  492,496
0D42:  MOVFF  491,495
0D46:  MOVLW  03
0D48:  MOVLB  4
0D4A:  MOVWF  x98
0D4C:  MOVLW  E8
0D4E:  MOVWF  x97
0D50:  MOVLB  0
0D52:  RCALL  0C06
0D54:  MOVFF  02,494
0D58:  MOVFF  01,493
0D5C:  MOVFF  02,496
0D60:  MOVFF  01,495
0D64:  MOVLB  4
0D66:  CLRF   x98
0D68:  MOVLW  0A
0D6A:  MOVWF  x97
0D6C:  MOVLB  0
0D6E:  RCALL  0C06
0D70:  MOVFF  00,493
0D74:  MOVLB  4
0D76:  MOVFF  03,494
0D7A:  MOVFF  03,03
0D7E:  MOVF   00,W
0D80:  MOVLB  0
0D82:  CALL   00AE
0D86:  MOVWF  21
....................       if (ngan4==0xc0) 
0D88:  MOVF   21,W
0D8A:  SUBLW  C0
0D8C:  BNZ   0DA0
....................       { 
....................          ngan4=0xff; 
0D8E:  SETF   21
....................          if (tram4==0xc0) 
0D90:  MOVF   20,W
0D92:  SUBLW  C0
0D94:  BNZ   0DA0
....................          { 
....................             tram4=0xff; 
0D96:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
0D98:  MOVF   1F,W
0D9A:  SUBLW  C0
0D9C:  BNZ   0DA0
0D9E:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
0DA0:  MOVFF  21,493
0DA4:  MOVFF  20,494
0DA8:  MOVFF  1F,495
0DAC:  MOVFF  1E,496
0DB0:  BRA    0C4C
0DB2:  GOTO   223A (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
023E:  MOVFF  25,4A7
0242:  RCALL  01E2
....................     xuat_1byte(glcddata); 
0244:  MOVFF  24,4A7
0248:  RCALL  01E2
....................     xuat_1byte(lcdcontrol);        
024A:  MOVFF  23,4A7
024E:  RCALL  01E2
....................     xuat_1byte(lcddata);       
0250:  MOVFF  22,4A7
0254:  RCALL  01E2
....................        
....................     mo_glcd_lcd; 
0256:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
0258:  RCALL  0210
....................     output_high(rck_lcd20x4);      
025A:  BCF    F95.3
025C:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
025E:  BCF    F95.3
0260:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0262:  BCF    F95.1
0264:  BCF    F8C.1
0266:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
0268:  MOVLB  4
026A:  MOVFF  49B,23
026E:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
0270:  MOVFF  49C,22
0274:  COMF   22,F
....................     xuat_glcd_lcd(); 
0276:  MOVLB  0
0278:  RCALL  023E
027A:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
032C:  MOVLB  4
032E:  MOVFF  49D,25
0332:  COMF   25,F
....................     glcddata    = ~glcd_ins_hthi;      
0334:  MOVFF  49E,24
0338:  COMF   24,F
....................     xuat_glcd_lcd(); 
033A:  MOVLB  0
033C:  RCALL  023E
033E:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0B8E:  MOVLB  4
0B90:  MOVFF  497,499
0B94:  COMF   x99,F
0B96:  MOVFF  499,4A7
0B9A:  MOVLB  0
0B9C:  CALL   01E2
0BA0:  MOVLB  4
0BA2:  MOVFF  498,499
0BA6:  COMF   x99,F
0BA8:  MOVFF  499,4A7
0BAC:  MOVLB  0
0BAE:  CALL   01E2
....................        
....................       mo_8_led_quet; 
0BB2:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0BB4:  RCALL  0B1C
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0BB6:  BCF    F95.5
0BB8:  BSF    F8C.5
0BBA:  BCF    F95.5
0BBC:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0BBE:  BCF    F95.0
0BC0:  BCF    F8C.0
0BC2:  GOTO   0BD0 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0BC6:  MOVLB  4
0BC8:  SETF   x97
0BCA:  SETF   x98
0BCC:  MOVLB  0
0BCE:  BRA    0B8E
0BD0:  GOTO   0C00 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0B4A:  CLRF   03
0B4C:  MOVLB  4
0B4E:  MOVF   x98,W
0B50:  MOVLB  0
0B52:  CALL   00D0
0B56:  MOVWF  01
0B58:  MOVLB  4
0B5A:  MOVWF  x9A
0B5C:  COMF   x9A,F
0B5E:  MOVFF  49A,4A7
0B62:  MOVLB  0
0B64:  CALL   01E2
0B68:  MOVLB  4
0B6A:  MOVFF  499,49A
0B6E:  COMF   x9A,F
0B70:  MOVFF  49A,4A7
0B74:  MOVLB  0
0B76:  CALL   01E2
....................       mo_8_led_quet; 
0B7A:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0B7C:  RCALL  0B1C
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0B7E:  BCF    F95.5
0B80:  BSF    F8C.5
0B82:  BCF    F95.5
0B84:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0B86:  BCF    F95.0
0B88:  BCF    F8C.0
0B8A:  GOTO   0BF4 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0BD4:  CLRF   2E
0BD6:  MOVF   2E,W
0BD8:  SUBLW  07
0BDA:  BNC   0C04
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0BDC:  CLRF   03
0BDE:  MOVF   2E,W
0BE0:  ADDLW  26
0BE2:  MOVWF  FE9
0BE4:  MOVLW  00
0BE6:  ADDWFC 03,W
0BE8:  MOVWF  FEA
0BEA:  MOVFF  FEF,499
0BEE:  MOVFF  2E,498
0BF2:  BRA    0B4A
....................             delay_us(100); 
0BF4:  MOVLW  A6
0BF6:  MOVWF  00
0BF8:  DECFSZ 00,F
0BFA:  BRA    0BF8
0BFC:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
0BFE:  BRA    0BC6
0C00:  INCF   2E,F
0C02:  BRA    0BD6
....................             } 
0C04:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0F4A:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0F4C:  CLRF   34
0F4E:  CLRF   33
0F50:  CLRF   32
0F52:  CLRF   31
0F54:  CLRF   38
0F56:  CLRF   37
0F58:  CLRF   36
0F5A:  MOVLW  01
0F5C:  MOVWF  35
0F5E:  MOVLW  80
0F60:  MOVWF  3C
0F62:  CLRF   3B
0F64:  CLRF   3A
0F66:  CLRF   39
0F68:  CLRF   40
0F6A:  CLRF   3F
0F6C:  CLRF   3E
0F6E:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
0F70:  MOVWF  44
0F72:  CLRF   43
0F74:  CLRF   46
0F76:  MOVLW  01
0F78:  MOVWF  45
0F7A:  CLRF   48
0F7C:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
0F7E:  MOVLW  80
0F80:  MOVWF  4C
0F82:  CLRF   4B
0F84:  CLRF   4E
0F86:  MOVLW  01
0F88:  MOVWF  4D
0F8A:  CLRF   50
0F8C:  CLRF   4F
....................       zt=zp=0; 
0F8E:  CLRF   4A
0F90:  CLRF   49
0F92:  MOVFF  4A,42
0F96:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
0F9A:  MOVLW  20
0F9C:  MOVWF  54
0F9E:  CLRF   55
0FA0:  MOVLW  10
0FA2:  MOVWF  57
0FA4:  CLRF   58
....................       dem_led=0; 
0FA6:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
0FA8:  CLRF   5C
0FAA:  CLRF   5B
0FAC:  CLRF   5A
0FAE:  MOVLW  01
0FB0:  MOVWF  59
0FB2:  CLRF   x60
0FB4:  CLRF   5F
0FB6:  CLRF   5E
0FB8:  MOVWF  5D
0FBA:  SETF   x64
0FBC:  SETF   x63
0FBE:  SETF   x62
0FC0:  MOVLW  FE
0FC2:  MOVWF  x61
0FC4:  MOVLW  01
0FC6:  MOVWF  x71
0FC8:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
0FCA:  MOVLW  80
0FCC:  MOVWF  x68
0FCE:  CLRF   x67
0FD0:  CLRF   x66
0FD2:  CLRF   x65
0FD4:  MOVWF  x6C
0FD6:  CLRF   x6B
0FD8:  CLRF   x6A
0FDA:  CLRF   x69
0FDC:  MOVLW  7F
0FDE:  MOVWF  x70
0FE0:  SETF   x6F
0FE2:  SETF   x6E
0FE4:  SETF   x6D
....................      tgdlay = 0; 
0FE6:  CLRF   52
0FE8:  CLRF   51
0FEA:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
1006:  MOVLB  4
1008:  CLRF   x96
100A:  MOVF   x95,W
100C:  SUBWF  x96,W
100E:  BC    101A
....................       hien_thi_8led_7doan_quet_all(); 
1010:  MOVLB  0
1012:  RCALL  0BD4
1014:  MOVLB  4
1016:  INCF   x96,F
1018:  BRA    100A
....................       dem_led++; 
101A:  INCF   53,F
101C:  MOVLB  0
101E:  GOTO   103C (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
0FEC:  MOVLB  4
0FEE:  MOVF   x95,F
0FF0:  BZ    0FFE
0FF2:  MOVFF  495,496
0FF6:  MOVLB  0
0FF8:  CALL   02A8
0FFC:  MOVLB  4
....................       dem_led++; 
0FFE:  INCF   53,F
1000:  MOVLB  0
1002:  GOTO   103C (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
1022:  MOVLB  4
1024:  MOVF   x94,F
1026:  BNZ   1034
1028:  MOVFF  493,495
102C:  MOVLB  0
102E:  BRA    0FEC
1030:  MOVLB  0
1032:  BRA    103C
....................    else              tang_dem_led_delay_1(dl); 
1034:  MOVFF  493,495
1038:  MOVLB  0
103A:  BRA    1006
103C:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
0F2E:  COMF   31,F
0F30:  COMF   32,F
0F32:  COMF   33,F
0F34:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
0F36:  MOVFF  34,496
0F3A:  MOVFF  33,495
0F3E:  MOVFF  32,494
0F42:  MOVFF  31,493
0F46:  RCALL  0F0A
0F48:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
103E:  DECFSZ 51,W
1040:  BRA    105A
1042:  MOVF   52,F
1044:  BNZ   105A
1046:  MOVFF  34,496
104A:  MOVFF  33,495
104E:  MOVFF  32,494
1052:  MOVFF  31,493
1056:  RCALL  0F0A
1058:  BRA    1090
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
105A:  MOVF   51,W
105C:  SUBLW  32
105E:  BNZ   1068
1060:  MOVF   52,F
1062:  BNZ   1068
1064:  RCALL  0F2E
1066:  BRA    1090
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
1068:  MOVF   51,W
106A:  SUBLW  64
106C:  BNZ   1076
106E:  MOVF   52,F
1070:  BNZ   1076
1072:  RCALL  0F2E
1074:  BRA    1090
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
1076:  MOVF   51,W
1078:  SUBLW  96
107A:  BNZ   1084
107C:  MOVF   52,F
107E:  BNZ   1084
1080:  RCALL  0F2E
1082:  BRA    1090
....................       else if (tgdlay==200)   
1084:  MOVF   51,W
1086:  SUBLW  C8
1088:  BNZ   1090
108A:  MOVF   52,F
108C:  BNZ   1090
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
108E:  RCALL  0F4A
....................       } 
....................       tgdlay++; 
1090:  INCF   51,F
1092:  BTFSC  FD8.2
1094:  INCF   52,F
....................       delay_chon(dl,chondelay); 
1096:  MOVFF  491,493
109A:  MOVFF  492,494
109E:  RCALL  1022
10A0:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
10A2:  MOVF   53,W
10A4:  SUBLW  0F
10A6:  BNC   10F0
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
10A8:  MOVFF  4A,49C
10AC:  MOVFF  49,49B
10B0:  MOVFF  42,49E
10B4:  MOVFF  41,49D
10B8:  RCALL  0EE6
....................       zp= (zp<<1)+1;  
10BA:  BCF    FD8.0
10BC:  RLCF   49,W
10BE:  MOVLB  4
10C0:  MOVWF  x93
10C2:  RLCF   4A,W
10C4:  MOVWF  x94
10C6:  MOVLW  01
10C8:  ADDWF  x93,W
10CA:  MOVWF  49
10CC:  MOVLW  00
10CE:  ADDWFC x94,W
10D0:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
10D2:  BCF    FD8.0
10D4:  RRCF   42,W
10D6:  MOVWF  x94
10D8:  RRCF   41,W
10DA:  MOVWF  41
10DC:  MOVLW  80
10DE:  ADDWF  x94,W
10E0:  MOVWF  42
....................       delay_chon(dl,chondelay); 
10E2:  MOVFF  491,493
10E6:  MOVFF  492,494
10EA:  MOVLB  0
10EC:  RCALL  1022
....................    } 
10EE:  BRA    1122
....................    else  if (dem_led<32) 
10F0:  MOVF   53,W
10F2:  SUBLW  1F
10F4:  BNC   1120
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
10F6:  MOVFF  4A,49C
10FA:  MOVFF  49,49B
10FE:  MOVFF  42,49E
1102:  MOVFF  41,49D
1106:  RCALL  0EE6
....................       zp= (zp<<1);  
1108:  BCF    FD8.0
110A:  RLCF   49,F
110C:  RLCF   4A,F
....................       zt= (zt>>1); 
110E:  BCF    FD8.0
1110:  RRCF   42,F
1112:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
1114:  MOVFF  491,493
1118:  MOVFF  492,494
111C:  RCALL  1022
....................    } 
111E:  BRA    1122
....................    else reset_toan_bo_bien(); 
1120:  RCALL  0F4A
1122:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
122A:  MOVF   53,W
122C:  SUBLW  0F
122E:  BNC   1262
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
1230:  MOVFF  4A,49C
1234:  MOVFF  49,49B
1238:  MOVFF  4A,49E
123C:  MOVFF  49,49D
1240:  RCALL  0EE6
....................       zp= (zp>>1)+0x8000; 
1242:  BCF    FD8.0
1244:  RRCF   4A,W
1246:  MOVLB  4
1248:  MOVWF  x94
124A:  RRCF   49,W
124C:  MOVWF  49
124E:  MOVLW  80
1250:  ADDWF  x94,W
1252:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
1254:  MOVFF  491,493
1258:  MOVFF  492,494
125C:  MOVLB  0
125E:  RCALL  1022
....................    } 
1260:  BRA    128E
....................    else  if (dem_led<32) 
1262:  MOVF   53,W
1264:  SUBLW  1F
1266:  BNC   128C
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
1268:  MOVFF  4A,49C
126C:  MOVFF  49,49B
1270:  MOVFF  4A,49E
1274:  MOVFF  49,49D
1278:  RCALL  0EE6
....................       zp= (zp>>1); 
127A:  BCF    FD8.0
127C:  RRCF   4A,F
127E:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
1280:  MOVFF  491,493
1284:  MOVFF  492,494
1288:  RCALL  1022
....................     } 
128A:  BRA    128E
....................    else reset_toan_bo_bien(); 
128C:  RCALL  0F4A
128E:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
11A6:  MOVF   53,W
11A8:  SUBLW  1F
11AA:  BNC   11F8
....................    {   
....................       xuat_32led_don_1dw(y); 
11AC:  MOVFF  34,496
11B0:  MOVFF  33,495
11B4:  MOVFF  32,494
11B8:  MOVFF  31,493
11BC:  RCALL  0F0A
....................       y= (y<<1)+1; 
11BE:  BCF    FD8.0
11C0:  RLCF   31,W
11C2:  MOVLB  4
11C4:  MOVWF  x94
11C6:  RLCF   32,W
11C8:  MOVWF  x95
11CA:  RLCF   33,W
11CC:  MOVWF  x96
11CE:  RLCF   34,W
11D0:  MOVWF  x97
11D2:  MOVLW  01
11D4:  ADDWF  x94,W
11D6:  MOVWF  31
11D8:  MOVLW  00
11DA:  ADDWFC x95,W
11DC:  MOVWF  32
11DE:  MOVLW  00
11E0:  ADDWFC x96,W
11E2:  MOVWF  33
11E4:  MOVLW  00
11E6:  ADDWFC x97,W
11E8:  MOVWF  34
....................       delay_chon(dl,chondelay); 
11EA:  MOVFF  491,493
11EE:  MOVFF  492,494
11F2:  MOVLB  0
11F4:  RCALL  1022
....................    } 
11F6:  BRA    1228
....................    else  if (dem_led<64) 
11F8:  MOVF   53,W
11FA:  SUBLW  3F
11FC:  BNC   1226
....................    {   
....................       xuat_32led_don_1dw(y);    
11FE:  MOVFF  34,496
1202:  MOVFF  33,495
1206:  MOVFF  32,494
120A:  MOVFF  31,493
120E:  RCALL  0F0A
....................       y= (y<<1);  
1210:  BCF    FD8.0
1212:  RLCF   31,F
1214:  RLCF   32,F
1216:  RLCF   33,F
1218:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
121A:  MOVFF  491,493
121E:  MOVFF  492,494
1222:  RCALL  1022
....................    }  
1224:  BRA    1228
....................    else reset_toan_bo_bien(); 
1226:  RCALL  0F4A
1228:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
1290:  MOVF   53,W
1292:  SUBLW  1F
1294:  BNC   12D8
....................       {   
....................          xuat_32led_don_1dw(y); 
1296:  MOVFF  34,496
129A:  MOVFF  33,495
129E:  MOVFF  32,494
12A2:  MOVFF  31,493
12A6:  RCALL  0F0A
....................          y= (y>>1)+0x80000000;  
12A8:  BCF    FD8.0
12AA:  RRCF   34,W
12AC:  MOVLB  4
12AE:  MOVWF  x97
12B0:  RRCF   33,W
12B2:  MOVWF  x96
12B4:  RRCF   32,W
12B6:  MOVWF  x95
12B8:  RRCF   31,W
12BA:  MOVWF  31
12BC:  MOVFF  495,32
12C0:  MOVFF  496,33
12C4:  MOVLW  80
12C6:  ADDWF  x97,W
12C8:  MOVWF  34
....................          delay_chon(dl,chondelay);       
12CA:  MOVFF  491,493
12CE:  MOVFF  492,494
12D2:  MOVLB  0
12D4:  RCALL  1022
....................       } 
12D6:  BRA    1308
....................       else 
....................       if (dem_led<64) 
12D8:  MOVF   53,W
12DA:  SUBLW  3F
12DC:  BNC   1306
....................       {   
....................          xuat_32led_don_1dw(y);  
12DE:  MOVFF  34,496
12E2:  MOVFF  33,495
12E6:  MOVFF  32,494
12EA:  MOVFF  31,493
12EE:  RCALL  0F0A
....................          y= (y>>1); 
12F0:  BCF    FD8.0
12F2:  RRCF   34,F
12F4:  RRCF   33,F
12F6:  RRCF   32,F
12F8:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
12FA:  MOVFF  491,493
12FE:  MOVFF  492,494
1302:  RCALL  1022
....................       }  
1304:  BRA    1308
....................       else reset_toan_bo_bien(); 
1306:  RCALL  0F4A
1308:  GOTO   2386 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
1124:  BTFSC  54.7
1126:  BRA    11A2
1128:  MOVF   54,W
112A:  SUBLW  00
112C:  BC    11A2
....................    { 
....................       if(j32<i32) 
112E:  MOVF   55,W
1130:  XORLW  80
1132:  MOVWF  00
1134:  MOVF   54,W
1136:  XORLW  80
1138:  SUBWF  00,W
113A:  BC    117C
....................       { 
....................          y = y_codinh|yp_chay; 
113C:  MOVF   3D,W
113E:  IORWF  35,W
1140:  MOVWF  31
1142:  MOVF   3E,W
1144:  IORWF  36,W
1146:  MOVWF  32
1148:  MOVF   3F,W
114A:  IORWF  37,W
114C:  MOVWF  33
114E:  MOVF   40,W
1150:  IORWF  38,W
1152:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
1154:  MOVFF  34,496
1158:  MOVFF  33,495
115C:  MOVFF  32,494
1160:  MOVFF  31,493
1164:  RCALL  0F0A
....................          delay_chon(dl,chondelay);        
1166:  MOVFF  491,493
116A:  MOVFF  492,494
116E:  RCALL  1022
....................          yp_chay = yp_chay <<1; 
1170:  BCF    FD8.0
1172:  RLCF   35,F
1174:  RLCF   36,F
1176:  RLCF   37,F
1178:  RLCF   38,F
....................          j32++; 
117A:  INCF   55,F
....................       } 
....................       if (j32==i32)  
117C:  MOVF   54,W
117E:  SUBWF  55,W
1180:  BNZ   11A0
....................       { 
....................          i32--; 
1182:  DECF   54,F
....................          j32=0;          
1184:  CLRF   55
....................          y_codinh=y; 
1186:  MOVFF  34,40
118A:  MOVFF  33,3F
118E:  MOVFF  32,3E
1192:  MOVFF  31,3D
....................          yp_chay = 1; 
1196:  CLRF   38
1198:  CLRF   37
119A:  CLRF   36
119C:  MOVLW  01
119E:  MOVWF  35
....................       } 
....................    } 
11A0:  BRA    11A4
....................    else reset_toan_bo_bien(); 
11A2:  RCALL  0F4A
11A4:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
027C:  BSF    x73.0
027E:  MOVFF  73,49B
0282:  MOVFF  49A,49C
0286:  RCALL  0268
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
0288:  BCF    x73.0
028A:  MOVFF  73,49B
028E:  MOVFF  49A,49C
0292:  RCALL  0268
0294:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0296:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0298:  MOVFF  499,49A
029C:  RCALL  027C
....................       delay_us(20); 
029E:  MOVLW  21
02A0:  MOVWF  00
02A2:  DECFSZ 00,F
02A4:  BRA    02A2
02A6:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
09EC:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
09EE:  MOVFF  496,49A
09F2:  RCALL  027C
....................       delay_us(20); 
09F4:  MOVLW  21
09F6:  MOVWF  00
09F8:  DECFSZ 00,F
09FA:  BRA    09F8
09FC:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
02D0:  BCF    x73.0
....................          lcd_rw = 0;  
02D2:  BCF    x73.1
....................          lcd_rs = 1;  
02D4:  BSF    x73.2
....................          lcd_p =0; 
02D6:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
02D8:  MOVLW  38
02DA:  MOVLB  4
02DC:  MOVWF  x99
02DE:  MOVLB  0
02E0:  RCALL  0296
....................          delay_us(40); 
02E2:  MOVLW  42
02E4:  MOVWF  00
02E6:  DECFSZ 00,F
02E8:  BRA    02E6
02EA:  NOP   
....................          lcd_command(lcd_display_control);    
02EC:  MOVLW  0C
02EE:  MOVLB  4
02F0:  MOVWF  x99
02F2:  MOVLB  0
02F4:  RCALL  0296
....................          delay_us(40); 
02F6:  MOVLW  42
02F8:  MOVWF  00
02FA:  DECFSZ 00,F
02FC:  BRA    02FA
02FE:  NOP   
....................          lcd_command(lcd_clear_display);       
0300:  MOVLW  01
0302:  MOVLB  4
0304:  MOVWF  x99
0306:  MOVLB  0
0308:  RCALL  0296
....................          delay_ms(2); 
030A:  MOVLW  02
030C:  MOVLB  4
030E:  MOVWF  x96
0310:  MOVLB  0
0312:  RCALL  02A8
....................          lcd_command(lcd_entry_mode);        
0314:  MOVLW  06
0316:  MOVLB  4
0318:  MOVWF  x99
031A:  MOVLB  0
031C:  RCALL  0296
....................          delay_us(40);                 
031E:  MOVLW  42
0320:  MOVWF  00
0322:  DECFSZ 00,F
0324:  BRA    0322
0326:  NOP   
0328:  GOTO   2160 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
0DE2:  CLRF   03
0DE4:  MOVLB  4
0DE6:  MOVF   x96,W
0DE8:  MOVLB  0
0DEA:  CALL   018A
0DEE:  MOVLB  4
0DF0:  ADDWF  x97,W
0DF2:  MOVWF  x98
0DF4:  MOVWF  x99
0DF6:  MOVLB  0
0DF8:  CALL   0296
0DFC:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0340:  BSF    x74.2
0342:  MOVFF  74,49D
0346:  MOVFF  49C,49E
034A:  RCALL  032C
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
034C:  BCF    x74.2
034E:  MOVFF  74,49D
0352:  MOVFF  49C,49E
0356:  RCALL  032C
0358:  RETURN 0
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
035A:  BCF    x74.4
....................       glcd_xuat_8bit(glcd_data2);       
035C:  MOVFF  499,49C
0360:  RCALL  0340
0362:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
*
0904:  BSF    x74.4
....................       glcd_xuat_8bit(glcd_data3);      
0906:  MOVFF  49B,49C
090A:  RCALL  0340
090C:  RETURN 0
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
*
0364:  BSF    x74.0
....................          glcd_cs2 = 1; 
0366:  BSF    x74.1
....................          glcd_e  = 0; 
0368:  BCF    x74.2
....................          glcd_rw = 0;           
036A:  BCF    x74.3
....................          glcd_p =0;          
036C:  BCF    x74.5
....................          glcd_command(glcd_function_set_mode);          
036E:  MOVFF  492,499
0372:  RCALL  035A
....................          delay_us(10); 
0374:  MOVLW  10
0376:  MOVWF  00
0378:  DECFSZ 00,F
037A:  BRA    0378
037C:  NOP   
....................          glcd_command(glcd_cursor_display);        
037E:  MOVLW  0C
0380:  MOVLB  4
0382:  MOVWF  x99
0384:  MOVLB  0
0386:  RCALL  035A
....................          delay_us(10);     
0388:  MOVLW  10
038A:  MOVWF  00
038C:  DECFSZ 00,F
038E:  BRA    038C
0390:  NOP   
....................          glcd_command(glcd_clear_display);       
0392:  MOVLW  01
0394:  MOVLB  4
0396:  MOVWF  x99
0398:  MOVLB  0
039A:  RCALL  035A
....................          delay_ms(2); 
039C:  MOVLW  02
039E:  MOVLB  4
03A0:  MOVWF  x96
03A2:  MOVLB  0
03A4:  RCALL  02A8
....................          glcd_command(glcd_entry_mode);       
03A6:  MOVLW  06
03A8:  MOVLB  4
03AA:  MOVWF  x99
03AC:  MOVLB  0
03AE:  RCALL  035A
....................          delay_us(10);                           
03B0:  MOVLW  10
03B2:  MOVWF  00
03B4:  DECFSZ 00,F
03B6:  BRA    03B4
03B8:  NOP   
03BA:  RETURN 0
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
*
03DE:  MOVLB  4
03E0:  MOVF   x91,F
03E2:  BZ    03EA
03E4:  SETF   x93
03E6:  SETF   x92
03E8:  BRA    03EE
03EA:  CLRF   x93
03EC:  CLRF   x92
....................   for (doc=0; doc < glcd_doc; doc++)  
03EE:  MOVLB  0
03F0:  CLRF   x75
03F2:  MOVF   x75,W
03F4:  SUBLW  1F
03F6:  BNC   0458
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
03F8:  CLRF   x76
03FA:  MOVF   x76,W
03FC:  SUBLW  0F
03FE:  BNC   0454
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
0400:  MOVLB  4
0402:  CLRF   xB2
0404:  MOVFF  75,4B1
0408:  CLRF   xB4
040A:  MOVLW  20
040C:  MOVWF  xB3
040E:  MOVLB  0
0410:  RCALL  03BC
0412:  MOVF   01,W
0414:  ADDLW  01
0416:  MOVLB  4
0418:  MOVWF  x94
041A:  MOVLW  00
041C:  ADDWFC 02,W
041E:  MOVWF  x95
0420:  CLRF   03
0422:  MOVLB  0
0424:  MOVFF  76,02
0428:  BCF    FD8.0
042A:  RLCF   02,F
042C:  RLCF   03,F
042E:  MOVF   02,W
0430:  MOVLB  4
0432:  ADDWF  x94,F
0434:  MOVF   03,W
0436:  ADDWFC x95,F
0438:  MOVLW  77
043A:  ADDWF  x94,W
043C:  MOVWF  FE9
043E:  MOVLW  00
0440:  ADDWFC x95,W
0442:  MOVWF  FEA
0444:  MOVFF  493,FEC
0448:  MOVF   FED,F
044A:  MOVFF  492,FEF
044E:  MOVLB  0
0450:  INCF   x76,F
0452:  BRA    03FA
....................     }  
0454:  INCF   x75,F
0456:  BRA    03F2
....................   }  
....................   gdram_vdk.refresh = true;  
0458:  BSF    x77.0
045A:  GOTO   2176 (RETURN)
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
045E:  MOVLB  4
0460:  MOVF   xAE,W
0462:  SUBLW  1F
0464:  BC    046E
0466:  MOVLW  80
0468:  ADDWF  xAD,F
046A:  MOVLW  20
046C:  SUBWF  xAE,F
....................   doc = y;  
046E:  MOVFF  4AE,75
....................   ngang = x/16;  
0472:  SWAPF  xAD,W
0474:  MOVLB  0
0476:  MOVWF  x76
0478:  MOVLW  0F
047A:  ANDWF  x76,F
....................   b = 15 - (x % 16);  
047C:  MOVLB  4
047E:  MOVF   xAD,W
0480:  ANDLW  0F
0482:  XORLW  FF
0484:  ADDLW  10
0486:  MOVWF  xB0
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
0488:  DECFSZ xAF,W
048A:  BRA    04F6
048C:  CLRF   xB2
048E:  MOVFF  75,4B1
0492:  CLRF   xB4
0494:  MOVLW  20
0496:  MOVWF  xB3
0498:  MOVLB  0
049A:  RCALL  03BC
049C:  MOVF   01,W
049E:  ADDLW  01
04A0:  MOVLB  4
04A2:  MOVWF  xB1
04A4:  MOVLW  00
04A6:  ADDWFC 02,W
04A8:  MOVWF  xB2
04AA:  CLRF   03
04AC:  MOVLB  0
04AE:  MOVFF  76,02
04B2:  BCF    FD8.0
04B4:  RLCF   02,F
04B6:  RLCF   03,F
04B8:  MOVF   02,W
04BA:  MOVLB  4
04BC:  ADDWF  xB1,F
04BE:  MOVF   03,W
04C0:  ADDWFC xB2,F
04C2:  MOVLW  77
04C4:  ADDWF  xB1,W
04C6:  MOVWF  01
04C8:  MOVLW  00
04CA:  ADDWFC xB2,W
04CC:  MOVWF  03
04CE:  MOVFF  01,FE9
04D2:  MOVWF  FEA
04D4:  CLRF   03
04D6:  MOVLW  01
04D8:  MOVWF  02
04DA:  MOVF   xB0,W
04DC:  MOVWF  00
04DE:  BZ    04EA
04E0:  BCF    FD8.0
04E2:  RLCF   02,F
04E4:  RLCF   03,F
04E6:  DECFSZ 00,F
04E8:  BRA    04E0
04EA:  MOVF   02,W
04EC:  IORWF  FEF,F
04EE:  MOVF   03,W
04F0:  IORWF  FEC,W
04F2:  MOVWF  FEF
04F4:  BRA    0568
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
04F6:  CLRF   xB2
04F8:  MOVFF  75,4B1
04FC:  CLRF   xB4
04FE:  MOVLW  20
0500:  MOVWF  xB3
0502:  MOVLB  0
0504:  RCALL  03BC
0506:  MOVF   01,W
0508:  ADDLW  01
050A:  MOVLB  4
050C:  MOVWF  xB1
050E:  MOVLW  00
0510:  ADDWFC 02,W
0512:  MOVWF  xB2
0514:  CLRF   03
0516:  MOVLB  0
0518:  MOVFF  76,02
051C:  BCF    FD8.0
051E:  RLCF   02,F
0520:  RLCF   03,F
0522:  MOVF   02,W
0524:  MOVLB  4
0526:  ADDWF  xB1,F
0528:  MOVF   03,W
052A:  ADDWFC xB2,F
052C:  MOVLW  77
052E:  ADDWF  xB1,W
0530:  MOVWF  01
0532:  MOVLW  00
0534:  ADDWFC xB2,W
0536:  MOVWF  03
0538:  MOVFF  01,FE9
053C:  MOVWF  FEA
053E:  CLRF   03
0540:  MOVLW  01
0542:  MOVWF  02
0544:  MOVF   xB0,W
0546:  MOVWF  00
0548:  BZ    0554
054A:  BCF    FD8.0
054C:  RLCF   02,F
054E:  RLCF   03,F
0550:  DECFSZ 00,F
0552:  BRA    054A
0554:  MOVF   02,W
0556:  XORLW  FF
0558:  MOVWF  00
055A:  MOVLW  FF
055C:  XORWF  03,F
055E:  MOVF   00,W
0560:  ANDWF  FEF,F
0562:  MOVF   03,W
0564:  ANDWF  FEC,W
0566:  MOVWF  FEF
....................   gdram_vdk.refresh = true;  
0568:  MOVLB  0
056A:  BSF    x77.0
056C:  RETURN 0
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
*
090E:  BTFSS  x77.0
0910:  BRA    09E8
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
0912:  CLRF   x75
0914:  MOVF   x75,W
0916:  SUBLW  1F
0918:  BNC   09E6
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
091A:  MOVF   x75,W
091C:  IORLW  80
091E:  MOVLB  4
0920:  MOVWF  x91
0922:  MOVWF  x99
0924:  MOVLB  0
0926:  RCALL  035A
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
0928:  MOVLW  80
092A:  MOVLB  4
092C:  MOVWF  x99
092E:  MOVLB  0
0930:  RCALL  035A
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
0932:  CLRF   x76
0934:  MOVF   x76,W
0936:  SUBLW  0F
0938:  BNC   09E2
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
093A:  MOVLB  4
093C:  CLRF   xB2
093E:  MOVFF  75,4B1
0942:  CLRF   xB4
0944:  MOVLW  20
0946:  MOVWF  xB3
0948:  MOVLB  0
094A:  RCALL  03BC
094C:  MOVF   01,W
094E:  ADDLW  01
0950:  MOVLB  4
0952:  MOVWF  x91
0954:  MOVLW  00
0956:  ADDWFC 02,W
0958:  MOVWF  x92
095A:  CLRF   03
095C:  MOVLB  0
095E:  MOVFF  76,02
0962:  BCF    FD8.0
0964:  RLCF   02,F
0966:  RLCF   03,F
0968:  MOVF   02,W
096A:  MOVLB  4
096C:  ADDWF  x91,F
096E:  MOVF   03,W
0970:  ADDWFC x92,F
0972:  MOVLW  01
0974:  ADDWF  x91,W
0976:  MOVWF  01
0978:  MOVLW  00
097A:  ADDWFC x92,W
097C:  MOVWF  03
097E:  MOVF   01,W
0980:  ADDLW  77
0982:  MOVWF  FE9
0984:  MOVLW  00
0986:  ADDWFC 03,W
0988:  MOVWF  FEA
098A:  MOVFF  FEF,49B
098E:  MOVLB  0
0990:  RCALL  0904
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
0992:  MOVLB  4
0994:  CLRF   xB2
0996:  MOVFF  75,4B1
099A:  CLRF   xB4
099C:  MOVLW  20
099E:  MOVWF  xB3
09A0:  MOVLB  0
09A2:  RCALL  03BC
09A4:  MOVF   01,W
09A6:  ADDLW  01
09A8:  MOVLB  4
09AA:  MOVWF  x91
09AC:  MOVLW  00
09AE:  ADDWFC 02,W
09B0:  MOVWF  x92
09B2:  CLRF   03
09B4:  MOVLB  0
09B6:  MOVFF  76,02
09BA:  BCF    FD8.0
09BC:  RLCF   02,F
09BE:  RLCF   03,F
09C0:  MOVF   02,W
09C2:  MOVLB  4
09C4:  ADDWF  x91,F
09C6:  MOVF   03,W
09C8:  ADDWFC x92,F
09CA:  MOVLW  77
09CC:  ADDWF  x91,W
09CE:  MOVWF  FE9
09D0:  MOVLW  00
09D2:  ADDWFC x92,W
09D4:  MOVWF  FEA
09D6:  MOVFF  FEF,49B
09DA:  MOVLB  0
09DC:  RCALL  0904
09DE:  INCF   x76,F
09E0:  BRA    0934
....................       }  
09E2:  INCF   x75,F
09E4:  BRA    0914
....................     }  
....................     gdram_vdk.refresh = false;  
09E6:  BCF    x77.0
....................   }  
09E8:  GOTO   2194 (RETURN)
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
*
1B28:  BTFSS  x77.0
1B2A:  BRA    1C8E
....................   {  
....................       if((x/16)!=(x + rong)/16) 
1B2C:  MOVLB  4
1B2E:  SWAPF  x92,W
1B30:  MOVWF  x98
1B32:  MOVLW  0F
1B34:  ANDWF  x98,F
1B36:  MOVF   x94,W
1B38:  ADDWF  x92,W
1B3A:  MOVWF  00
1B3C:  SWAPF  00,F
1B3E:  MOVLW  0F
1B40:  ANDWF  00,F
1B42:  MOVF   00,W
1B44:  SUBWF  x98,W
1B46:  BZ    1B5C
....................             rong=((rong+15)/16)+1; 
1B48:  MOVLW  0F
1B4A:  ADDWF  x94,W
1B4C:  MOVWF  00
1B4E:  SWAPF  00,F
1B50:  MOVLW  0F
1B52:  ANDWF  00,F
1B54:  MOVF   00,W
1B56:  ADDLW  01
1B58:  MOVWF  x94
1B5A:  BRA    1B6A
....................       else rong=((rong+15)/16);  
1B5C:  MOVLW  0F
1B5E:  ADDWF  x94,W
1B60:  MOVWF  00
1B62:  SWAPF  00,W
1B64:  MOVWF  x94
1B66:  MOVLW  0F
1B68:  ANDWF  x94,F
....................        
....................       x = x/16; 
1B6A:  SWAPF  x92,F
1B6C:  MOVLW  0F
1B6E:  ANDWF  x92,F
....................       for (doc = y; doc <(y+cao); doc++)  
1B70:  MOVFF  493,75
1B74:  MOVF   x95,W
1B76:  ADDWF  x93,W
1B78:  MOVLB  0
1B7A:  SUBWF  x75,W
1B7C:  BTFSC  FD8.0
1B7E:  BRA    1C8C
....................       {  
....................          if(doc>31) 
1B80:  MOVF   x75,W
1B82:  SUBLW  1F
1B84:  BC    1B9C
....................             {   
....................                hesox = 8+x; 
1B86:  MOVLW  08
1B88:  MOVLB  4
1B8A:  ADDWF  x92,W
1B8C:  MOVWF  x96
....................                hesoy = doc-32; 
1B8E:  MOVLW  20
1B90:  MOVLB  0
1B92:  SUBWF  x75,W
1B94:  MOVLB  4
1B96:  MOVWF  x97
....................                } 
1B98:  BRA    1BA6
1B9A:  MOVLB  0
....................          else {hesox = x; hesoy = doc;} 
1B9C:  MOVFF  492,496
1BA0:  MOVFF  75,497
1BA4:  MOVLB  4
....................          glcd_command( 0x80 |hesoy);    
1BA6:  MOVF   x97,W
1BA8:  IORLW  80
1BAA:  MOVWF  x98
1BAC:  MOVWF  x99
1BAE:  MOVLB  0
1BB0:  CALL   035A
....................          glcd_command( 0x80 |hesox);   
1BB4:  MOVLB  4
1BB6:  MOVF   x96,W
1BB8:  IORLW  80
1BBA:  MOVWF  x98
1BBC:  MOVWF  x99
1BBE:  MOVLB  0
1BC0:  CALL   035A
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
1BC4:  MOVFF  496,76
1BC8:  MOVLB  4
1BCA:  MOVF   x94,W
1BCC:  ADDWF  x96,W
1BCE:  MOVLB  0
1BD0:  SUBWF  x76,W
1BD2:  BC    1C84
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
1BD4:  MOVLB  4
1BD6:  CLRF   xB2
1BD8:  MOVFF  497,4B1
1BDC:  CLRF   xB4
1BDE:  MOVLW  20
1BE0:  MOVWF  xB3
1BE2:  MOVLB  0
1BE4:  CALL   03BC
1BE8:  MOVF   01,W
1BEA:  ADDLW  01
1BEC:  MOVLB  4
1BEE:  MOVWF  x98
1BF0:  MOVLW  00
1BF2:  ADDWFC 02,W
1BF4:  MOVWF  x99
1BF6:  CLRF   03
1BF8:  MOVLB  0
1BFA:  MOVFF  76,02
1BFE:  BCF    FD8.0
1C00:  RLCF   02,F
1C02:  RLCF   03,F
1C04:  MOVF   02,W
1C06:  MOVLB  4
1C08:  ADDWF  x98,F
1C0A:  MOVF   03,W
1C0C:  ADDWFC x99,F
1C0E:  MOVLW  01
1C10:  ADDWF  x98,W
1C12:  MOVWF  01
1C14:  MOVLW  00
1C16:  ADDWFC x99,W
1C18:  MOVWF  03
1C1A:  MOVF   01,W
1C1C:  ADDLW  77
1C1E:  MOVWF  FE9
1C20:  MOVLW  00
1C22:  ADDWFC 03,W
1C24:  MOVWF  FEA
1C26:  MOVFF  FEF,49B
1C2A:  MOVLB  0
1C2C:  CALL   0904
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
1C30:  MOVLB  4
1C32:  CLRF   xB2
1C34:  MOVFF  497,4B1
1C38:  CLRF   xB4
1C3A:  MOVLW  20
1C3C:  MOVWF  xB3
1C3E:  MOVLB  0
1C40:  CALL   03BC
1C44:  MOVF   01,W
1C46:  ADDLW  01
1C48:  MOVLB  4
1C4A:  MOVWF  x98
1C4C:  MOVLW  00
1C4E:  ADDWFC 02,W
1C50:  MOVWF  x99
1C52:  CLRF   03
1C54:  MOVLB  0
1C56:  MOVFF  76,02
1C5A:  BCF    FD8.0
1C5C:  RLCF   02,F
1C5E:  RLCF   03,F
1C60:  MOVF   02,W
1C62:  MOVLB  4
1C64:  ADDWF  x98,F
1C66:  MOVF   03,W
1C68:  ADDWFC x99,F
1C6A:  MOVLW  77
1C6C:  ADDWF  x98,W
1C6E:  MOVWF  FE9
1C70:  MOVLW  00
1C72:  ADDWFC x99,W
1C74:  MOVWF  FEA
1C76:  MOVFF  FEF,49B
1C7A:  MOVLB  0
1C7C:  CALL   0904
1C80:  INCF   x76,F
1C82:  BRA    1BC8
....................          }  
1C84:  INCF   x75,F
1C86:  MOVLB  4
1C88:  BRA    1B74
1C8A:  MOVLB  0
....................        }  
....................     gdram_vdk.refresh = false;  
1C8C:  BCF    x77.0
....................   }       
1C8E:  GOTO   1FF8 (RETURN)
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
1768:  MOVLB  4
176A:  CLRF   xAD
176C:  CLRF   xAC
176E:  CLRF   xAB
1770:  MOVLW  7F
1772:  MOVWF  xAA
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
1774:  MOVLW  7E
1776:  MOVWF  xB4
1778:  MOVLW  80
177A:  MOVWF  xB5
177C:  CLRF   xB6
177E:  CLRF   xB7
1780:  MOVLW  7A
1782:  MOVWF  xB8
1784:  MOVLW  2A
1786:  MOVWF  xB9
1788:  MOVLW  AA
178A:  MOVWF  xBA
178C:  MOVLW  A3
178E:  MOVWF  xBB
1790:  MOVLW  75
1792:  MOVWF  xBC
1794:  MOVLW  B6
1796:  MOVWF  xBD
1798:  MOVLW  09
179A:  MOVWF  xBE
179C:  MOVLW  B4
179E:  MOVWF  xBF
17A0:  MOVLW  6F
17A2:  MOVWF  xC0
17A4:  MOVLW  4F
17A6:  MOVWF  xC1
17A8:  MOVLW  B6
17AA:  MOVWF  xC2
17AC:  MOVLW  AA
17AE:  MOVWF  xC3
17B0:  MOVLW  69
17B2:  MOVWF  xC4
17B4:  MOVLW  8B
17B6:  MOVWF  xC5
17B8:  MOVLW  F6
17BA:  MOVWF  xC6
17BC:  MOVLW  E8
17BE:  MOVWF  xC7
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
17C0:  MOVFF  4A1,4CB
17C4:  MOVFF  4A0,4CA
17C8:  MOVFF  49F,4C9
17CC:  MOVFF  49E,4C8
17D0:  CLRF   xCF
17D2:  CLRF   xCE
17D4:  CLRF   xCD
17D6:  CLRF   xCC
17D8:  MOVLB  0
17DA:  BRA    16EC
17DC:  BNC   17E8
17DE:  MOVLB  4
17E0:  MOVF   x9F,W
17E2:  XORLW  80
17E4:  MOVWF  x9F
17E6:  MOVLB  0
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
17E8:  MOVFF  4A1,4CF
17EC:  MOVFF  4A0,4CE
17F0:  MOVFF  49F,4CD
17F4:  MOVFF  49E,4CC
17F8:  MOVLW  83
17FA:  MOVLB  4
17FC:  MOVWF  xD3
17FE:  MOVLW  F9
1800:  MOVWF  xD2
1802:  MOVLW  22
1804:  MOVWF  xD1
1806:  MOVLW  7E
1808:  MOVWF  xD0
180A:  MOVLB  0
180C:  RCALL  137E
180E:  MOVFF  03,4CB
1812:  MOVFF  02,4CA
1816:  MOVFF  01,4C9
181A:  MOVFF  00,4C8
181E:  RCALL  130C
1820:  MOVFF  01,4AE
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
1824:  MOVFF  4A1,4CF
1828:  MOVFF  4A0,4CE
182C:  MOVFF  49F,4CD
1830:  MOVFF  49E,4CC
1834:  MOVLW  83
1836:  MOVLB  4
1838:  MOVWF  xD3
183A:  MOVLW  F9
183C:  MOVWF  xD2
183E:  MOVLW  22
1840:  MOVWF  xD1
1842:  MOVLW  7E
1844:  MOVWF  xD0
1846:  MOVLB  0
1848:  RCALL  137E
184A:  MOVFF  03,4CB
184E:  MOVFF  02,4CA
1852:  MOVFF  01,4C9
1856:  MOVFF  00,4C8
185A:  MOVLB  4
185C:  CLRF   xCD
185E:  MOVFF  4AE,4CC
1862:  MOVLB  0
1864:  RCALL  1348
1866:  BSF    FD8.1
1868:  MOVFF  4CB,4CF
186C:  MOVFF  4CA,4CE
1870:  MOVFF  4C9,4CD
1874:  MOVFF  4C8,4CC
1878:  MOVFF  03,4D3
187C:  MOVFF  02,4D2
1880:  MOVFF  01,4D1
1884:  MOVFF  00,4D0
1888:  RCALL  1474
188A:  MOVFF  03,4B3
188E:  MOVFF  02,4B2
1892:  MOVFF  01,4B1
1896:  MOVFF  00,4B0
....................    quad = quad % 4;                    // quadrant (0 to 3) 
189A:  MOVLW  03
189C:  MOVLB  4
189E:  ANDWF  xAE,F
....................  
....................    if (quad == 0 || quad == 2) 
18A0:  MOVF   xAE,F
18A2:  BZ    18AA
18A4:  MOVF   xAE,W
18A6:  SUBLW  02
18A8:  BNZ   18E2
....................       t = frac * PI_DIV_BY_TWO; 
18AA:  MOVFF  4B3,4CF
18AE:  MOVFF  4B2,4CE
18B2:  MOVFF  4B1,4CD
18B6:  MOVFF  4B0,4CC
18BA:  MOVLW  DB
18BC:  MOVWF  xD3
18BE:  MOVLW  0F
18C0:  MOVWF  xD2
18C2:  MOVLW  49
18C4:  MOVWF  xD1
18C6:  MOVLW  7F
18C8:  MOVWF  xD0
18CA:  MOVLB  0
18CC:  RCALL  137E
18CE:  MOVFF  03,4A9
18D2:  MOVFF  02,4A8
18D6:  MOVFF  01,4A7
18DA:  MOVFF  00,4A6
18DE:  BRA    19B6
18E0:  MOVLB  4
....................    else if (quad == 1) 
18E2:  DECFSZ xAE,W
18E4:  BRA    1950
....................       t = (1-frac) * PI_DIV_BY_TWO; 
18E6:  BSF    FD8.1
18E8:  CLRF   xCF
18EA:  CLRF   xCE
18EC:  CLRF   xCD
18EE:  MOVLW  7F
18F0:  MOVWF  xCC
18F2:  MOVFF  4B3,4D3
18F6:  MOVFF  4B2,4D2
18FA:  MOVFF  4B1,4D1
18FE:  MOVFF  4B0,4D0
1902:  MOVLB  0
1904:  RCALL  1474
1906:  MOVFF  03,4CB
190A:  MOVFF  02,4CA
190E:  MOVFF  01,4C9
1912:  MOVFF  00,4C8
1916:  MOVFF  03,4CF
191A:  MOVFF  02,4CE
191E:  MOVFF  01,4CD
1922:  MOVFF  00,4CC
1926:  MOVLW  DB
1928:  MOVLB  4
192A:  MOVWF  xD3
192C:  MOVLW  0F
192E:  MOVWF  xD2
1930:  MOVLW  49
1932:  MOVWF  xD1
1934:  MOVLW  7F
1936:  MOVWF  xD0
1938:  MOVLB  0
193A:  RCALL  137E
193C:  MOVFF  03,4A9
1940:  MOVFF  02,4A8
1944:  MOVFF  01,4A7
1948:  MOVFF  00,4A6
194C:  BRA    19B6
194E:  MOVLB  4
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
1950:  BSF    FD8.1
1952:  MOVFF  4B3,4CF
1956:  MOVFF  4B2,4CE
195A:  MOVFF  4B1,4CD
195E:  MOVFF  4B0,4CC
1962:  CLRF   xD3
1964:  CLRF   xD2
1966:  CLRF   xD1
1968:  MOVLW  7F
196A:  MOVWF  xD0
196C:  MOVLB  0
196E:  RCALL  1474
1970:  MOVFF  03,4CB
1974:  MOVFF  02,4CA
1978:  MOVFF  01,4C9
197C:  MOVFF  00,4C8
1980:  MOVFF  03,4CF
1984:  MOVFF  02,4CE
1988:  MOVFF  01,4CD
198C:  MOVFF  00,4CC
1990:  MOVLW  DB
1992:  MOVLB  4
1994:  MOVWF  xD3
1996:  MOVLW  0F
1998:  MOVWF  xD2
199A:  MOVLW  49
199C:  MOVWF  xD1
199E:  MOVLW  7F
19A0:  MOVWF  xD0
19A2:  MOVLB  0
19A4:  RCALL  137E
19A6:  MOVFF  03,4A9
19AA:  MOVFF  02,4A8
19AE:  MOVFF  01,4A7
19B2:  MOVFF  00,4A6
....................  
....................    y = 1.0; 
19B6:  MOVLB  4
19B8:  CLRF   xA5
19BA:  CLRF   xA4
19BC:  CLRF   xA3
19BE:  MOVLW  7F
19C0:  MOVWF  xA2
....................    t = t * t; 
19C2:  MOVFF  4A9,4CF
19C6:  MOVFF  4A8,4CE
19CA:  MOVFF  4A7,4CD
19CE:  MOVFF  4A6,4CC
19D2:  MOVFF  4A9,4D3
19D6:  MOVFF  4A8,4D2
19DA:  MOVFF  4A7,4D1
19DE:  MOVFF  4A6,4D0
19E2:  MOVLB  0
19E4:  RCALL  137E
19E6:  MOVFF  03,4A9
19EA:  MOVFF  02,4A8
19EE:  MOVFF  01,4A7
19F2:  MOVFF  00,4A6
....................    for (i = 0; i <= 4; i++) 
19F6:  MOVLB  4
19F8:  CLRF   xAF
19FA:  MOVF   xAF,W
19FC:  SUBLW  04
19FE:  BNC   1AB6
....................    { 
....................       t2 = t2 * t; 
1A00:  MOVFF  4AD,4CF
1A04:  MOVFF  4AC,4CE
1A08:  MOVFF  4AB,4CD
1A0C:  MOVFF  4AA,4CC
1A10:  MOVFF  4A9,4D3
1A14:  MOVFF  4A8,4D2
1A18:  MOVFF  4A7,4D1
1A1C:  MOVFF  4A6,4D0
1A20:  MOVLB  0
1A22:  RCALL  137E
1A24:  MOVFF  03,4AD
1A28:  MOVFF  02,4AC
1A2C:  MOVFF  01,4AB
1A30:  MOVFF  00,4AA
....................       y = y + p[i] * t2; 
1A34:  MOVLB  4
1A36:  MOVF   xAF,W
1A38:  MULLW  04
1A3A:  MOVF   FF3,W
1A3C:  CLRF   03
1A3E:  ADDLW  B4
1A40:  MOVWF  FE9
1A42:  MOVLW  04
1A44:  ADDWFC 03,W
1A46:  MOVWF  FEA
1A48:  MOVFF  FEF,4CC
1A4C:  MOVFF  FEC,4CD
1A50:  MOVFF  FEC,4CE
1A54:  MOVFF  FEC,4CF
1A58:  MOVFF  4AD,4D3
1A5C:  MOVFF  4AC,4D2
1A60:  MOVFF  4AB,4D1
1A64:  MOVFF  4AA,4D0
1A68:  MOVLB  0
1A6A:  RCALL  137E
1A6C:  MOVFF  FEA,4C9
1A70:  MOVFF  FE9,4C8
1A74:  BCF    FD8.1
1A76:  MOVFF  4A5,4CF
1A7A:  MOVFF  4A4,4CE
1A7E:  MOVFF  4A3,4CD
1A82:  MOVFF  4A2,4CC
1A86:  MOVFF  03,4D3
1A8A:  MOVFF  02,4D2
1A8E:  MOVFF  01,4D1
1A92:  MOVFF  00,4D0
1A96:  RCALL  1474
1A98:  MOVFF  4C9,FEA
1A9C:  MOVFF  4C8,FE9
1AA0:  MOVFF  03,4A5
1AA4:  MOVFF  02,4A4
1AA8:  MOVFF  01,4A3
1AAC:  MOVFF  00,4A2
1AB0:  MOVLB  4
1AB2:  INCF   xAF,F
1AB4:  BRA    19FA
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
1AB6:  MOVF   xAE,W
1AB8:  SUBLW  02
1ABA:  BZ    1AC0
1ABC:  DECFSZ xAE,W
1ABE:  BRA    1AC6
....................       y = -y;  // correct sign 
1AC0:  MOVF   xA3,W
1AC2:  XORLW  80
1AC4:  MOVWF  xA3
....................  
....................    return (y); 
1AC6:  MOVFF  4A2,00
1ACA:  MOVFF  4A3,01
1ACE:  MOVFF  4A4,02
1AD2:  MOVFF  4A5,03
1AD6:  MOVLB  0
1AD8:  RETURN 0
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
1ADA:  BSF    FD8.1
1ADC:  MOVFF  499,4CF
1AE0:  MOVFF  498,4CE
1AE4:  MOVFF  497,4CD
1AE8:  MOVFF  496,4CC
1AEC:  MOVLW  DB
1AEE:  MOVLB  4
1AF0:  MOVWF  xD3
1AF2:  MOVLW  0F
1AF4:  MOVWF  xD2
1AF6:  MOVLW  49
1AF8:  MOVWF  xD1
1AFA:  MOVLW  7F
1AFC:  MOVWF  xD0
1AFE:  MOVLB  0
1B00:  RCALL  1474
1B02:  MOVFF  03,49D
1B06:  MOVFF  02,49C
1B0A:  MOVFF  01,49B
1B0E:  MOVFF  00,49A
1B12:  MOVFF  03,4A1
1B16:  MOVFF  02,4A0
1B1A:  MOVFF  01,49F
1B1E:  MOVFF  00,49E
1B22:  RCALL  1768
1B24:  GOTO   1F30 (RETURN)
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
056E:  MOVLW  01
0570:  MOVLB  4
0572:  MOVWF  xA6
0574:  MOVWF  xA7
0576:  CLRF   xAC
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0578:  MOVF   x9D,W
057A:  SUBWF  x9F,W
057C:  MOVWF  xAD
057E:  MOVF   xAD,W
0580:  BTFSS  xAD.7
0582:  BRA    058A
0584:  MOVLW  00
0586:  BSF    FD8.0
0588:  SUBFWB xAD,W
058A:  CLRF   03
058C:  MOVWF  xA4
058E:  MOVFF  03,4A5
....................    dy = abs((signed int8)(y2 - y1)); 
0592:  MOVF   x9E,W
0594:  SUBWF  xA0,W
0596:  MOVWF  xAD
0598:  MOVF   xAD,W
059A:  BTFSS  xAD.7
059C:  BRA    05A4
059E:  MOVLW  00
05A0:  BSF    FD8.0
05A2:  SUBFWB xAD,W
05A4:  CLRF   03
05A6:  MOVWF  xA2
05A8:  MOVFF  03,4A3
....................    #endif 
....................  
....................    if(x1 > x2) 
05AC:  MOVF   x9D,W
05AE:  SUBWF  x9F,W
05B0:  BC    05B4
....................       addx = -1; 
05B2:  SETF   xA6
....................    if(y1 > y2) 
05B4:  MOVF   x9E,W
05B6:  SUBWF  xA0,W
05B8:  BC    05BC
....................       addy = -1; 
05BA:  SETF   xA7
....................  
....................    if(dx >= dy) 
05BC:  MOVF   xA3,W
05BE:  SUBWF  xA5,W
05C0:  BNC   0636
05C2:  BNZ   05CA
05C4:  MOVF   xA2,W
05C6:  SUBWF  xA4,W
05C8:  BNC   0636
....................    { 
....................       dy *= 2; 
05CA:  BCF    FD8.0
05CC:  RLCF   xA2,F
05CE:  RLCF   xA3,F
....................       P = dy - dx; 
05D0:  MOVF   xA4,W
05D2:  SUBWF  xA2,W
05D4:  MOVWF  00
05D6:  MOVF   xA5,W
05D8:  SUBWFB xA3,W
05DA:  MOVFF  00,4A8
05DE:  MOVWF  xA9
....................       diff = P - dx; 
05E0:  MOVF   xA4,W
05E2:  SUBWF  xA8,W
05E4:  MOVWF  xAA
05E6:  MOVF   xA5,W
05E8:  SUBWFB xA9,W
05EA:  MOVWF  xAB
....................  
....................       for(; i<=dx; ++i) 
05EC:  MOVF   xA5,F
05EE:  BNZ   05F6
05F0:  MOVF   xAC,W
05F2:  SUBWF  xA4,W
05F4:  BNC   0634
....................       { 
....................          glcd_pixel(x1, y1, color); 
05F6:  MOVFF  49D,4AD
05FA:  MOVFF  49E,4AE
05FE:  MOVFF  4A1,4AF
0602:  MOVLB  0
0604:  RCALL  045E
....................  
....................          if(P < 0) 
0606:  MOVLB  4
0608:  BTFSS  xA9.7
060A:  BRA    061C
....................          { 
....................             P  += dy; 
060C:  MOVF   xA2,W
060E:  ADDWF  xA8,F
0610:  MOVF   xA3,W
0612:  ADDWFC xA9,F
....................             x1 += addx; 
0614:  MOVF   xA6,W
0616:  ADDWF  x9D,W
0618:  MOVWF  x9D
....................          } 
061A:  BRA    0630
....................          else 
....................          { 
....................             P  += diff; 
061C:  MOVF   xAA,W
061E:  ADDWF  xA8,F
0620:  MOVF   xAB,W
0622:  ADDWFC xA9,F
....................             x1 += addx; 
0624:  MOVF   xA6,W
0626:  ADDWF  x9D,W
0628:  MOVWF  x9D
....................             y1 += addy; 
062A:  MOVF   xA7,W
062C:  ADDWF  x9E,W
062E:  MOVWF  x9E
....................          } 
0630:  INCF   xAC,F
0632:  BRA    05EC
....................       } 
....................    } 
0634:  BRA    06A0
....................    else 
....................    { 
....................       dx *= 2; 
0636:  BCF    FD8.0
0638:  RLCF   xA4,F
063A:  RLCF   xA5,F
....................       P = dx - dy; 
063C:  MOVF   xA2,W
063E:  SUBWF  xA4,W
0640:  MOVWF  00
0642:  MOVF   xA3,W
0644:  SUBWFB xA5,W
0646:  MOVFF  00,4A8
064A:  MOVWF  xA9
....................       diff = P - dy; 
064C:  MOVF   xA2,W
064E:  SUBWF  xA8,W
0650:  MOVWF  xAA
0652:  MOVF   xA3,W
0654:  SUBWFB xA9,W
0656:  MOVWF  xAB
....................  
....................       for(; i<=dy; ++i) 
0658:  MOVF   xA3,F
065A:  BNZ   0662
065C:  MOVF   xAC,W
065E:  SUBWF  xA2,W
0660:  BNC   06A0
....................       { 
....................          glcd_pixel(x1, y1, color); 
0662:  MOVFF  49D,4AD
0666:  MOVFF  49E,4AE
066A:  MOVFF  4A1,4AF
066E:  MOVLB  0
0670:  RCALL  045E
....................  
....................          if(P < 0) 
0672:  MOVLB  4
0674:  BTFSS  xA9.7
0676:  BRA    0688
....................          { 
....................             P  += dx; 
0678:  MOVF   xA4,W
067A:  ADDWF  xA8,F
067C:  MOVF   xA5,W
067E:  ADDWFC xA9,F
....................             y1 += addy; 
0680:  MOVF   xA7,W
0682:  ADDWF  x9E,W
0684:  MOVWF  x9E
....................          } 
0686:  BRA    069C
....................          else 
....................          { 
....................             P  += diff; 
0688:  MOVF   xAA,W
068A:  ADDWF  xA8,F
068C:  MOVF   xAB,W
068E:  ADDWFC xA9,F
....................             x1 += addx; 
0690:  MOVF   xA6,W
0692:  ADDWF  x9D,W
0694:  MOVWF  x9D
....................             y1 += addy; 
0696:  MOVF   xA7,W
0698:  ADDWF  x9E,W
069A:  MOVWF  x9E
....................          } 
069C:  INCF   xAC,F
069E:  BRA    0658
....................       } 
....................    } 
06A0:  MOVLB  0
06A2:  RETURN 0
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
06F2:  MOVLB  4
06F4:  CLRF   x96
....................    b = radius; 
06F6:  MOVFF  493,497
....................    P = 1 - radius; 
06FA:  MOVLW  01
06FC:  BSF    FD8.0
06FE:  SUBFWB x93,W
0700:  MOVWF  x98
....................  
....................    do 
....................    { 
....................       if(fill) 
0702:  MOVF   x94,F
0704:  BZ    07C8
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
0706:  MOVF   x96,W
0708:  SUBWF  x91,W
070A:  MOVWF  x99
070C:  MOVF   x97,W
070E:  ADDWF  x92,W
0710:  MOVWF  x9A
0712:  MOVF   x96,W
0714:  ADDWF  x91,W
0716:  MOVWF  x9B
0718:  MOVF   x97,W
071A:  ADDWF  x92,W
071C:  MOVWF  x9C
071E:  MOVFF  499,49D
0722:  MOVFF  49A,49E
0726:  MOVFF  49B,49F
072A:  MOVWF  xA0
072C:  MOVFF  495,4A1
0730:  MOVLB  0
0732:  RCALL  056E
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
0734:  MOVLB  4
0736:  MOVF   x96,W
0738:  SUBWF  x91,W
073A:  MOVWF  x99
073C:  MOVF   x97,W
073E:  SUBWF  x92,W
0740:  MOVWF  x9A
0742:  MOVF   x96,W
0744:  ADDWF  x91,W
0746:  MOVWF  x9B
0748:  MOVF   x97,W
074A:  SUBWF  x92,W
074C:  MOVWF  x9C
074E:  MOVFF  499,49D
0752:  MOVFF  49A,49E
0756:  MOVFF  49B,49F
075A:  MOVWF  xA0
075C:  MOVFF  495,4A1
0760:  MOVLB  0
0762:  RCALL  056E
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
0764:  MOVLB  4
0766:  MOVF   x97,W
0768:  SUBWF  x91,W
076A:  MOVWF  x99
076C:  MOVF   x96,W
076E:  ADDWF  x92,W
0770:  MOVWF  x9A
0772:  MOVF   x97,W
0774:  ADDWF  x91,W
0776:  MOVWF  x9B
0778:  MOVF   x96,W
077A:  ADDWF  x92,W
077C:  MOVWF  x9C
077E:  MOVFF  499,49D
0782:  MOVFF  49A,49E
0786:  MOVFF  49B,49F
078A:  MOVWF  xA0
078C:  MOVFF  495,4A1
0790:  MOVLB  0
0792:  RCALL  056E
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
0794:  MOVLB  4
0796:  MOVF   x97,W
0798:  SUBWF  x91,W
079A:  MOVWF  x99
079C:  MOVF   x96,W
079E:  SUBWF  x92,W
07A0:  MOVWF  x9A
07A2:  MOVF   x97,W
07A4:  ADDWF  x91,W
07A6:  MOVWF  x9B
07A8:  MOVF   x96,W
07AA:  SUBWF  x92,W
07AC:  MOVWF  x9C
07AE:  MOVFF  499,49D
07B2:  MOVFF  49A,49E
07B6:  MOVFF  49B,49F
07BA:  MOVWF  xA0
07BC:  MOVFF  495,4A1
07C0:  MOVLB  0
07C2:  RCALL  056E
....................       } 
07C4:  BRA    08A6
07C6:  MOVLB  4
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
07C8:  MOVF   x91,W
07CA:  ADDWF  x96,W
07CC:  MOVWF  x99
07CE:  MOVF   x92,W
07D0:  ADDWF  x97,W
07D2:  MOVWF  x9A
07D4:  MOVFF  499,4AD
07D8:  MOVWF  xAE
07DA:  MOVFF  495,4AF
07DE:  MOVLB  0
07E0:  RCALL  045E
....................          glcd_pixel(b+x, a+y, color); 
07E2:  MOVLB  4
07E4:  MOVF   x91,W
07E6:  ADDWF  x97,W
07E8:  MOVWF  x99
07EA:  MOVF   x92,W
07EC:  ADDWF  x96,W
07EE:  MOVWF  x9A
07F0:  MOVFF  499,4AD
07F4:  MOVWF  xAE
07F6:  MOVFF  495,4AF
07FA:  MOVLB  0
07FC:  RCALL  045E
....................          glcd_pixel(x-a, b+y, color); 
07FE:  MOVLB  4
0800:  MOVF   x96,W
0802:  SUBWF  x91,W
0804:  MOVWF  x99
0806:  MOVF   x92,W
0808:  ADDWF  x97,W
080A:  MOVWF  x9A
080C:  MOVFF  499,4AD
0810:  MOVWF  xAE
0812:  MOVFF  495,4AF
0816:  MOVLB  0
0818:  RCALL  045E
....................          glcd_pixel(x-b, a+y, color); 
081A:  MOVLB  4
081C:  MOVF   x97,W
081E:  SUBWF  x91,W
0820:  MOVWF  x99
0822:  MOVF   x92,W
0824:  ADDWF  x96,W
0826:  MOVWF  x9A
0828:  MOVFF  499,4AD
082C:  MOVWF  xAE
082E:  MOVFF  495,4AF
0832:  MOVLB  0
0834:  RCALL  045E
....................          glcd_pixel(b+x, y-a, color); 
0836:  MOVLB  4
0838:  MOVF   x91,W
083A:  ADDWF  x97,W
083C:  MOVWF  x99
083E:  MOVF   x96,W
0840:  SUBWF  x92,W
0842:  MOVWF  x9A
0844:  MOVFF  499,4AD
0848:  MOVWF  xAE
084A:  MOVFF  495,4AF
084E:  MOVLB  0
0850:  RCALL  045E
....................          glcd_pixel(a+x, y-b, color); 
0852:  MOVLB  4
0854:  MOVF   x91,W
0856:  ADDWF  x96,W
0858:  MOVWF  x99
085A:  MOVF   x97,W
085C:  SUBWF  x92,W
085E:  MOVWF  x9A
0860:  MOVFF  499,4AD
0864:  MOVWF  xAE
0866:  MOVFF  495,4AF
086A:  MOVLB  0
086C:  RCALL  045E
....................          glcd_pixel(x-a, y-b, color); 
086E:  MOVLB  4
0870:  MOVF   x96,W
0872:  SUBWF  x91,W
0874:  MOVWF  x99
0876:  MOVF   x97,W
0878:  SUBWF  x92,W
087A:  MOVWF  x9A
087C:  MOVFF  499,4AD
0880:  MOVWF  xAE
0882:  MOVFF  495,4AF
0886:  MOVLB  0
0888:  RCALL  045E
....................          glcd_pixel(x-b, y-a, color); 
088A:  MOVLB  4
088C:  MOVF   x97,W
088E:  SUBWF  x91,W
0890:  MOVWF  x99
0892:  MOVF   x96,W
0894:  SUBWF  x92,W
0896:  MOVWF  x9A
0898:  MOVFF  499,4AD
089C:  MOVWF  xAE
089E:  MOVFF  495,4AF
08A2:  MOVLB  0
08A4:  RCALL  045E
....................       } 
....................  
....................       if(P < 0) 
08A6:  MOVLB  4
08A8:  BTFSS  x98.7
08AA:  BRA    08C8
....................          P += 3 + 2 * a++; 
08AC:  MOVF   x96,W
08AE:  INCF   x96,F
08B0:  MOVWF  x99
08B2:  MOVLW  02
08B4:  MOVWF  x9A
08B6:  MOVFF  499,49B
08BA:  MOVLB  0
08BC:  RCALL  06A4
08BE:  MOVF   01,W
08C0:  ADDLW  03
08C2:  MOVLB  4
08C4:  ADDWF  x98,F
08C6:  BRA    08EA
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
08C8:  MOVF   x96,W
08CA:  INCF   x96,F
08CC:  MOVWF  x99
08CE:  MOVF   x97,W
08D0:  DECF   x97,F
08D2:  SUBWF  x99,W
08D4:  MOVWF  x99
08D6:  MOVLW  02
08D8:  MOVWF  x9A
08DA:  MOVFF  499,49B
08DE:  MOVLB  0
08E0:  RCALL  06A4
08E2:  MOVF   01,W
08E4:  ADDLW  05
08E6:  MOVLB  4
08E8:  ADDWF  x98,F
....................     } while(a <= b); 
08EA:  MOVF   x96,W
08EC:  XORLW  80
08EE:  MOVWF  00
08F0:  MOVF   x97,W
08F2:  XORLW  80
08F4:  SUBWF  00,W
08F6:  BTFSC  FD8.2
08F8:  BRA    0702
08FA:  BTFSS  FD8.0
08FC:  BRA    0702
08FE:  MOVLB  0
0900:  GOTO   2190 (RETURN)
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... float M,N; 
.................... signed int8 max = 120,D,C; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
019E:  MOVLB  4
01A0:  INCF   x79,F
....................    set_timer1(3036); //3036 
01A2:  MOVLW  0B
01A4:  MOVWF  FCF
01A6:  MOVLW  DC
01A8:  MOVWF  FCE
01AA:  BCF    F9E.0
01AC:  MOVLB  0
01AE:  GOTO   0060
.................... } 
....................  
.................... void draw(unsigned int8 Number) { 
....................    glcd_line(64,32,(int)M,(int)N,0); 
*
1D5A:  MOVFF  483,4CB
1D5E:  MOVFF  482,4CA
1D62:  MOVFF  481,4C9
1D66:  MOVFF  480,4C8
1D6A:  CALL   130C
1D6E:  MOVFF  01,492
1D72:  MOVFF  487,4CB
1D76:  MOVFF  486,4CA
1D7A:  MOVFF  485,4C9
1D7E:  MOVFF  484,4C8
1D82:  CALL   130C
1D86:  MOVFF  01,493
1D8A:  MOVLW  40
1D8C:  MOVLB  4
1D8E:  MOVWF  x9D
1D90:  MOVLW  20
1D92:  MOVWF  x9E
1D94:  MOVFF  492,49F
1D98:  MOVFF  01,4A0
1D9C:  CLRF   xA1
1D9E:  MOVLB  0
1DA0:  CALL   056E
....................    M = 64+31*cos(Number*0.104-1.57); 
1DA4:  MOVLB  4
1DA6:  CLRF   xCD
1DA8:  MOVFF  491,4CC
1DAC:  MOVLB  0
1DAE:  CALL   1348
1DB2:  MOVFF  03,4CF
1DB6:  MOVFF  02,4CE
1DBA:  MOVFF  01,4CD
1DBE:  MOVFF  00,4CC
1DC2:  MOVLW  F4
1DC4:  MOVLB  4
1DC6:  MOVWF  xD3
1DC8:  MOVLW  FD
1DCA:  MOVWF  xD2
1DCC:  MOVLW  54
1DCE:  MOVWF  xD1
1DD0:  MOVLW  7B
1DD2:  MOVWF  xD0
1DD4:  MOVLB  0
1DD6:  CALL   137E
1DDA:  MOVFF  03,495
1DDE:  MOVFF  02,494
1DE2:  MOVFF  01,493
1DE6:  MOVFF  00,492
1DEA:  BSF    FD8.1
1DEC:  MOVFF  03,4CF
1DF0:  MOVFF  02,4CE
1DF4:  MOVFF  01,4CD
1DF8:  MOVFF  00,4CC
1DFC:  MOVLW  C3
1DFE:  MOVLB  4
1E00:  MOVWF  xD3
1E02:  MOVLW  F5
1E04:  MOVWF  xD2
1E06:  MOVLW  48
1E08:  MOVWF  xD1
1E0A:  MOVLW  7F
1E0C:  MOVWF  xD0
1E0E:  MOVLB  0
1E10:  CALL   1474
1E14:  MOVFF  03,495
1E18:  MOVFF  02,494
1E1C:  MOVFF  01,493
1E20:  MOVFF  00,492
1E24:  MOVFF  03,4A1
1E28:  MOVFF  02,4A0
1E2C:  MOVFF  01,49F
1E30:  MOVFF  00,49E
1E34:  RCALL  1768
1E36:  MOVLB  4
1E38:  CLRF   xCF
1E3A:  CLRF   xCE
1E3C:  MOVLW  78
1E3E:  MOVWF  xCD
1E40:  MOVLW  83
1E42:  MOVWF  xCC
1E44:  MOVFF  03,4D3
1E48:  MOVFF  02,4D2
1E4C:  MOVFF  01,4D1
1E50:  MOVFF  00,4D0
1E54:  MOVLB  0
1E56:  CALL   137E
1E5A:  MOVFF  FEA,493
1E5E:  MOVFF  FE9,492
1E62:  BCF    FD8.1
1E64:  MOVLB  4
1E66:  CLRF   xCF
1E68:  CLRF   xCE
1E6A:  CLRF   xCD
1E6C:  MOVLW  85
1E6E:  MOVWF  xCC
1E70:  MOVFF  03,4D3
1E74:  MOVFF  02,4D2
1E78:  MOVFF  01,4D1
1E7C:  MOVFF  00,4D0
1E80:  MOVLB  0
1E82:  CALL   1474
1E86:  MOVFF  493,FEA
1E8A:  MOVFF  492,FE9
1E8E:  MOVFF  03,483
1E92:  MOVFF  02,482
1E96:  MOVFF  01,481
1E9A:  MOVFF  00,480
....................    N = 31+31*sin(Number*0.104-1.57);    
1E9E:  MOVLB  4
1EA0:  CLRF   xCD
1EA2:  MOVFF  491,4CC
1EA6:  MOVLB  0
1EA8:  CALL   1348
1EAC:  MOVFF  03,4CF
1EB0:  MOVFF  02,4CE
1EB4:  MOVFF  01,4CD
1EB8:  MOVFF  00,4CC
1EBC:  MOVLW  F4
1EBE:  MOVLB  4
1EC0:  MOVWF  xD3
1EC2:  MOVLW  FD
1EC4:  MOVWF  xD2
1EC6:  MOVLW  54
1EC8:  MOVWF  xD1
1ECA:  MOVLW  7B
1ECC:  MOVWF  xD0
1ECE:  MOVLB  0
1ED0:  CALL   137E
1ED4:  MOVFF  03,495
1ED8:  MOVFF  02,494
1EDC:  MOVFF  01,493
1EE0:  MOVFF  00,492
1EE4:  BSF    FD8.1
1EE6:  MOVFF  03,4CF
1EEA:  MOVFF  02,4CE
1EEE:  MOVFF  01,4CD
1EF2:  MOVFF  00,4CC
1EF6:  MOVLW  C3
1EF8:  MOVLB  4
1EFA:  MOVWF  xD3
1EFC:  MOVLW  F5
1EFE:  MOVWF  xD2
1F00:  MOVLW  48
1F02:  MOVWF  xD1
1F04:  MOVLW  7F
1F06:  MOVWF  xD0
1F08:  MOVLB  0
1F0A:  CALL   1474
1F0E:  MOVFF  03,495
1F12:  MOVFF  02,494
1F16:  MOVFF  01,493
1F1A:  MOVFF  00,492
1F1E:  MOVFF  03,499
1F22:  MOVFF  02,498
1F26:  MOVFF  01,497
1F2A:  MOVFF  00,496
1F2E:  BRA    1ADA
1F30:  MOVLB  4
1F32:  CLRF   xCF
1F34:  CLRF   xCE
1F36:  MOVLW  78
1F38:  MOVWF  xCD
1F3A:  MOVLW  83
1F3C:  MOVWF  xCC
1F3E:  MOVFF  03,4D3
1F42:  MOVFF  02,4D2
1F46:  MOVFF  01,4D1
1F4A:  MOVFF  00,4D0
1F4E:  MOVLB  0
1F50:  CALL   137E
1F54:  MOVFF  FEA,493
1F58:  MOVFF  FE9,492
1F5C:  BCF    FD8.1
1F5E:  MOVLB  4
1F60:  CLRF   xCF
1F62:  CLRF   xCE
1F64:  MOVLW  78
1F66:  MOVWF  xCD
1F68:  MOVLW  83
1F6A:  MOVWF  xCC
1F6C:  MOVFF  03,4D3
1F70:  MOVFF  02,4D2
1F74:  MOVFF  01,4D1
1F78:  MOVFF  00,4D0
1F7C:  MOVLB  0
1F7E:  CALL   1474
1F82:  MOVFF  493,FEA
1F86:  MOVFF  492,FE9
1F8A:  MOVFF  03,487
1F8E:  MOVFF  02,486
1F92:  MOVFF  01,485
1F96:  MOVFF  00,484
....................    glcd_line(64,32,(int)M,(int)N,1); 
1F9A:  MOVFF  483,4CB
1F9E:  MOVFF  482,4CA
1FA2:  MOVFF  481,4C9
1FA6:  MOVFF  480,4C8
1FAA:  CALL   130C
1FAE:  MOVFF  01,492
1FB2:  MOVFF  487,4CB
1FB6:  MOVFF  486,4CA
1FBA:  MOVFF  485,4C9
1FBE:  MOVFF  484,4C8
1FC2:  CALL   130C
1FC6:  MOVFF  01,493
1FCA:  MOVLW  40
1FCC:  MOVLB  4
1FCE:  MOVWF  x9D
1FD0:  MOVLW  20
1FD2:  MOVWF  x9E
1FD4:  MOVFF  492,49F
1FD8:  MOVFF  01,4A0
1FDC:  MOVLW  01
1FDE:  MOVWF  xA1
1FE0:  MOVLB  0
1FE2:  CALL   056E
....................    gdram_vdk_to_gdram_glcd_area(32,0,64,64); 
1FE6:  MOVLW  20
1FE8:  MOVLB  4
1FEA:  MOVWF  x92
1FEC:  CLRF   x93
1FEE:  MOVLW  40
1FF0:  MOVWF  x94
1FF2:  MOVWF  x95
1FF4:  MOVLB  0
1FF6:  BRA    1B28
....................    setup_glcd(glcd_text_mode); 
1FF8:  MOVLW  30
1FFA:  MOVLB  4
1FFC:  MOVWF  x92
1FFE:  MOVLB  0
2000:  CALL   0364
....................    glcd_command(glcd_addr_line1); 
2004:  MOVLW  80
2006:  MOVLB  4
2008:  MOVWF  x99
200A:  MOVLB  0
200C:  CALL   035A
....................    printf(glcd_data,"%d",gio); 
2010:  MOVFF  47B,492
2014:  MOVLW  18
2016:  MOVLB  4
2018:  MOVWF  x93
201A:  MOVLB  0
201C:  RCALL  1C92
....................    glcd_command(glcd_addr_line2); 
201E:  MOVLW  90
2020:  MOVLB  4
2022:  MOVWF  x99
2024:  MOVLB  0
2026:  CALL   035A
....................    printf(glcd_data,"%d",phut); 
202A:  MOVFF  47A,492
202E:  MOVLW  18
2030:  MOVLB  4
2032:  MOVWF  x93
2034:  MOVLB  0
2036:  RCALL  1C92
....................    glcd_command(glcd_addr_line3);    
2038:  MOVLW  88
203A:  MOVLB  4
203C:  MOVWF  x99
203E:  MOVLB  0
2040:  CALL   035A
....................    printf(glcd_data,"%d",giay); 
2044:  MOVFF  478,492
2048:  MOVLW  18
204A:  MOVLB  4
204C:  MOVWF  x93
204E:  MOVLB  0
2050:  RCALL  1C92
....................    setup_glcd(glcd_graphic_mode);     
2052:  MOVLW  36
2054:  MOVLB  4
2056:  MOVWF  x92
2058:  MOVLB  0
205A:  CALL   0364
205E:  GOTO   23C6 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
*
0DFE:  MOVFF  492,496
0E02:  MOVFF  493,497
0E06:  RCALL  0DE2
....................    for (int i = 0; i<6;i++){ 
0E08:  MOVLB  4
0E0A:  CLRF   x94
0E0C:  MOVF   x94,W
0E0E:  SUBLW  05
0E10:  BNC   0E62
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
0E12:  MOVF   x94,W
0E14:  SUBLW  03
0E16:  BNZ   0E2A
0E18:  MOVLW  01
0E1A:  ADDWF  x92,W
0E1C:  MOVWF  x95
0E1E:  MOVWF  x96
0E20:  MOVFF  493,497
0E24:  MOVLB  0
0E26:  RCALL  0DE2
0E28:  MOVLB  4
....................       lcd_data(lcd_so_x[lcd_so][i]); 
0E2A:  MOVFF  491,49A
0E2E:  MOVLW  06
0E30:  MOVWF  x9B
0E32:  MOVLB  0
0E34:  RCALL  06A4
0E36:  MOVF   01,W
0E38:  MOVLB  4
0E3A:  CLRF   x96
0E3C:  MOVWF  x95
0E3E:  CLRF   03
0E40:  MOVF   x94,W
0E42:  ADDWF  x95,W
0E44:  MOVWF  01
0E46:  MOVF   x96,W
0E48:  ADDWFC 03,F
0E4A:  MOVF   01,W
0E4C:  MOVLB  0
0E4E:  CALL   00E8
0E52:  MOVLB  4
0E54:  MOVWF  x95
0E56:  MOVWF  x96
0E58:  MOVLB  0
0E5A:  RCALL  09EC
0E5C:  MOVLB  4
0E5E:  INCF   x94,F
0E60:  BRA    0E0C
....................    } 
0E62:  MOVLB  0
0E64:  RETURN 0
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0A6C:  MOVFF  478,491
0A70:  MOVLW  0A
0A72:  MOVLB  4
0A74:  MOVWF  x92
0A76:  MOVLB  0
0A78:  RCALL  0A20
0A7A:  CLRF   03
0A7C:  MOVF   00,W
0A7E:  CALL   00AE
0A82:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0A84:  MOVFF  478,491
0A88:  MOVLW  0A
0A8A:  MOVLB  4
0A8C:  MOVWF  x92
0A8E:  MOVLB  0
0A90:  RCALL  0A20
0A92:  CLRF   03
0A94:  MOVF   01,W
0A96:  CALL   00AE
0A9A:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0A9C:  MOVFF  47A,491
0AA0:  MOVLW  0A
0AA2:  MOVLB  4
0AA4:  MOVWF  x92
0AA6:  MOVLB  0
0AA8:  RCALL  0A20
0AAA:  CLRF   03
0AAC:  MOVF   00,W
0AAE:  CALL   00AE
0AB2:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0AB4:  MOVFF  47A,491
0AB8:  MOVLW  0A
0ABA:  MOVLB  4
0ABC:  MOVWF  x92
0ABE:  MOVLB  0
0AC0:  RCALL  0A20
0AC2:  CLRF   03
0AC4:  MOVF   01,W
0AC6:  CALL   00AE
0ACA:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0ACC:  MOVFF  47B,491
0AD0:  MOVLW  0A
0AD2:  MOVLB  4
0AD4:  MOVWF  x92
0AD6:  MOVLB  0
0AD8:  RCALL  0A20
0ADA:  CLRF   03
0ADC:  MOVF   00,W
0ADE:  CALL   00AE
0AE2:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0AE4:  MOVFF  47B,491
0AE8:  MOVLW  0A
0AEA:  MOVLB  4
0AEC:  MOVWF  x92
0AEE:  MOVLB  0
0AF0:  RCALL  0A20
0AF2:  CLRF   03
0AF4:  MOVF   01,W
0AF6:  CALL   00AE
0AFA:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
0AFC:  MOVLB  4
0AFE:  DECFSZ x7F,W
0B00:  BRA    0B06
0B02:  BCF    26.7
0B04:  BRA    0B18
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
0B06:  MOVF   x7F,W
0B08:  SUBLW  02
0B0A:  BNZ   0B10
0B0C:  BCF    29.7
0B0E:  BRA    0B18
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
0B10:  MOVF   x7F,W
0B12:  SUBLW  03
0B14:  BNZ   0B18
0B16:  BCF    2C.7
0B18:  MOVLB  0
0B1A:  RETURN 0
.................... } 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    D = count/10; 
*
0E66:  MOVFF  48B,498
0E6A:  MOVLW  0A
0E6C:  MOVLB  4
0E6E:  MOVWF  x99
0E70:  MOVLB  0
0E72:  RCALL  0DB6
0E74:  MOVFF  01,489
0E78:  MOVLB  4
....................    C = count%10; 
0E7A:  MOVFF  48B,498
0E7E:  MOVLW  0A
0E80:  MOVWF  x99
0E82:  MOVLB  0
0E84:  RCALL  0DB6
0E86:  MOVFF  00,48A
0E8A:  MOVLB  4
....................    LCD_SO_LON(D,1,0); 
0E8C:  MOVFF  489,491
0E90:  MOVLW  01
0E92:  MOVWF  x92
0E94:  CLRF   x93
0E96:  MOVLB  0
0E98:  RCALL  0DFE
....................    LCD_SO_LON(C,1,3); 
0E9A:  MOVFF  48A,491
0E9E:  MOVLW  01
0EA0:  MOVLB  4
0EA2:  MOVWF  x92
0EA4:  MOVLW  03
0EA6:  MOVWF  x93
0EA8:  MOVLB  0
0EAA:  RCALL  0DFE
0EAC:  GOTO   223E (RETURN)
....................     
....................     
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
.................... } 
....................  
.................... void main() 
*
2062:  CLRF   FF8
2064:  BCF    FD0.7
2066:  BSF    07.7
2068:  BSF    F93.1
206A:  BSF    F93.0
206C:  MOVLW  31
206E:  MOVWF  FC8
2070:  MOVLW  28
2072:  MOVWF  FC6
2074:  BSF    FC7.7
2076:  BCF    FC7.6
2078:  CLRF   1B
207A:  CLRF   22
207C:  CLRF   23
207E:  CLRF   24
2080:  CLRF   25
2082:  CLRF   2E
2084:  CLRF   2F
2086:  CLRF   30
2088:  CLRF   34
208A:  CLRF   33
208C:  CLRF   32
208E:  CLRF   31
2090:  CLRF   38
2092:  CLRF   37
2094:  CLRF   36
2096:  MOVLW  01
2098:  MOVWF  35
209A:  MOVLW  80
209C:  MOVWF  3C
209E:  CLRF   3B
20A0:  CLRF   3A
20A2:  CLRF   39
20A4:  CLRF   40
20A6:  CLRF   3F
20A8:  CLRF   3E
20AA:  CLRF   3D
20AC:  MOVWF  44
20AE:  CLRF   43
20B0:  CLRF   46
20B2:  MOVLW  01
20B4:  MOVWF  45
20B6:  CLRF   48
20B8:  CLRF   47
20BA:  MOVLW  80
20BC:  MOVWF  4C
20BE:  CLRF   4B
20C0:  CLRF   4E
20C2:  MOVLW  01
20C4:  MOVWF  4D
20C6:  CLRF   50
20C8:  CLRF   4F
20CA:  CLRF   52
20CC:  CLRF   51
20CE:  CLRF   53
20D0:  MOVLW  20
20D2:  MOVWF  54
20D4:  CLRF   55
20D6:  MOVLW  01
20D8:  MOVWF  56
20DA:  MOVLW  10
20DC:  MOVWF  57
20DE:  CLRF   58
20E0:  CLRF   5C
20E2:  CLRF   5B
20E4:  CLRF   5A
20E6:  MOVLW  01
20E8:  MOVWF  59
20EA:  CLRF   x60
20EC:  CLRF   5F
20EE:  CLRF   5E
20F0:  MOVWF  5D
20F2:  SETF   x64
20F4:  SETF   x63
20F6:  SETF   x62
20F8:  MOVLW  FE
20FA:  MOVWF  x61
20FC:  MOVLW  80
20FE:  MOVWF  x68
2100:  CLRF   x67
2102:  CLRF   x66
2104:  CLRF   x65
2106:  MOVWF  x6C
2108:  CLRF   x6B
210A:  CLRF   x6A
210C:  CLRF   x69
210E:  MOVLW  7F
2110:  MOVWF  x70
2112:  SETF   x6F
2114:  SETF   x6E
2116:  SETF   x6D
2118:  MOVLW  01
211A:  MOVWF  x71
211C:  MOVWF  x72
211E:  MOVLB  4
2120:  CLRF   x7C
2122:  CLRF   x7D
2124:  CLRF   x7E
2126:  CLRF   x7F
2128:  MOVLW  78
212A:  MOVWF  x88
212C:  CLRF   x8B
212E:  CLRF   x8C
2130:  CLRF   x8D
2132:  CLRF   x8F
2134:  CLRF   x8E
2136:  MOVF   FC1,W
2138:  ANDLW  C0
213A:  IORLW  0F
213C:  MOVWF  FC1
213E:  MOVLW  07
2140:  MOVWF  FB4
2142:  SETF   26
2144:  SETF   27
2146:  SETF   28
2148:  SETF   29
214A:  SETF   2A
214C:  SETF   2B
214E:  SETF   2C
2150:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
2152:  MOVLB  0
2154:  GOTO   01C4
....................    set_tris_b(0x3c); 
2158:  MOVLW  3C
215A:  MOVWF  F93
....................    setup_lcd(); 
215C:  GOTO   02D0
....................    setup_glcd(glcd_graphic_mode); 
2160:  MOVLW  36
2162:  MOVLB  4
2164:  MOVWF  x92
2166:  MOVLB  0
2168:  CALL   0364
....................  
....................    glcd_mau_nen(0); 
216C:  MOVLB  4
216E:  CLRF   x91
2170:  MOVLB  0
2172:  GOTO   03DE
....................    glcd_circle(64,32,31,0,1); 
2176:  MOVLW  40
2178:  MOVLB  4
217A:  MOVWF  x91
217C:  MOVLW  20
217E:  MOVWF  x92
2180:  MOVLW  1F
2182:  MOVWF  x93
2184:  CLRF   x94
2186:  MOVLW  01
2188:  MOVWF  x95
218A:  MOVLB  0
218C:  GOTO   06F2
....................    gdram_vdk_to_gdram_glcd_all(); 
2190:  GOTO   090E
....................  
....................  
....................    lcd_command(0x40); 
2194:  MOVLW  40
2196:  MOVLB  4
2198:  MOVWF  x99
219A:  MOVLB  0
219C:  CALL   0296
....................    for (int i = 0; i<64;i++){ 
21A0:  MOVLB  4
21A2:  CLRF   x90
21A4:  MOVF   x90,W
21A6:  SUBLW  3F
21A8:  BNC   21C6
....................       lcd_data(lcd_ma_8doan[i]); 
21AA:  CLRF   03
21AC:  MOVF   x90,W
21AE:  MOVLB  0
21B0:  CALL   013A
21B4:  MOVLB  4
21B6:  MOVWF  x91
21B8:  MOVWF  x96
21BA:  MOVLB  0
21BC:  CALL   09EC
21C0:  MOVLB  4
21C2:  INCF   x90,F
21C4:  BRA    21A4
....................    } 
....................  
....................    lcd_command(lcd_addr_line1); 
21C6:  MOVLW  80
21C8:  MOVWF  x99
21CA:  MOVLB  0
21CC:  CALL   0296
....................    lcd_data("**DEM SAN PHAM** "); 
21D0:  MOVLW  B2
21D2:  MOVWF  FF6
21D4:  MOVLW  01
21D6:  MOVWF  FF7
21D8:  GOTO   09FE
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
21DC:  MOVLW  A8
21DE:  MOVWF  FD5
....................    set_timer0(0);    
21E0:  CLRF   FD7
21E2:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
21E4:  MOVLW  B5
21E6:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
21E8:  MOVLW  0B
21EA:  MOVWF  FCF
21EC:  MOVLW  DC
21EE:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
21F0:  MOVLW  C0
21F2:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
21F4:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
21F6:  MOVLB  4
21F8:  CLRF   x78
....................    bdn = 0; 
21FA:  CLRF   x79
....................    phut = 29; 
21FC:  MOVLW  1D
21FE:  MOVWF  x7A
....................    gio = 15; 
2200:  MOVLW  0F
2202:  MOVWF  x7B
....................    giai_ma(); 
2204:  MOVLB  0
2206:  CALL   0A6C
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
220A:  MOVLB  4
220C:  BTFSC  x79.7
220E:  BRA    2218
2210:  MOVF   x79,W
2212:  SUBLW  09
2214:  BTFSS  FD8.0
2216:  BRA    23AE
....................          hien_thi_8led_7doan_quet_all();      
2218:  MOVLB  0
221A:  CALL   0BD4
....................          count = get_timer0(); 
221E:  MOVF   FD6,W
2220:  MOVLB  4
2222:  MOVWF  x8B
....................          if (count != countT) { 
2224:  MOVF   x8C,W
2226:  SUBWF  x8B,W
2228:  BZ    2256
....................             countT = count;          
222A:  MOVFF  48B,48C
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
222E:  CLRF   x92
2230:  MOVFF  48B,491
2234:  MOVLB  0
2236:  GOTO   0C82
....................             LCD_DISPLAY_COUNTER(); 
223A:  GOTO   0E66
....................             if (count >= max+1) {set_timer0(1);}    
223E:  MOVLW  01
2240:  MOVLB  4
2242:  ADDWF  x88,W
2244:  MOVWF  00
2246:  BTFSC  FE8.7
2248:  BRA    2250
224A:  MOVF   00,W
224C:  SUBWF  x8B,W
224E:  BNC   2256
2250:  CLRF   FD7
2252:  MOVLW  01
2254:  MOVWF  FD6
....................          } 
....................          if(ttct_td==1) sang_tat_32led(5,1); 
2256:  DECFSZ 56,W
2258:  BRA    226A
225A:  MOVLW  05
225C:  MOVWF  x91
225E:  MOVLW  01
2260:  MOVWF  x92
2262:  MOVLB  0
2264:  CALL   103E
2268:  MOVLB  4
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
226A:  MOVF   56,W
226C:  SUBLW  02
226E:  BNZ   2280
2270:  MOVLW  05
2272:  MOVWF  x91
2274:  MOVLW  01
2276:  MOVWF  x92
2278:  MOVLB  0
227A:  CALL   10A2
227E:  MOVLB  4
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
2280:  MOVF   56,W
2282:  SUBLW  03
2284:  BNZ   2296
2286:  MOVLW  05
2288:  MOVWF  x91
228A:  MOVLW  01
228C:  MOVWF  x92
228E:  MOVLB  0
2290:  CALL   1124
2294:  MOVLB  4
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
2296:  MOVF   56,W
2298:  SUBLW  04
229A:  BNZ   22AC
229C:  MOVLW  05
229E:  MOVWF  x91
22A0:  MOVLW  01
22A2:  MOVWF  x92
22A4:  MOVLB  0
22A6:  CALL   11A6
22AA:  MOVLB  4
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
22AC:  MOVF   56,W
22AE:  SUBLW  05
22B0:  BNZ   22C2
22B2:  MOVLW  05
22B4:  MOVWF  x91
22B6:  MOVLW  01
22B8:  MOVWF  x92
22BA:  MOVLB  0
22BC:  CALL   122A
22C0:  MOVLB  4
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
22C2:  MOVF   56,W
22C4:  SUBLW  06
22C6:  BNZ   22D8
22C8:  MOVLW  05
22CA:  MOVWF  x91
22CC:  MOVLW  01
22CE:  MOVWF  x92
22D0:  MOVLB  0
22D2:  CALL   1124
22D6:  MOVLB  4
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
22D8:  MOVF   56,W
22DA:  SUBLW  07
22DC:  BNZ   22EE
22DE:  MOVLW  05
22E0:  MOVWF  x91
22E2:  MOVLW  01
22E4:  MOVWF  x92
22E6:  MOVLB  0
22E8:  CALL   1124
22EC:  MOVLB  4
....................          if(ttct_td==8) sang_tat_32led(5,1); 
22EE:  MOVF   56,W
22F0:  SUBLW  08
22F2:  BNZ   2304
22F4:  MOVLW  05
22F6:  MOVWF  x91
22F8:  MOVLW  01
22FA:  MOVWF  x92
22FC:  MOVLB  0
22FE:  CALL   103E
2302:  MOVLB  4
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
2304:  MOVF   56,W
2306:  SUBLW  09
2308:  BNZ   231A
230A:  MOVLW  05
230C:  MOVWF  x91
230E:  MOVLW  01
2310:  MOVWF  x92
2312:  MOVLB  0
2314:  CALL   10A2
2318:  MOVLB  4
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
231A:  MOVF   56,W
231C:  SUBLW  0A
231E:  BNZ   2330
2320:  MOVLW  05
2322:  MOVWF  x91
2324:  MOVLW  01
2326:  MOVWF  x92
2328:  MOVLB  0
232A:  CALL   1124
232E:  MOVLB  4
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
2330:  MOVF   56,W
2332:  SUBLW  0B
2334:  BNZ   2346
2336:  MOVLW  05
2338:  MOVWF  x91
233A:  MOVLW  01
233C:  MOVWF  x92
233E:  MOVLB  0
2340:  CALL   11A6
2344:  MOVLB  4
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
2346:  MOVF   56,W
2348:  SUBLW  0C
234A:  BNZ   235C
234C:  MOVLW  05
234E:  MOVWF  x91
2350:  MOVLW  01
2352:  MOVWF  x92
2354:  MOVLB  0
2356:  CALL   122A
235A:  MOVLB  4
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
235C:  MOVF   56,W
235E:  SUBLW  0D
2360:  BNZ   2372
2362:  MOVLW  05
2364:  MOVWF  x91
2366:  MOVLW  01
2368:  MOVWF  x92
236A:  MOVLB  0
236C:  CALL   11A6
2370:  MOVLB  4
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
2372:  MOVF   56,W
2374:  SUBLW  0E
2376:  BNZ   2388
2378:  MOVLW  05
237A:  MOVWF  x91
237C:  MOVLW  01
237E:  MOVWF  x92
2380:  MOVLB  0
2382:  GOTO   1290
2386:  MOVLB  4
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
2388:  MOVF   56,W
238A:  SUBLW  0F
238C:  BNZ   239E
238E:  MOVLW  05
2390:  MOVWF  x91
2392:  MOVLW  01
2394:  MOVWF  x92
2396:  MOVLB  0
2398:  CALL   1124
239C:  MOVLB  4
....................          if(ttct_td>15) ttct_td =1;       
239E:  BTFSC  56.7
23A0:  BRA    23AC
23A2:  MOVF   56,W
23A4:  SUBLW  0F
23A6:  BC    23AC
23A8:  MOVLW  01
23AA:  MOVWF  56
....................       } 
23AC:  BRA    23EC
....................       else  
....................       { 
....................          bdn = bdn -10; 
23AE:  MOVLW  0A
23B0:  SUBWF  x79,F
....................          dem_tg_exit++; 
23B2:  INCF   x7C,F
....................          if (dem_tg_exit == 20) mode = 0; giay++; draw(giay); 
23B4:  MOVF   x7C,W
23B6:  SUBLW  14
23B8:  BNZ   23BC
23BA:  CLRF   x7F
23BC:  INCF   x78,F
23BE:  MOVFF  478,491
23C2:  MOVLB  0
23C4:  BRA    1D5A
....................             if (giay==60) { giay = 0; phut++; 
23C6:  MOVLB  4
23C8:  MOVF   x78,W
23CA:  SUBLW  3C
23CC:  BNZ   23E4
23CE:  CLRF   x78
23D0:  INCF   x7A,F
....................                if (phut == 60) { phut = 0; gio++;  
23D2:  MOVF   x7A,W
23D4:  SUBLW  3C
23D6:  BNZ   23E4
23D8:  CLRF   x7A
23DA:  INCF   x7B,F
....................                   if (gio == 24) gio = 0; 
23DC:  MOVF   x7B,W
23DE:  SUBLW  18
23E0:  BNZ   23E4
23E2:  CLRF   x7B
....................                }  
....................             } 
....................          giai_ma(); 
23E4:  MOVLB  0
23E6:  CALL   0A6C
23EA:  MOVLB  4
....................       } 
23EC:  BRA    220C
....................    }            
.................... } 
....................  
23EE:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
