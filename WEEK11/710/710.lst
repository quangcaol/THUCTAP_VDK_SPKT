CCS PCH C Compiler, Version 5.078, 43599               07-Dec-20 16:38

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\710\710.lst

               ROM used:   10422 bytes (32%)
                           Largest free fragment is 22342
               RAM used:   1171 (57%) at main() level
                           1245 (61%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   2522
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0138
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 07,0F
00FA:  DATA 1F,1F
00FC:  DATA 1F,1F
00FE:  DATA 1F,1F
0100:  DATA 1F,1F
0102:  DATA 1F,00
0104:  DATA 00,00
0106:  DATA 00,00
0108:  DATA 1C,1E
010A:  DATA 1F,1F
010C:  DATA 1F,1F
010E:  DATA 1F,1F
0110:  DATA 00,00
0112:  DATA 00,00
0114:  DATA 00,1F
0116:  DATA 1F,1F
0118:  DATA 1F,1F
011A:  DATA 1F,1F
011C:  DATA 1F,1F
011E:  DATA 1E,1C
0120:  DATA 1F,1F
0122:  DATA 1F,1F
0124:  DATA 1F,1F
0126:  DATA 0F,07
0128:  DATA 1F,1F
012A:  DATA 1F,00
012C:  DATA 00,00
012E:  DATA 1F,1F
0130:  DATA 1F,1F
0132:  DATA 1F,1F
0134:  DATA 1F,1F
0136:  DATA 1F,1F
*
014C:  DATA 4E,48
014E:  DATA 49,45
0150:  DATA 54,20
0152:  DATA 44,4F
0154:  DATA 20,4C
0156:  DATA 4D,33
0158:  DATA 35,42
015A:  DATA 3A,20
015C:  DATA 25,6C
015E:  DATA 64,00
0160:  DATA 4E,48
0162:  DATA 49,45
0164:  DATA 54,20
0166:  DATA 44,4F
0168:  DATA 20,4C
016A:  DATA 4D,33
016C:  DATA 35,41
016E:  DATA 3A,20
0170:  DATA 25,6C
0172:  DATA 64,00
0174:  DATA 44,45
0176:  DATA 4D,20
0178:  DATA 53,41
017A:  DATA 4E,20
017C:  DATA 50,48
017E:  DATA 41,4D
0180:  DATA 3A,20
0182:  DATA 25,64
0184:  DATA 00,00
*
037E:  MOVLB  4
0380:  MOVF   xB2,W
0382:  MULWF  xB4
0384:  MOVFF  FF3,01
0388:  MOVFF  FF4,00
038C:  MULWF  xB5
038E:  MOVF   FF3,W
0390:  ADDWF  00,F
0392:  MOVF   xB3,W
0394:  MULWF  xB4
0396:  MOVF   FF3,W
0398:  ADDWFC 00,W
039A:  MOVWF  02
039C:  MOVLB  0
039E:  RETURN 0
*
0666:  CLRF   00
0668:  CLRF   01
066A:  MOVLB  4
066C:  MOVF   x9B,W
066E:  BCF    FD8.0
0670:  BTFSC  x9C.0
0672:  ADDWF  00,F
0674:  RRCF   00,F
0676:  RRCF   01,F
0678:  BTFSC  x9C.1
067A:  ADDWF  00,F
067C:  RRCF   00,F
067E:  RRCF   01,F
0680:  BTFSC  x9C.2
0682:  ADDWF  00,F
0684:  RRCF   00,F
0686:  RRCF   01,F
0688:  BTFSC  x9C.3
068A:  ADDWF  00,F
068C:  RRCF   00,F
068E:  RRCF   01,F
0690:  BTFSC  x9C.4
0692:  ADDWF  00,F
0694:  RRCF   00,F
0696:  RRCF   01,F
0698:  BTFSC  x9C.5
069A:  ADDWF  00,F
069C:  RRCF   00,F
069E:  RRCF   01,F
06A0:  BTFSC  x9C.6
06A2:  ADDWF  00,F
06A4:  RRCF   00,F
06A6:  RRCF   01,F
06A8:  BTFSC  x9C.7
06AA:  ADDWF  00,F
06AC:  RRCF   00,F
06AE:  RRCF   01,F
06B0:  MOVLB  0
06B2:  RETURN 0
*
09C0:  MOVLB  4
09C2:  MOVF   x92,W
09C4:  XORWF  x93,W
09C6:  ANDLW  80
09C8:  MOVWF  x95
09CA:  BTFSS  x92.7
09CC:  BRA    09D2
09CE:  COMF   x92,F
09D0:  INCF   x92,F
09D2:  BTFSS  x93.7
09D4:  BRA    09DA
09D6:  COMF   x93,F
09D8:  INCF   x93,F
09DA:  MOVF   x93,W
09DC:  CLRF   01
09DE:  SUBWF  x92,W
09E0:  BC    09E8
09E2:  MOVFF  492,00
09E6:  BRA    0A00
09E8:  CLRF   00
09EA:  MOVLW  08
09EC:  MOVWF  x94
09EE:  RLCF   x92,F
09F0:  RLCF   00,F
09F2:  MOVF   x93,W
09F4:  SUBWF  00,W
09F6:  BTFSC  FD8.0
09F8:  MOVWF  00
09FA:  RLCF   01,F
09FC:  DECFSZ x94,F
09FE:  BRA    09EE
0A00:  BTFSS  x95.7
0A02:  BRA    0A08
0A04:  COMF   01,F
0A06:  INCF   01,F
0A08:  MOVLB  0
0A0A:  RETURN 0
0A0C:  TBLRD*+
0A0E:  MOVFF  FF6,493
0A12:  MOVFF  FF7,494
0A16:  MOVFF  FF5,49B
0A1A:  RCALL  09AE
0A1C:  MOVFF  493,FF6
0A20:  MOVFF  494,FF7
0A24:  MOVLB  4
0A26:  DECFSZ x92,F
0A28:  BRA    0A2C
0A2A:  BRA    0A30
0A2C:  MOVLB  0
0A2E:  BRA    0A0C
0A30:  MOVLB  0
0A32:  RETURN 0
0A34:  MOVFF  FEA,49A
0A38:  MOVFF  FE9,499
0A3C:  MOVLB  4
0A3E:  BTFSS  x93.7
0A40:  BRA    0A52
0A42:  BSF    x99.7
0A44:  BTFSS  x99.4
0A46:  INCF   x99,F
0A48:  COMF   x92,F
0A4A:  COMF   x93,F
0A4C:  INCF   x92,F
0A4E:  BTFSC  FD8.2
0A50:  INCF   x93,F
0A52:  SWAPF  x93,W
0A54:  IORLW  F0
0A56:  MOVWF  x95
0A58:  ADDWF  x95,F
0A5A:  ADDLW  E2
0A5C:  MOVWF  x96
0A5E:  ADDLW  32
0A60:  MOVWF  x98
0A62:  MOVF   x93,W
0A64:  ANDLW  0F
0A66:  ADDWF  x96,F
0A68:  ADDWF  x96,F
0A6A:  ADDWF  x98,F
0A6C:  ADDLW  E9
0A6E:  MOVWF  x97
0A70:  ADDWF  x97,F
0A72:  ADDWF  x97,F
0A74:  SWAPF  x92,W
0A76:  ANDLW  0F
0A78:  ADDWF  x97,F
0A7A:  ADDWF  x98,F
0A7C:  RLCF   x97,F
0A7E:  RLCF   x98,F
0A80:  COMF   x98,F
0A82:  RLCF   x98,F
0A84:  MOVF   x92,W
0A86:  ANDLW  0F
0A88:  ADDWF  x98,F
0A8A:  RLCF   x95,F
0A8C:  MOVLW  07
0A8E:  MOVWF  x94
0A90:  MOVLW  0A
0A92:  DECF   x97,F
0A94:  ADDWF  x98,F
0A96:  BNC   0A92
0A98:  DECF   x96,F
0A9A:  ADDWF  x97,F
0A9C:  BNC   0A98
0A9E:  DECF   x95,F
0AA0:  ADDWF  x96,F
0AA2:  BNC   0A9E
0AA4:  DECF   x94,F
0AA6:  ADDWF  x95,F
0AA8:  BNC   0AA4
0AAA:  MOVLW  04
0AAC:  MOVWF  FEA
0AAE:  MOVLW  94
0AB0:  MOVWF  FE9
0AB2:  MOVLW  07
0AB4:  ANDWF  x99,W
0AB6:  BCF    x99.6
0AB8:  MOVF   FED,F
0ABA:  ANDWF  x99,W
0ABC:  BNZ   0ACC
0ABE:  BTFSC  x99.4
0AC0:  MOVF   FEE,F
0AC2:  BTFSC  x99.4
0AC4:  BRA    0ACC
0AC6:  MOVLW  20
0AC8:  MOVWF  00
0ACA:  BRA    0B0E
0ACC:  ADDWF  FE9,F
0ACE:  MOVLW  00
0AD0:  ADDWFC FEA,F
0AD2:  MOVF   FE9,W
0AD4:  SUBLW  98
0AD6:  BNZ   0AE0
0AD8:  MOVF   FEA,W
0ADA:  SUBLW  04
0ADC:  BNZ   0AE0
0ADE:  BSF    x99.6
0AE0:  MOVF   FEF,W
0AE2:  MOVWF  00
0AE4:  BNZ   0AF6
0AE6:  BTFSC  x99.6
0AE8:  BRA    0AF6
0AEA:  BTFSC  x99.4
0AEC:  BRA    0B28
0AEE:  BTFSC  x99.3
0AF0:  BRA    0AF6
0AF2:  MOVLW  20
0AF4:  BRA    0B0C
0AF6:  BTFSS  x99.7
0AF8:  BRA    0B06
0AFA:  MOVLW  2D
0AFC:  MOVWF  00
0AFE:  MOVF   FED,W
0B00:  BCF    x99.6
0B02:  BCF    x99.7
0B04:  BRA    0B0E
0B06:  BSF    x99.3
0B08:  BCF    x99.4
0B0A:  MOVLW  30
0B0C:  ADDWF  00,F
0B0E:  MOVFF  FEA,493
0B12:  MOVFF  FE9,492
0B16:  MOVFF  00,49B
0B1A:  MOVLB  0
0B1C:  RCALL  09AE
0B1E:  MOVFF  493,FEA
0B22:  MOVFF  492,FE9
0B26:  MOVLB  4
0B28:  MOVF   FEE,W
0B2A:  BTFSS  x99.6
0B2C:  BRA    0AD2
0B2E:  MOVLB  0
0B30:  RETURN 0
*
0D06:  MOVLB  4
0D08:  MOVF   x9A,W
0D0A:  CLRF   01
0D0C:  SUBWF  x99,W
0D0E:  BC    0D16
0D10:  MOVFF  499,00
0D14:  BRA    0D2E
0D16:  CLRF   00
0D18:  MOVLW  08
0D1A:  MOVWF  x9B
0D1C:  RLCF   x99,F
0D1E:  RLCF   00,F
0D20:  MOVF   x9A,W
0D22:  SUBWF  00,W
0D24:  BTFSC  FD8.0
0D26:  MOVWF  00
0D28:  RLCF   01,F
0D2A:  DECFSZ x9B,F
0D2C:  BRA    0D1C
0D2E:  MOVLB  0
0D30:  RETURN 0
0D32:  MOVLW  20
0D34:  MOVLB  4
0D36:  BTFSS  x93.4
0D38:  MOVLW  30
0D3A:  MOVWF  x94
0D3C:  MOVFF  492,00
0D40:  BTFSS  00.7
0D42:  BRA    0D54
0D44:  COMF   00,F
0D46:  INCF   00,F
0D48:  MOVFF  00,492
0D4C:  MOVLW  2D
0D4E:  MOVWF  x94
0D50:  BSF    x93.7
0D52:  BSF    x93.0
0D54:  MOVF   01,W
0D56:  MOVFF  492,499
0D5A:  MOVLW  64
0D5C:  MOVWF  x9A
0D5E:  MOVLB  0
0D60:  RCALL  0D06
0D62:  MOVFF  00,492
0D66:  MOVLW  30
0D68:  ADDWF  01,W
0D6A:  MOVLB  4
0D6C:  MOVWF  x95
0D6E:  MOVFF  492,499
0D72:  MOVLW  0A
0D74:  MOVWF  x9A
0D76:  MOVLB  0
0D78:  RCALL  0D06
0D7A:  MOVLW  30
0D7C:  ADDWF  00,W
0D7E:  MOVLB  4
0D80:  MOVWF  x97
0D82:  MOVLW  30
0D84:  ADDWF  01,W
0D86:  MOVWF  x96
0D88:  MOVFF  494,00
0D8C:  MOVLW  30
0D8E:  SUBWF  x95,W
0D90:  BZ    0D9A
0D92:  BSF    x93.1
0D94:  BTFSC  x93.7
0D96:  BSF    x93.2
0D98:  BRA    0DBE
0D9A:  MOVFF  494,495
0D9E:  MOVLW  20
0DA0:  MOVWF  x94
0DA2:  MOVLW  30
0DA4:  SUBWF  x96,W
0DA6:  BZ    0DB0
0DA8:  BSF    x93.0
0DAA:  BTFSC  x93.7
0DAC:  BSF    x93.1
0DAE:  BRA    0DBE
0DB0:  BTFSS  FD8.2
0DB2:  BSF    x93.0
0DB4:  BNZ   0DBE
0DB6:  MOVFF  495,496
0DBA:  MOVLW  20
0DBC:  MOVWF  x95
0DBE:  BTFSC  x93.2
0DC0:  BRA    0DCC
0DC2:  BTFSC  x93.1
0DC4:  BRA    0DD4
0DC6:  BTFSC  x93.0
0DC8:  BRA    0DDC
0DCA:  BRA    0DE4
0DCC:  MOVFF  494,49B
0DD0:  MOVLB  0
0DD2:  RCALL  09AE
0DD4:  MOVFF  495,49B
0DD8:  MOVLB  0
0DDA:  RCALL  09AE
0DDC:  MOVFF  496,49B
0DE0:  MOVLB  0
0DE2:  RCALL  09AE
0DE4:  MOVFF  497,49B
0DE8:  MOVLB  0
0DEA:  RCALL  09AE
0DEC:  GOTO   0E1C (RETURN)
*
0E9A:  CLRF   01
0E9C:  CLRF   02
0E9E:  CLRF   00
0EA0:  CLRF   03
0EA2:  MOVLB  4
0EA4:  MOVF   x9A,W
0EA6:  BNZ   0EAC
0EA8:  MOVF   x99,W
0EAA:  BZ    0EDC
0EAC:  MOVLW  10
0EAE:  MOVWF  x9B
0EB0:  BCF    FD8.0
0EB2:  RLCF   x97,F
0EB4:  RLCF   x98,F
0EB6:  RLCF   00,F
0EB8:  RLCF   03,F
0EBA:  MOVF   x9A,W
0EBC:  SUBWF  03,W
0EBE:  BNZ   0EC4
0EC0:  MOVF   x99,W
0EC2:  SUBWF  00,W
0EC4:  BNC   0ED4
0EC6:  MOVF   x99,W
0EC8:  SUBWF  00,F
0ECA:  BTFSS  FD8.0
0ECC:  DECF   03,F
0ECE:  MOVF   x9A,W
0ED0:  SUBWF  03,F
0ED2:  BSF    FD8.0
0ED4:  RLCF   01,F
0ED6:  RLCF   02,F
0ED8:  DECFSZ x9B,F
0EDA:  BRA    0EB0
0EDC:  MOVLB  0
0EDE:  RETURN 0
*
14F0:  MOVLW  8E
14F2:  MOVWF  00
14F4:  MOVLB  4
14F6:  MOVF   xC9,W
14F8:  SUBWF  00,F
14FA:  MOVFF  4CA,02
14FE:  MOVFF  4CB,01
1502:  BSF    02.7
1504:  MOVF   00,F
1506:  BZ    151A
1508:  BCF    FD8.0
150A:  MOVF   02,F
150C:  BNZ   1512
150E:  MOVF   01,F
1510:  BZ    151A
1512:  RRCF   02,F
1514:  RRCF   01,F
1516:  DECFSZ 00,F
1518:  BRA    1508
151A:  BTFSS  xCA.7
151C:  BRA    1528
151E:  COMF   01,F
1520:  COMF   02,F
1522:  INCF   01,F
1524:  BTFSC  FD8.2
1526:  INCF   02,F
1528:  MOVLB  0
152A:  RETURN 0
152C:  MOVLW  8E
152E:  MOVWF  00
1530:  MOVFF  4CE,01
1534:  MOVFF  4CD,02
1538:  CLRF   03
153A:  MOVF   01,F
153C:  BNZ   1550
153E:  MOVFF  02,01
1542:  CLRF   02
1544:  MOVLW  08
1546:  SUBWF  00,F
1548:  MOVF   01,F
154A:  BNZ   1550
154C:  CLRF   00
154E:  BRA    1560
1550:  BCF    FD8.0
1552:  BTFSC  01.7
1554:  BRA    155E
1556:  RLCF   02,F
1558:  RLCF   01,F
155A:  DECF   00,F
155C:  BRA    1550
155E:  BCF    01.7
1560:  RETURN 0
1562:  MOVLB  4
1564:  MOVF   xCD,W
1566:  BTFSC  FD8.2
1568:  BRA    164C
156A:  MOVWF  00
156C:  MOVF   xD1,W
156E:  BTFSC  FD8.2
1570:  BRA    164C
1572:  ADDWF  00,F
1574:  BNC   157E
1576:  MOVLW  81
1578:  ADDWF  00,F
157A:  BC    164C
157C:  BRA    1586
157E:  MOVLW  7F
1580:  SUBWF  00,F
1582:  BNC   164C
1584:  BZ    164C
1586:  MOVFF  4CE,4D5
158A:  MOVF   xD2,W
158C:  XORWF  xD5,F
158E:  BSF    xCE.7
1590:  BSF    xD2.7
1592:  MOVF   xD0,W
1594:  MULWF  xD4
1596:  MOVFF  FF4,4D7
159A:  MOVF   xCF,W
159C:  MULWF  xD3
159E:  MOVFF  FF4,03
15A2:  MOVFF  FF3,4D6
15A6:  MULWF  xD4
15A8:  MOVF   FF3,W
15AA:  ADDWF  xD7,F
15AC:  MOVF   FF4,W
15AE:  ADDWFC xD6,F
15B0:  MOVLW  00
15B2:  ADDWFC 03,F
15B4:  MOVF   xD0,W
15B6:  MULWF  xD3
15B8:  MOVF   FF3,W
15BA:  ADDWF  xD7,F
15BC:  MOVF   FF4,W
15BE:  ADDWFC xD6,F
15C0:  MOVLW  00
15C2:  CLRF   02
15C4:  ADDWFC 03,F
15C6:  ADDWFC 02,F
15C8:  MOVF   xCE,W
15CA:  MULWF  xD4
15CC:  MOVF   FF3,W
15CE:  ADDWF  xD6,F
15D0:  MOVF   FF4,W
15D2:  ADDWFC 03,F
15D4:  MOVLW  00
15D6:  ADDWFC 02,F
15D8:  MOVF   xCE,W
15DA:  MULWF  xD3
15DC:  MOVF   FF3,W
15DE:  ADDWF  03,F
15E0:  MOVF   FF4,W
15E2:  ADDWFC 02,F
15E4:  MOVLW  00
15E6:  CLRF   01
15E8:  ADDWFC 01,F
15EA:  MOVF   xD0,W
15EC:  MULWF  xD2
15EE:  MOVF   FF3,W
15F0:  ADDWF  xD6,F
15F2:  MOVF   FF4,W
15F4:  ADDWFC 03,F
15F6:  MOVLW  00
15F8:  ADDWFC 02,F
15FA:  ADDWFC 01,F
15FC:  MOVF   xCF,W
15FE:  MULWF  xD2
1600:  MOVF   FF3,W
1602:  ADDWF  03,F
1604:  MOVF   FF4,W
1606:  ADDWFC 02,F
1608:  MOVLW  00
160A:  ADDWFC 01,F
160C:  MOVF   xCE,W
160E:  MULWF  xD2
1610:  MOVF   FF3,W
1612:  ADDWF  02,F
1614:  MOVF   FF4,W
1616:  ADDWFC 01,F
1618:  INCF   00,F
161A:  BTFSC  01.7
161C:  BRA    1628
161E:  RLCF   xD6,F
1620:  RLCF   03,F
1622:  RLCF   02,F
1624:  RLCF   01,F
1626:  DECF   00,F
1628:  MOVLW  00
162A:  BTFSS  xD6.7
162C:  BRA    1642
162E:  INCF   03,F
1630:  ADDWFC 02,F
1632:  ADDWFC 01,F
1634:  MOVF   01,W
1636:  BNZ   1642
1638:  MOVF   02,W
163A:  BNZ   1642
163C:  MOVF   03,W
163E:  BNZ   1642
1640:  INCF   00,F
1642:  BTFSC  xD5.7
1644:  BSF    01.7
1646:  BTFSS  xD5.7
1648:  BCF    01.7
164A:  BRA    1654
164C:  CLRF   00
164E:  CLRF   01
1650:  CLRF   02
1652:  CLRF   03
1654:  MOVLB  0
1656:  RETURN 0
1658:  MOVLW  80
165A:  BTFSS  FD8.1
165C:  BRA    1662
165E:  MOVLB  4
1660:  XORWF  xD2,F
1662:  MOVLB  4
1664:  CLRF   xD7
1666:  CLRF   xD8
1668:  MOVFF  4CE,4D6
166C:  MOVF   xD2,W
166E:  XORWF  xD6,F
1670:  MOVF   xCD,W
1672:  BTFSC  FD8.2
1674:  BRA    1834
1676:  MOVWF  xD5
1678:  MOVWF  00
167A:  MOVF   xD1,W
167C:  BTFSC  FD8.2
167E:  BRA    1846
1680:  SUBWF  xD5,F
1682:  BTFSC  FD8.2
1684:  BRA    178C
1686:  BNC   1704
1688:  MOVFF  4D2,4DB
168C:  BSF    xDB.7
168E:  MOVFF  4D3,4DA
1692:  MOVFF  4D4,4D9
1696:  CLRF   xD8
1698:  BCF    FD8.0
169A:  RRCF   xDB,F
169C:  RRCF   xDA,F
169E:  RRCF   xD9,F
16A0:  RRCF   xD8,F
16A2:  DECFSZ xD5,F
16A4:  BRA    1696
16A6:  BTFSS  xD6.7
16A8:  BRA    16B0
16AA:  BSF    xD7.0
16AC:  BRA    186E
16AE:  BCF    xD7.0
16B0:  BCF    xD5.0
16B2:  BSF    xD7.4
16B4:  MOVLW  04
16B6:  MOVWF  FEA
16B8:  MOVLW  D0
16BA:  MOVWF  FE9
16BC:  BRA    1894
16BE:  BCF    xD7.4
16C0:  BTFSC  xD6.7
16C2:  BRA    16D8
16C4:  BTFSS  xD5.0
16C6:  BRA    16EE
16C8:  RRCF   xDB,F
16CA:  RRCF   xDA,F
16CC:  RRCF   xD9,F
16CE:  RRCF   xD8,F
16D0:  INCF   00,F
16D2:  BTFSC  FD8.2
16D4:  BRA    1864
16D6:  BRA    16EE
16D8:  BTFSC  xDB.7
16DA:  BRA    16F4
16DC:  BCF    FD8.0
16DE:  RLCF   xD8,F
16E0:  RLCF   xD9,F
16E2:  RLCF   xDA,F
16E4:  RLCF   xDB,F
16E6:  DECF   00,F
16E8:  BTFSC  FD8.2
16EA:  BRA    1864
16EC:  BRA    16D8
16EE:  BSF    xD7.6
16F0:  BRA    17CC
16F2:  BCF    xD7.6
16F4:  MOVFF  4CE,4D6
16F8:  BTFSS  xCE.7
16FA:  BRA    1700
16FC:  BSF    xDB.7
16FE:  BRA    1856
1700:  BCF    xDB.7
1702:  BRA    1856
1704:  MOVFF  4D1,4D5
1708:  MOVFF  4D1,00
170C:  MOVF   xCD,W
170E:  SUBWF  xD5,F
1710:  MOVFF  4CE,4DB
1714:  BSF    xDB.7
1716:  MOVFF  4CF,4DA
171A:  MOVFF  4D0,4D9
171E:  CLRF   xD8
1720:  BCF    FD8.0
1722:  RRCF   xDB,F
1724:  RRCF   xDA,F
1726:  RRCF   xD9,F
1728:  RRCF   xD8,F
172A:  DECFSZ xD5,F
172C:  BRA    171E
172E:  BTFSS  xD6.7
1730:  BRA    1738
1732:  BSF    xD7.1
1734:  BRA    186E
1736:  BCF    xD7.1
1738:  BCF    xD5.0
173A:  BSF    xD7.5
173C:  MOVLW  04
173E:  MOVWF  FEA
1740:  MOVLW  D4
1742:  MOVWF  FE9
1744:  BRA    1894
1746:  BCF    xD7.5
1748:  BTFSC  xD6.7
174A:  BRA    1760
174C:  BTFSS  xD5.0
174E:  BRA    1776
1750:  RRCF   xDB,F
1752:  RRCF   xDA,F
1754:  RRCF   xD9,F
1756:  RRCF   xD8,F
1758:  INCF   00,F
175A:  BTFSC  FD8.2
175C:  BRA    1864
175E:  BRA    1776
1760:  BTFSC  xDB.7
1762:  BRA    177C
1764:  BCF    FD8.0
1766:  RLCF   xD8,F
1768:  RLCF   xD9,F
176A:  RLCF   xDA,F
176C:  RLCF   xDB,F
176E:  DECF   00,F
1770:  BTFSC  FD8.2
1772:  BRA    1864
1774:  BRA    1760
1776:  BSF    xD7.7
1778:  BRA    17CC
177A:  BCF    xD7.7
177C:  MOVFF  4D2,4D6
1780:  BTFSS  xD2.7
1782:  BRA    1788
1784:  BSF    xDB.7
1786:  BRA    1856
1788:  BCF    xDB.7
178A:  BRA    1856
178C:  MOVFF  4D2,4DB
1790:  BSF    xDB.7
1792:  MOVFF  4D3,4DA
1796:  MOVFF  4D4,4D9
179A:  BTFSS  xD6.7
179C:  BRA    17A6
179E:  BCF    xDB.7
17A0:  BSF    xD7.2
17A2:  BRA    186E
17A4:  BCF    xD7.2
17A6:  CLRF   xD8
17A8:  BCF    xD5.0
17AA:  MOVLW  04
17AC:  MOVWF  FEA
17AE:  MOVLW  D0
17B0:  MOVWF  FE9
17B2:  BRA    1894
17B4:  BTFSC  xD6.7
17B6:  BRA    17F0
17B8:  MOVFF  4CE,4D6
17BC:  BTFSS  xD5.0
17BE:  BRA    17CC
17C0:  RRCF   xDB,F
17C2:  RRCF   xDA,F
17C4:  RRCF   xD9,F
17C6:  RRCF   xD8,F
17C8:  INCF   00,F
17CA:  BZ    1864
17CC:  BTFSS  xD8.7
17CE:  BRA    17E6
17D0:  INCF   xD9,F
17D2:  BNZ   17E6
17D4:  INCF   xDA,F
17D6:  BNZ   17E6
17D8:  INCF   xDB,F
17DA:  BNZ   17E6
17DC:  RRCF   xDB,F
17DE:  RRCF   xDA,F
17E0:  RRCF   xD9,F
17E2:  INCF   00,F
17E4:  BZ    1864
17E6:  BTFSC  xD7.6
17E8:  BRA    16F2
17EA:  BTFSC  xD7.7
17EC:  BRA    177A
17EE:  BRA    1828
17F0:  MOVLW  80
17F2:  XORWF  xDB,F
17F4:  BTFSS  xDB.7
17F6:  BRA    1800
17F8:  BRA    186E
17FA:  MOVFF  4D2,4D6
17FE:  BRA    1814
1800:  MOVFF  4CE,4D6
1804:  MOVF   xDB,F
1806:  BNZ   1814
1808:  MOVF   xDA,F
180A:  BNZ   1814
180C:  MOVF   xD9,F
180E:  BNZ   1814
1810:  CLRF   00
1812:  BRA    1856
1814:  BTFSC  xDB.7
1816:  BRA    1828
1818:  BCF    FD8.0
181A:  RLCF   xD8,F
181C:  RLCF   xD9,F
181E:  RLCF   xDA,F
1820:  RLCF   xDB,F
1822:  DECFSZ 00,F
1824:  BRA    1814
1826:  BRA    1864
1828:  BTFSS  xD6.7
182A:  BRA    1830
182C:  BSF    xDB.7
182E:  BRA    1856
1830:  BCF    xDB.7
1832:  BRA    1856
1834:  MOVFF  4D1,00
1838:  MOVFF  4D2,4DB
183C:  MOVFF  4D3,4DA
1840:  MOVFF  4D4,4D9
1844:  BRA    1856
1846:  MOVFF  4CD,00
184A:  MOVFF  4CE,4DB
184E:  MOVFF  4CF,4DA
1852:  MOVFF  4D0,4D9
1856:  MOVFF  4DB,01
185A:  MOVFF  4DA,02
185E:  MOVFF  4D9,03
1862:  BRA    18CC
1864:  CLRF   00
1866:  CLRF   01
1868:  CLRF   02
186A:  CLRF   03
186C:  BRA    18CC
186E:  CLRF   xD8
1870:  COMF   xD9,F
1872:  COMF   xDA,F
1874:  COMF   xDB,F
1876:  COMF   xD8,F
1878:  INCF   xD8,F
187A:  BNZ   1886
187C:  INCF   xD9,F
187E:  BNZ   1886
1880:  INCF   xDA,F
1882:  BNZ   1886
1884:  INCF   xDB,F
1886:  BTFSC  xD7.0
1888:  BRA    16AE
188A:  BTFSC  xD7.1
188C:  BRA    1736
188E:  BTFSC  xD7.2
1890:  BRA    17A4
1892:  BRA    17FA
1894:  MOVF   FEF,W
1896:  ADDWF  xD9,F
1898:  BNC   18A4
189A:  INCF   xDA,F
189C:  BNZ   18A4
189E:  INCF   xDB,F
18A0:  BTFSC  FD8.2
18A2:  BSF    xD5.0
18A4:  MOVF   FED,F
18A6:  MOVF   FEF,W
18A8:  ADDWF  xDA,F
18AA:  BNC   18B2
18AC:  INCF   xDB,F
18AE:  BTFSC  FD8.2
18B0:  BSF    xD5.0
18B2:  MOVF   FED,F
18B4:  MOVF   FEF,W
18B6:  BTFSC  FEF.7
18B8:  BRA    18BC
18BA:  XORLW  80
18BC:  ADDWF  xDB,F
18BE:  BTFSC  FD8.0
18C0:  BSF    xD5.0
18C2:  BTFSC  xD7.4
18C4:  BRA    16BE
18C6:  BTFSC  xD7.5
18C8:  BRA    1746
18CA:  BRA    17B4
18CC:  MOVLB  0
18CE:  RETURN 0
18D0:  MOVFF  4CA,4D1
18D4:  MOVLB  4
18D6:  MOVF   xCE,W
18D8:  XORWF  xD1,F
18DA:  BTFSS  xD1.7
18DC:  BRA    18E8
18DE:  BCF    FD8.2
18E0:  BCF    FD8.0
18E2:  BTFSC  xCA.7
18E4:  BSF    FD8.0
18E6:  BRA    1946
18E8:  MOVFF  4CA,4D1
18EC:  MOVFF  4CD,4D2
18F0:  MOVF   xC9,W
18F2:  SUBWF  xD2,F
18F4:  BZ    1902
18F6:  BTFSS  xD1.7
18F8:  BRA    1946
18FA:  MOVF   FD8,W
18FC:  XORLW  01
18FE:  MOVWF  FD8
1900:  BRA    1946
1902:  MOVFF  4CE,4D2
1906:  MOVF   xCA,W
1908:  SUBWF  xD2,F
190A:  BZ    1918
190C:  BTFSS  xD1.7
190E:  BRA    1946
1910:  MOVF   FD8,W
1912:  XORLW  01
1914:  MOVWF  FD8
1916:  BRA    1946
1918:  MOVFF  4CF,4D2
191C:  MOVF   xCB,W
191E:  SUBWF  xD2,F
1920:  BZ    192E
1922:  BTFSS  xD1.7
1924:  BRA    1946
1926:  MOVF   FD8,W
1928:  XORLW  01
192A:  MOVWF  FD8
192C:  BRA    1946
192E:  MOVFF  4D0,4D2
1932:  MOVF   xCC,W
1934:  SUBWF  xD2,F
1936:  BZ    1944
1938:  BTFSS  xD1.7
193A:  BRA    1946
193C:  MOVF   FD8,W
193E:  XORLW  01
1940:  MOVWF  FD8
1942:  BRA    1946
1944:  BCF    FD8.0
1946:  MOVLB  0
1948:  GOTO   19C0 (RETURN)
*
1E76:  MOVLW  20
1E78:  MOVLB  4
1E7A:  BTFSS  x94.4
1E7C:  MOVLW  30
1E7E:  MOVWF  x95
1E80:  MOVFF  493,00
1E84:  BTFSS  00.7
1E86:  BRA    1E98
1E88:  COMF   00,F
1E8A:  INCF   00,F
1E8C:  MOVFF  00,493
1E90:  MOVLW  2D
1E92:  MOVWF  x95
1E94:  BSF    x94.7
1E96:  BSF    x94.0
1E98:  MOVF   01,W
1E9A:  MOVFF  493,499
1E9E:  MOVLW  64
1EA0:  MOVWF  x9A
1EA2:  MOVLB  0
1EA4:  CALL   0D06
1EA8:  MOVFF  00,493
1EAC:  MOVLW  30
1EAE:  ADDWF  01,W
1EB0:  MOVLB  4
1EB2:  MOVWF  x96
1EB4:  MOVFF  493,499
1EB8:  MOVLW  0A
1EBA:  MOVWF  x9A
1EBC:  MOVLB  0
1EBE:  CALL   0D06
1EC2:  MOVLW  30
1EC4:  ADDWF  00,W
1EC6:  MOVLB  4
1EC8:  MOVWF  x98
1ECA:  MOVLW  30
1ECC:  ADDWF  01,W
1ECE:  MOVWF  x97
1ED0:  MOVFF  495,00
1ED4:  MOVLW  30
1ED6:  SUBWF  x96,W
1ED8:  BZ    1EE2
1EDA:  BSF    x94.1
1EDC:  BTFSC  x94.7
1EDE:  BSF    x94.2
1EE0:  BRA    1F06
1EE2:  MOVFF  495,496
1EE6:  MOVLW  20
1EE8:  MOVWF  x95
1EEA:  MOVLW  30
1EEC:  SUBWF  x97,W
1EEE:  BZ    1EF8
1EF0:  BSF    x94.0
1EF2:  BTFSC  x94.7
1EF4:  BSF    x94.1
1EF6:  BRA    1F06
1EF8:  BTFSS  FD8.2
1EFA:  BSF    x94.0
1EFC:  BNZ   1F06
1EFE:  MOVFF  496,497
1F02:  MOVLW  20
1F04:  MOVWF  x96
1F06:  BTFSC  x94.2
1F08:  BRA    1F14
1F0A:  BTFSC  x94.1
1F0C:  BRA    1F1E
1F0E:  BTFSC  x94.0
1F10:  BRA    1F28
1F12:  BRA    1F32
1F14:  MOVFF  495,49C
1F18:  MOVLB  0
1F1A:  CALL   08C6
1F1E:  MOVFF  496,49C
1F22:  MOVLB  0
1F24:  CALL   08C6
1F28:  MOVFF  497,49C
1F2C:  MOVLB  0
1F2E:  CALL   08C6
1F32:  MOVFF  498,49C
1F36:  MOVLB  0
1F38:  CALL   08C6
1F3C:  RETURN 0
*
2246:  MOVLB  4
2248:  MOVF   x94,W
224A:  BTFSC  FD8.2
224C:  BRA    2398
224E:  MOVWF  xA0
2250:  MOVF   x98,W
2252:  BTFSC  FD8.2
2254:  BRA    2398
2256:  SUBWF  xA0,F
2258:  BNC   2264
225A:  MOVLW  7F
225C:  ADDWF  xA0,F
225E:  BTFSC  FD8.0
2260:  BRA    2398
2262:  BRA    2270
2264:  MOVLW  81
2266:  SUBWF  xA0,F
2268:  BTFSS  FD8.0
226A:  BRA    2398
226C:  BTFSC  FD8.2
226E:  BRA    2398
2270:  MOVFF  4A0,00
2274:  CLRF   01
2276:  CLRF   02
2278:  CLRF   03
227A:  CLRF   x9F
227C:  MOVFF  495,49E
2280:  BSF    x9E.7
2282:  MOVFF  496,49D
2286:  MOVFF  497,49C
228A:  MOVLW  19
228C:  MOVWF  xA0
228E:  MOVF   x9B,W
2290:  SUBWF  x9C,F
2292:  BC    22AE
2294:  MOVLW  01
2296:  SUBWF  x9D,F
2298:  BC    22AE
229A:  SUBWF  x9E,F
229C:  BC    22AE
229E:  SUBWF  x9F,F
22A0:  BC    22AE
22A2:  INCF   x9F,F
22A4:  INCF   x9E,F
22A6:  INCF   x9D,F
22A8:  MOVF   x9B,W
22AA:  ADDWF  x9C,F
22AC:  BRA    22FE
22AE:  MOVF   x9A,W
22B0:  SUBWF  x9D,F
22B2:  BC    22D8
22B4:  MOVLW  01
22B6:  SUBWF  x9E,F
22B8:  BC    22D8
22BA:  SUBWF  x9F,F
22BC:  BC    22D8
22BE:  INCF   x9F,F
22C0:  INCF   x9E,F
22C2:  MOVF   x9A,W
22C4:  ADDWF  x9D,F
22C6:  MOVF   x9B,W
22C8:  ADDWF  x9C,F
22CA:  BNC   22FE
22CC:  INCF   x9D,F
22CE:  BNZ   22FE
22D0:  INCF   x9E,F
22D2:  BNZ   22FE
22D4:  INCF   x9F,F
22D6:  BRA    22FE
22D8:  MOVF   x99,W
22DA:  IORLW  80
22DC:  SUBWF  x9E,F
22DE:  BC    22FC
22E0:  MOVLW  01
22E2:  SUBWF  x9F,F
22E4:  BC    22FC
22E6:  INCF   x9F,F
22E8:  MOVF   x99,W
22EA:  IORLW  80
22EC:  ADDWF  x9E,F
22EE:  MOVF   x9A,W
22F0:  ADDWF  x9D,F
22F2:  BNC   22C6
22F4:  INCF   x9E,F
22F6:  BNZ   22C6
22F8:  INCF   x9F,F
22FA:  BRA    22C6
22FC:  BSF    03.0
22FE:  DECFSZ xA0,F
2300:  BRA    2304
2302:  BRA    231A
2304:  BCF    FD8.0
2306:  RLCF   x9C,F
2308:  RLCF   x9D,F
230A:  RLCF   x9E,F
230C:  RLCF   x9F,F
230E:  BCF    FD8.0
2310:  RLCF   03,F
2312:  RLCF   02,F
2314:  RLCF   01,F
2316:  RLCF   xA1,F
2318:  BRA    228E
231A:  BTFSS  xA1.0
231C:  BRA    232A
231E:  BCF    FD8.0
2320:  RRCF   01,F
2322:  RRCF   02,F
2324:  RRCF   03,F
2326:  RRCF   xA1,F
2328:  BRA    232E
232A:  DECF   00,F
232C:  BZ    2398
232E:  BTFSC  xA1.7
2330:  BRA    236E
2332:  BCF    FD8.0
2334:  RLCF   x9C,F
2336:  RLCF   x9D,F
2338:  RLCF   x9E,F
233A:  RLCF   x9F,F
233C:  MOVF   x9B,W
233E:  SUBWF  x9C,F
2340:  BC    2350
2342:  MOVLW  01
2344:  SUBWF  x9D,F
2346:  BC    2350
2348:  SUBWF  x9E,F
234A:  BC    2350
234C:  SUBWF  x9F,F
234E:  BNC   2384
2350:  MOVF   x9A,W
2352:  SUBWF  x9D,F
2354:  BC    2360
2356:  MOVLW  01
2358:  SUBWF  x9E,F
235A:  BC    2360
235C:  SUBWF  x9F,F
235E:  BNC   2384
2360:  MOVF   x99,W
2362:  IORLW  80
2364:  SUBWF  x9E,F
2366:  BC    236E
2368:  MOVLW  01
236A:  SUBWF  x9F,F
236C:  BNC   2384
236E:  INCF   03,F
2370:  BNZ   2384
2372:  INCF   02,F
2374:  BNZ   2384
2376:  INCF   01,F
2378:  BNZ   2384
237A:  INCF   00,F
237C:  BZ    2398
237E:  RRCF   01,F
2380:  RRCF   02,F
2382:  RRCF   03,F
2384:  MOVFF  495,4A0
2388:  MOVF   x99,W
238A:  XORWF  xA0,F
238C:  BTFSS  xA0.7
238E:  BRA    2394
2390:  BSF    01.7
2392:  BRA    23A0
2394:  BCF    01.7
2396:  BRA    23A0
2398:  CLRF   00
239A:  CLRF   01
239C:  CLRF   02
239E:  CLRF   03
23A0:  MOVLB  0
23A2:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
026A:  MOVLW  04
026C:  MOVWF  FEA
026E:  MOVLW  97
0270:  MOVWF  FE9
0272:  MOVF   FEF,W
0274:  BZ    0290
0276:  MOVLW  06
0278:  MOVWF  01
027A:  CLRF   00
027C:  DECFSZ 00,F
027E:  BRA    027C
0280:  DECFSZ 01,F
0282:  BRA    027A
0284:  MOVLW  7B
0286:  MOVWF  00
0288:  DECFSZ 00,F
028A:  BRA    0288
028C:  DECFSZ FEF,F
028E:  BRA    0276
0290:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
01A4:  MOVFF  4A8,4AA
....................    for (sb=0;sb<8;sb++) 
01A8:  MOVLB  4
01AA:  CLRF   xA9
01AC:  MOVF   xA9,W
01AE:  SUBLW  07
01B0:  BNC   01CE
....................       {                                                  
....................          output_bit(ssdo,bseri);     
01B2:  BTFSC  xAA.7
01B4:  BRA    01BA
01B6:  BCF    F8D.2
01B8:  BRA    01BC
01BA:  BSF    F8D.2
01BC:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
01BE:  BCF    F96.0
01C0:  BCF    F8D.0
01C2:  BCF    F96.0
01C4:  BSF    F8D.0
....................          x= x<<1;          
01C6:  BCF    FD8.0
01C8:  RLCF   xAA,F
01CA:  INCF   xA9,F
01CC:  BRA    01AC
....................      } 
01CE:  MOVLB  0
01D0:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
1094:  MOVFF  4A4,4A8
1098:  CALL   01A4
....................       xuat_1byte(bld2); 
109C:  MOVFF  4A5,4A8
10A0:  CALL   01A4
....................       xuat_1byte(bld1);           
10A4:  MOVFF  4A6,4A8
10A8:  CALL   01A4
....................       xuat_1byte(bld0);             
10AC:  MOVFF  4A7,4A8
10B0:  CALL   01A4
....................       mo_32_led_don;       
10B4:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
10B6:  CALL   01D2
....................       output_high(rck_32led);    output_low(rck_32led); 
10BA:  BCF    F95.5
10BC:  BSF    F8C.5
10BE:  BCF    F95.5
10C0:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
10C2:  BCF    F95.1
10C4:  BCF    F8C.1
10C6:  GOTO   10EC (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
10CA:  MOVFF  49D,4A0
10CE:  MOVFF  49C,4A1
....................      b1 = wld0>>8;  b0 = wld0; 
10D2:  MOVFF  49F,4A2
10D6:  MOVFF  49E,4A3
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
10DA:  MOVFF  4A0,4A4
10DE:  MOVFF  4A1,4A5
10E2:  MOVFF  4A2,4A6
10E6:  MOVFF  4A3,4A7
10EA:  BRA    1094
10EC:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
10EE:  MOVFF  496,498
10F2:  MOVFF  497,499
10F6:  MOVFF  495,49B
10FA:  MOVFF  494,49A
....................      xuat_32led_don_2word(wd1,wd0); 
10FE:  MOVFF  499,49D
1102:  MOVFF  498,49C
1106:  MOVFF  49B,49F
110A:  MOVFF  49A,49E
110E:  RCALL  10CA
1110:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
0186:  MOVLW  00
0188:  MOVWF  F95
....................       set_tris_e(0x00); 
018A:  MOVWF  F96
....................       output_d(0xff); 
018C:  CLRF   F95
018E:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0190:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
0192:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
0194:  BCF    F95.1
0196:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
0198:  BCF    F95.0
019A:  BCF    F8C.0
....................       rbdc=0; 
019C:  CLRF   1D
019E:  CLRF   1C
01A0:  GOTO   261C (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
01D2:  CLRF   F95
01D4:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
01D6:  BTFSC  19.4
01D8:  BRA    01DE
01DA:  BCF    F8C.4
01DC:  BRA    01E0
01DE:  BSF    F8C.4
01E0:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
01E2:  BTFSC  19.6
01E4:  BRA    01EA
01E6:  BCF    F8C.6
01E8:  BRA    01EC
01EA:  BSF    F8C.6
01EC:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
01EE:  BTFSC  19.2
01F0:  BRA    01F6
01F2:  BCF    F8C.2
01F4:  BRA    01F8
01F6:  BSF    F8C.2
01F8:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
01FA:  BCF    F95.1
01FC:  BSF    F8C.1
01FE:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0C1C:  CLRF   F95
0C1E:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0C20:  BTFSC  1A.6
0C22:  BRA    0C28
0C24:  BCF    F8C.6
0C26:  BRA    0C2A
0C28:  BSF    F8C.6
0C2A:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0C2C:  BTFSC  1A.4
0C2E:  BRA    0C34
0C30:  BCF    F8C.4
0C32:  BRA    0C36
0C34:  BSF    F8C.4
0C36:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0C38:  BTFSC  1A.2
0C3A:  BRA    0C40
0C3C:  BCF    F8C.2
0C3E:  BRA    0C42
0C40:  BSF    F8C.2
0C42:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
0C44:  BCF    F95.0
0C46:  BSF    F8C.0
0C48:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
0EE0:  MOVFF  49D,4A8
0EE4:  CALL   01A4
0EE8:  MOVFF  49C,4A8
0EEC:  CALL   01A4
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
0EF0:  MOVFF  49B,4A8
0EF4:  CALL   01A4
0EF8:  MOVFF  49A,4A8
0EFC:  CALL   01A4
....................        
....................       mo_4_led_7doan; 
0F00:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
0F02:  CALL   01D2
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
0F06:  BCF    F95.7
0F08:  BCF    F8C.7
0F0A:  BCF    F95.7
0F0C:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
0F0E:  BCF    F95.1
0F10:  BCF    F8C.1
0F12:  RETURN 0
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
....................       chuc4  = ma7doan[tam/10%10]; 
....................       tram4  = ma7doan[tam/100%10];  
....................       ngan4  = ma7doan[tam/1000%10];        
....................       if (ngan4==0xc0) 
....................       { 
....................          ngan4=0xff; 
....................          if (tram4==0xc0) 
....................          { 
....................             tram4=0xff; 
....................             if (chuc4==0xc0)   chuc4=0xff; 
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
0200:  MOVFF  25,4A8
0204:  RCALL  01A4
....................     xuat_1byte(glcddata); 
0206:  MOVFF  24,4A8
020A:  RCALL  01A4
....................     xuat_1byte(lcdcontrol);        
020C:  MOVFF  23,4A8
0210:  RCALL  01A4
....................     xuat_1byte(lcddata);       
0212:  MOVFF  22,4A8
0216:  RCALL  01A4
....................        
....................     mo_glcd_lcd; 
0218:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
021A:  RCALL  01D2
....................     output_high(rck_lcd20x4);      
021C:  BCF    F95.3
021E:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
0220:  BCF    F95.3
0222:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0224:  BCF    F95.1
0226:  BCF    F8C.1
0228:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
022A:  MOVLB  4
022C:  MOVFF  49D,23
0230:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
0232:  MOVFF  49E,22
0236:  COMF   22,F
....................     xuat_glcd_lcd(); 
0238:  MOVLB  0
023A:  RCALL  0200
023C:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
02EE:  MOVLB  4
02F0:  MOVFF  49E,25
02F4:  COMF   25,F
....................     glcddata    = ~glcd_ins_hthi;      
02F6:  MOVFF  49F,24
02FA:  COMF   24,F
....................     xuat_glcd_lcd(); 
02FC:  MOVLB  0
02FE:  RCALL  0200
0300:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0C8E:  MOVLB  4
0C90:  MOVFF  498,49A
0C94:  COMF   x9A,F
0C96:  MOVFF  49A,4A8
0C9A:  MOVLB  0
0C9C:  CALL   01A4
0CA0:  MOVLB  4
0CA2:  MOVFF  499,49A
0CA6:  COMF   x9A,F
0CA8:  MOVFF  49A,4A8
0CAC:  MOVLB  0
0CAE:  CALL   01A4
....................        
....................       mo_8_led_quet; 
0CB2:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0CB4:  RCALL  0C1C
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0CB6:  BCF    F95.5
0CB8:  BSF    F8C.5
0CBA:  BCF    F95.5
0CBC:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0CBE:  BCF    F95.0
0CC0:  BCF    F8C.0
0CC2:  GOTO   0CD0 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0CC6:  MOVLB  4
0CC8:  SETF   x98
0CCA:  SETF   x99
0CCC:  MOVLB  0
0CCE:  BRA    0C8E
0CD0:  GOTO   0D00 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0C4A:  CLRF   03
0C4C:  MOVLB  4
0C4E:  MOVF   x99,W
0C50:  MOVLB  0
0C52:  CALL   00D0
0C56:  MOVWF  01
0C58:  MOVLB  4
0C5A:  MOVWF  x9B
0C5C:  COMF   x9B,F
0C5E:  MOVFF  49B,4A8
0C62:  MOVLB  0
0C64:  CALL   01A4
0C68:  MOVLB  4
0C6A:  MOVFF  49A,49B
0C6E:  COMF   x9B,F
0C70:  MOVFF  49B,4A8
0C74:  MOVLB  0
0C76:  CALL   01A4
....................       mo_8_led_quet; 
0C7A:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0C7C:  RCALL  0C1C
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0C7E:  BCF    F95.5
0C80:  BSF    F8C.5
0C82:  BCF    F95.5
0C84:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0C86:  BCF    F95.0
0C88:  BCF    F8C.0
0C8A:  GOTO   0CF4 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0CD4:  CLRF   2E
0CD6:  MOVF   2E,W
0CD8:  SUBLW  07
0CDA:  BNC   0D04
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0CDC:  CLRF   03
0CDE:  MOVF   2E,W
0CE0:  ADDLW  26
0CE2:  MOVWF  FE9
0CE4:  MOVLW  00
0CE6:  ADDWFC 03,W
0CE8:  MOVWF  FEA
0CEA:  MOVFF  FEF,49A
0CEE:  MOVFF  2E,499
0CF2:  BRA    0C4A
....................             delay_us(100); 
0CF4:  MOVLW  A6
0CF6:  MOVWF  00
0CF8:  DECFSZ 00,F
0CFA:  BRA    0CF8
0CFC:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
0CFE:  BRA    0CC6
0D00:  INCF   2E,F
0D02:  BRA    0CD6
....................             } 
0D04:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
0E20:  MOVFF  1C,492
0E24:  MOVFF  1D,493
....................       xuat_1byte(rbdc2);       
0E28:  MOVFF  493,4A8
0E2C:  CALL   01A4
....................       xuat_1byte(rbdc1); 
0E30:  MOVFF  492,4A8
0E34:  CALL   01A4
....................       mo_relay_buzzer_dc; 
0E38:  BCF    1A.2
....................       mo_ic_74573_b_thong_dl(); 
0E3A:  RCALL  0C1C
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
0E3C:  BCF    F95.3
0E3E:  BSF    F8C.3
0E40:  BCF    F95.3
0E42:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
0E44:  BCF    F95.0
0E46:  BCF    F8C.0
0E48:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
*
0E52:  BSF    1D.2
....................       xuat_buzzer_relay();          
0E54:  RCALL  0E20
0E56:  GOTO   0E92 (RETURN)
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
*
0E4A:  BCF    1D.2
....................       xuat_buzzer_relay();          
0E4C:  RCALL  0E20
0E4E:  GOTO   0E74 (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
112E:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
1130:  CLRF   34
1132:  CLRF   33
1134:  CLRF   32
1136:  CLRF   31
1138:  CLRF   38
113A:  CLRF   37
113C:  CLRF   36
113E:  MOVLW  01
1140:  MOVWF  35
1142:  MOVLW  80
1144:  MOVWF  3C
1146:  CLRF   3B
1148:  CLRF   3A
114A:  CLRF   39
114C:  CLRF   40
114E:  CLRF   3F
1150:  CLRF   3E
1152:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
1154:  MOVWF  44
1156:  CLRF   43
1158:  CLRF   46
115A:  MOVLW  01
115C:  MOVWF  45
115E:  CLRF   48
1160:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
1162:  MOVLW  80
1164:  MOVWF  4C
1166:  CLRF   4B
1168:  CLRF   4E
116A:  MOVLW  01
116C:  MOVWF  4D
116E:  CLRF   50
1170:  CLRF   4F
....................       zt=zp=0; 
1172:  CLRF   4A
1174:  CLRF   49
1176:  MOVFF  4A,42
117A:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
117E:  MOVLW  20
1180:  MOVWF  54
1182:  CLRF   55
1184:  MOVLW  10
1186:  MOVWF  57
1188:  CLRF   58
....................       dem_led=0; 
118A:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
118C:  CLRF   5C
118E:  CLRF   5B
1190:  CLRF   5A
1192:  MOVLW  01
1194:  MOVWF  59
1196:  CLRF   x60
1198:  CLRF   5F
119A:  CLRF   5E
119C:  MOVWF  5D
119E:  SETF   x64
11A0:  SETF   x63
11A2:  SETF   x62
11A4:  MOVLW  FE
11A6:  MOVWF  x61
11A8:  MOVLW  01
11AA:  MOVWF  x71
11AC:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
11AE:  MOVLW  80
11B0:  MOVWF  x68
11B2:  CLRF   x67
11B4:  CLRF   x66
11B6:  CLRF   x65
11B8:  MOVWF  x6C
11BA:  CLRF   x6B
11BC:  CLRF   x6A
11BE:  CLRF   x69
11C0:  MOVLW  7F
11C2:  MOVWF  x70
11C4:  SETF   x6F
11C6:  SETF   x6E
11C8:  SETF   x6D
....................      tgdlay = 0; 
11CA:  CLRF   52
11CC:  CLRF   51
11CE:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
11EA:  MOVLB  4
11EC:  CLRF   x97
11EE:  MOVF   x96,W
11F0:  SUBWF  x97,W
11F2:  BC    11FE
....................       hien_thi_8led_7doan_quet_all(); 
11F4:  MOVLB  0
11F6:  RCALL  0CD4
11F8:  MOVLB  4
11FA:  INCF   x97,F
11FC:  BRA    11EE
....................       dem_led++; 
11FE:  INCF   53,F
1200:  MOVLB  0
1202:  GOTO   1220 (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
11D0:  MOVLB  4
11D2:  MOVF   x96,F
11D4:  BZ    11E2
11D6:  MOVFF  496,497
11DA:  MOVLB  0
11DC:  CALL   026A
11E0:  MOVLB  4
....................       dem_led++; 
11E2:  INCF   53,F
11E4:  MOVLB  0
11E6:  GOTO   1220 (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
1206:  MOVLB  4
1208:  MOVF   x95,F
120A:  BNZ   1218
120C:  MOVFF  494,496
1210:  MOVLB  0
1212:  BRA    11D0
1214:  MOVLB  0
1216:  BRA    1220
....................    else              tang_dem_led_delay_1(dl); 
1218:  MOVFF  494,496
121C:  MOVLB  0
121E:  BRA    11EA
1220:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
1112:  COMF   31,F
1114:  COMF   32,F
1116:  COMF   33,F
1118:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
111A:  MOVFF  34,497
111E:  MOVFF  33,496
1122:  MOVFF  32,495
1126:  MOVFF  31,494
112A:  RCALL  10EE
112C:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
1222:  DECFSZ 51,W
1224:  BRA    123E
1226:  MOVF   52,F
1228:  BNZ   123E
122A:  MOVFF  34,497
122E:  MOVFF  33,496
1232:  MOVFF  32,495
1236:  MOVFF  31,494
123A:  RCALL  10EE
123C:  BRA    1274
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
123E:  MOVF   51,W
1240:  SUBLW  32
1242:  BNZ   124C
1244:  MOVF   52,F
1246:  BNZ   124C
1248:  RCALL  1112
124A:  BRA    1274
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
124C:  MOVF   51,W
124E:  SUBLW  64
1250:  BNZ   125A
1252:  MOVF   52,F
1254:  BNZ   125A
1256:  RCALL  1112
1258:  BRA    1274
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
125A:  MOVF   51,W
125C:  SUBLW  96
125E:  BNZ   1268
1260:  MOVF   52,F
1262:  BNZ   1268
1264:  RCALL  1112
1266:  BRA    1274
....................       else if (tgdlay==200)   
1268:  MOVF   51,W
126A:  SUBLW  C8
126C:  BNZ   1274
126E:  MOVF   52,F
1270:  BNZ   1274
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
1272:  RCALL  112E
....................       } 
....................       tgdlay++; 
1274:  INCF   51,F
1276:  BTFSC  FD8.2
1278:  INCF   52,F
....................       delay_chon(dl,chondelay); 
127A:  MOVFF  492,494
127E:  MOVFF  493,495
1282:  RCALL  1206
1284:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
1286:  MOVF   53,W
1288:  SUBLW  0F
128A:  BNC   12D4
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
128C:  MOVFF  4A,49D
1290:  MOVFF  49,49C
1294:  MOVFF  42,49F
1298:  MOVFF  41,49E
129C:  RCALL  10CA
....................       zp= (zp<<1)+1;  
129E:  BCF    FD8.0
12A0:  RLCF   49,W
12A2:  MOVLB  4
12A4:  MOVWF  x94
12A6:  RLCF   4A,W
12A8:  MOVWF  x95
12AA:  MOVLW  01
12AC:  ADDWF  x94,W
12AE:  MOVWF  49
12B0:  MOVLW  00
12B2:  ADDWFC x95,W
12B4:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
12B6:  BCF    FD8.0
12B8:  RRCF   42,W
12BA:  MOVWF  x95
12BC:  RRCF   41,W
12BE:  MOVWF  41
12C0:  MOVLW  80
12C2:  ADDWF  x95,W
12C4:  MOVWF  42
....................       delay_chon(dl,chondelay); 
12C6:  MOVFF  492,494
12CA:  MOVFF  493,495
12CE:  MOVLB  0
12D0:  RCALL  1206
....................    } 
12D2:  BRA    1306
....................    else  if (dem_led<32) 
12D4:  MOVF   53,W
12D6:  SUBLW  1F
12D8:  BNC   1304
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
12DA:  MOVFF  4A,49D
12DE:  MOVFF  49,49C
12E2:  MOVFF  42,49F
12E6:  MOVFF  41,49E
12EA:  RCALL  10CA
....................       zp= (zp<<1);  
12EC:  BCF    FD8.0
12EE:  RLCF   49,F
12F0:  RLCF   4A,F
....................       zt= (zt>>1); 
12F2:  BCF    FD8.0
12F4:  RRCF   42,F
12F6:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
12F8:  MOVFF  492,494
12FC:  MOVFF  493,495
1300:  RCALL  1206
....................    } 
1302:  BRA    1306
....................    else reset_toan_bo_bien(); 
1304:  RCALL  112E
1306:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
140E:  MOVF   53,W
1410:  SUBLW  0F
1412:  BNC   1446
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
1414:  MOVFF  4A,49D
1418:  MOVFF  49,49C
141C:  MOVFF  4A,49F
1420:  MOVFF  49,49E
1424:  RCALL  10CA
....................       zp= (zp>>1)+0x8000; 
1426:  BCF    FD8.0
1428:  RRCF   4A,W
142A:  MOVLB  4
142C:  MOVWF  x95
142E:  RRCF   49,W
1430:  MOVWF  49
1432:  MOVLW  80
1434:  ADDWF  x95,W
1436:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
1438:  MOVFF  492,494
143C:  MOVFF  493,495
1440:  MOVLB  0
1442:  RCALL  1206
....................    } 
1444:  BRA    1472
....................    else  if (dem_led<32) 
1446:  MOVF   53,W
1448:  SUBLW  1F
144A:  BNC   1470
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
144C:  MOVFF  4A,49D
1450:  MOVFF  49,49C
1454:  MOVFF  4A,49F
1458:  MOVFF  49,49E
145C:  RCALL  10CA
....................       zp= (zp>>1); 
145E:  BCF    FD8.0
1460:  RRCF   4A,F
1462:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
1464:  MOVFF  492,494
1468:  MOVFF  493,495
146C:  RCALL  1206
....................     } 
146E:  BRA    1472
....................    else reset_toan_bo_bien(); 
1470:  RCALL  112E
1472:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
138A:  MOVF   53,W
138C:  SUBLW  1F
138E:  BNC   13DC
....................    {   
....................       xuat_32led_don_1dw(y); 
1390:  MOVFF  34,497
1394:  MOVFF  33,496
1398:  MOVFF  32,495
139C:  MOVFF  31,494
13A0:  RCALL  10EE
....................       y= (y<<1)+1; 
13A2:  BCF    FD8.0
13A4:  RLCF   31,W
13A6:  MOVLB  4
13A8:  MOVWF  x95
13AA:  RLCF   32,W
13AC:  MOVWF  x96
13AE:  RLCF   33,W
13B0:  MOVWF  x97
13B2:  RLCF   34,W
13B4:  MOVWF  x98
13B6:  MOVLW  01
13B8:  ADDWF  x95,W
13BA:  MOVWF  31
13BC:  MOVLW  00
13BE:  ADDWFC x96,W
13C0:  MOVWF  32
13C2:  MOVLW  00
13C4:  ADDWFC x97,W
13C6:  MOVWF  33
13C8:  MOVLW  00
13CA:  ADDWFC x98,W
13CC:  MOVWF  34
....................       delay_chon(dl,chondelay); 
13CE:  MOVFF  492,494
13D2:  MOVFF  493,495
13D6:  MOVLB  0
13D8:  RCALL  1206
....................    } 
13DA:  BRA    140C
....................    else  if (dem_led<64) 
13DC:  MOVF   53,W
13DE:  SUBLW  3F
13E0:  BNC   140A
....................    {   
....................       xuat_32led_don_1dw(y);    
13E2:  MOVFF  34,497
13E6:  MOVFF  33,496
13EA:  MOVFF  32,495
13EE:  MOVFF  31,494
13F2:  RCALL  10EE
....................       y= (y<<1);  
13F4:  BCF    FD8.0
13F6:  RLCF   31,F
13F8:  RLCF   32,F
13FA:  RLCF   33,F
13FC:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
13FE:  MOVFF  492,494
1402:  MOVFF  493,495
1406:  RCALL  1206
....................    }  
1408:  BRA    140C
....................    else reset_toan_bo_bien(); 
140A:  RCALL  112E
140C:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
1474:  MOVF   53,W
1476:  SUBLW  1F
1478:  BNC   14BC
....................       {   
....................          xuat_32led_don_1dw(y); 
147A:  MOVFF  34,497
147E:  MOVFF  33,496
1482:  MOVFF  32,495
1486:  MOVFF  31,494
148A:  RCALL  10EE
....................          y= (y>>1)+0x80000000;  
148C:  BCF    FD8.0
148E:  RRCF   34,W
1490:  MOVLB  4
1492:  MOVWF  x98
1494:  RRCF   33,W
1496:  MOVWF  x97
1498:  RRCF   32,W
149A:  MOVWF  x96
149C:  RRCF   31,W
149E:  MOVWF  31
14A0:  MOVFF  496,32
14A4:  MOVFF  497,33
14A8:  MOVLW  80
14AA:  ADDWF  x98,W
14AC:  MOVWF  34
....................          delay_chon(dl,chondelay);       
14AE:  MOVFF  492,494
14B2:  MOVFF  493,495
14B6:  MOVLB  0
14B8:  RCALL  1206
....................       } 
14BA:  BRA    14EC
....................       else 
....................       if (dem_led<64) 
14BC:  MOVF   53,W
14BE:  SUBLW  3F
14C0:  BNC   14EA
....................       {   
....................          xuat_32led_don_1dw(y);  
14C2:  MOVFF  34,497
14C6:  MOVFF  33,496
14CA:  MOVFF  32,495
14CE:  MOVFF  31,494
14D2:  RCALL  10EE
....................          y= (y>>1); 
14D4:  BCF    FD8.0
14D6:  RRCF   34,F
14D8:  RRCF   33,F
14DA:  RRCF   32,F
14DC:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
14DE:  MOVFF  492,494
14E2:  MOVFF  493,495
14E6:  RCALL  1206
....................       }  
14E8:  BRA    14EC
....................       else reset_toan_bo_bien(); 
14EA:  RCALL  112E
14EC:  GOTO   2858 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
1308:  BTFSC  54.7
130A:  BRA    1386
130C:  MOVF   54,W
130E:  SUBLW  00
1310:  BC    1386
....................    { 
....................       if(j32<i32) 
1312:  MOVF   55,W
1314:  XORLW  80
1316:  MOVWF  00
1318:  MOVF   54,W
131A:  XORLW  80
131C:  SUBWF  00,W
131E:  BC    1360
....................       { 
....................          y = y_codinh|yp_chay; 
1320:  MOVF   3D,W
1322:  IORWF  35,W
1324:  MOVWF  31
1326:  MOVF   3E,W
1328:  IORWF  36,W
132A:  MOVWF  32
132C:  MOVF   3F,W
132E:  IORWF  37,W
1330:  MOVWF  33
1332:  MOVF   40,W
1334:  IORWF  38,W
1336:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
1338:  MOVFF  34,497
133C:  MOVFF  33,496
1340:  MOVFF  32,495
1344:  MOVFF  31,494
1348:  RCALL  10EE
....................          delay_chon(dl,chondelay);        
134A:  MOVFF  492,494
134E:  MOVFF  493,495
1352:  RCALL  1206
....................          yp_chay = yp_chay <<1; 
1354:  BCF    FD8.0
1356:  RLCF   35,F
1358:  RLCF   36,F
135A:  RLCF   37,F
135C:  RLCF   38,F
....................          j32++; 
135E:  INCF   55,F
....................       } 
....................       if (j32==i32)  
1360:  MOVF   54,W
1362:  SUBWF  55,W
1364:  BNZ   1384
....................       { 
....................          i32--; 
1366:  DECF   54,F
....................          j32=0;          
1368:  CLRF   55
....................          y_codinh=y; 
136A:  MOVFF  34,40
136E:  MOVFF  33,3F
1372:  MOVFF  32,3E
1376:  MOVFF  31,3D
....................          yp_chay = 1; 
137A:  CLRF   38
137C:  CLRF   37
137E:  CLRF   36
1380:  MOVLW  01
1382:  MOVWF  35
....................       } 
....................    } 
1384:  BRA    1388
....................    else reset_toan_bo_bien(); 
1386:  RCALL  112E
1388:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
023E:  BSF    x73.0
0240:  MOVFF  73,49D
0244:  MOVFF  49C,49E
0248:  RCALL  022A
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
024A:  BCF    x73.0
024C:  MOVFF  73,49D
0250:  MOVFF  49C,49E
0254:  RCALL  022A
0256:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0258:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
025A:  MOVFF  492,49C
025E:  RCALL  023E
....................       delay_us(20); 
0260:  MOVLW  21
0262:  MOVWF  00
0264:  DECFSZ 00,F
0266:  BRA    0264
0268:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
09AE:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
09B0:  MOVFF  49B,49C
09B4:  RCALL  023E
....................       delay_us(20); 
09B6:  MOVLW  21
09B8:  MOVWF  00
09BA:  DECFSZ 00,F
09BC:  BRA    09BA
09BE:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
0292:  BCF    x73.0
....................          lcd_rw = 0;  
0294:  BCF    x73.1
....................          lcd_rs = 1;  
0296:  BSF    x73.2
....................          lcd_p =0; 
0298:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
029A:  MOVLW  38
029C:  MOVLB  4
029E:  MOVWF  x92
02A0:  MOVLB  0
02A2:  RCALL  0258
....................          delay_us(40); 
02A4:  MOVLW  42
02A6:  MOVWF  00
02A8:  DECFSZ 00,F
02AA:  BRA    02A8
02AC:  NOP   
....................          lcd_command(lcd_display_control);    
02AE:  MOVLW  0C
02B0:  MOVLB  4
02B2:  MOVWF  x92
02B4:  MOVLB  0
02B6:  RCALL  0258
....................          delay_us(40); 
02B8:  MOVLW  42
02BA:  MOVWF  00
02BC:  DECFSZ 00,F
02BE:  BRA    02BC
02C0:  NOP   
....................          lcd_command(lcd_clear_display);       
02C2:  MOVLW  01
02C4:  MOVLB  4
02C6:  MOVWF  x92
02C8:  MOVLB  0
02CA:  RCALL  0258
....................          delay_ms(2); 
02CC:  MOVLW  02
02CE:  MOVLB  4
02D0:  MOVWF  x97
02D2:  MOVLB  0
02D4:  RCALL  026A
....................          lcd_command(lcd_entry_mode);        
02D6:  MOVLW  06
02D8:  MOVLB  4
02DA:  MOVWF  x92
02DC:  MOVLB  0
02DE:  RCALL  0258
....................          delay_us(40);                 
02E0:  MOVLW  42
02E2:  MOVWF  00
02E4:  DECFSZ 00,F
02E6:  BRA    02E4
02E8:  NOP   
02EA:  GOTO   2624 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0302:  BSF    x74.2
0304:  MOVFF  74,49E
0308:  MOVFF  49D,49F
030C:  RCALL  02EE
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
030E:  BCF    x74.2
0310:  MOVFF  74,49E
0314:  MOVFF  49D,49F
0318:  RCALL  02EE
031A:  RETURN 0
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
031C:  BCF    x74.4
....................       glcd_xuat_8bit(glcd_data2);       
031E:  MOVFF  49A,49D
0322:  RCALL  0302
0324:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
*
08C6:  BSF    x74.4
....................       glcd_xuat_8bit(glcd_data3);      
08C8:  MOVFF  49C,49D
08CC:  RCALL  0302
08CE:  RETURN 0
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
*
0326:  BSF    x74.0
....................          glcd_cs2 = 1; 
0328:  BSF    x74.1
....................          glcd_e  = 0; 
032A:  BCF    x74.2
....................          glcd_rw = 0;           
032C:  BCF    x74.3
....................          glcd_p =0;          
032E:  BCF    x74.5
....................          glcd_command(glcd_function_set_mode);          
0330:  MOVFF  493,49A
0334:  RCALL  031C
....................          delay_us(10); 
0336:  MOVLW  10
0338:  MOVWF  00
033A:  DECFSZ 00,F
033C:  BRA    033A
033E:  NOP   
....................          glcd_command(glcd_cursor_display);        
0340:  MOVLW  0C
0342:  MOVLB  4
0344:  MOVWF  x9A
0346:  MOVLB  0
0348:  RCALL  031C
....................          delay_us(10);     
034A:  MOVLW  10
034C:  MOVWF  00
034E:  DECFSZ 00,F
0350:  BRA    034E
0352:  NOP   
....................          glcd_command(glcd_clear_display);       
0354:  MOVLW  01
0356:  MOVLB  4
0358:  MOVWF  x9A
035A:  MOVLB  0
035C:  RCALL  031C
....................          delay_ms(2); 
035E:  MOVLW  02
0360:  MOVLB  4
0362:  MOVWF  x97
0364:  MOVLB  0
0366:  RCALL  026A
....................          glcd_command(glcd_entry_mode);       
0368:  MOVLW  06
036A:  MOVLB  4
036C:  MOVWF  x9A
036E:  MOVLB  0
0370:  RCALL  031C
....................          delay_us(10);                           
0372:  MOVLW  10
0374:  MOVWF  00
0376:  DECFSZ 00,F
0378:  BRA    0376
037A:  NOP   
037C:  RETURN 0
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
*
03A0:  MOVLB  4
03A2:  MOVF   x92,F
03A4:  BZ    03AC
03A6:  SETF   x94
03A8:  SETF   x93
03AA:  BRA    03B0
03AC:  CLRF   x94
03AE:  CLRF   x93
....................   for (doc=0; doc < glcd_doc; doc++)  
03B0:  MOVLB  0
03B2:  CLRF   x75
03B4:  MOVF   x75,W
03B6:  SUBLW  1F
03B8:  BNC   041A
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
03BA:  CLRF   x76
03BC:  MOVF   x76,W
03BE:  SUBLW  0F
03C0:  BNC   0416
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
03C2:  MOVLB  4
03C4:  CLRF   xB3
03C6:  MOVFF  75,4B2
03CA:  CLRF   xB5
03CC:  MOVLW  20
03CE:  MOVWF  xB4
03D0:  MOVLB  0
03D2:  RCALL  037E
03D4:  MOVF   01,W
03D6:  ADDLW  01
03D8:  MOVLB  4
03DA:  MOVWF  x95
03DC:  MOVLW  00
03DE:  ADDWFC 02,W
03E0:  MOVWF  x96
03E2:  CLRF   03
03E4:  MOVLB  0
03E6:  MOVFF  76,02
03EA:  BCF    FD8.0
03EC:  RLCF   02,F
03EE:  RLCF   03,F
03F0:  MOVF   02,W
03F2:  MOVLB  4
03F4:  ADDWF  x95,F
03F6:  MOVF   03,W
03F8:  ADDWFC x96,F
03FA:  MOVLW  77
03FC:  ADDWF  x95,W
03FE:  MOVWF  FE9
0400:  MOVLW  00
0402:  ADDWFC x96,W
0404:  MOVWF  FEA
0406:  MOVFF  494,FEC
040A:  MOVF   FED,F
040C:  MOVFF  493,FEF
0410:  MOVLB  0
0412:  INCF   x76,F
0414:  BRA    03BC
....................     }  
0416:  INCF   x75,F
0418:  BRA    03B4
....................   }  
....................   gdram_vdk.refresh = true;  
041A:  BSF    x77.0
041C:  GOTO   263A (RETURN)
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
0420:  MOVLB  4
0422:  MOVF   xAF,W
0424:  SUBLW  1F
0426:  BC    0430
0428:  MOVLW  80
042A:  ADDWF  xAE,F
042C:  MOVLW  20
042E:  SUBWF  xAF,F
....................   doc = y;  
0430:  MOVFF  4AF,75
....................   ngang = x/16;  
0434:  SWAPF  xAE,W
0436:  MOVLB  0
0438:  MOVWF  x76
043A:  MOVLW  0F
043C:  ANDWF  x76,F
....................   b = 15 - (x % 16);  
043E:  MOVLB  4
0440:  MOVF   xAE,W
0442:  ANDLW  0F
0444:  XORLW  FF
0446:  ADDLW  10
0448:  MOVWF  xB1
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
044A:  DECFSZ xB0,W
044C:  BRA    04B8
044E:  CLRF   xB3
0450:  MOVFF  75,4B2
0454:  CLRF   xB5
0456:  MOVLW  20
0458:  MOVWF  xB4
045A:  MOVLB  0
045C:  RCALL  037E
045E:  MOVF   01,W
0460:  ADDLW  01
0462:  MOVLB  4
0464:  MOVWF  xB2
0466:  MOVLW  00
0468:  ADDWFC 02,W
046A:  MOVWF  xB3
046C:  CLRF   03
046E:  MOVLB  0
0470:  MOVFF  76,02
0474:  BCF    FD8.0
0476:  RLCF   02,F
0478:  RLCF   03,F
047A:  MOVF   02,W
047C:  MOVLB  4
047E:  ADDWF  xB2,F
0480:  MOVF   03,W
0482:  ADDWFC xB3,F
0484:  MOVLW  77
0486:  ADDWF  xB2,W
0488:  MOVWF  01
048A:  MOVLW  00
048C:  ADDWFC xB3,W
048E:  MOVWF  03
0490:  MOVFF  01,FE9
0494:  MOVWF  FEA
0496:  CLRF   03
0498:  MOVLW  01
049A:  MOVWF  02
049C:  MOVF   xB1,W
049E:  MOVWF  00
04A0:  BZ    04AC
04A2:  BCF    FD8.0
04A4:  RLCF   02,F
04A6:  RLCF   03,F
04A8:  DECFSZ 00,F
04AA:  BRA    04A2
04AC:  MOVF   02,W
04AE:  IORWF  FEF,F
04B0:  MOVF   03,W
04B2:  IORWF  FEC,W
04B4:  MOVWF  FEF
04B6:  BRA    052A
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
04B8:  CLRF   xB3
04BA:  MOVFF  75,4B2
04BE:  CLRF   xB5
04C0:  MOVLW  20
04C2:  MOVWF  xB4
04C4:  MOVLB  0
04C6:  RCALL  037E
04C8:  MOVF   01,W
04CA:  ADDLW  01
04CC:  MOVLB  4
04CE:  MOVWF  xB2
04D0:  MOVLW  00
04D2:  ADDWFC 02,W
04D4:  MOVWF  xB3
04D6:  CLRF   03
04D8:  MOVLB  0
04DA:  MOVFF  76,02
04DE:  BCF    FD8.0
04E0:  RLCF   02,F
04E2:  RLCF   03,F
04E4:  MOVF   02,W
04E6:  MOVLB  4
04E8:  ADDWF  xB2,F
04EA:  MOVF   03,W
04EC:  ADDWFC xB3,F
04EE:  MOVLW  77
04F0:  ADDWF  xB2,W
04F2:  MOVWF  01
04F4:  MOVLW  00
04F6:  ADDWFC xB3,W
04F8:  MOVWF  03
04FA:  MOVFF  01,FE9
04FE:  MOVWF  FEA
0500:  CLRF   03
0502:  MOVLW  01
0504:  MOVWF  02
0506:  MOVF   xB1,W
0508:  MOVWF  00
050A:  BZ    0516
050C:  BCF    FD8.0
050E:  RLCF   02,F
0510:  RLCF   03,F
0512:  DECFSZ 00,F
0514:  BRA    050C
0516:  MOVF   02,W
0518:  XORLW  FF
051A:  MOVWF  00
051C:  MOVLW  FF
051E:  XORWF  03,F
0520:  MOVF   00,W
0522:  ANDWF  FEF,F
0524:  MOVF   03,W
0526:  ANDWF  FEC,W
0528:  MOVWF  FEF
....................   gdram_vdk.refresh = true;  
052A:  MOVLB  0
052C:  BSF    x77.0
052E:  RETURN 0
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
*
08D0:  BTFSS  x77.0
08D2:  BRA    09AA
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
08D4:  CLRF   x75
08D6:  MOVF   x75,W
08D8:  SUBLW  1F
08DA:  BNC   09A8
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
08DC:  MOVF   x75,W
08DE:  IORLW  80
08E0:  MOVLB  4
08E2:  MOVWF  x92
08E4:  MOVWF  x9A
08E6:  MOVLB  0
08E8:  RCALL  031C
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
08EA:  MOVLW  80
08EC:  MOVLB  4
08EE:  MOVWF  x9A
08F0:  MOVLB  0
08F2:  RCALL  031C
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
08F4:  CLRF   x76
08F6:  MOVF   x76,W
08F8:  SUBLW  0F
08FA:  BNC   09A4
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
08FC:  MOVLB  4
08FE:  CLRF   xB3
0900:  MOVFF  75,4B2
0904:  CLRF   xB5
0906:  MOVLW  20
0908:  MOVWF  xB4
090A:  MOVLB  0
090C:  RCALL  037E
090E:  MOVF   01,W
0910:  ADDLW  01
0912:  MOVLB  4
0914:  MOVWF  x92
0916:  MOVLW  00
0918:  ADDWFC 02,W
091A:  MOVWF  x93
091C:  CLRF   03
091E:  MOVLB  0
0920:  MOVFF  76,02
0924:  BCF    FD8.0
0926:  RLCF   02,F
0928:  RLCF   03,F
092A:  MOVF   02,W
092C:  MOVLB  4
092E:  ADDWF  x92,F
0930:  MOVF   03,W
0932:  ADDWFC x93,F
0934:  MOVLW  01
0936:  ADDWF  x92,W
0938:  MOVWF  01
093A:  MOVLW  00
093C:  ADDWFC x93,W
093E:  MOVWF  03
0940:  MOVF   01,W
0942:  ADDLW  77
0944:  MOVWF  FE9
0946:  MOVLW  00
0948:  ADDWFC 03,W
094A:  MOVWF  FEA
094C:  MOVFF  FEF,49C
0950:  MOVLB  0
0952:  RCALL  08C6
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
0954:  MOVLB  4
0956:  CLRF   xB3
0958:  MOVFF  75,4B2
095C:  CLRF   xB5
095E:  MOVLW  20
0960:  MOVWF  xB4
0962:  MOVLB  0
0964:  RCALL  037E
0966:  MOVF   01,W
0968:  ADDLW  01
096A:  MOVLB  4
096C:  MOVWF  x92
096E:  MOVLW  00
0970:  ADDWFC 02,W
0972:  MOVWF  x93
0974:  CLRF   03
0976:  MOVLB  0
0978:  MOVFF  76,02
097C:  BCF    FD8.0
097E:  RLCF   02,F
0980:  RLCF   03,F
0982:  MOVF   02,W
0984:  MOVLB  4
0986:  ADDWF  x92,F
0988:  MOVF   03,W
098A:  ADDWFC x93,F
098C:  MOVLW  77
098E:  ADDWF  x92,W
0990:  MOVWF  FE9
0992:  MOVLW  00
0994:  ADDWFC x93,W
0996:  MOVWF  FEA
0998:  MOVFF  FEF,49C
099C:  MOVLB  0
099E:  RCALL  08C6
09A0:  INCF   x76,F
09A2:  BRA    08F6
....................       }  
09A4:  INCF   x75,F
09A6:  BRA    08D6
....................     }  
....................     gdram_vdk.refresh = false;  
09A8:  BCF    x77.0
....................   }  
09AA:  GOTO   2658 (RETURN)
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
*
1D0C:  BTFSS  x77.0
1D0E:  BRA    1E72
....................   {  
....................       if((x/16)!=(x + rong)/16) 
1D10:  MOVLB  4
1D12:  SWAPF  x93,W
1D14:  MOVWF  x99
1D16:  MOVLW  0F
1D18:  ANDWF  x99,F
1D1A:  MOVF   x95,W
1D1C:  ADDWF  x93,W
1D1E:  MOVWF  00
1D20:  SWAPF  00,F
1D22:  MOVLW  0F
1D24:  ANDWF  00,F
1D26:  MOVF   00,W
1D28:  SUBWF  x99,W
1D2A:  BZ    1D40
....................             rong=((rong+15)/16)+1; 
1D2C:  MOVLW  0F
1D2E:  ADDWF  x95,W
1D30:  MOVWF  00
1D32:  SWAPF  00,F
1D34:  MOVLW  0F
1D36:  ANDWF  00,F
1D38:  MOVF   00,W
1D3A:  ADDLW  01
1D3C:  MOVWF  x95
1D3E:  BRA    1D4E
....................       else rong=((rong+15)/16);  
1D40:  MOVLW  0F
1D42:  ADDWF  x95,W
1D44:  MOVWF  00
1D46:  SWAPF  00,W
1D48:  MOVWF  x95
1D4A:  MOVLW  0F
1D4C:  ANDWF  x95,F
....................        
....................       x = x/16; 
1D4E:  SWAPF  x93,F
1D50:  MOVLW  0F
1D52:  ANDWF  x93,F
....................       for (doc = y; doc <(y+cao); doc++)  
1D54:  MOVFF  494,75
1D58:  MOVF   x96,W
1D5A:  ADDWF  x94,W
1D5C:  MOVLB  0
1D5E:  SUBWF  x75,W
1D60:  BTFSC  FD8.0
1D62:  BRA    1E70
....................       {  
....................          if(doc>31) 
1D64:  MOVF   x75,W
1D66:  SUBLW  1F
1D68:  BC    1D80
....................             {   
....................                hesox = 8+x; 
1D6A:  MOVLW  08
1D6C:  MOVLB  4
1D6E:  ADDWF  x93,W
1D70:  MOVWF  x97
....................                hesoy = doc-32; 
1D72:  MOVLW  20
1D74:  MOVLB  0
1D76:  SUBWF  x75,W
1D78:  MOVLB  4
1D7A:  MOVWF  x98
....................                } 
1D7C:  BRA    1D8A
1D7E:  MOVLB  0
....................          else {hesox = x; hesoy = doc;} 
1D80:  MOVFF  493,497
1D84:  MOVFF  75,498
1D88:  MOVLB  4
....................          glcd_command( 0x80 |hesoy);    
1D8A:  MOVF   x98,W
1D8C:  IORLW  80
1D8E:  MOVWF  x99
1D90:  MOVWF  x9A
1D92:  MOVLB  0
1D94:  CALL   031C
....................          glcd_command( 0x80 |hesox);   
1D98:  MOVLB  4
1D9A:  MOVF   x97,W
1D9C:  IORLW  80
1D9E:  MOVWF  x99
1DA0:  MOVWF  x9A
1DA2:  MOVLB  0
1DA4:  CALL   031C
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
1DA8:  MOVFF  497,76
1DAC:  MOVLB  4
1DAE:  MOVF   x95,W
1DB0:  ADDWF  x97,W
1DB2:  MOVLB  0
1DB4:  SUBWF  x76,W
1DB6:  BC    1E68
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
1DB8:  MOVLB  4
1DBA:  CLRF   xB3
1DBC:  MOVFF  498,4B2
1DC0:  CLRF   xB5
1DC2:  MOVLW  20
1DC4:  MOVWF  xB4
1DC6:  MOVLB  0
1DC8:  CALL   037E
1DCC:  MOVF   01,W
1DCE:  ADDLW  01
1DD0:  MOVLB  4
1DD2:  MOVWF  x99
1DD4:  MOVLW  00
1DD6:  ADDWFC 02,W
1DD8:  MOVWF  x9A
1DDA:  CLRF   03
1DDC:  MOVLB  0
1DDE:  MOVFF  76,02
1DE2:  BCF    FD8.0
1DE4:  RLCF   02,F
1DE6:  RLCF   03,F
1DE8:  MOVF   02,W
1DEA:  MOVLB  4
1DEC:  ADDWF  x99,F
1DEE:  MOVF   03,W
1DF0:  ADDWFC x9A,F
1DF2:  MOVLW  01
1DF4:  ADDWF  x99,W
1DF6:  MOVWF  01
1DF8:  MOVLW  00
1DFA:  ADDWFC x9A,W
1DFC:  MOVWF  03
1DFE:  MOVF   01,W
1E00:  ADDLW  77
1E02:  MOVWF  FE9
1E04:  MOVLW  00
1E06:  ADDWFC 03,W
1E08:  MOVWF  FEA
1E0A:  MOVFF  FEF,49C
1E0E:  MOVLB  0
1E10:  CALL   08C6
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
1E14:  MOVLB  4
1E16:  CLRF   xB3
1E18:  MOVFF  498,4B2
1E1C:  CLRF   xB5
1E1E:  MOVLW  20
1E20:  MOVWF  xB4
1E22:  MOVLB  0
1E24:  CALL   037E
1E28:  MOVF   01,W
1E2A:  ADDLW  01
1E2C:  MOVLB  4
1E2E:  MOVWF  x99
1E30:  MOVLW  00
1E32:  ADDWFC 02,W
1E34:  MOVWF  x9A
1E36:  CLRF   03
1E38:  MOVLB  0
1E3A:  MOVFF  76,02
1E3E:  BCF    FD8.0
1E40:  RLCF   02,F
1E42:  RLCF   03,F
1E44:  MOVF   02,W
1E46:  MOVLB  4
1E48:  ADDWF  x99,F
1E4A:  MOVF   03,W
1E4C:  ADDWFC x9A,F
1E4E:  MOVLW  77
1E50:  ADDWF  x99,W
1E52:  MOVWF  FE9
1E54:  MOVLW  00
1E56:  ADDWFC x9A,W
1E58:  MOVWF  FEA
1E5A:  MOVFF  FEF,49C
1E5E:  MOVLB  0
1E60:  CALL   08C6
1E64:  INCF   x76,F
1E66:  BRA    1DAC
....................          }  
1E68:  INCF   x75,F
1E6A:  MOVLB  4
1E6C:  BRA    1D58
1E6E:  MOVLB  0
....................        }  
....................     gdram_vdk.refresh = false;  
1E70:  BCF    x77.0
....................   }       
1E72:  GOTO   21DC (RETURN)
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
194C:  MOVLB  4
194E:  CLRF   xAE
1950:  CLRF   xAD
1952:  CLRF   xAC
1954:  MOVLW  7F
1956:  MOVWF  xAB
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
1958:  MOVLW  7E
195A:  MOVWF  xB5
195C:  MOVLW  80
195E:  MOVWF  xB6
1960:  CLRF   xB7
1962:  CLRF   xB8
1964:  MOVLW  7A
1966:  MOVWF  xB9
1968:  MOVLW  2A
196A:  MOVWF  xBA
196C:  MOVLW  AA
196E:  MOVWF  xBB
1970:  MOVLW  A3
1972:  MOVWF  xBC
1974:  MOVLW  75
1976:  MOVWF  xBD
1978:  MOVLW  B6
197A:  MOVWF  xBE
197C:  MOVLW  09
197E:  MOVWF  xBF
1980:  MOVLW  B4
1982:  MOVWF  xC0
1984:  MOVLW  6F
1986:  MOVWF  xC1
1988:  MOVLW  4F
198A:  MOVWF  xC2
198C:  MOVLW  B6
198E:  MOVWF  xC3
1990:  MOVLW  AA
1992:  MOVWF  xC4
1994:  MOVLW  69
1996:  MOVWF  xC5
1998:  MOVLW  8B
199A:  MOVWF  xC6
199C:  MOVLW  F6
199E:  MOVWF  xC7
19A0:  MOVLW  E8
19A2:  MOVWF  xC8
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
19A4:  MOVFF  4A2,4CC
19A8:  MOVFF  4A1,4CB
19AC:  MOVFF  4A0,4CA
19B0:  MOVFF  49F,4C9
19B4:  CLRF   xD0
19B6:  CLRF   xCF
19B8:  CLRF   xCE
19BA:  CLRF   xCD
19BC:  MOVLB  0
19BE:  BRA    18D0
19C0:  BNC   19CC
19C2:  MOVLB  4
19C4:  MOVF   xA0,W
19C6:  XORLW  80
19C8:  MOVWF  xA0
19CA:  MOVLB  0
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
19CC:  MOVFF  4A2,4D0
19D0:  MOVFF  4A1,4CF
19D4:  MOVFF  4A0,4CE
19D8:  MOVFF  49F,4CD
19DC:  MOVLW  83
19DE:  MOVLB  4
19E0:  MOVWF  xD4
19E2:  MOVLW  F9
19E4:  MOVWF  xD3
19E6:  MOVLW  22
19E8:  MOVWF  xD2
19EA:  MOVLW  7E
19EC:  MOVWF  xD1
19EE:  MOVLB  0
19F0:  RCALL  1562
19F2:  MOVFF  03,4CC
19F6:  MOVFF  02,4CB
19FA:  MOVFF  01,4CA
19FE:  MOVFF  00,4C9
1A02:  RCALL  14F0
1A04:  MOVFF  01,4AF
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
1A08:  MOVFF  4A2,4D0
1A0C:  MOVFF  4A1,4CF
1A10:  MOVFF  4A0,4CE
1A14:  MOVFF  49F,4CD
1A18:  MOVLW  83
1A1A:  MOVLB  4
1A1C:  MOVWF  xD4
1A1E:  MOVLW  F9
1A20:  MOVWF  xD3
1A22:  MOVLW  22
1A24:  MOVWF  xD2
1A26:  MOVLW  7E
1A28:  MOVWF  xD1
1A2A:  MOVLB  0
1A2C:  RCALL  1562
1A2E:  MOVFF  03,4CC
1A32:  MOVFF  02,4CB
1A36:  MOVFF  01,4CA
1A3A:  MOVFF  00,4C9
1A3E:  MOVLB  4
1A40:  CLRF   xCE
1A42:  MOVFF  4AF,4CD
1A46:  MOVLB  0
1A48:  RCALL  152C
1A4A:  BSF    FD8.1
1A4C:  MOVFF  4CC,4D0
1A50:  MOVFF  4CB,4CF
1A54:  MOVFF  4CA,4CE
1A58:  MOVFF  4C9,4CD
1A5C:  MOVFF  03,4D4
1A60:  MOVFF  02,4D3
1A64:  MOVFF  01,4D2
1A68:  MOVFF  00,4D1
1A6C:  RCALL  1658
1A6E:  MOVFF  03,4B4
1A72:  MOVFF  02,4B3
1A76:  MOVFF  01,4B2
1A7A:  MOVFF  00,4B1
....................    quad = quad % 4;                    // quadrant (0 to 3) 
1A7E:  MOVLW  03
1A80:  MOVLB  4
1A82:  ANDWF  xAF,F
....................  
....................    if (quad == 0 || quad == 2) 
1A84:  MOVF   xAF,F
1A86:  BZ    1A8E
1A88:  MOVF   xAF,W
1A8A:  SUBLW  02
1A8C:  BNZ   1AC6
....................       t = frac * PI_DIV_BY_TWO; 
1A8E:  MOVFF  4B4,4D0
1A92:  MOVFF  4B3,4CF
1A96:  MOVFF  4B2,4CE
1A9A:  MOVFF  4B1,4CD
1A9E:  MOVLW  DB
1AA0:  MOVWF  xD4
1AA2:  MOVLW  0F
1AA4:  MOVWF  xD3
1AA6:  MOVLW  49
1AA8:  MOVWF  xD2
1AAA:  MOVLW  7F
1AAC:  MOVWF  xD1
1AAE:  MOVLB  0
1AB0:  RCALL  1562
1AB2:  MOVFF  03,4AA
1AB6:  MOVFF  02,4A9
1ABA:  MOVFF  01,4A8
1ABE:  MOVFF  00,4A7
1AC2:  BRA    1B9A
1AC4:  MOVLB  4
....................    else if (quad == 1) 
1AC6:  DECFSZ xAF,W
1AC8:  BRA    1B34
....................       t = (1-frac) * PI_DIV_BY_TWO; 
1ACA:  BSF    FD8.1
1ACC:  CLRF   xD0
1ACE:  CLRF   xCF
1AD0:  CLRF   xCE
1AD2:  MOVLW  7F
1AD4:  MOVWF  xCD
1AD6:  MOVFF  4B4,4D4
1ADA:  MOVFF  4B3,4D3
1ADE:  MOVFF  4B2,4D2
1AE2:  MOVFF  4B1,4D1
1AE6:  MOVLB  0
1AE8:  RCALL  1658
1AEA:  MOVFF  03,4CC
1AEE:  MOVFF  02,4CB
1AF2:  MOVFF  01,4CA
1AF6:  MOVFF  00,4C9
1AFA:  MOVFF  03,4D0
1AFE:  MOVFF  02,4CF
1B02:  MOVFF  01,4CE
1B06:  MOVFF  00,4CD
1B0A:  MOVLW  DB
1B0C:  MOVLB  4
1B0E:  MOVWF  xD4
1B10:  MOVLW  0F
1B12:  MOVWF  xD3
1B14:  MOVLW  49
1B16:  MOVWF  xD2
1B18:  MOVLW  7F
1B1A:  MOVWF  xD1
1B1C:  MOVLB  0
1B1E:  RCALL  1562
1B20:  MOVFF  03,4AA
1B24:  MOVFF  02,4A9
1B28:  MOVFF  01,4A8
1B2C:  MOVFF  00,4A7
1B30:  BRA    1B9A
1B32:  MOVLB  4
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
1B34:  BSF    FD8.1
1B36:  MOVFF  4B4,4D0
1B3A:  MOVFF  4B3,4CF
1B3E:  MOVFF  4B2,4CE
1B42:  MOVFF  4B1,4CD
1B46:  CLRF   xD4
1B48:  CLRF   xD3
1B4A:  CLRF   xD2
1B4C:  MOVLW  7F
1B4E:  MOVWF  xD1
1B50:  MOVLB  0
1B52:  RCALL  1658
1B54:  MOVFF  03,4CC
1B58:  MOVFF  02,4CB
1B5C:  MOVFF  01,4CA
1B60:  MOVFF  00,4C9
1B64:  MOVFF  03,4D0
1B68:  MOVFF  02,4CF
1B6C:  MOVFF  01,4CE
1B70:  MOVFF  00,4CD
1B74:  MOVLW  DB
1B76:  MOVLB  4
1B78:  MOVWF  xD4
1B7A:  MOVLW  0F
1B7C:  MOVWF  xD3
1B7E:  MOVLW  49
1B80:  MOVWF  xD2
1B82:  MOVLW  7F
1B84:  MOVWF  xD1
1B86:  MOVLB  0
1B88:  RCALL  1562
1B8A:  MOVFF  03,4AA
1B8E:  MOVFF  02,4A9
1B92:  MOVFF  01,4A8
1B96:  MOVFF  00,4A7
....................  
....................    y = 1.0; 
1B9A:  MOVLB  4
1B9C:  CLRF   xA6
1B9E:  CLRF   xA5
1BA0:  CLRF   xA4
1BA2:  MOVLW  7F
1BA4:  MOVWF  xA3
....................    t = t * t; 
1BA6:  MOVFF  4AA,4D0
1BAA:  MOVFF  4A9,4CF
1BAE:  MOVFF  4A8,4CE
1BB2:  MOVFF  4A7,4CD
1BB6:  MOVFF  4AA,4D4
1BBA:  MOVFF  4A9,4D3
1BBE:  MOVFF  4A8,4D2
1BC2:  MOVFF  4A7,4D1
1BC6:  MOVLB  0
1BC8:  RCALL  1562
1BCA:  MOVFF  03,4AA
1BCE:  MOVFF  02,4A9
1BD2:  MOVFF  01,4A8
1BD6:  MOVFF  00,4A7
....................    for (i = 0; i <= 4; i++) 
1BDA:  MOVLB  4
1BDC:  CLRF   xB0
1BDE:  MOVF   xB0,W
1BE0:  SUBLW  04
1BE2:  BNC   1C9A
....................    { 
....................       t2 = t2 * t; 
1BE4:  MOVFF  4AE,4D0
1BE8:  MOVFF  4AD,4CF
1BEC:  MOVFF  4AC,4CE
1BF0:  MOVFF  4AB,4CD
1BF4:  MOVFF  4AA,4D4
1BF8:  MOVFF  4A9,4D3
1BFC:  MOVFF  4A8,4D2
1C00:  MOVFF  4A7,4D1
1C04:  MOVLB  0
1C06:  RCALL  1562
1C08:  MOVFF  03,4AE
1C0C:  MOVFF  02,4AD
1C10:  MOVFF  01,4AC
1C14:  MOVFF  00,4AB
....................       y = y + p[i] * t2; 
1C18:  MOVLB  4
1C1A:  MOVF   xB0,W
1C1C:  MULLW  04
1C1E:  MOVF   FF3,W
1C20:  CLRF   03
1C22:  ADDLW  B5
1C24:  MOVWF  FE9
1C26:  MOVLW  04
1C28:  ADDWFC 03,W
1C2A:  MOVWF  FEA
1C2C:  MOVFF  FEF,4CD
1C30:  MOVFF  FEC,4CE
1C34:  MOVFF  FEC,4CF
1C38:  MOVFF  FEC,4D0
1C3C:  MOVFF  4AE,4D4
1C40:  MOVFF  4AD,4D3
1C44:  MOVFF  4AC,4D2
1C48:  MOVFF  4AB,4D1
1C4C:  MOVLB  0
1C4E:  RCALL  1562
1C50:  MOVFF  FEA,4CA
1C54:  MOVFF  FE9,4C9
1C58:  BCF    FD8.1
1C5A:  MOVFF  4A6,4D0
1C5E:  MOVFF  4A5,4CF
1C62:  MOVFF  4A4,4CE
1C66:  MOVFF  4A3,4CD
1C6A:  MOVFF  03,4D4
1C6E:  MOVFF  02,4D3
1C72:  MOVFF  01,4D2
1C76:  MOVFF  00,4D1
1C7A:  RCALL  1658
1C7C:  MOVFF  4CA,FEA
1C80:  MOVFF  4C9,FE9
1C84:  MOVFF  03,4A6
1C88:  MOVFF  02,4A5
1C8C:  MOVFF  01,4A4
1C90:  MOVFF  00,4A3
1C94:  MOVLB  4
1C96:  INCF   xB0,F
1C98:  BRA    1BDE
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
1C9A:  MOVF   xAF,W
1C9C:  SUBLW  02
1C9E:  BZ    1CA4
1CA0:  DECFSZ xAF,W
1CA2:  BRA    1CAA
....................       y = -y;  // correct sign 
1CA4:  MOVF   xA4,W
1CA6:  XORLW  80
1CA8:  MOVWF  xA4
....................  
....................    return (y); 
1CAA:  MOVFF  4A3,00
1CAE:  MOVFF  4A4,01
1CB2:  MOVFF  4A5,02
1CB6:  MOVFF  4A6,03
1CBA:  MOVLB  0
1CBC:  RETURN 0
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
1CBE:  BSF    FD8.1
1CC0:  MOVFF  49A,4D0
1CC4:  MOVFF  499,4CF
1CC8:  MOVFF  498,4CE
1CCC:  MOVFF  497,4CD
1CD0:  MOVLW  DB
1CD2:  MOVLB  4
1CD4:  MOVWF  xD4
1CD6:  MOVLW  0F
1CD8:  MOVWF  xD3
1CDA:  MOVLW  49
1CDC:  MOVWF  xD2
1CDE:  MOVLW  7F
1CE0:  MOVWF  xD1
1CE2:  MOVLB  0
1CE4:  RCALL  1658
1CE6:  MOVFF  03,49E
1CEA:  MOVFF  02,49D
1CEE:  MOVFF  01,49C
1CF2:  MOVFF  00,49B
1CF6:  MOVFF  03,4A2
1CFA:  MOVFF  02,4A1
1CFE:  MOVFF  01,4A0
1D02:  MOVFF  00,49F
1D06:  RCALL  194C
1D08:  GOTO   2114 (RETURN)
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0530:  MOVLW  01
0532:  MOVLB  4
0534:  MOVWF  xA7
0536:  MOVWF  xA8
0538:  CLRF   xAD
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
053A:  MOVF   x9E,W
053C:  SUBWF  xA0,W
053E:  MOVWF  xAE
0540:  MOVF   xAE,W
0542:  BTFSS  xAE.7
0544:  BRA    054C
0546:  MOVLW  00
0548:  BSF    FD8.0
054A:  SUBFWB xAE,W
054C:  CLRF   03
054E:  MOVWF  xA5
0550:  MOVFF  03,4A6
....................    dy = abs((signed int8)(y2 - y1)); 
0554:  MOVF   x9F,W
0556:  SUBWF  xA1,W
0558:  MOVWF  xAE
055A:  MOVF   xAE,W
055C:  BTFSS  xAE.7
055E:  BRA    0566
0560:  MOVLW  00
0562:  BSF    FD8.0
0564:  SUBFWB xAE,W
0566:  CLRF   03
0568:  MOVWF  xA3
056A:  MOVFF  03,4A4
....................    #endif 
....................  
....................    if(x1 > x2) 
056E:  MOVF   x9E,W
0570:  SUBWF  xA0,W
0572:  BC    0576
....................       addx = -1; 
0574:  SETF   xA7
....................    if(y1 > y2) 
0576:  MOVF   x9F,W
0578:  SUBWF  xA1,W
057A:  BC    057E
....................       addy = -1; 
057C:  SETF   xA8
....................  
....................    if(dx >= dy) 
057E:  MOVF   xA4,W
0580:  SUBWF  xA6,W
0582:  BNC   05F8
0584:  BNZ   058C
0586:  MOVF   xA3,W
0588:  SUBWF  xA5,W
058A:  BNC   05F8
....................    { 
....................       dy *= 2; 
058C:  BCF    FD8.0
058E:  RLCF   xA3,F
0590:  RLCF   xA4,F
....................       P = dy - dx; 
0592:  MOVF   xA5,W
0594:  SUBWF  xA3,W
0596:  MOVWF  00
0598:  MOVF   xA6,W
059A:  SUBWFB xA4,W
059C:  MOVFF  00,4A9
05A0:  MOVWF  xAA
....................       diff = P - dx; 
05A2:  MOVF   xA5,W
05A4:  SUBWF  xA9,W
05A6:  MOVWF  xAB
05A8:  MOVF   xA6,W
05AA:  SUBWFB xAA,W
05AC:  MOVWF  xAC
....................  
....................       for(; i<=dx; ++i) 
05AE:  MOVF   xA6,F
05B0:  BNZ   05B8
05B2:  MOVF   xAD,W
05B4:  SUBWF  xA5,W
05B6:  BNC   05F6
....................       { 
....................          glcd_pixel(x1, y1, color); 
05B8:  MOVFF  49E,4AE
05BC:  MOVFF  49F,4AF
05C0:  MOVFF  4A2,4B0
05C4:  MOVLB  0
05C6:  RCALL  0420
....................  
....................          if(P < 0) 
05C8:  MOVLB  4
05CA:  BTFSS  xAA.7
05CC:  BRA    05DE
....................          { 
....................             P  += dy; 
05CE:  MOVF   xA3,W
05D0:  ADDWF  xA9,F
05D2:  MOVF   xA4,W
05D4:  ADDWFC xAA,F
....................             x1 += addx; 
05D6:  MOVF   xA7,W
05D8:  ADDWF  x9E,W
05DA:  MOVWF  x9E
....................          } 
05DC:  BRA    05F2
....................          else 
....................          { 
....................             P  += diff; 
05DE:  MOVF   xAB,W
05E0:  ADDWF  xA9,F
05E2:  MOVF   xAC,W
05E4:  ADDWFC xAA,F
....................             x1 += addx; 
05E6:  MOVF   xA7,W
05E8:  ADDWF  x9E,W
05EA:  MOVWF  x9E
....................             y1 += addy; 
05EC:  MOVF   xA8,W
05EE:  ADDWF  x9F,W
05F0:  MOVWF  x9F
....................          } 
05F2:  INCF   xAD,F
05F4:  BRA    05AE
....................       } 
....................    } 
05F6:  BRA    0662
....................    else 
....................    { 
....................       dx *= 2; 
05F8:  BCF    FD8.0
05FA:  RLCF   xA5,F
05FC:  RLCF   xA6,F
....................       P = dx - dy; 
05FE:  MOVF   xA3,W
0600:  SUBWF  xA5,W
0602:  MOVWF  00
0604:  MOVF   xA4,W
0606:  SUBWFB xA6,W
0608:  MOVFF  00,4A9
060C:  MOVWF  xAA
....................       diff = P - dy; 
060E:  MOVF   xA3,W
0610:  SUBWF  xA9,W
0612:  MOVWF  xAB
0614:  MOVF   xA4,W
0616:  SUBWFB xAA,W
0618:  MOVWF  xAC
....................  
....................       for(; i<=dy; ++i) 
061A:  MOVF   xA4,F
061C:  BNZ   0624
061E:  MOVF   xAD,W
0620:  SUBWF  xA3,W
0622:  BNC   0662
....................       { 
....................          glcd_pixel(x1, y1, color); 
0624:  MOVFF  49E,4AE
0628:  MOVFF  49F,4AF
062C:  MOVFF  4A2,4B0
0630:  MOVLB  0
0632:  RCALL  0420
....................  
....................          if(P < 0) 
0634:  MOVLB  4
0636:  BTFSS  xAA.7
0638:  BRA    064A
....................          { 
....................             P  += dx; 
063A:  MOVF   xA5,W
063C:  ADDWF  xA9,F
063E:  MOVF   xA6,W
0640:  ADDWFC xAA,F
....................             y1 += addy; 
0642:  MOVF   xA8,W
0644:  ADDWF  x9F,W
0646:  MOVWF  x9F
....................          } 
0648:  BRA    065E
....................          else 
....................          { 
....................             P  += diff; 
064A:  MOVF   xAB,W
064C:  ADDWF  xA9,F
064E:  MOVF   xAC,W
0650:  ADDWFC xAA,F
....................             x1 += addx; 
0652:  MOVF   xA7,W
0654:  ADDWF  x9E,W
0656:  MOVWF  x9E
....................             y1 += addy; 
0658:  MOVF   xA8,W
065A:  ADDWF  x9F,W
065C:  MOVWF  x9F
....................          } 
065E:  INCF   xAD,F
0660:  BRA    061A
....................       } 
....................    } 
0662:  MOVLB  0
0664:  RETURN 0
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
06B4:  MOVLB  4
06B6:  CLRF   x97
....................    b = radius; 
06B8:  MOVFF  494,498
....................    P = 1 - radius; 
06BC:  MOVLW  01
06BE:  BSF    FD8.0
06C0:  SUBFWB x94,W
06C2:  MOVWF  x99
....................  
....................    do 
....................    { 
....................       if(fill) 
06C4:  MOVF   x95,F
06C6:  BZ    078A
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
06C8:  MOVF   x97,W
06CA:  SUBWF  x92,W
06CC:  MOVWF  x9A
06CE:  MOVF   x98,W
06D0:  ADDWF  x93,W
06D2:  MOVWF  x9B
06D4:  MOVF   x97,W
06D6:  ADDWF  x92,W
06D8:  MOVWF  x9C
06DA:  MOVF   x98,W
06DC:  ADDWF  x93,W
06DE:  MOVWF  x9D
06E0:  MOVFF  49A,49E
06E4:  MOVFF  49B,49F
06E8:  MOVFF  49C,4A0
06EC:  MOVWF  xA1
06EE:  MOVFF  496,4A2
06F2:  MOVLB  0
06F4:  RCALL  0530
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
06F6:  MOVLB  4
06F8:  MOVF   x97,W
06FA:  SUBWF  x92,W
06FC:  MOVWF  x9A
06FE:  MOVF   x98,W
0700:  SUBWF  x93,W
0702:  MOVWF  x9B
0704:  MOVF   x97,W
0706:  ADDWF  x92,W
0708:  MOVWF  x9C
070A:  MOVF   x98,W
070C:  SUBWF  x93,W
070E:  MOVWF  x9D
0710:  MOVFF  49A,49E
0714:  MOVFF  49B,49F
0718:  MOVFF  49C,4A0
071C:  MOVWF  xA1
071E:  MOVFF  496,4A2
0722:  MOVLB  0
0724:  RCALL  0530
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
0726:  MOVLB  4
0728:  MOVF   x98,W
072A:  SUBWF  x92,W
072C:  MOVWF  x9A
072E:  MOVF   x97,W
0730:  ADDWF  x93,W
0732:  MOVWF  x9B
0734:  MOVF   x98,W
0736:  ADDWF  x92,W
0738:  MOVWF  x9C
073A:  MOVF   x97,W
073C:  ADDWF  x93,W
073E:  MOVWF  x9D
0740:  MOVFF  49A,49E
0744:  MOVFF  49B,49F
0748:  MOVFF  49C,4A0
074C:  MOVWF  xA1
074E:  MOVFF  496,4A2
0752:  MOVLB  0
0754:  RCALL  0530
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
0756:  MOVLB  4
0758:  MOVF   x98,W
075A:  SUBWF  x92,W
075C:  MOVWF  x9A
075E:  MOVF   x97,W
0760:  SUBWF  x93,W
0762:  MOVWF  x9B
0764:  MOVF   x98,W
0766:  ADDWF  x92,W
0768:  MOVWF  x9C
076A:  MOVF   x97,W
076C:  SUBWF  x93,W
076E:  MOVWF  x9D
0770:  MOVFF  49A,49E
0774:  MOVFF  49B,49F
0778:  MOVFF  49C,4A0
077C:  MOVWF  xA1
077E:  MOVFF  496,4A2
0782:  MOVLB  0
0784:  RCALL  0530
....................       } 
0786:  BRA    0868
0788:  MOVLB  4
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
078A:  MOVF   x92,W
078C:  ADDWF  x97,W
078E:  MOVWF  x9A
0790:  MOVF   x93,W
0792:  ADDWF  x98,W
0794:  MOVWF  x9B
0796:  MOVFF  49A,4AE
079A:  MOVWF  xAF
079C:  MOVFF  496,4B0
07A0:  MOVLB  0
07A2:  RCALL  0420
....................          glcd_pixel(b+x, a+y, color); 
07A4:  MOVLB  4
07A6:  MOVF   x92,W
07A8:  ADDWF  x98,W
07AA:  MOVWF  x9A
07AC:  MOVF   x93,W
07AE:  ADDWF  x97,W
07B0:  MOVWF  x9B
07B2:  MOVFF  49A,4AE
07B6:  MOVWF  xAF
07B8:  MOVFF  496,4B0
07BC:  MOVLB  0
07BE:  RCALL  0420
....................          glcd_pixel(x-a, b+y, color); 
07C0:  MOVLB  4
07C2:  MOVF   x97,W
07C4:  SUBWF  x92,W
07C6:  MOVWF  x9A
07C8:  MOVF   x93,W
07CA:  ADDWF  x98,W
07CC:  MOVWF  x9B
07CE:  MOVFF  49A,4AE
07D2:  MOVWF  xAF
07D4:  MOVFF  496,4B0
07D8:  MOVLB  0
07DA:  RCALL  0420
....................          glcd_pixel(x-b, a+y, color); 
07DC:  MOVLB  4
07DE:  MOVF   x98,W
07E0:  SUBWF  x92,W
07E2:  MOVWF  x9A
07E4:  MOVF   x93,W
07E6:  ADDWF  x97,W
07E8:  MOVWF  x9B
07EA:  MOVFF  49A,4AE
07EE:  MOVWF  xAF
07F0:  MOVFF  496,4B0
07F4:  MOVLB  0
07F6:  RCALL  0420
....................          glcd_pixel(b+x, y-a, color); 
07F8:  MOVLB  4
07FA:  MOVF   x92,W
07FC:  ADDWF  x98,W
07FE:  MOVWF  x9A
0800:  MOVF   x97,W
0802:  SUBWF  x93,W
0804:  MOVWF  x9B
0806:  MOVFF  49A,4AE
080A:  MOVWF  xAF
080C:  MOVFF  496,4B0
0810:  MOVLB  0
0812:  RCALL  0420
....................          glcd_pixel(a+x, y-b, color); 
0814:  MOVLB  4
0816:  MOVF   x92,W
0818:  ADDWF  x97,W
081A:  MOVWF  x9A
081C:  MOVF   x98,W
081E:  SUBWF  x93,W
0820:  MOVWF  x9B
0822:  MOVFF  49A,4AE
0826:  MOVWF  xAF
0828:  MOVFF  496,4B0
082C:  MOVLB  0
082E:  RCALL  0420
....................          glcd_pixel(x-a, y-b, color); 
0830:  MOVLB  4
0832:  MOVF   x97,W
0834:  SUBWF  x92,W
0836:  MOVWF  x9A
0838:  MOVF   x98,W
083A:  SUBWF  x93,W
083C:  MOVWF  x9B
083E:  MOVFF  49A,4AE
0842:  MOVWF  xAF
0844:  MOVFF  496,4B0
0848:  MOVLB  0
084A:  RCALL  0420
....................          glcd_pixel(x-b, y-a, color); 
084C:  MOVLB  4
084E:  MOVF   x98,W
0850:  SUBWF  x92,W
0852:  MOVWF  x9A
0854:  MOVF   x97,W
0856:  SUBWF  x93,W
0858:  MOVWF  x9B
085A:  MOVFF  49A,4AE
085E:  MOVWF  xAF
0860:  MOVFF  496,4B0
0864:  MOVLB  0
0866:  RCALL  0420
....................       } 
....................  
....................       if(P < 0) 
0868:  MOVLB  4
086A:  BTFSS  x99.7
086C:  BRA    088A
....................          P += 3 + 2 * a++; 
086E:  MOVF   x97,W
0870:  INCF   x97,F
0872:  MOVWF  x9A
0874:  MOVLW  02
0876:  MOVWF  x9B
0878:  MOVFF  49A,49C
087C:  MOVLB  0
087E:  RCALL  0666
0880:  MOVF   01,W
0882:  ADDLW  03
0884:  MOVLB  4
0886:  ADDWF  x99,F
0888:  BRA    08AC
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
088A:  MOVF   x97,W
088C:  INCF   x97,F
088E:  MOVWF  x9A
0890:  MOVF   x98,W
0892:  DECF   x98,F
0894:  SUBWF  x9A,W
0896:  MOVWF  x9A
0898:  MOVLW  02
089A:  MOVWF  x9B
089C:  MOVFF  49A,49C
08A0:  MOVLB  0
08A2:  RCALL  0666
08A4:  MOVF   01,W
08A6:  ADDLW  05
08A8:  MOVLB  4
08AA:  ADDWF  x99,F
....................     } while(a <= b); 
08AC:  MOVF   x97,W
08AE:  XORLW  80
08B0:  MOVWF  00
08B2:  MOVF   x98,W
08B4:  XORLW  80
08B6:  SUBWF  00,W
08B8:  BTFSC  FD8.2
08BA:  BRA    06C4
08BC:  BTFSS  FD8.0
08BE:  BRA    06C4
08C0:  MOVLB  0
08C2:  GOTO   2654 (RETURN)
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio; 
.................... int8 dem = 0; 
.................... int16 lm35a = 0,lm35b = 0; 
.................... int1 ttqn = 0; 
.................... float M,N; 
.................... signed int8 max = 100,D,C; 
.................... int8 maxT = 40; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
0138:  MOVLB  4
013A:  INCF   x79,F
....................    set_timer1(3036); //3036 
013C:  MOVLW  0B
013E:  MOVWF  FCF
0140:  MOVLW  DC
0142:  MOVWF  FCE
0144:  BCF    F9E.0
0146:  MOVLB  0
0148:  GOTO   0060
.................... } 
....................  
.................... void draw(int8 Number) { 
....................    glcd_line(64,32,(int)M,(int)N,0); 
*
1F3E:  MOVFF  485,4CC
1F42:  MOVFF  484,4CB
1F46:  MOVFF  483,4CA
1F4A:  MOVFF  482,4C9
1F4E:  CALL   14F0
1F52:  MOVFF  01,493
1F56:  MOVFF  489,4CC
1F5A:  MOVFF  488,4CB
1F5E:  MOVFF  487,4CA
1F62:  MOVFF  486,4C9
1F66:  CALL   14F0
1F6A:  MOVFF  01,494
1F6E:  MOVLW  40
1F70:  MOVLB  4
1F72:  MOVWF  x9E
1F74:  MOVLW  20
1F76:  MOVWF  x9F
1F78:  MOVFF  493,4A0
1F7C:  MOVFF  01,4A1
1F80:  CLRF   xA2
1F82:  MOVLB  0
1F84:  CALL   0530
....................    M = 64+31*cos(Number*0.104-1.57); 
1F88:  MOVLB  4
1F8A:  CLRF   xCE
1F8C:  MOVFF  492,4CD
1F90:  MOVLB  0
1F92:  CALL   152C
1F96:  MOVFF  03,4D0
1F9A:  MOVFF  02,4CF
1F9E:  MOVFF  01,4CE
1FA2:  MOVFF  00,4CD
1FA6:  MOVLW  F4
1FA8:  MOVLB  4
1FAA:  MOVWF  xD4
1FAC:  MOVLW  FD
1FAE:  MOVWF  xD3
1FB0:  MOVLW  54
1FB2:  MOVWF  xD2
1FB4:  MOVLW  7B
1FB6:  MOVWF  xD1
1FB8:  MOVLB  0
1FBA:  CALL   1562
1FBE:  MOVFF  03,496
1FC2:  MOVFF  02,495
1FC6:  MOVFF  01,494
1FCA:  MOVFF  00,493
1FCE:  BSF    FD8.1
1FD0:  MOVFF  03,4D0
1FD4:  MOVFF  02,4CF
1FD8:  MOVFF  01,4CE
1FDC:  MOVFF  00,4CD
1FE0:  MOVLW  C3
1FE2:  MOVLB  4
1FE4:  MOVWF  xD4
1FE6:  MOVLW  F5
1FE8:  MOVWF  xD3
1FEA:  MOVLW  48
1FEC:  MOVWF  xD2
1FEE:  MOVLW  7F
1FF0:  MOVWF  xD1
1FF2:  MOVLB  0
1FF4:  CALL   1658
1FF8:  MOVFF  03,496
1FFC:  MOVFF  02,495
2000:  MOVFF  01,494
2004:  MOVFF  00,493
2008:  MOVFF  03,4A2
200C:  MOVFF  02,4A1
2010:  MOVFF  01,4A0
2014:  MOVFF  00,49F
2018:  RCALL  194C
201A:  MOVLB  4
201C:  CLRF   xD0
201E:  CLRF   xCF
2020:  MOVLW  78
2022:  MOVWF  xCE
2024:  MOVLW  83
2026:  MOVWF  xCD
2028:  MOVFF  03,4D4
202C:  MOVFF  02,4D3
2030:  MOVFF  01,4D2
2034:  MOVFF  00,4D1
2038:  MOVLB  0
203A:  CALL   1562
203E:  MOVFF  FEA,494
2042:  MOVFF  FE9,493
2046:  BCF    FD8.1
2048:  MOVLB  4
204A:  CLRF   xD0
204C:  CLRF   xCF
204E:  CLRF   xCE
2050:  MOVLW  85
2052:  MOVWF  xCD
2054:  MOVFF  03,4D4
2058:  MOVFF  02,4D3
205C:  MOVFF  01,4D2
2060:  MOVFF  00,4D1
2064:  MOVLB  0
2066:  CALL   1658
206A:  MOVFF  494,FEA
206E:  MOVFF  493,FE9
2072:  MOVFF  03,485
2076:  MOVFF  02,484
207A:  MOVFF  01,483
207E:  MOVFF  00,482
....................    N = 31+31*sin(Number*0.104-1.57);    
2082:  MOVLB  4
2084:  CLRF   xCE
2086:  MOVFF  492,4CD
208A:  MOVLB  0
208C:  CALL   152C
2090:  MOVFF  03,4D0
2094:  MOVFF  02,4CF
2098:  MOVFF  01,4CE
209C:  MOVFF  00,4CD
20A0:  MOVLW  F4
20A2:  MOVLB  4
20A4:  MOVWF  xD4
20A6:  MOVLW  FD
20A8:  MOVWF  xD3
20AA:  MOVLW  54
20AC:  MOVWF  xD2
20AE:  MOVLW  7B
20B0:  MOVWF  xD1
20B2:  MOVLB  0
20B4:  CALL   1562
20B8:  MOVFF  03,496
20BC:  MOVFF  02,495
20C0:  MOVFF  01,494
20C4:  MOVFF  00,493
20C8:  BSF    FD8.1
20CA:  MOVFF  03,4D0
20CE:  MOVFF  02,4CF
20D2:  MOVFF  01,4CE
20D6:  MOVFF  00,4CD
20DA:  MOVLW  C3
20DC:  MOVLB  4
20DE:  MOVWF  xD4
20E0:  MOVLW  F5
20E2:  MOVWF  xD3
20E4:  MOVLW  48
20E6:  MOVWF  xD2
20E8:  MOVLW  7F
20EA:  MOVWF  xD1
20EC:  MOVLB  0
20EE:  CALL   1658
20F2:  MOVFF  03,496
20F6:  MOVFF  02,495
20FA:  MOVFF  01,494
20FE:  MOVFF  00,493
2102:  MOVFF  03,49A
2106:  MOVFF  02,499
210A:  MOVFF  01,498
210E:  MOVFF  00,497
2112:  BRA    1CBE
2114:  MOVLB  4
2116:  CLRF   xD0
2118:  CLRF   xCF
211A:  MOVLW  78
211C:  MOVWF  xCE
211E:  MOVLW  83
2120:  MOVWF  xCD
2122:  MOVFF  03,4D4
2126:  MOVFF  02,4D3
212A:  MOVFF  01,4D2
212E:  MOVFF  00,4D1
2132:  MOVLB  0
2134:  CALL   1562
2138:  MOVFF  FEA,494
213C:  MOVFF  FE9,493
2140:  BCF    FD8.1
2142:  MOVLB  4
2144:  CLRF   xD0
2146:  CLRF   xCF
2148:  MOVLW  78
214A:  MOVWF  xCE
214C:  MOVLW  83
214E:  MOVWF  xCD
2150:  MOVFF  03,4D4
2154:  MOVFF  02,4D3
2158:  MOVFF  01,4D2
215C:  MOVFF  00,4D1
2160:  MOVLB  0
2162:  CALL   1658
2166:  MOVFF  494,FEA
216A:  MOVFF  493,FE9
216E:  MOVFF  03,489
2172:  MOVFF  02,488
2176:  MOVFF  01,487
217A:  MOVFF  00,486
....................    glcd_line(64,32,(int)M,(int)N,1); 
217E:  MOVFF  485,4CC
2182:  MOVFF  484,4CB
2186:  MOVFF  483,4CA
218A:  MOVFF  482,4C9
218E:  CALL   14F0
2192:  MOVFF  01,493
2196:  MOVFF  489,4CC
219A:  MOVFF  488,4CB
219E:  MOVFF  487,4CA
21A2:  MOVFF  486,4C9
21A6:  CALL   14F0
21AA:  MOVFF  01,494
21AE:  MOVLW  40
21B0:  MOVLB  4
21B2:  MOVWF  x9E
21B4:  MOVLW  20
21B6:  MOVWF  x9F
21B8:  MOVFF  493,4A0
21BC:  MOVFF  01,4A1
21C0:  MOVLW  01
21C2:  MOVWF  xA2
21C4:  MOVLB  0
21C6:  CALL   0530
....................    gdram_vdk_to_gdram_glcd_area(32,0,64,64); 
21CA:  MOVLW  20
21CC:  MOVLB  4
21CE:  MOVWF  x93
21D0:  CLRF   x94
21D2:  MOVLW  40
21D4:  MOVWF  x95
21D6:  MOVWF  x96
21D8:  MOVLB  0
21DA:  BRA    1D0C
....................    setup_glcd(glcd_text_mode); 
21DC:  MOVLW  30
21DE:  MOVLB  4
21E0:  MOVWF  x93
21E2:  MOVLB  0
21E4:  CALL   0326
....................    glcd_command(glcd_addr_line1); 
21E8:  MOVLW  80
21EA:  MOVLB  4
21EC:  MOVWF  x9A
21EE:  MOVLB  0
21F0:  CALL   031C
....................    printf(glcd_data,"%d",gio); 
21F4:  MOVFF  47B,493
21F8:  MOVLW  18
21FA:  MOVLB  4
21FC:  MOVWF  x94
21FE:  MOVLB  0
2200:  RCALL  1E76
....................    glcd_command(glcd_addr_line2); 
2202:  MOVLW  90
2204:  MOVLB  4
2206:  MOVWF  x9A
2208:  MOVLB  0
220A:  CALL   031C
....................    printf(glcd_data,"%d",phut); 
220E:  MOVFF  47A,493
2212:  MOVLW  18
2214:  MOVLB  4
2216:  MOVWF  x94
2218:  MOVLB  0
221A:  RCALL  1E76
....................    glcd_command(glcd_addr_line3);    
221C:  MOVLW  88
221E:  MOVLB  4
2220:  MOVWF  x9A
2222:  MOVLB  0
2224:  CALL   031C
....................    printf(glcd_data,"%d",giay); 
2228:  MOVFF  478,493
222C:  MOVLW  18
222E:  MOVLB  4
2230:  MOVWF  x94
2232:  MOVLB  0
2234:  RCALL  1E76
....................    setup_glcd(glcd_graphic_mode);     
2236:  MOVLW  36
2238:  MOVLB  4
223A:  MOVWF  x93
223C:  MOVLB  0
223E:  CALL   0326
2242:  GOTO   2890 (RETURN)
.................... } 
....................  
.................... void BaoChay(){ 
....................    if ((lm35a>maxT) && (lm35b>maxT)){ 
*
0E5A:  MOVLB  4
0E5C:  MOVF   x7E,F
0E5E:  BNZ   0E66
0E60:  MOVF   x7D,W
0E62:  SUBWF  x8D,W
0E64:  BC    0E76
0E66:  MOVF   x80,F
0E68:  BNZ   0E70
0E6A:  MOVF   x7F,W
0E6C:  SUBWF  x8D,W
0E6E:  BC    0E76
....................       triac_2_off(); 
0E70:  MOVLB  0
0E72:  BRA    0E4A
0E74:  MOVLB  4
....................    } 
....................    if ((lm35a<maxT - 5)  && (lm35b<maxT -5)){ 
0E76:  MOVLW  05
0E78:  SUBWF  x8D,W
0E7A:  MOVF   x7E,F
0E7C:  BNZ   0E94
0E7E:  SUBWF  x7D,W
0E80:  BC    0E94
0E82:  MOVLW  05
0E84:  SUBWF  x8D,W
0E86:  MOVF   x80,F
0E88:  BNZ   0E94
0E8A:  SUBWF  x7F,W
0E8C:  BC    0E94
....................       triac_2_on(); 
0E8E:  MOVLB  0
0E90:  BRA    0E52
0E92:  MOVLB  4
....................    } 
0E94:  MOVLB  0
0E96:  GOTO   271E (RETURN)
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
....................    for (int i = 0; i<6;i++){ 
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
....................       lcd_data(lcd_so_x[lcd_so][i]); 
....................    } 
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0B32:  MOVFF  478,492
0B36:  MOVLW  0A
0B38:  MOVLB  4
0B3A:  MOVWF  x93
0B3C:  MOVLB  0
0B3E:  RCALL  09C0
0B40:  CLRF   03
0B42:  MOVF   00,W
0B44:  CALL   00AE
0B48:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0B4A:  MOVFF  478,492
0B4E:  MOVLW  0A
0B50:  MOVLB  4
0B52:  MOVWF  x93
0B54:  MOVLB  0
0B56:  RCALL  09C0
0B58:  CLRF   03
0B5A:  MOVF   01,W
0B5C:  CALL   00AE
0B60:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0B62:  MOVFF  47A,492
0B66:  MOVLW  0A
0B68:  MOVLB  4
0B6A:  MOVWF  x93
0B6C:  MOVLB  0
0B6E:  RCALL  09C0
0B70:  CLRF   03
0B72:  MOVF   00,W
0B74:  CALL   00AE
0B78:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0B7A:  MOVFF  47A,492
0B7E:  MOVLW  0A
0B80:  MOVLB  4
0B82:  MOVWF  x93
0B84:  MOVLB  0
0B86:  RCALL  09C0
0B88:  CLRF   03
0B8A:  MOVF   01,W
0B8C:  CALL   00AE
0B90:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0B92:  MOVFF  47B,492
0B96:  MOVLW  0A
0B98:  MOVLB  4
0B9A:  MOVWF  x93
0B9C:  MOVLB  0
0B9E:  RCALL  09C0
0BA0:  CLRF   03
0BA2:  MOVF   00,W
0BA4:  CALL   00AE
0BA8:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0BAA:  MOVFF  47B,492
0BAE:  MOVLW  0A
0BB0:  MOVLB  4
0BB2:  MOVWF  x93
0BB4:  MOVLB  0
0BB6:  RCALL  09C0
0BB8:  CLRF   03
0BBA:  MOVF   01,W
0BBC:  CALL   00AE
0BC0:  MOVWF  2D
....................    lcd_command(lcd_addr_line1); 
0BC2:  MOVLW  80
0BC4:  MOVLB  4
0BC6:  MOVWF  x92
0BC8:  MOVLB  0
0BCA:  CALL   0258
....................    printf(lcd_data,"NHIET DO LM35B: %ld",lm35a); 
0BCE:  MOVLW  4C
0BD0:  MOVWF  FF6
0BD2:  MOVLW  01
0BD4:  MOVWF  FF7
0BD6:  MOVLW  10
0BD8:  MOVLB  4
0BDA:  MOVWF  x92
0BDC:  MOVLB  0
0BDE:  RCALL  0A0C
0BE0:  MOVLW  10
0BE2:  MOVWF  FE9
0BE4:  MOVFF  47E,493
0BE8:  MOVFF  47D,492
0BEC:  RCALL  0A34
....................    lcd_command(lcd_addr_line2); 
0BEE:  MOVLW  C0
0BF0:  MOVLB  4
0BF2:  MOVWF  x92
0BF4:  MOVLB  0
0BF6:  CALL   0258
....................    printf(lcd_data,"NHIET DO LM35A: %ld",lm35b); 
0BFA:  MOVLW  60
0BFC:  MOVWF  FF6
0BFE:  MOVLW  01
0C00:  MOVWF  FF7
0C02:  MOVLW  10
0C04:  MOVLB  4
0C06:  MOVWF  x92
0C08:  MOVLB  0
0C0A:  RCALL  0A0C
0C0C:  MOVLW  10
0C0E:  MOVWF  FE9
0C10:  MOVFF  480,493
0C14:  MOVFF  47F,492
0C18:  RCALL  0A34
0C1A:  RETURN 0
.................... } 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    D = count/10; 
....................    C = count%10; 
....................    LCD_SO_LON(D,1,0); 
....................    LCD_SO_LON(C,1,3); 
.................... }*/ 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    lcd_command(lcd_addr_line3); 
*
0DF0:  MOVLW  94
0DF2:  MOVLB  4
0DF4:  MOVWF  x92
0DF6:  MOVLB  0
0DF8:  CALL   0258
....................    printf(lcd_data,"DEM SAN PHAM: %d",count); 
0DFC:  MOVLW  74
0DFE:  MOVWF  FF6
0E00:  MOVLW  01
0E02:  MOVWF  FF7
0E04:  MOVLW  0E
0E06:  MOVLB  4
0E08:  MOVWF  x92
0E0A:  MOVLB  0
0E0C:  RCALL  0A0C
0E0E:  MOVFF  48E,492
0E12:  MOVLW  18
0E14:  MOVLB  4
0E16:  MOVWF  x93
0E18:  MOVLB  0
0E1A:  BRA    0D32
0E1C:  GOTO   2700 (RETURN)
.................... } 
....................  
.................... void read_temp(){ 
....................    set_adc_channel(0);  
*
23A4:  MOVLW  00
23A6:  MOVWF  01
23A8:  MOVF   FC2,W
23AA:  ANDLW  C3
23AC:  IORWF  01,W
23AE:  MOVWF  FC2
....................    lm35a = read_adc()/2.046; 
23B0:  BSF    FC2.1
23B2:  BTFSC  FC2.1
23B4:  BRA    23B2
23B6:  MOVFF  FC4,493
23BA:  MOVFF  FC3,492
23BE:  MOVFF  FC4,4CE
23C2:  MOVFF  FC3,4CD
23C6:  MOVLB  0
23C8:  CALL   152C
23CC:  MOVFF  03,497
23D0:  MOVFF  02,496
23D4:  MOVFF  01,495
23D8:  MOVFF  00,494
23DC:  MOVLW  AA
23DE:  MOVLB  4
23E0:  MOVWF  x9B
23E2:  MOVLW  F1
23E4:  MOVWF  x9A
23E6:  MOVLW  02
23E8:  MOVWF  x99
23EA:  MOVLW  80
23EC:  MOVWF  x98
23EE:  MOVLB  0
23F0:  RCALL  2246
23F2:  MOVFF  03,4CC
23F6:  MOVFF  02,4CB
23FA:  MOVFF  01,4CA
23FE:  MOVFF  00,4C9
2402:  CALL   14F0
2406:  MOVFF  02,47E
240A:  MOVFF  01,47D
....................    set_adc_channel(1); 
240E:  MOVLW  04
2410:  MOVWF  01
2412:  MOVF   FC2,W
2414:  ANDLW  C3
2416:  IORWF  01,W
2418:  MOVWF  FC2
....................    lm35b = read_adc()/2.046; 
241A:  BSF    FC2.1
241C:  BTFSC  FC2.1
241E:  BRA    241C
2420:  MOVFF  FC4,493
2424:  MOVFF  FC3,492
2428:  MOVFF  FC4,4CE
242C:  MOVFF  FC3,4CD
2430:  MOVLB  0
2432:  CALL   152C
2436:  MOVFF  03,497
243A:  MOVFF  02,496
243E:  MOVFF  01,495
2442:  MOVFF  00,494
2446:  MOVLW  AA
2448:  MOVLB  4
244A:  MOVWF  x9B
244C:  MOVLW  F1
244E:  MOVWF  x9A
2450:  MOVLW  02
2452:  MOVWF  x99
2454:  MOVLW  80
2456:  MOVWF  x98
2458:  MOVLB  0
245A:  RCALL  2246
245C:  MOVFF  03,4CC
2460:  MOVFF  02,4CB
2464:  MOVFF  01,4CA
2468:  MOVFF  00,4C9
246C:  CALL   14F0
2470:  MOVFF  02,480
2474:  MOVFF  01,47F
....................    xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
2478:  MOVFF  48D,499
247C:  MOVLW  0A
247E:  MOVLB  4
2480:  MOVWF  x9A
2482:  MOVLB  0
2484:  CALL   0D06
2488:  CLRF   03
248A:  MOVF   01,W
248C:  CALL   00AE
2490:  MOVLB  4
2492:  MOVWF  x92
2494:  MOVFF  48D,499
2498:  MOVLW  0A
249A:  MOVWF  x9A
249C:  MOVLB  0
249E:  CALL   0D06
24A2:  CLRF   03
24A4:  MOVF   00,W
24A6:  CALL   00AE
24AA:  MOVLB  4
24AC:  MOVWF  x93
24AE:  MOVFF  47E,498
24B2:  MOVFF  47D,497
24B6:  CLRF   x9A
24B8:  MOVLW  0A
24BA:  MOVWF  x99
24BC:  MOVLB  0
24BE:  CALL   0E9A
24C2:  MOVFF  02,495
24C6:  MOVFF  01,494
24CA:  MOVFF  02,03
24CE:  MOVLB  4
24D0:  MOVF   01,W
24D2:  MOVLB  0
24D4:  CALL   00AE
24D8:  MOVLB  4
24DA:  MOVWF  x96
24DC:  MOVFF  47E,498
24E0:  MOVFF  47D,497
24E4:  CLRF   x9A
24E6:  MOVLW  0A
24E8:  MOVWF  x99
24EA:  MOVLB  0
24EC:  CALL   0E9A
24F0:  MOVFF  00,497
24F4:  MOVLB  4
24F6:  MOVFF  03,498
24FA:  MOVFF  03,03
24FE:  MOVF   00,W
2500:  MOVLB  0
2502:  CALL   00AE
2506:  MOVLB  4
2508:  MOVWF  x99
250A:  MOVFF  492,49A
250E:  MOVFF  493,49B
2512:  MOVFF  496,49C
2516:  MOVWF  x9D
2518:  MOVLB  0
251A:  CALL   0EE0
251E:  GOTO   2892 (RETURN)
.................... } 
....................  
.................... void phim_up() { 
....................    if (!input(up)) { 
*
0F14:  BSF    F93.5
0F16:  BTFSC  F81.5
0F18:  BRA    0FD0
....................       delay_ms(5); 
0F1A:  MOVLW  05
0F1C:  MOVLB  4
0F1E:  MOVWF  x97
0F20:  MOVLB  0
0F22:  CALL   026A
....................       if (!input(up)) 
0F26:  BSF    F93.5
0F28:  BTFSC  F81.5
0F2A:  BRA    0FD0
....................       { 
....................          maxT++; 
0F2C:  MOVLB  4
0F2E:  INCF   x8D,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
0F30:  MOVFF  48D,499
0F34:  MOVLW  0A
0F36:  MOVWF  x9A
0F38:  MOVLB  0
0F3A:  RCALL  0D06
0F3C:  CLRF   03
0F3E:  MOVF   01,W
0F40:  CALL   00AE
0F44:  MOVLB  4
0F46:  MOVWF  x92
0F48:  MOVFF  48D,499
0F4C:  MOVLW  0A
0F4E:  MOVWF  x9A
0F50:  MOVLB  0
0F52:  RCALL  0D06
0F54:  CLRF   03
0F56:  MOVF   00,W
0F58:  CALL   00AE
0F5C:  MOVLB  4
0F5E:  MOVWF  x93
0F60:  MOVFF  47E,498
0F64:  MOVFF  47D,497
0F68:  CLRF   x9A
0F6A:  MOVLW  0A
0F6C:  MOVWF  x99
0F6E:  MOVLB  0
0F70:  RCALL  0E9A
0F72:  MOVFF  02,495
0F76:  MOVFF  01,494
0F7A:  MOVFF  02,03
0F7E:  MOVLB  4
0F80:  MOVF   01,W
0F82:  MOVLB  0
0F84:  CALL   00AE
0F88:  MOVLB  4
0F8A:  MOVWF  x96
0F8C:  MOVFF  47E,498
0F90:  MOVFF  47D,497
0F94:  CLRF   x9A
0F96:  MOVLW  0A
0F98:  MOVWF  x99
0F9A:  MOVLB  0
0F9C:  RCALL  0E9A
0F9E:  MOVFF  00,497
0FA2:  MOVLB  4
0FA4:  MOVFF  03,498
0FA8:  MOVFF  03,03
0FAC:  MOVF   00,W
0FAE:  MOVLB  0
0FB0:  CALL   00AE
0FB4:  MOVLB  4
0FB6:  MOVWF  x99
0FB8:  MOVFF  492,49A
0FBC:  MOVFF  493,49B
0FC0:  MOVFF  496,49C
0FC4:  MOVWF  x9D
0FC6:  MOVLB  0
0FC8:  RCALL  0EE0
....................          while(!input(up)); 
0FCA:  BSF    F93.5
0FCC:  BTFSS  F81.5
0FCE:  BRA    0FCA
....................       } 
....................    } 
0FD0:  GOTO   2722 (RETURN)
.................... } 
.................... void phim_dw() { 
....................    if (!input(dw)) { 
0FD4:  BSF    F93.4
0FD6:  BTFSC  F81.4
0FD8:  BRA    1090
....................       delay_ms(5); 
0FDA:  MOVLW  05
0FDC:  MOVLB  4
0FDE:  MOVWF  x97
0FE0:  MOVLB  0
0FE2:  CALL   026A
....................       if (!input(dw)) 
0FE6:  BSF    F93.4
0FE8:  BTFSC  F81.4
0FEA:  BRA    1090
....................       { 
....................          maxT--; 
0FEC:  MOVLB  4
0FEE:  DECF   x8D,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
0FF0:  MOVFF  48D,499
0FF4:  MOVLW  0A
0FF6:  MOVWF  x9A
0FF8:  MOVLB  0
0FFA:  RCALL  0D06
0FFC:  CLRF   03
0FFE:  MOVF   01,W
1000:  CALL   00AE
1004:  MOVLB  4
1006:  MOVWF  x92
1008:  MOVFF  48D,499
100C:  MOVLW  0A
100E:  MOVWF  x9A
1010:  MOVLB  0
1012:  RCALL  0D06
1014:  CLRF   03
1016:  MOVF   00,W
1018:  CALL   00AE
101C:  MOVLB  4
101E:  MOVWF  x93
1020:  MOVFF  47E,498
1024:  MOVFF  47D,497
1028:  CLRF   x9A
102A:  MOVLW  0A
102C:  MOVWF  x99
102E:  MOVLB  0
1030:  RCALL  0E9A
1032:  MOVFF  02,495
1036:  MOVFF  01,494
103A:  MOVFF  02,03
103E:  MOVLB  4
1040:  MOVF   01,W
1042:  MOVLB  0
1044:  CALL   00AE
1048:  MOVLB  4
104A:  MOVWF  x96
104C:  MOVFF  47E,498
1050:  MOVFF  47D,497
1054:  CLRF   x9A
1056:  MOVLW  0A
1058:  MOVWF  x99
105A:  MOVLB  0
105C:  RCALL  0E9A
105E:  MOVFF  00,497
1062:  MOVLB  4
1064:  MOVFF  03,498
1068:  MOVFF  03,03
106C:  MOVF   00,W
106E:  MOVLB  0
1070:  CALL   00AE
1074:  MOVLB  4
1076:  MOVWF  x99
1078:  MOVFF  492,49A
107C:  MOVFF  493,49B
1080:  MOVFF  496,49C
1084:  MOVWF  x9D
1086:  MOVLB  0
1088:  RCALL  0EE0
....................          while (!input(dw)); 
108A:  BSF    F93.4
108C:  BTFSS  F81.4
108E:  BRA    108A
....................       } 
....................    } 
1090:  GOTO   2726 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
2522:  CLRF   FF8
2524:  BCF    FD0.7
2526:  BSF    07.7
2528:  BSF    F93.1
252A:  BSF    F93.0
252C:  MOVLW  31
252E:  MOVWF  FC8
2530:  MOVLW  28
2532:  MOVWF  FC6
2534:  BSF    FC7.7
2536:  BCF    FC7.6
2538:  CLRF   1B
253A:  CLRF   22
253C:  CLRF   23
253E:  CLRF   24
2540:  CLRF   25
2542:  CLRF   2E
2544:  CLRF   2F
2546:  CLRF   30
2548:  CLRF   34
254A:  CLRF   33
254C:  CLRF   32
254E:  CLRF   31
2550:  CLRF   38
2552:  CLRF   37
2554:  CLRF   36
2556:  MOVLW  01
2558:  MOVWF  35
255A:  MOVLW  80
255C:  MOVWF  3C
255E:  CLRF   3B
2560:  CLRF   3A
2562:  CLRF   39
2564:  CLRF   40
2566:  CLRF   3F
2568:  CLRF   3E
256A:  CLRF   3D
256C:  MOVWF  44
256E:  CLRF   43
2570:  CLRF   46
2572:  MOVLW  01
2574:  MOVWF  45
2576:  CLRF   48
2578:  CLRF   47
257A:  MOVLW  80
257C:  MOVWF  4C
257E:  CLRF   4B
2580:  CLRF   4E
2582:  MOVLW  01
2584:  MOVWF  4D
2586:  CLRF   50
2588:  CLRF   4F
258A:  CLRF   52
258C:  CLRF   51
258E:  CLRF   53
2590:  MOVLW  20
2592:  MOVWF  54
2594:  CLRF   55
2596:  MOVLW  01
2598:  MOVWF  56
259A:  MOVLW  10
259C:  MOVWF  57
259E:  CLRF   58
25A0:  CLRF   5C
25A2:  CLRF   5B
25A4:  CLRF   5A
25A6:  MOVLW  01
25A8:  MOVWF  59
25AA:  CLRF   x60
25AC:  CLRF   5F
25AE:  CLRF   5E
25B0:  MOVWF  5D
25B2:  SETF   x64
25B4:  SETF   x63
25B6:  SETF   x62
25B8:  MOVLW  FE
25BA:  MOVWF  x61
25BC:  MOVLW  80
25BE:  MOVWF  x68
25C0:  CLRF   x67
25C2:  CLRF   x66
25C4:  CLRF   x65
25C6:  MOVWF  x6C
25C8:  CLRF   x6B
25CA:  CLRF   x6A
25CC:  CLRF   x69
25CE:  MOVLW  7F
25D0:  MOVWF  x70
25D2:  SETF   x6F
25D4:  SETF   x6E
25D6:  SETF   x6D
25D8:  MOVLW  01
25DA:  MOVWF  x71
25DC:  MOVWF  x72
25DE:  MOVLB  4
25E0:  CLRF   x7C
25E2:  CLRF   x7E
25E4:  CLRF   x7D
25E6:  CLRF   x80
25E8:  CLRF   x7F
25EA:  BCF    x81.0
25EC:  MOVLW  64
25EE:  MOVWF  x8A
25F0:  MOVLW  28
25F2:  MOVWF  x8D
25F4:  CLRF   x8E
25F6:  CLRF   x8F
25F8:  CLRF   x90
25FA:  MOVF   FC1,W
25FC:  ANDLW  C0
25FE:  IORLW  0F
2600:  MOVWF  FC1
2602:  MOVLW  07
2604:  MOVWF  FB4
2606:  SETF   26
2608:  SETF   27
260A:  SETF   28
260C:  SETF   29
260E:  SETF   2A
2610:  SETF   2B
2612:  SETF   2C
2614:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
2616:  MOVLB  0
2618:  GOTO   0186
....................    set_tris_b(0x3c); 
261C:  MOVLW  3C
261E:  MOVWF  F93
....................    setup_lcd(); 
2620:  GOTO   0292
....................    setup_glcd(glcd_graphic_mode); 
2624:  MOVLW  36
2626:  MOVLB  4
2628:  MOVWF  x93
262A:  MOVLB  0
262C:  CALL   0326
....................  
....................    glcd_mau_nen(0); 
2630:  MOVLB  4
2632:  CLRF   x92
2634:  MOVLB  0
2636:  GOTO   03A0
....................    glcd_circle(64,32,31,0,1); 
263A:  MOVLW  40
263C:  MOVLB  4
263E:  MOVWF  x92
2640:  MOVLW  20
2642:  MOVWF  x93
2644:  MOVLW  1F
2646:  MOVWF  x94
2648:  CLRF   x95
264A:  MOVLW  01
264C:  MOVWF  x96
264E:  MOVLB  0
2650:  GOTO   06B4
....................    gdram_vdk_to_gdram_glcd_all(); 
2654:  GOTO   08D0
....................  
....................  
....................    lcd_command(0x40); 
2658:  MOVLW  40
265A:  MOVLB  4
265C:  MOVWF  x92
265E:  MOVLB  0
2660:  CALL   0258
....................    for (int i = 0; i<64;i++){ 
2664:  MOVLB  4
2666:  CLRF   x91
2668:  MOVF   x91,W
266A:  SUBLW  3F
266C:  BNC   268A
....................       lcd_data(lcd_ma_8doan[i]); 
266E:  CLRF   03
2670:  MOVF   x91,W
2672:  MOVLB  0
2674:  CALL   00E8
2678:  MOVLB  4
267A:  MOVWF  x92
267C:  MOVWF  x9B
267E:  MOVLB  0
2680:  CALL   09AE
2684:  MOVLB  4
2686:  INCF   x91,F
2688:  BRA    2668
....................    } 
....................  
....................  
....................    setup_adc(ADC_CLOCK_DIV_16); 
268A:  MOVF   FC0,W
268C:  ANDLW  C0
268E:  IORLW  05
2690:  MOVWF  FC0
2692:  BSF    FC0.7
2694:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN1|VSS_VDD); 
2696:  MOVF   FC1,W
2698:  ANDLW  C0
269A:  IORLW  0D
269C:  MOVWF  FC1
....................    set_adc_channel(0); 
269E:  MOVLW  00
26A0:  MOVWF  01
26A2:  MOVF   FC2,W
26A4:  ANDLW  C3
26A6:  IORWF  01,W
26A8:  MOVWF  FC2
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
26AA:  MOVLW  A8
26AC:  MOVWF  FD5
....................    set_timer0(0);    
26AE:  CLRF   FD7
26B0:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
26B2:  MOVLW  B5
26B4:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
26B6:  MOVLW  0B
26B8:  MOVWF  FCF
26BA:  MOVLW  DC
26BC:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
26BE:  MOVLW  C0
26C0:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
26C2:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
26C4:  CLRF   x78
....................    bdn = 0; 
26C6:  CLRF   x79
....................    phut = 29; 
26C8:  MOVLW  1D
26CA:  MOVWF  x7A
....................    gio = 15; 
26CC:  MOVLW  0F
26CE:  MOVWF  x7B
....................    giai_ma(); 
26D0:  MOVLB  0
26D2:  CALL   0B32
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
26D6:  MOVLB  4
26D8:  BTFSC  x79.7
26DA:  BRA    26E4
26DC:  MOVF   x79,W
26DE:  SUBLW  09
26E0:  BTFSS  FD8.0
26E2:  BRA    2880
....................          hien_thi_8led_7doan_quet_all();      
26E4:  MOVLB  0
26E6:  CALL   0CD4
....................          count = get_timer0(); 
26EA:  MOVF   FD6,W
26EC:  MOVLB  4
26EE:  MOVWF  x8E
....................          if (count != countT) { 
26F0:  MOVF   x8F,W
26F2:  SUBWF  x8E,W
26F4:  BZ    2718
....................             countT = count;          
26F6:  MOVFF  48E,48F
....................             LCD_DISPLAY_COUNTER(); 
26FA:  MOVLB  0
26FC:  GOTO   0DF0
....................             if (count >= max+1) {set_timer0(1);}    
2700:  MOVLW  01
2702:  MOVLB  4
2704:  ADDWF  x8A,W
2706:  MOVWF  00
2708:  BTFSC  FE8.7
270A:  BRA    2712
270C:  MOVF   00,W
270E:  SUBWF  x8E,W
2710:  BNC   2718
2712:  CLRF   FD7
2714:  MOVLW  01
2716:  MOVWF  FD6
....................          } 
....................          BaoChay(); 
2718:  MOVLB  0
271A:  GOTO   0E5A
....................          phim_up(); 
271E:  GOTO   0F14
....................          phim_dw(); 
2722:  GOTO   0FD4
....................          if(ttct_td==1) sang_tat_32led(5,1); 
2726:  DECFSZ 56,W
2728:  BRA    273A
272A:  MOVLW  05
272C:  MOVLB  4
272E:  MOVWF  x92
2730:  MOVLW  01
2732:  MOVWF  x93
2734:  MOVLB  0
2736:  CALL   1222
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
273A:  MOVF   56,W
273C:  SUBLW  02
273E:  BNZ   2750
2740:  MOVLW  05
2742:  MOVLB  4
2744:  MOVWF  x92
2746:  MOVLW  01
2748:  MOVWF  x93
274A:  MOVLB  0
274C:  CALL   1286
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
2750:  MOVF   56,W
2752:  SUBLW  03
2754:  BNZ   2766
2756:  MOVLW  05
2758:  MOVLB  4
275A:  MOVWF  x92
275C:  MOVLW  01
275E:  MOVWF  x93
2760:  MOVLB  0
2762:  CALL   1308
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
2766:  MOVF   56,W
2768:  SUBLW  04
276A:  BNZ   277C
276C:  MOVLW  05
276E:  MOVLB  4
2770:  MOVWF  x92
2772:  MOVLW  01
2774:  MOVWF  x93
2776:  MOVLB  0
2778:  CALL   138A
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
277C:  MOVF   56,W
277E:  SUBLW  05
2780:  BNZ   2792
2782:  MOVLW  05
2784:  MOVLB  4
2786:  MOVWF  x92
2788:  MOVLW  01
278A:  MOVWF  x93
278C:  MOVLB  0
278E:  CALL   140E
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
2792:  MOVF   56,W
2794:  SUBLW  06
2796:  BNZ   27A8
2798:  MOVLW  05
279A:  MOVLB  4
279C:  MOVWF  x92
279E:  MOVLW  01
27A0:  MOVWF  x93
27A2:  MOVLB  0
27A4:  CALL   1308
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
27A8:  MOVF   56,W
27AA:  SUBLW  07
27AC:  BNZ   27BE
27AE:  MOVLW  05
27B0:  MOVLB  4
27B2:  MOVWF  x92
27B4:  MOVLW  01
27B6:  MOVWF  x93
27B8:  MOVLB  0
27BA:  CALL   1308
....................          if(ttct_td==8) sang_tat_32led(5,1); 
27BE:  MOVF   56,W
27C0:  SUBLW  08
27C2:  BNZ   27D4
27C4:  MOVLW  05
27C6:  MOVLB  4
27C8:  MOVWF  x92
27CA:  MOVLW  01
27CC:  MOVWF  x93
27CE:  MOVLB  0
27D0:  CALL   1222
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
27D4:  MOVF   56,W
27D6:  SUBLW  09
27D8:  BNZ   27EA
27DA:  MOVLW  05
27DC:  MOVLB  4
27DE:  MOVWF  x92
27E0:  MOVLW  01
27E2:  MOVWF  x93
27E4:  MOVLB  0
27E6:  CALL   1286
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
27EA:  MOVF   56,W
27EC:  SUBLW  0A
27EE:  BNZ   2800
27F0:  MOVLW  05
27F2:  MOVLB  4
27F4:  MOVWF  x92
27F6:  MOVLW  01
27F8:  MOVWF  x93
27FA:  MOVLB  0
27FC:  CALL   1308
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
2800:  MOVF   56,W
2802:  SUBLW  0B
2804:  BNZ   2816
2806:  MOVLW  05
2808:  MOVLB  4
280A:  MOVWF  x92
280C:  MOVLW  01
280E:  MOVWF  x93
2810:  MOVLB  0
2812:  CALL   138A
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
2816:  MOVF   56,W
2818:  SUBLW  0C
281A:  BNZ   282C
281C:  MOVLW  05
281E:  MOVLB  4
2820:  MOVWF  x92
2822:  MOVLW  01
2824:  MOVWF  x93
2826:  MOVLB  0
2828:  CALL   140E
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
282C:  MOVF   56,W
282E:  SUBLW  0D
2830:  BNZ   2842
2832:  MOVLW  05
2834:  MOVLB  4
2836:  MOVWF  x92
2838:  MOVLW  01
283A:  MOVWF  x93
283C:  MOVLB  0
283E:  CALL   138A
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
2842:  MOVF   56,W
2844:  SUBLW  0E
2846:  BNZ   2858
2848:  MOVLW  05
284A:  MOVLB  4
284C:  MOVWF  x92
284E:  MOVLW  01
2850:  MOVWF  x93
2852:  MOVLB  0
2854:  GOTO   1474
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
2858:  MOVF   56,W
285A:  SUBLW  0F
285C:  BNZ   286E
285E:  MOVLW  05
2860:  MOVLB  4
2862:  MOVWF  x92
2864:  MOVLW  01
2866:  MOVWF  x93
2868:  MOVLB  0
286A:  CALL   1308
....................          if(ttct_td>15) ttct_td =1;       
286E:  BTFSC  56.7
2870:  BRA    287C
2872:  MOVF   56,W
2874:  SUBLW  0F
2876:  BC    287C
2878:  MOVLW  01
287A:  MOVWF  56
....................       } 
287C:  BRA    28B6
287E:  MOVLB  4
....................       else  
....................       { 
....................          bdn = bdn -10; 
2880:  MOVLW  0A
2882:  SUBWF  x79,F
....................          giay++;  
2884:  INCF   x78,F
....................          draw(giay); 
2886:  MOVFF  478,492
288A:  MOVLB  0
288C:  GOTO   1F3E
....................          read_temp(); 
2890:  BRA    23A4
....................             if (giay==60) { giay = 0; phut++; 
2892:  MOVLB  4
2894:  MOVF   x78,W
2896:  SUBLW  3C
2898:  BNZ   28B0
289A:  CLRF   x78
289C:  INCF   x7A,F
....................                if (phut == 60) { phut = 0; gio++;  
289E:  MOVF   x7A,W
28A0:  SUBLW  3C
28A2:  BNZ   28B0
28A4:  CLRF   x7A
28A6:  INCF   x7B,F
....................                   if (gio == 24) gio = 0; 
28A8:  MOVF   x7B,W
28AA:  SUBLW  18
28AC:  BNZ   28B0
28AE:  CLRF   x7B
....................                }  
....................             } 
....................          giai_ma(); 
28B0:  MOVLB  0
28B2:  CALL   0B32
....................       } 
28B6:  BRA    26D6
....................    }            
.................... } 
....................  
28B8:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
