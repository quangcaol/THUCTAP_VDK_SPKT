CCS PCH C Compiler, Version 5.078, 43599               13-Dec-20 08:38

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\713\713.lst

               ROM used:   11798 bytes (36%)
                           Largest free fragment is 20966
               RAM used:   1174 (57%) at main() level
                           1241 (61%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   2ACE
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0138
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 07,0F
00FA:  DATA 1F,1F
00FC:  DATA 1F,1F
00FE:  DATA 1F,1F
0100:  DATA 1F,1F
0102:  DATA 1F,00
0104:  DATA 00,00
0106:  DATA 00,00
0108:  DATA 1C,1E
010A:  DATA 1F,1F
010C:  DATA 1F,1F
010E:  DATA 1F,1F
0110:  DATA 00,00
0112:  DATA 00,00
0114:  DATA 00,1F
0116:  DATA 1F,1F
0118:  DATA 1F,1F
011A:  DATA 1F,1F
011C:  DATA 1F,1F
011E:  DATA 1E,1C
0120:  DATA 1F,1F
0122:  DATA 1F,1F
0124:  DATA 1F,1F
0126:  DATA 0F,07
0128:  DATA 1F,1F
012A:  DATA 1F,00
012C:  DATA 00,00
012E:  DATA 1F,1F
0130:  DATA 1F,1F
0132:  DATA 1F,1F
0134:  DATA 1F,1F
0136:  DATA 1F,1F
*
014C:  DATA 4E,48
014E:  DATA 49,45
0150:  DATA 54,20
0152:  DATA 44,4F
0154:  DATA 20,4C
0156:  DATA 4D,33
0158:  DATA 35,42
015A:  DATA 3A,20
015C:  DATA 25,6C
015E:  DATA 64,00
0160:  DATA 4E,48
0162:  DATA 49,45
0164:  DATA 54,20
0166:  DATA 44,4F
0168:  DATA 20,4C
016A:  DATA 4D,33
016C:  DATA 35,41
016E:  DATA 3A,20
0170:  DATA 25,6C
0172:  DATA 64,00
0174:  DATA 44,45
0176:  DATA 4D,20
0178:  DATA 53,41
017A:  DATA 4E,20
017C:  DATA 50,48
017E:  DATA 41,4D
0180:  DATA 3A,20
0182:  DATA 25,64
0184:  DATA 00,00
0186:  DATA 4B,48
0188:  DATA 4F,41
018A:  DATA 4E,47
018C:  DATA 20,43
018E:  DATA 41,43
0190:  DATA 48,3A
0192:  DATA 20,25
0194:  DATA 30,2E
0196:  DATA 31,66
0198:  DATA 20,00
*
03A8:  MOVLB  4
03AA:  MOVF   x95,W
03AC:  XORWF  x96,W
03AE:  ANDLW  80
03B0:  MOVWF  x98
03B2:  BTFSS  x95.7
03B4:  BRA    03BA
03B6:  COMF   x95,F
03B8:  INCF   x95,F
03BA:  BTFSS  x96.7
03BC:  BRA    03C2
03BE:  COMF   x96,F
03C0:  INCF   x96,F
03C2:  MOVF   x96,W
03C4:  CLRF   01
03C6:  SUBWF  x95,W
03C8:  BC    03D0
03CA:  MOVFF  495,00
03CE:  BRA    03E8
03D0:  CLRF   00
03D2:  MOVLW  08
03D4:  MOVWF  x97
03D6:  RLCF   x95,F
03D8:  RLCF   00,F
03DA:  MOVF   x96,W
03DC:  SUBWF  00,W
03DE:  BTFSC  FD8.0
03E0:  MOVWF  00
03E2:  RLCF   01,F
03E4:  DECFSZ x97,F
03E6:  BRA    03D6
03E8:  BTFSS  x98.7
03EA:  BRA    03F0
03EC:  COMF   01,F
03EE:  INCF   01,F
03F0:  MOVLB  0
03F2:  RETURN 0
03F4:  TBLRD*+
03F6:  MOVFF  FF6,49C
03FA:  MOVFF  FF7,49D
03FE:  MOVFF  FF5,4A8
0402:  RCALL  0396
0404:  MOVFF  49C,FF6
0408:  MOVFF  49D,FF7
040C:  MOVLB  4
040E:  DECFSZ x9B,F
0410:  BRA    0414
0412:  BRA    0418
0414:  MOVLB  0
0416:  BRA    03F4
0418:  MOVLB  0
041A:  RETURN 0
041C:  MOVFF  FEA,49D
0420:  MOVFF  FE9,49C
0424:  MOVLB  4
0426:  BTFSS  x96.7
0428:  BRA    043A
042A:  BSF    x9C.7
042C:  BTFSS  x9C.4
042E:  INCF   x9C,F
0430:  COMF   x95,F
0432:  COMF   x96,F
0434:  INCF   x95,F
0436:  BTFSC  FD8.2
0438:  INCF   x96,F
043A:  SWAPF  x96,W
043C:  IORLW  F0
043E:  MOVWF  x98
0440:  ADDWF  x98,F
0442:  ADDLW  E2
0444:  MOVWF  x99
0446:  ADDLW  32
0448:  MOVWF  x9B
044A:  MOVF   x96,W
044C:  ANDLW  0F
044E:  ADDWF  x99,F
0450:  ADDWF  x99,F
0452:  ADDWF  x9B,F
0454:  ADDLW  E9
0456:  MOVWF  x9A
0458:  ADDWF  x9A,F
045A:  ADDWF  x9A,F
045C:  SWAPF  x95,W
045E:  ANDLW  0F
0460:  ADDWF  x9A,F
0462:  ADDWF  x9B,F
0464:  RLCF   x9A,F
0466:  RLCF   x9B,F
0468:  COMF   x9B,F
046A:  RLCF   x9B,F
046C:  MOVF   x95,W
046E:  ANDLW  0F
0470:  ADDWF  x9B,F
0472:  RLCF   x98,F
0474:  MOVLW  07
0476:  MOVWF  x97
0478:  MOVLW  0A
047A:  DECF   x9A,F
047C:  ADDWF  x9B,F
047E:  BNC   047A
0480:  DECF   x99,F
0482:  ADDWF  x9A,F
0484:  BNC   0480
0486:  DECF   x98,F
0488:  ADDWF  x99,F
048A:  BNC   0486
048C:  DECF   x97,F
048E:  ADDWF  x98,F
0490:  BNC   048C
0492:  MOVLW  04
0494:  MOVWF  FEA
0496:  MOVLW  97
0498:  MOVWF  FE9
049A:  MOVLW  07
049C:  ANDWF  x9C,W
049E:  BCF    x9C.6
04A0:  MOVF   FED,F
04A2:  ANDWF  x9C,W
04A4:  BNZ   04B4
04A6:  BTFSC  x9C.4
04A8:  MOVF   FEE,F
04AA:  BTFSC  x9C.4
04AC:  BRA    04B4
04AE:  MOVLW  20
04B0:  MOVWF  00
04B2:  BRA    04F6
04B4:  ADDWF  FE9,F
04B6:  MOVLW  00
04B8:  ADDWFC FEA,F
04BA:  MOVF   FE9,W
04BC:  SUBLW  9B
04BE:  BNZ   04C8
04C0:  MOVF   FEA,W
04C2:  SUBLW  04
04C4:  BNZ   04C8
04C6:  BSF    x9C.6
04C8:  MOVF   FEF,W
04CA:  MOVWF  00
04CC:  BNZ   04DE
04CE:  BTFSC  x9C.6
04D0:  BRA    04DE
04D2:  BTFSC  x9C.4
04D4:  BRA    0510
04D6:  BTFSC  x9C.3
04D8:  BRA    04DE
04DA:  MOVLW  20
04DC:  BRA    04F4
04DE:  BTFSS  x9C.7
04E0:  BRA    04EE
04E2:  MOVLW  2D
04E4:  MOVWF  00
04E6:  MOVF   FED,W
04E8:  BCF    x9C.6
04EA:  BCF    x9C.7
04EC:  BRA    04F6
04EE:  BSF    x9C.3
04F0:  BCF    x9C.4
04F2:  MOVLW  30
04F4:  ADDWF  00,F
04F6:  MOVFF  FEA,496
04FA:  MOVFF  FE9,495
04FE:  MOVFF  00,4A8
0502:  MOVLB  0
0504:  RCALL  0396
0506:  MOVFF  496,FEA
050A:  MOVFF  495,FE9
050E:  MOVLB  4
0510:  MOVF   FEE,W
0512:  BTFSS  x9C.6
0514:  BRA    04BA
0516:  MOVLB  0
0518:  RETURN 0
*
06D4:  MOVLB  4
06D6:  MOVF   x9C,W
06D8:  CLRF   01
06DA:  SUBWF  x9B,W
06DC:  BC    06E4
06DE:  MOVFF  49B,00
06E2:  BRA    06FC
06E4:  CLRF   00
06E6:  MOVLW  08
06E8:  MOVWF  x9D
06EA:  RLCF   x9B,F
06EC:  RLCF   00,F
06EE:  MOVF   x9C,W
06F0:  SUBWF  00,W
06F2:  BTFSC  FD8.0
06F4:  MOVWF  00
06F6:  RLCF   01,F
06F8:  DECFSZ x9D,F
06FA:  BRA    06EA
06FC:  MOVLB  0
06FE:  RETURN 0
0700:  MOVLW  20
0702:  MOVLB  4
0704:  BTFSS  x96.4
0706:  MOVLW  30
0708:  MOVWF  x97
070A:  MOVFF  495,00
070E:  BTFSS  00.7
0710:  BRA    0722
0712:  COMF   00,F
0714:  INCF   00,F
0716:  MOVFF  00,495
071A:  MOVLW  2D
071C:  MOVWF  x97
071E:  BSF    x96.7
0720:  BSF    x96.0
0722:  MOVF   01,W
0724:  MOVFF  495,49B
0728:  MOVLW  64
072A:  MOVWF  x9C
072C:  MOVLB  0
072E:  RCALL  06D4
0730:  MOVFF  00,495
0734:  MOVLW  30
0736:  ADDWF  01,W
0738:  MOVLB  4
073A:  MOVWF  x98
073C:  MOVFF  495,49B
0740:  MOVLW  0A
0742:  MOVWF  x9C
0744:  MOVLB  0
0746:  RCALL  06D4
0748:  MOVLW  30
074A:  ADDWF  00,W
074C:  MOVLB  4
074E:  MOVWF  x9A
0750:  MOVLW  30
0752:  ADDWF  01,W
0754:  MOVWF  x99
0756:  MOVFF  497,00
075A:  MOVLW  30
075C:  SUBWF  x98,W
075E:  BZ    0768
0760:  BSF    x96.1
0762:  BTFSC  x96.7
0764:  BSF    x96.2
0766:  BRA    078C
0768:  MOVFF  497,498
076C:  MOVLW  20
076E:  MOVWF  x97
0770:  MOVLW  30
0772:  SUBWF  x99,W
0774:  BZ    077E
0776:  BSF    x96.0
0778:  BTFSC  x96.7
077A:  BSF    x96.1
077C:  BRA    078C
077E:  BTFSS  FD8.2
0780:  BSF    x96.0
0782:  BNZ   078C
0784:  MOVFF  498,499
0788:  MOVLW  20
078A:  MOVWF  x98
078C:  BTFSC  x96.2
078E:  BRA    079A
0790:  BTFSC  x96.1
0792:  BRA    07A2
0794:  BTFSC  x96.0
0796:  BRA    07AA
0798:  BRA    07B2
079A:  MOVFF  497,4A8
079E:  MOVLB  0
07A0:  RCALL  0396
07A2:  MOVFF  498,4A8
07A6:  MOVLB  0
07A8:  RCALL  0396
07AA:  MOVFF  499,4A8
07AE:  MOVLB  0
07B0:  RCALL  0396
07B2:  MOVFF  49A,4A8
07B6:  MOVLB  0
07B8:  RCALL  0396
07BA:  GOTO   07E8 (RETURN)
*
080A:  CLRF   01
080C:  CLRF   02
080E:  CLRF   00
0810:  CLRF   03
0812:  MOVLB  4
0814:  MOVF   xA2,W
0816:  BNZ   081C
0818:  MOVF   xA1,W
081A:  BZ    084C
081C:  MOVLW  10
081E:  MOVWF  xA3
0820:  BCF    FD8.0
0822:  RLCF   x9F,F
0824:  RLCF   xA0,F
0826:  RLCF   00,F
0828:  RLCF   03,F
082A:  MOVF   xA2,W
082C:  SUBWF  03,W
082E:  BNZ   0834
0830:  MOVF   xA1,W
0832:  SUBWF  00,W
0834:  BNC   0844
0836:  MOVF   xA1,W
0838:  SUBWF  00,F
083A:  BTFSS  FD8.0
083C:  DECF   03,F
083E:  MOVF   xA2,W
0840:  SUBWF  03,F
0842:  BSF    FD8.0
0844:  RLCF   01,F
0846:  RLCF   02,F
0848:  DECFSZ xA3,F
084A:  BRA    0820
084C:  MOVLB  0
084E:  RETURN 0
0850:  MOVLW  8E
0852:  MOVWF  00
0854:  MOVFF  4CA,01
0858:  MOVFF  4C9,02
085C:  CLRF   03
085E:  MOVF   01,F
0860:  BNZ   0874
0862:  MOVFF  02,01
0866:  CLRF   02
0868:  MOVLW  08
086A:  SUBWF  00,F
086C:  MOVF   01,F
086E:  BNZ   0874
0870:  CLRF   00
0872:  BRA    0884
0874:  BCF    FD8.0
0876:  BTFSC  01.7
0878:  BRA    0882
087A:  RLCF   02,F
087C:  RLCF   01,F
087E:  DECF   00,F
0880:  BRA    0874
0882:  BCF    01.7
0884:  RETURN 0
0886:  MOVFF  4C6,4CD
088A:  MOVLB  4
088C:  MOVF   xCA,W
088E:  XORWF  xCD,F
0890:  BTFSS  xCD.7
0892:  BRA    089E
0894:  BCF    FD8.2
0896:  BCF    FD8.0
0898:  BTFSC  xC6.7
089A:  BSF    FD8.0
089C:  BRA    08FC
089E:  MOVFF  4C6,4CD
08A2:  MOVFF  4C9,4CE
08A6:  MOVF   xC5,W
08A8:  SUBWF  xCE,F
08AA:  BZ    08B8
08AC:  BTFSS  xCD.7
08AE:  BRA    08FC
08B0:  MOVF   FD8,W
08B2:  XORLW  01
08B4:  MOVWF  FD8
08B6:  BRA    08FC
08B8:  MOVFF  4CA,4CE
08BC:  MOVF   xC6,W
08BE:  SUBWF  xCE,F
08C0:  BZ    08CE
08C2:  BTFSS  xCD.7
08C4:  BRA    08FC
08C6:  MOVF   FD8,W
08C8:  XORLW  01
08CA:  MOVWF  FD8
08CC:  BRA    08FC
08CE:  MOVFF  4CB,4CE
08D2:  MOVF   xC7,W
08D4:  SUBWF  xCE,F
08D6:  BZ    08E4
08D8:  BTFSS  xCD.7
08DA:  BRA    08FC
08DC:  MOVF   FD8,W
08DE:  XORLW  01
08E0:  MOVWF  FD8
08E2:  BRA    08FC
08E4:  MOVFF  4CC,4CE
08E8:  MOVF   xC8,W
08EA:  SUBWF  xCE,F
08EC:  BZ    08FA
08EE:  BTFSS  xCD.7
08F0:  BRA    08FC
08F2:  MOVF   FD8,W
08F4:  XORLW  01
08F6:  MOVWF  FD8
08F8:  BRA    08FC
08FA:  BCF    FD8.0
08FC:  MOVLB  0
08FE:  RETURN 0
0900:  MOVLB  4
0902:  MOVF   xBE,W
0904:  BTFSC  FD8.2
0906:  BRA    0A52
0908:  MOVWF  xCA
090A:  MOVF   xC2,W
090C:  BTFSC  FD8.2
090E:  BRA    0A52
0910:  SUBWF  xCA,F
0912:  BNC   091E
0914:  MOVLW  7F
0916:  ADDWF  xCA,F
0918:  BTFSC  FD8.0
091A:  BRA    0A52
091C:  BRA    092A
091E:  MOVLW  81
0920:  SUBWF  xCA,F
0922:  BTFSS  FD8.0
0924:  BRA    0A52
0926:  BTFSC  FD8.2
0928:  BRA    0A52
092A:  MOVFF  4CA,00
092E:  CLRF   01
0930:  CLRF   02
0932:  CLRF   03
0934:  CLRF   xC9
0936:  MOVFF  4BF,4C8
093A:  BSF    xC8.7
093C:  MOVFF  4C0,4C7
0940:  MOVFF  4C1,4C6
0944:  MOVLW  19
0946:  MOVWF  xCA
0948:  MOVF   xC5,W
094A:  SUBWF  xC6,F
094C:  BC    0968
094E:  MOVLW  01
0950:  SUBWF  xC7,F
0952:  BC    0968
0954:  SUBWF  xC8,F
0956:  BC    0968
0958:  SUBWF  xC9,F
095A:  BC    0968
095C:  INCF   xC9,F
095E:  INCF   xC8,F
0960:  INCF   xC7,F
0962:  MOVF   xC5,W
0964:  ADDWF  xC6,F
0966:  BRA    09B8
0968:  MOVF   xC4,W
096A:  SUBWF  xC7,F
096C:  BC    0992
096E:  MOVLW  01
0970:  SUBWF  xC8,F
0972:  BC    0992
0974:  SUBWF  xC9,F
0976:  BC    0992
0978:  INCF   xC9,F
097A:  INCF   xC8,F
097C:  MOVF   xC4,W
097E:  ADDWF  xC7,F
0980:  MOVF   xC5,W
0982:  ADDWF  xC6,F
0984:  BNC   09B8
0986:  INCF   xC7,F
0988:  BNZ   09B8
098A:  INCF   xC8,F
098C:  BNZ   09B8
098E:  INCF   xC9,F
0990:  BRA    09B8
0992:  MOVF   xC3,W
0994:  IORLW  80
0996:  SUBWF  xC8,F
0998:  BC    09B6
099A:  MOVLW  01
099C:  SUBWF  xC9,F
099E:  BC    09B6
09A0:  INCF   xC9,F
09A2:  MOVF   xC3,W
09A4:  IORLW  80
09A6:  ADDWF  xC8,F
09A8:  MOVF   xC4,W
09AA:  ADDWF  xC7,F
09AC:  BNC   0980
09AE:  INCF   xC8,F
09B0:  BNZ   0980
09B2:  INCF   xC9,F
09B4:  BRA    0980
09B6:  BSF    03.0
09B8:  DECFSZ xCA,F
09BA:  BRA    09BE
09BC:  BRA    09D4
09BE:  BCF    FD8.0
09C0:  RLCF   xC6,F
09C2:  RLCF   xC7,F
09C4:  RLCF   xC8,F
09C6:  RLCF   xC9,F
09C8:  BCF    FD8.0
09CA:  RLCF   03,F
09CC:  RLCF   02,F
09CE:  RLCF   01,F
09D0:  RLCF   xCB,F
09D2:  BRA    0948
09D4:  BTFSS  xCB.0
09D6:  BRA    09E4
09D8:  BCF    FD8.0
09DA:  RRCF   01,F
09DC:  RRCF   02,F
09DE:  RRCF   03,F
09E0:  RRCF   xCB,F
09E2:  BRA    09E8
09E4:  DECF   00,F
09E6:  BZ    0A52
09E8:  BTFSC  xCB.7
09EA:  BRA    0A28
09EC:  BCF    FD8.0
09EE:  RLCF   xC6,F
09F0:  RLCF   xC7,F
09F2:  RLCF   xC8,F
09F4:  RLCF   xC9,F
09F6:  MOVF   xC5,W
09F8:  SUBWF  xC6,F
09FA:  BC    0A0A
09FC:  MOVLW  01
09FE:  SUBWF  xC7,F
0A00:  BC    0A0A
0A02:  SUBWF  xC8,F
0A04:  BC    0A0A
0A06:  SUBWF  xC9,F
0A08:  BNC   0A3E
0A0A:  MOVF   xC4,W
0A0C:  SUBWF  xC7,F
0A0E:  BC    0A1A
0A10:  MOVLW  01
0A12:  SUBWF  xC8,F
0A14:  BC    0A1A
0A16:  SUBWF  xC9,F
0A18:  BNC   0A3E
0A1A:  MOVF   xC3,W
0A1C:  IORLW  80
0A1E:  SUBWF  xC8,F
0A20:  BC    0A28
0A22:  MOVLW  01
0A24:  SUBWF  xC9,F
0A26:  BNC   0A3E
0A28:  INCF   03,F
0A2A:  BNZ   0A3E
0A2C:  INCF   02,F
0A2E:  BNZ   0A3E
0A30:  INCF   01,F
0A32:  BNZ   0A3E
0A34:  INCF   00,F
0A36:  BZ    0A52
0A38:  RRCF   01,F
0A3A:  RRCF   02,F
0A3C:  RRCF   03,F
0A3E:  MOVFF  4BF,4CA
0A42:  MOVF   xC3,W
0A44:  XORWF  xCA,F
0A46:  BTFSS  xCA.7
0A48:  BRA    0A4E
0A4A:  BSF    01.7
0A4C:  BRA    0A5A
0A4E:  BCF    01.7
0A50:  BRA    0A5A
0A52:  CLRF   00
0A54:  CLRF   01
0A56:  CLRF   02
0A58:  CLRF   03
0A5A:  MOVLB  0
0A5C:  RETURN 0
0A5E:  MOVLW  8E
0A60:  MOVWF  00
0A62:  MOVLB  4
0A64:  MOVF   xC5,W
0A66:  SUBWF  00,F
0A68:  MOVFF  4C6,02
0A6C:  MOVFF  4C7,01
0A70:  BSF    02.7
0A72:  MOVF   00,F
0A74:  BZ    0A88
0A76:  BCF    FD8.0
0A78:  MOVF   02,F
0A7A:  BNZ   0A80
0A7C:  MOVF   01,F
0A7E:  BZ    0A88
0A80:  RRCF   02,F
0A82:  RRCF   01,F
0A84:  DECFSZ 00,F
0A86:  BRA    0A76
0A88:  BTFSS  xC6.7
0A8A:  BRA    0A96
0A8C:  COMF   01,F
0A8E:  COMF   02,F
0A90:  INCF   01,F
0A92:  BTFSC  FD8.2
0A94:  INCF   02,F
0A96:  MOVLB  0
0A98:  RETURN 0
0A9A:  MOVLB  4
0A9C:  MOVF   xC5,W
0A9E:  BTFSC  FD8.2
0AA0:  BRA    0B84
0AA2:  MOVWF  00
0AA4:  MOVF   xC9,W
0AA6:  BTFSC  FD8.2
0AA8:  BRA    0B84
0AAA:  ADDWF  00,F
0AAC:  BNC   0AB6
0AAE:  MOVLW  81
0AB0:  ADDWF  00,F
0AB2:  BC    0B84
0AB4:  BRA    0ABE
0AB6:  MOVLW  7F
0AB8:  SUBWF  00,F
0ABA:  BNC   0B84
0ABC:  BZ    0B84
0ABE:  MOVFF  4C6,4CD
0AC2:  MOVF   xCA,W
0AC4:  XORWF  xCD,F
0AC6:  BSF    xC6.7
0AC8:  BSF    xCA.7
0ACA:  MOVF   xC8,W
0ACC:  MULWF  xCC
0ACE:  MOVFF  FF4,4CF
0AD2:  MOVF   xC7,W
0AD4:  MULWF  xCB
0AD6:  MOVFF  FF4,03
0ADA:  MOVFF  FF3,4CE
0ADE:  MULWF  xCC
0AE0:  MOVF   FF3,W
0AE2:  ADDWF  xCF,F
0AE4:  MOVF   FF4,W
0AE6:  ADDWFC xCE,F
0AE8:  MOVLW  00
0AEA:  ADDWFC 03,F
0AEC:  MOVF   xC8,W
0AEE:  MULWF  xCB
0AF0:  MOVF   FF3,W
0AF2:  ADDWF  xCF,F
0AF4:  MOVF   FF4,W
0AF6:  ADDWFC xCE,F
0AF8:  MOVLW  00
0AFA:  CLRF   02
0AFC:  ADDWFC 03,F
0AFE:  ADDWFC 02,F
0B00:  MOVF   xC6,W
0B02:  MULWF  xCC
0B04:  MOVF   FF3,W
0B06:  ADDWF  xCE,F
0B08:  MOVF   FF4,W
0B0A:  ADDWFC 03,F
0B0C:  MOVLW  00
0B0E:  ADDWFC 02,F
0B10:  MOVF   xC6,W
0B12:  MULWF  xCB
0B14:  MOVF   FF3,W
0B16:  ADDWF  03,F
0B18:  MOVF   FF4,W
0B1A:  ADDWFC 02,F
0B1C:  MOVLW  00
0B1E:  CLRF   01
0B20:  ADDWFC 01,F
0B22:  MOVF   xC8,W
0B24:  MULWF  xCA
0B26:  MOVF   FF3,W
0B28:  ADDWF  xCE,F
0B2A:  MOVF   FF4,W
0B2C:  ADDWFC 03,F
0B2E:  MOVLW  00
0B30:  ADDWFC 02,F
0B32:  ADDWFC 01,F
0B34:  MOVF   xC7,W
0B36:  MULWF  xCA
0B38:  MOVF   FF3,W
0B3A:  ADDWF  03,F
0B3C:  MOVF   FF4,W
0B3E:  ADDWFC 02,F
0B40:  MOVLW  00
0B42:  ADDWFC 01,F
0B44:  MOVF   xC6,W
0B46:  MULWF  xCA
0B48:  MOVF   FF3,W
0B4A:  ADDWF  02,F
0B4C:  MOVF   FF4,W
0B4E:  ADDWFC 01,F
0B50:  INCF   00,F
0B52:  BTFSC  01.7
0B54:  BRA    0B60
0B56:  RLCF   xCE,F
0B58:  RLCF   03,F
0B5A:  RLCF   02,F
0B5C:  RLCF   01,F
0B5E:  DECF   00,F
0B60:  MOVLW  00
0B62:  BTFSS  xCE.7
0B64:  BRA    0B7A
0B66:  INCF   03,F
0B68:  ADDWFC 02,F
0B6A:  ADDWFC 01,F
0B6C:  MOVF   01,W
0B6E:  BNZ   0B7A
0B70:  MOVF   02,W
0B72:  BNZ   0B7A
0B74:  MOVF   03,W
0B76:  BNZ   0B7A
0B78:  INCF   00,F
0B7A:  BTFSC  xCD.7
0B7C:  BSF    01.7
0B7E:  BTFSS  xCD.7
0B80:  BCF    01.7
0B82:  BRA    0B8C
0B84:  CLRF   00
0B86:  CLRF   01
0B88:  CLRF   02
0B8A:  CLRF   03
0B8C:  MOVLB  0
0B8E:  RETURN 0
0B90:  MOVLW  80
0B92:  BTFSS  FD8.1
0B94:  BRA    0B9A
0B96:  MOVLB  4
0B98:  XORWF  xCE,F
0B9A:  MOVLB  4
0B9C:  CLRF   xD3
0B9E:  CLRF   xD4
0BA0:  MOVFF  4CA,4D2
0BA4:  MOVF   xCE,W
0BA6:  XORWF  xD2,F
0BA8:  MOVF   xC9,W
0BAA:  BTFSC  FD8.2
0BAC:  BRA    0D6C
0BAE:  MOVWF  xD1
0BB0:  MOVWF  00
0BB2:  MOVF   xCD,W
0BB4:  BTFSC  FD8.2
0BB6:  BRA    0D7E
0BB8:  SUBWF  xD1,F
0BBA:  BTFSC  FD8.2
0BBC:  BRA    0CC4
0BBE:  BNC   0C3C
0BC0:  MOVFF  4CE,4D7
0BC4:  BSF    xD7.7
0BC6:  MOVFF  4CF,4D6
0BCA:  MOVFF  4D0,4D5
0BCE:  CLRF   xD4
0BD0:  BCF    FD8.0
0BD2:  RRCF   xD7,F
0BD4:  RRCF   xD6,F
0BD6:  RRCF   xD5,F
0BD8:  RRCF   xD4,F
0BDA:  DECFSZ xD1,F
0BDC:  BRA    0BCE
0BDE:  BTFSS  xD2.7
0BE0:  BRA    0BE8
0BE2:  BSF    xD3.0
0BE4:  BRA    0DA6
0BE6:  BCF    xD3.0
0BE8:  BCF    xD1.0
0BEA:  BSF    xD3.4
0BEC:  MOVLW  04
0BEE:  MOVWF  FEA
0BF0:  MOVLW  CC
0BF2:  MOVWF  FE9
0BF4:  BRA    0DCC
0BF6:  BCF    xD3.4
0BF8:  BTFSC  xD2.7
0BFA:  BRA    0C10
0BFC:  BTFSS  xD1.0
0BFE:  BRA    0C26
0C00:  RRCF   xD7,F
0C02:  RRCF   xD6,F
0C04:  RRCF   xD5,F
0C06:  RRCF   xD4,F
0C08:  INCF   00,F
0C0A:  BTFSC  FD8.2
0C0C:  BRA    0D9C
0C0E:  BRA    0C26
0C10:  BTFSC  xD7.7
0C12:  BRA    0C2C
0C14:  BCF    FD8.0
0C16:  RLCF   xD4,F
0C18:  RLCF   xD5,F
0C1A:  RLCF   xD6,F
0C1C:  RLCF   xD7,F
0C1E:  DECF   00,F
0C20:  BTFSC  FD8.2
0C22:  BRA    0D9C
0C24:  BRA    0C10
0C26:  BSF    xD3.6
0C28:  BRA    0D04
0C2A:  BCF    xD3.6
0C2C:  MOVFF  4CA,4D2
0C30:  BTFSS  xCA.7
0C32:  BRA    0C38
0C34:  BSF    xD7.7
0C36:  BRA    0D8E
0C38:  BCF    xD7.7
0C3A:  BRA    0D8E
0C3C:  MOVFF  4CD,4D1
0C40:  MOVFF  4CD,00
0C44:  MOVF   xC9,W
0C46:  SUBWF  xD1,F
0C48:  MOVFF  4CA,4D7
0C4C:  BSF    xD7.7
0C4E:  MOVFF  4CB,4D6
0C52:  MOVFF  4CC,4D5
0C56:  CLRF   xD4
0C58:  BCF    FD8.0
0C5A:  RRCF   xD7,F
0C5C:  RRCF   xD6,F
0C5E:  RRCF   xD5,F
0C60:  RRCF   xD4,F
0C62:  DECFSZ xD1,F
0C64:  BRA    0C56
0C66:  BTFSS  xD2.7
0C68:  BRA    0C70
0C6A:  BSF    xD3.1
0C6C:  BRA    0DA6
0C6E:  BCF    xD3.1
0C70:  BCF    xD1.0
0C72:  BSF    xD3.5
0C74:  MOVLW  04
0C76:  MOVWF  FEA
0C78:  MOVLW  D0
0C7A:  MOVWF  FE9
0C7C:  BRA    0DCC
0C7E:  BCF    xD3.5
0C80:  BTFSC  xD2.7
0C82:  BRA    0C98
0C84:  BTFSS  xD1.0
0C86:  BRA    0CAE
0C88:  RRCF   xD7,F
0C8A:  RRCF   xD6,F
0C8C:  RRCF   xD5,F
0C8E:  RRCF   xD4,F
0C90:  INCF   00,F
0C92:  BTFSC  FD8.2
0C94:  BRA    0D9C
0C96:  BRA    0CAE
0C98:  BTFSC  xD7.7
0C9A:  BRA    0CB4
0C9C:  BCF    FD8.0
0C9E:  RLCF   xD4,F
0CA0:  RLCF   xD5,F
0CA2:  RLCF   xD6,F
0CA4:  RLCF   xD7,F
0CA6:  DECF   00,F
0CA8:  BTFSC  FD8.2
0CAA:  BRA    0D9C
0CAC:  BRA    0C98
0CAE:  BSF    xD3.7
0CB0:  BRA    0D04
0CB2:  BCF    xD3.7
0CB4:  MOVFF  4CE,4D2
0CB8:  BTFSS  xCE.7
0CBA:  BRA    0CC0
0CBC:  BSF    xD7.7
0CBE:  BRA    0D8E
0CC0:  BCF    xD7.7
0CC2:  BRA    0D8E
0CC4:  MOVFF  4CE,4D7
0CC8:  BSF    xD7.7
0CCA:  MOVFF  4CF,4D6
0CCE:  MOVFF  4D0,4D5
0CD2:  BTFSS  xD2.7
0CD4:  BRA    0CDE
0CD6:  BCF    xD7.7
0CD8:  BSF    xD3.2
0CDA:  BRA    0DA6
0CDC:  BCF    xD3.2
0CDE:  CLRF   xD4
0CE0:  BCF    xD1.0
0CE2:  MOVLW  04
0CE4:  MOVWF  FEA
0CE6:  MOVLW  CC
0CE8:  MOVWF  FE9
0CEA:  BRA    0DCC
0CEC:  BTFSC  xD2.7
0CEE:  BRA    0D28
0CF0:  MOVFF  4CA,4D2
0CF4:  BTFSS  xD1.0
0CF6:  BRA    0D04
0CF8:  RRCF   xD7,F
0CFA:  RRCF   xD6,F
0CFC:  RRCF   xD5,F
0CFE:  RRCF   xD4,F
0D00:  INCF   00,F
0D02:  BZ    0D9C
0D04:  BTFSS  xD4.7
0D06:  BRA    0D1E
0D08:  INCF   xD5,F
0D0A:  BNZ   0D1E
0D0C:  INCF   xD6,F
0D0E:  BNZ   0D1E
0D10:  INCF   xD7,F
0D12:  BNZ   0D1E
0D14:  RRCF   xD7,F
0D16:  RRCF   xD6,F
0D18:  RRCF   xD5,F
0D1A:  INCF   00,F
0D1C:  BZ    0D9C
0D1E:  BTFSC  xD3.6
0D20:  BRA    0C2A
0D22:  BTFSC  xD3.7
0D24:  BRA    0CB2
0D26:  BRA    0D60
0D28:  MOVLW  80
0D2A:  XORWF  xD7,F
0D2C:  BTFSS  xD7.7
0D2E:  BRA    0D38
0D30:  BRA    0DA6
0D32:  MOVFF  4CE,4D2
0D36:  BRA    0D4C
0D38:  MOVFF  4CA,4D2
0D3C:  MOVF   xD7,F
0D3E:  BNZ   0D4C
0D40:  MOVF   xD6,F
0D42:  BNZ   0D4C
0D44:  MOVF   xD5,F
0D46:  BNZ   0D4C
0D48:  CLRF   00
0D4A:  BRA    0D8E
0D4C:  BTFSC  xD7.7
0D4E:  BRA    0D60
0D50:  BCF    FD8.0
0D52:  RLCF   xD4,F
0D54:  RLCF   xD5,F
0D56:  RLCF   xD6,F
0D58:  RLCF   xD7,F
0D5A:  DECFSZ 00,F
0D5C:  BRA    0D4C
0D5E:  BRA    0D9C
0D60:  BTFSS  xD2.7
0D62:  BRA    0D68
0D64:  BSF    xD7.7
0D66:  BRA    0D8E
0D68:  BCF    xD7.7
0D6A:  BRA    0D8E
0D6C:  MOVFF  4CD,00
0D70:  MOVFF  4CE,4D7
0D74:  MOVFF  4CF,4D6
0D78:  MOVFF  4D0,4D5
0D7C:  BRA    0D8E
0D7E:  MOVFF  4C9,00
0D82:  MOVFF  4CA,4D7
0D86:  MOVFF  4CB,4D6
0D8A:  MOVFF  4CC,4D5
0D8E:  MOVFF  4D7,01
0D92:  MOVFF  4D6,02
0D96:  MOVFF  4D5,03
0D9A:  BRA    0E04
0D9C:  CLRF   00
0D9E:  CLRF   01
0DA0:  CLRF   02
0DA2:  CLRF   03
0DA4:  BRA    0E04
0DA6:  CLRF   xD4
0DA8:  COMF   xD5,F
0DAA:  COMF   xD6,F
0DAC:  COMF   xD7,F
0DAE:  COMF   xD4,F
0DB0:  INCF   xD4,F
0DB2:  BNZ   0DBE
0DB4:  INCF   xD5,F
0DB6:  BNZ   0DBE
0DB8:  INCF   xD6,F
0DBA:  BNZ   0DBE
0DBC:  INCF   xD7,F
0DBE:  BTFSC  xD3.0
0DC0:  BRA    0BE6
0DC2:  BTFSC  xD3.1
0DC4:  BRA    0C6E
0DC6:  BTFSC  xD3.2
0DC8:  BRA    0CDC
0DCA:  BRA    0D32
0DCC:  MOVF   FEF,W
0DCE:  ADDWF  xD5,F
0DD0:  BNC   0DDC
0DD2:  INCF   xD6,F
0DD4:  BNZ   0DDC
0DD6:  INCF   xD7,F
0DD8:  BTFSC  FD8.2
0DDA:  BSF    xD1.0
0DDC:  MOVF   FED,F
0DDE:  MOVF   FEF,W
0DE0:  ADDWF  xD6,F
0DE2:  BNC   0DEA
0DE4:  INCF   xD7,F
0DE6:  BTFSC  FD8.2
0DE8:  BSF    xD1.0
0DEA:  MOVF   FED,F
0DEC:  MOVF   FEF,W
0DEE:  BTFSC  FEF.7
0DF0:  BRA    0DF4
0DF2:  XORLW  80
0DF4:  ADDWF  xD7,F
0DF6:  BTFSC  FD8.0
0DF8:  BSF    xD1.0
0DFA:  BTFSC  xD3.4
0DFC:  BRA    0BF6
0DFE:  BTFSC  xD3.5
0E00:  BRA    0C7E
0E02:  BRA    0CEC
0E04:  MOVLB  0
0E06:  RETURN 0
*
12F4:  MOVLW  8E
12F6:  MOVWF  00
12F8:  MOVFF  4BC,01
12FC:  MOVFF  4BB,02
1300:  CLRF   03
1302:  BTFSS  01.7
1304:  BRA    1310
1306:  COMF   01,F
1308:  COMF   02,F
130A:  INCF   02,F
130C:  BNZ   1310
130E:  INCF   01,F
1310:  MOVF   01,F
1312:  BNZ   1326
1314:  MOVFF  02,01
1318:  CLRF   02
131A:  MOVLW  08
131C:  SUBWF  00,F
131E:  MOVF   01,F
1320:  BNZ   1326
1322:  CLRF   00
1324:  BRA    1342
1326:  BCF    FD8.0
1328:  BTFSC  01.7
132A:  BRA    1334
132C:  RLCF   02,F
132E:  RLCF   01,F
1330:  DECF   00,F
1332:  BRA    1326
1334:  MOVLB  4
1336:  BTFSS  xBC.7
1338:  BRA    133E
133A:  MOVLB  0
133C:  BRA    1342
133E:  BCF    01.7
1340:  MOVLB  0
1342:  RETURN 0
*
1F7A:  MOVLB  4
1F7C:  MOVF   xA8,W
1F7E:  SUBLW  B6
1F80:  MOVWF  xA8
1F82:  CLRF   03
1F84:  MOVFF  4A9,4AC
1F88:  BSF    xA9.7
1F8A:  BCF    FD8.0
1F8C:  RRCF   xA9,F
1F8E:  RRCF   xAA,F
1F90:  RRCF   xAB,F
1F92:  RRCF   03,F
1F94:  RRCF   02,F
1F96:  RRCF   01,F
1F98:  RRCF   00,F
1F9A:  DECFSZ xA8,F
1F9C:  BRA    1F8A
1F9E:  BTFSS  xAC.7
1FA0:  BRA    1FB8
1FA2:  COMF   00,F
1FA4:  COMF   01,F
1FA6:  COMF   02,F
1FA8:  COMF   03,F
1FAA:  INCF   00,F
1FAC:  BTFSC  FD8.2
1FAE:  INCF   01,F
1FB0:  BTFSC  FD8.2
1FB2:  INCF   02,F
1FB4:  BTFSC  FD8.2
1FB6:  INCF   03,F
1FB8:  MOVLB  0
1FBA:  GOTO   20AA (RETURN)
1FBE:  BTFSC  FD8.1
1FC0:  BRA    1FCA
1FC2:  MOVLW  04
1FC4:  MOVWF  FEA
1FC6:  MOVLW  B0
1FC8:  MOVWF  FE9
1FCA:  CLRF   00
1FCC:  CLRF   01
1FCE:  CLRF   02
1FD0:  CLRF   03
1FD2:  MOVLB  4
1FD4:  CLRF   xB0
1FD6:  CLRF   xB1
1FD8:  CLRF   xB2
1FDA:  CLRF   xB3
1FDC:  MOVF   xAF,W
1FDE:  IORWF  xAE,W
1FE0:  IORWF  xAD,W
1FE2:  IORWF  xAC,W
1FE4:  BZ    203E
1FE6:  MOVLW  20
1FE8:  MOVWF  xB4
1FEA:  BCF    FD8.0
1FEC:  RLCF   xA8,F
1FEE:  RLCF   xA9,F
1FF0:  RLCF   xAA,F
1FF2:  RLCF   xAB,F
1FF4:  RLCF   xB0,F
1FF6:  RLCF   xB1,F
1FF8:  RLCF   xB2,F
1FFA:  RLCF   xB3,F
1FFC:  MOVF   xAF,W
1FFE:  SUBWF  xB3,W
2000:  BNZ   2012
2002:  MOVF   xAE,W
2004:  SUBWF  xB2,W
2006:  BNZ   2012
2008:  MOVF   xAD,W
200A:  SUBWF  xB1,W
200C:  BNZ   2012
200E:  MOVF   xAC,W
2010:  SUBWF  xB0,W
2012:  BNC   2032
2014:  MOVF   xAC,W
2016:  SUBWF  xB0,F
2018:  MOVF   xAD,W
201A:  BTFSS  FD8.0
201C:  INCFSZ xAD,W
201E:  SUBWF  xB1,F
2020:  MOVF   xAE,W
2022:  BTFSS  FD8.0
2024:  INCFSZ xAE,W
2026:  SUBWF  xB2,F
2028:  MOVF   xAF,W
202A:  BTFSS  FD8.0
202C:  INCFSZ xAF,W
202E:  SUBWF  xB3,F
2030:  BSF    FD8.0
2032:  RLCF   00,F
2034:  RLCF   01,F
2036:  RLCF   02,F
2038:  RLCF   03,F
203A:  DECFSZ xB4,F
203C:  BRA    1FEA
203E:  MOVFF  4B0,FEF
2042:  MOVFF  4B1,FEC
2046:  MOVFF  4B2,FEC
204A:  MOVFF  4B3,FEC
204E:  MOVLB  0
2050:  RETURN 0
2052:  MOVF   FE9,W
2054:  MOVLB  4
2056:  MOVWF  xA0
2058:  MOVF   x9F,W
205A:  MOVWF  xA2
205C:  BZ    2096
205E:  MOVFF  49E,4C8
2062:  MOVFF  49D,4C7
2066:  MOVFF  49C,4C6
206A:  MOVFF  49B,4C5
206E:  CLRF   xCC
2070:  CLRF   xCB
2072:  MOVLW  20
2074:  MOVWF  xCA
2076:  MOVLW  82
2078:  MOVWF  xC9
207A:  MOVLB  0
207C:  CALL   0A9A
2080:  MOVFF  03,49E
2084:  MOVFF  02,49D
2088:  MOVFF  01,49C
208C:  MOVFF  00,49B
2090:  MOVLB  4
2092:  DECFSZ xA2,F
2094:  BRA    205E
2096:  MOVFF  49E,4AB
209A:  MOVFF  49D,4AA
209E:  MOVFF  49C,4A9
20A2:  MOVFF  49B,4A8
20A6:  MOVLB  0
20A8:  BRA    1F7A
20AA:  MOVFF  03,49E
20AE:  MOVFF  02,49D
20B2:  MOVFF  01,49C
20B6:  MOVFF  00,49B
20BA:  MOVLB  4
20BC:  BTFSS  x9E.7
20BE:  BRA    20DA
20C0:  DECF   xA0,F
20C2:  BSF    xA0.5
20C4:  COMF   x9B,F
20C6:  COMF   x9C,F
20C8:  COMF   x9D,F
20CA:  COMF   x9E,F
20CC:  INCF   x9B,F
20CE:  BTFSC  FD8.2
20D0:  INCF   x9C,F
20D2:  BTFSC  FD8.2
20D4:  INCF   x9D,F
20D6:  BTFSC  FD8.2
20D8:  INCF   x9E,F
20DA:  MOVLW  3B
20DC:  MOVWF  xA7
20DE:  MOVLW  9A
20E0:  MOVWF  xA6
20E2:  MOVLW  CA
20E4:  MOVWF  xA5
20E6:  CLRF   xA4
20E8:  MOVLW  0A
20EA:  MOVWF  xA2
20EC:  MOVF   x9F,W
20EE:  BTFSC  FD8.2
20F0:  INCF   xA0,F
20F2:  BSF    FD8.1
20F4:  MOVLW  04
20F6:  MOVWF  FEA
20F8:  MOVLW  9B
20FA:  MOVWF  FE9
20FC:  MOVFF  49E,4AB
2100:  MOVFF  49D,4AA
2104:  MOVFF  49C,4A9
2108:  MOVFF  49B,4A8
210C:  MOVFF  4A7,4AF
2110:  MOVFF  4A6,4AE
2114:  MOVFF  4A5,4AD
2118:  MOVFF  4A4,4AC
211C:  MOVLB  0
211E:  RCALL  1FBE
2120:  MOVF   01,W
2122:  MOVF   00,F
2124:  BNZ   214C
2126:  MOVLB  4
2128:  INCF   x9F,W
212A:  SUBWF  xA2,W
212C:  BTFSS  FD8.2
212E:  BRA    2134
2130:  MOVLB  0
2132:  BRA    214C
2134:  MOVF   xA0,W
2136:  BZ    2152
2138:  ANDLW  0F
213A:  SUBWF  xA2,W
213C:  BZ    2140
213E:  BC    21C8
2140:  BTFSC  xA0.7
2142:  BRA    21C8
2144:  BTFSC  xA0.6
2146:  BRA    2152
2148:  MOVLW  20
214A:  BRA    21BA
214C:  MOVLW  20
214E:  MOVLB  4
2150:  ANDWF  xA0,F
2152:  BTFSS  xA0.5
2154:  BRA    2174
2156:  BCF    xA0.5
2158:  MOVF   x9F,W
215A:  BTFSS  FD8.2
215C:  DECF   xA0,F
215E:  MOVF   00,W
2160:  MOVWF  xA0
2162:  MOVLW  2D
2164:  MOVWF  xA8
2166:  MOVLB  0
2168:  CALL   0396
216C:  MOVLB  4
216E:  MOVF   xA0,W
2170:  MOVWF  00
2172:  CLRF   xA0
2174:  MOVF   x9F,W
2176:  SUBWF  xA2,W
2178:  BNZ   2194
217A:  MOVF   00,W
217C:  MOVWF  xA0
217E:  MOVLW  2E
2180:  MOVWF  xA8
2182:  MOVLB  0
2184:  CALL   0396
2188:  MOVLB  4
218A:  MOVF   xA0,W
218C:  MOVWF  00
218E:  MOVLW  20
2190:  ANDWF  xA0,F
2192:  MOVLW  00
2194:  MOVLW  30
2196:  BTFSS  xA0.5
2198:  BRA    21BA
219A:  BCF    xA0.5
219C:  MOVF   x9F,W
219E:  BTFSS  FD8.2
21A0:  DECF   xA0,F
21A2:  MOVF   00,W
21A4:  MOVWF  xA0
21A6:  MOVLW  2D
21A8:  MOVWF  xA8
21AA:  MOVLB  0
21AC:  CALL   0396
21B0:  MOVLB  4
21B2:  MOVF   xA0,W
21B4:  MOVWF  00
21B6:  CLRF   xA0
21B8:  MOVLW  30
21BA:  ADDWF  00,F
21BC:  MOVFF  00,4A8
21C0:  MOVLB  0
21C2:  CALL   0396
21C6:  MOVLB  4
21C8:  BCF    FD8.1
21CA:  MOVFF  4A7,4AB
21CE:  MOVFF  4A6,4AA
21D2:  MOVFF  4A5,4A9
21D6:  MOVFF  4A4,4A8
21DA:  CLRF   xAF
21DC:  CLRF   xAE
21DE:  CLRF   xAD
21E0:  MOVLW  0A
21E2:  MOVWF  xAC
21E4:  MOVLB  0
21E6:  RCALL  1FBE
21E8:  MOVFF  03,4A7
21EC:  MOVFF  02,4A6
21F0:  MOVFF  01,4A5
21F4:  MOVFF  00,4A4
21F8:  MOVLB  4
21FA:  DECFSZ xA2,F
21FC:  BRA    20F2
21FE:  MOVLB  0
2200:  GOTO   2268 (RETURN)
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
027E:  MOVLW  04
0280:  MOVWF  FEA
0282:  MOVLW  9A
0284:  MOVWF  FE9
0286:  MOVF   FEF,W
0288:  BZ    02A4
028A:  MOVLW  06
028C:  MOVWF  01
028E:  CLRF   00
0290:  DECFSZ 00,F
0292:  BRA    0290
0294:  DECFSZ 01,F
0296:  BRA    028E
0298:  MOVLW  7B
029A:  MOVWF  00
029C:  DECFSZ 00,F
029E:  BRA    029C
02A0:  DECFSZ FEF,F
02A2:  BRA    028A
02A4:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
01B8:  MOVFF  4AC,4AE
....................    for (sb=0;sb<8;sb++) 
01BC:  MOVLB  4
01BE:  CLRF   xAD
01C0:  MOVF   xAD,W
01C2:  SUBLW  07
01C4:  BNC   01E2
....................       {                                                  
....................          output_bit(ssdo,bseri);     
01C6:  BTFSC  xAE.7
01C8:  BRA    01CE
01CA:  BCF    F8D.2
01CC:  BRA    01D0
01CE:  BSF    F8D.2
01D0:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
01D2:  BCF    F96.0
01D4:  BCF    F8D.0
01D6:  BCF    F96.0
01D8:  BSF    F8D.0
....................          x= x<<1;          
01DA:  BCF    FD8.0
01DC:  RLCF   xAE,F
01DE:  INCF   xAD,F
01E0:  BRA    01C0
....................      } 
01E2:  MOVLB  0
01E4:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
2594:  MOVFF  4A7,4AC
2598:  CALL   01B8
....................       xuat_1byte(bld2); 
259C:  MOVFF  4A8,4AC
25A0:  CALL   01B8
....................       xuat_1byte(bld1);           
25A4:  MOVFF  4A9,4AC
25A8:  CALL   01B8
....................       xuat_1byte(bld0);             
25AC:  MOVFF  4AA,4AC
25B0:  CALL   01B8
....................       mo_32_led_don;       
25B4:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
25B6:  CALL   01E6
....................       output_high(rck_32led);    output_low(rck_32led); 
25BA:  BCF    F95.5
25BC:  BSF    F8C.5
25BE:  BCF    F95.5
25C0:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
25C2:  BCF    F95.1
25C4:  BCF    F8C.1
25C6:  GOTO   25EC (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
25CA:  MOVFF  4A0,4A3
25CE:  MOVFF  49F,4A4
....................      b1 = wld0>>8;  b0 = wld0; 
25D2:  MOVFF  4A2,4A5
25D6:  MOVFF  4A1,4A6
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
25DA:  MOVFF  4A3,4A7
25DE:  MOVFF  4A4,4A8
25E2:  MOVFF  4A5,4A9
25E6:  MOVFF  4A6,4AA
25EA:  BRA    2594
25EC:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
25EE:  MOVFF  499,49B
25F2:  MOVFF  49A,49C
25F6:  MOVFF  498,49E
25FA:  MOVFF  497,49D
....................      xuat_32led_don_2word(wd1,wd0); 
25FE:  MOVFF  49C,4A0
2602:  MOVFF  49B,49F
2606:  MOVFF  49E,4A2
260A:  MOVFF  49D,4A1
260E:  RCALL  25CA
2610:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
019A:  MOVLW  00
019C:  MOVWF  F95
....................       set_tris_e(0x00); 
019E:  MOVWF  F96
....................       output_d(0xff); 
01A0:  CLRF   F95
01A2:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
01A4:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
01A6:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
01A8:  BCF    F95.1
01AA:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
01AC:  BCF    F95.0
01AE:  BCF    F8C.0
....................       rbdc=0; 
01B0:  CLRF   1D
01B2:  CLRF   1C
01B4:  GOTO   2BC8 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
01E6:  CLRF   F95
01E8:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
01EA:  BTFSC  19.4
01EC:  BRA    01F2
01EE:  BCF    F8C.4
01F0:  BRA    01F4
01F2:  BSF    F8C.4
01F4:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
01F6:  BTFSC  19.6
01F8:  BRA    01FE
01FA:  BCF    F8C.6
01FC:  BRA    0200
01FE:  BSF    F8C.6
0200:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
0202:  BTFSC  19.2
0204:  BRA    020A
0206:  BCF    F8C.2
0208:  BRA    020C
020A:  BSF    F8C.2
020C:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
020E:  BCF    F95.1
0210:  BSF    F8C.1
0212:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
05F4:  CLRF   F95
05F6:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
05F8:  BTFSC  1A.6
05FA:  BRA    0600
05FC:  BCF    F8C.6
05FE:  BRA    0602
0600:  BSF    F8C.6
0602:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0604:  BTFSC  1A.4
0606:  BRA    060C
0608:  BCF    F8C.4
060A:  BRA    060E
060C:  BSF    F8C.4
060E:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0610:  BTFSC  1A.2
0612:  BRA    0618
0614:  BCF    F8C.2
0616:  BRA    061A
0618:  BSF    F8C.2
061A:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
061C:  BCF    F95.0
061E:  BSF    F8C.0
0620:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
1E04:  MOVFF  4A0,4AC
1E08:  CALL   01B8
1E0C:  MOVFF  49F,4AC
1E10:  CALL   01B8
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
1E14:  MOVFF  49E,4AC
1E18:  CALL   01B8
1E1C:  MOVFF  49D,4AC
1E20:  CALL   01B8
....................        
....................       mo_4_led_7doan; 
1E24:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
1E26:  CALL   01E6
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
1E2A:  BCF    F95.7
1E2C:  BCF    F8C.7
1E2E:  BCF    F95.7
1E30:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
1E32:  BCF    F95.1
1E34:  BCF    F8C.1
1E36:  RETURN 0
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
1E38:  MOVFF  49C,4A0
1E3C:  MOVFF  49B,49F
1E40:  MOVLB  4
1E42:  CLRF   xA2
1E44:  MOVLW  0A
1E46:  MOVWF  xA1
1E48:  MOVLB  0
1E4A:  CALL   080A
1E4E:  MOVFF  00,49D
1E52:  MOVLB  4
1E54:  MOVFF  03,49E
1E58:  MOVFF  03,03
1E5C:  MOVF   00,W
1E5E:  MOVLB  0
1E60:  CALL   00AE
1E64:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
1E66:  MOVFF  49C,4A0
1E6A:  MOVFF  49B,49F
1E6E:  MOVLB  4
1E70:  CLRF   xA2
1E72:  MOVLW  0A
1E74:  MOVWF  xA1
1E76:  MOVLB  0
1E78:  CALL   080A
1E7C:  MOVFF  02,49E
1E80:  MOVFF  01,49D
1E84:  MOVFF  02,4A0
1E88:  MOVFF  01,49F
1E8C:  MOVLB  4
1E8E:  CLRF   xA2
1E90:  MOVLW  0A
1E92:  MOVWF  xA1
1E94:  MOVLB  0
1E96:  CALL   080A
1E9A:  MOVFF  00,49D
1E9E:  MOVLB  4
1EA0:  MOVFF  03,49E
1EA4:  MOVFF  03,03
1EA8:  MOVF   00,W
1EAA:  MOVLB  0
1EAC:  CALL   00AE
1EB0:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
1EB2:  MOVFF  49C,4A0
1EB6:  MOVFF  49B,49F
1EBA:  MOVLB  4
1EBC:  CLRF   xA2
1EBE:  MOVLW  64
1EC0:  MOVWF  xA1
1EC2:  MOVLB  0
1EC4:  CALL   080A
1EC8:  MOVFF  02,49E
1ECC:  MOVFF  01,49D
1ED0:  MOVFF  02,4A0
1ED4:  MOVFF  01,49F
1ED8:  MOVLB  4
1EDA:  CLRF   xA2
1EDC:  MOVLW  0A
1EDE:  MOVWF  xA1
1EE0:  MOVLB  0
1EE2:  CALL   080A
1EE6:  MOVFF  00,49D
1EEA:  MOVLB  4
1EEC:  MOVFF  03,49E
1EF0:  MOVFF  03,03
1EF4:  MOVF   00,W
1EF6:  MOVLB  0
1EF8:  CALL   00AE
1EFC:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
1EFE:  MOVFF  49C,4A0
1F02:  MOVFF  49B,49F
1F06:  MOVLW  03
1F08:  MOVLB  4
1F0A:  MOVWF  xA2
1F0C:  MOVLW  E8
1F0E:  MOVWF  xA1
1F10:  MOVLB  0
1F12:  CALL   080A
1F16:  MOVFF  02,49E
1F1A:  MOVFF  01,49D
1F1E:  MOVFF  02,4A0
1F22:  MOVFF  01,49F
1F26:  MOVLB  4
1F28:  CLRF   xA2
1F2A:  MOVLW  0A
1F2C:  MOVWF  xA1
1F2E:  MOVLB  0
1F30:  CALL   080A
1F34:  MOVFF  00,49D
1F38:  MOVLB  4
1F3A:  MOVFF  03,49E
1F3E:  MOVFF  03,03
1F42:  MOVF   00,W
1F44:  MOVLB  0
1F46:  CALL   00AE
1F4A:  MOVWF  21
....................       if (ngan4==0xc0) 
1F4C:  MOVF   21,W
1F4E:  SUBLW  C0
1F50:  BNZ   1F64
....................       { 
....................          ngan4=0xff; 
1F52:  SETF   21
....................          if (tram4==0xc0) 
1F54:  MOVF   20,W
1F56:  SUBLW  C0
1F58:  BNZ   1F64
....................          { 
....................             tram4=0xff; 
1F5A:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
1F5C:  MOVF   1F,W
1F5E:  SUBLW  C0
1F60:  BNZ   1F64
1F62:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
1F64:  MOVFF  21,49D
1F68:  MOVFF  20,49E
1F6C:  MOVFF  1F,49F
1F70:  MOVFF  1E,4A0
1F74:  RCALL  1E04
1F76:  GOTO   222A (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
0214:  MOVFF  25,4AC
0218:  RCALL  01B8
....................     xuat_1byte(glcddata); 
021A:  MOVFF  24,4AC
021E:  RCALL  01B8
....................     xuat_1byte(lcdcontrol);        
0220:  MOVFF  23,4AC
0224:  RCALL  01B8
....................     xuat_1byte(lcddata);       
0226:  MOVFF  22,4AC
022A:  RCALL  01B8
....................        
....................     mo_glcd_lcd; 
022C:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
022E:  RCALL  01E6
....................     output_high(rck_lcd20x4);      
0230:  BCF    F95.3
0232:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
0234:  BCF    F95.3
0236:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0238:  BCF    F95.1
023A:  BCF    F8C.1
023C:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
023E:  MOVLB  4
0240:  MOVFF  4AA,23
0244:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
0246:  MOVFF  4AB,22
024A:  COMF   22,F
....................     xuat_glcd_lcd(); 
024C:  MOVLB  0
024E:  RCALL  0214
0250:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
0302:  MOVLB  4
0304:  MOVFF  498,25
0308:  COMF   25,F
....................     glcddata    = ~glcd_ins_hthi;      
030A:  MOVFF  499,24
030E:  COMF   24,F
....................     xuat_glcd_lcd(); 
0310:  MOVLB  0
0312:  RCALL  0214
0314:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
0660:  MOVLB  4
0662:  MOVFF  49B,49D
0666:  COMF   x9D,F
0668:  MOVFF  49D,4AC
066C:  MOVLB  0
066E:  RCALL  01B8
0670:  MOVLB  4
0672:  MOVFF  49C,49D
0676:  COMF   x9D,F
0678:  MOVFF  49D,4AC
067C:  MOVLB  0
067E:  RCALL  01B8
....................        
....................       mo_8_led_quet; 
0680:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
0682:  RCALL  05F4
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0684:  BCF    F95.5
0686:  BSF    F8C.5
0688:  BCF    F95.5
068A:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
068C:  BCF    F95.0
068E:  BCF    F8C.0
0690:  GOTO   069E (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0694:  MOVLB  4
0696:  SETF   x9B
0698:  SETF   x9C
069A:  MOVLB  0
069C:  BRA    0660
069E:  GOTO   06CE (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0622:  CLRF   03
0624:  MOVLB  4
0626:  MOVF   x9C,W
0628:  MOVLB  0
062A:  RCALL  00D0
062C:  MOVWF  01
062E:  MOVLB  4
0630:  MOVWF  x9E
0632:  COMF   x9E,F
0634:  MOVFF  49E,4AC
0638:  MOVLB  0
063A:  RCALL  01B8
063C:  MOVLB  4
063E:  MOVFF  49D,49E
0642:  COMF   x9E,F
0644:  MOVFF  49E,4AC
0648:  MOVLB  0
064A:  RCALL  01B8
....................       mo_8_led_quet; 
064C:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
064E:  RCALL  05F4
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0650:  BCF    F95.5
0652:  BSF    F8C.5
0654:  BCF    F95.5
0656:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0658:  BCF    F95.0
065A:  BCF    F8C.0
065C:  GOTO   06C2 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
06A2:  CLRF   2E
06A4:  MOVF   2E,W
06A6:  SUBLW  07
06A8:  BNC   06D2
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
06AA:  CLRF   03
06AC:  MOVF   2E,W
06AE:  ADDLW  26
06B0:  MOVWF  FE9
06B2:  MOVLW  00
06B4:  ADDWFC 03,W
06B6:  MOVWF  FEA
06B8:  MOVFF  FEF,49D
06BC:  MOVFF  2E,49C
06C0:  BRA    0622
....................             delay_us(100); 
06C2:  MOVLW  A6
06C4:  MOVWF  00
06C6:  DECFSZ 00,F
06C8:  BRA    06C6
06CA:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
06CC:  BRA    0694
06CE:  INCF   2E,F
06D0:  BRA    06A4
....................             } 
06D2:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
07EC:  MOVLB  4
07EE:  CLRF   x97
07F0:  MOVF   x96,F
07F2:  BNZ   07FA
07F4:  MOVF   x95,W
07F6:  SUBWF  x97,W
07F8:  BC    0804
....................       hien_thi_8led_7doan_quet_all(); 
07FA:  MOVLB  0
07FC:  RCALL  06A2
07FE:  MOVLB  4
0800:  INCF   x97,F
0802:  BRA    07F0
0804:  MOVLB  0
0806:  GOTO   22AC (RETURN)
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
2388:  MOVFF  1C,495
238C:  MOVFF  1D,496
....................       xuat_1byte(rbdc2);       
2390:  MOVFF  496,4AC
2394:  CALL   01B8
....................       xuat_1byte(rbdc1); 
2398:  MOVFF  495,4AC
239C:  CALL   01B8
....................       mo_relay_buzzer_dc; 
23A0:  BCF    1A.2
....................       mo_ic_74573_b_thong_dl(); 
23A2:  CALL   05F4
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
23A6:  BCF    F95.3
23A8:  BSF    F8C.3
23AA:  BCF    F95.3
23AC:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
23AE:  BCF    F95.0
23B0:  BCF    F8C.0
23B2:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
*
23BC:  BSF    1D.2
....................       xuat_buzzer_relay();          
23BE:  RCALL  2388
23C0:  GOTO   23FC (RETURN)
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
*
23B4:  BCF    1D.2
....................       xuat_buzzer_relay();          
23B6:  RCALL  2388
23B8:  GOTO   23DE (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
262E:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
2630:  CLRF   34
2632:  CLRF   33
2634:  CLRF   32
2636:  CLRF   31
2638:  CLRF   38
263A:  CLRF   37
263C:  CLRF   36
263E:  MOVLW  01
2640:  MOVWF  35
2642:  MOVLW  80
2644:  MOVWF  3C
2646:  CLRF   3B
2648:  CLRF   3A
264A:  CLRF   39
264C:  CLRF   40
264E:  CLRF   3F
2650:  CLRF   3E
2652:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
2654:  MOVWF  44
2656:  CLRF   43
2658:  CLRF   46
265A:  MOVLW  01
265C:  MOVWF  45
265E:  CLRF   48
2660:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
2662:  MOVLW  80
2664:  MOVWF  4C
2666:  CLRF   4B
2668:  CLRF   4E
266A:  MOVLW  01
266C:  MOVWF  4D
266E:  CLRF   50
2670:  CLRF   4F
....................       zt=zp=0; 
2672:  CLRF   4A
2674:  CLRF   49
2676:  MOVFF  4A,42
267A:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
267E:  MOVLW  20
2680:  MOVWF  54
2682:  CLRF   55
2684:  MOVLW  10
2686:  MOVWF  57
2688:  CLRF   58
....................       dem_led=0; 
268A:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
268C:  CLRF   5C
268E:  CLRF   5B
2690:  CLRF   5A
2692:  MOVLW  01
2694:  MOVWF  59
2696:  CLRF   x60
2698:  CLRF   5F
269A:  CLRF   5E
269C:  MOVWF  5D
269E:  SETF   x64
26A0:  SETF   x63
26A2:  SETF   x62
26A4:  MOVLW  FE
26A6:  MOVWF  x61
26A8:  MOVLW  01
26AA:  MOVWF  x71
26AC:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
26AE:  MOVLW  80
26B0:  MOVWF  x68
26B2:  CLRF   x67
26B4:  CLRF   x66
26B6:  CLRF   x65
26B8:  MOVWF  x6C
26BA:  CLRF   x6B
26BC:  CLRF   x6A
26BE:  CLRF   x69
26C0:  MOVLW  7F
26C2:  MOVWF  x70
26C4:  SETF   x6F
26C6:  SETF   x6E
26C8:  SETF   x6D
....................      tgdlay = 0; 
26CA:  CLRF   52
26CC:  CLRF   51
26CE:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
26EA:  MOVLB  4
26EC:  CLRF   x9A
26EE:  MOVF   x99,W
26F0:  SUBWF  x9A,W
26F2:  BC    2700
....................       hien_thi_8led_7doan_quet_all(); 
26F4:  MOVLB  0
26F6:  CALL   06A2
26FA:  MOVLB  4
26FC:  INCF   x9A,F
26FE:  BRA    26EE
....................       dem_led++; 
2700:  INCF   53,F
2702:  MOVLB  0
2704:  GOTO   2722 (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
26D0:  MOVLB  4
26D2:  MOVF   x99,F
26D4:  BZ    26E2
26D6:  MOVFF  499,49A
26DA:  MOVLB  0
26DC:  CALL   027E
26E0:  MOVLB  4
....................       dem_led++; 
26E2:  INCF   53,F
26E4:  MOVLB  0
26E6:  GOTO   2722 (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
2708:  MOVLB  4
270A:  MOVF   x98,F
270C:  BNZ   271A
270E:  MOVFF  497,499
2712:  MOVLB  0
2714:  BRA    26D0
2716:  MOVLB  0
2718:  BRA    2722
....................    else              tang_dem_led_delay_1(dl); 
271A:  MOVFF  497,499
271E:  MOVLB  0
2720:  BRA    26EA
2722:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
2612:  COMF   31,F
2614:  COMF   32,F
2616:  COMF   33,F
2618:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
261A:  MOVFF  34,49A
261E:  MOVFF  33,499
2622:  MOVFF  32,498
2626:  MOVFF  31,497
262A:  RCALL  25EE
262C:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
2724:  DECFSZ 51,W
2726:  BRA    2740
2728:  MOVF   52,F
272A:  BNZ   2740
272C:  MOVFF  34,49A
2730:  MOVFF  33,499
2734:  MOVFF  32,498
2738:  MOVFF  31,497
273C:  RCALL  25EE
273E:  BRA    2776
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
2740:  MOVF   51,W
2742:  SUBLW  32
2744:  BNZ   274E
2746:  MOVF   52,F
2748:  BNZ   274E
274A:  RCALL  2612
274C:  BRA    2776
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
274E:  MOVF   51,W
2750:  SUBLW  64
2752:  BNZ   275C
2754:  MOVF   52,F
2756:  BNZ   275C
2758:  RCALL  2612
275A:  BRA    2776
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
275C:  MOVF   51,W
275E:  SUBLW  96
2760:  BNZ   276A
2762:  MOVF   52,F
2764:  BNZ   276A
2766:  RCALL  2612
2768:  BRA    2776
....................       else if (tgdlay==200)   
276A:  MOVF   51,W
276C:  SUBLW  C8
276E:  BNZ   2776
2770:  MOVF   52,F
2772:  BNZ   2776
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
2774:  RCALL  262E
....................       } 
....................       tgdlay++; 
2776:  INCF   51,F
2778:  BTFSC  FD8.2
277A:  INCF   52,F
....................       delay_chon(dl,chondelay); 
277C:  MOVFF  495,497
2780:  MOVFF  496,498
2784:  RCALL  2708
2786:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
2788:  MOVF   53,W
278A:  SUBLW  0F
278C:  BNC   27D6
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
278E:  MOVFF  4A,4A0
2792:  MOVFF  49,49F
2796:  MOVFF  42,4A2
279A:  MOVFF  41,4A1
279E:  RCALL  25CA
....................       zp= (zp<<1)+1;  
27A0:  BCF    FD8.0
27A2:  RLCF   49,W
27A4:  MOVLB  4
27A6:  MOVWF  x97
27A8:  RLCF   4A,W
27AA:  MOVWF  x98
27AC:  MOVLW  01
27AE:  ADDWF  x97,W
27B0:  MOVWF  49
27B2:  MOVLW  00
27B4:  ADDWFC x98,W
27B6:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
27B8:  BCF    FD8.0
27BA:  RRCF   42,W
27BC:  MOVWF  x98
27BE:  RRCF   41,W
27C0:  MOVWF  41
27C2:  MOVLW  80
27C4:  ADDWF  x98,W
27C6:  MOVWF  42
....................       delay_chon(dl,chondelay); 
27C8:  MOVFF  495,497
27CC:  MOVFF  496,498
27D0:  MOVLB  0
27D2:  RCALL  2708
....................    } 
27D4:  BRA    2808
....................    else  if (dem_led<32) 
27D6:  MOVF   53,W
27D8:  SUBLW  1F
27DA:  BNC   2806
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
27DC:  MOVFF  4A,4A0
27E0:  MOVFF  49,49F
27E4:  MOVFF  42,4A2
27E8:  MOVFF  41,4A1
27EC:  RCALL  25CA
....................       zp= (zp<<1);  
27EE:  BCF    FD8.0
27F0:  RLCF   49,F
27F2:  RLCF   4A,F
....................       zt= (zt>>1); 
27F4:  BCF    FD8.0
27F6:  RRCF   42,F
27F8:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
27FA:  MOVFF  495,497
27FE:  MOVFF  496,498
2802:  RCALL  2708
....................    } 
2804:  BRA    2808
....................    else reset_toan_bo_bien(); 
2806:  RCALL  262E
2808:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
2910:  MOVF   53,W
2912:  SUBLW  0F
2914:  BNC   2948
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
2916:  MOVFF  4A,4A0
291A:  MOVFF  49,49F
291E:  MOVFF  4A,4A2
2922:  MOVFF  49,4A1
2926:  RCALL  25CA
....................       zp= (zp>>1)+0x8000; 
2928:  BCF    FD8.0
292A:  RRCF   4A,W
292C:  MOVLB  4
292E:  MOVWF  x98
2930:  RRCF   49,W
2932:  MOVWF  49
2934:  MOVLW  80
2936:  ADDWF  x98,W
2938:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
293A:  MOVFF  495,497
293E:  MOVFF  496,498
2942:  MOVLB  0
2944:  RCALL  2708
....................    } 
2946:  BRA    2974
....................    else  if (dem_led<32) 
2948:  MOVF   53,W
294A:  SUBLW  1F
294C:  BNC   2972
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
294E:  MOVFF  4A,4A0
2952:  MOVFF  49,49F
2956:  MOVFF  4A,4A2
295A:  MOVFF  49,4A1
295E:  RCALL  25CA
....................       zp= (zp>>1); 
2960:  BCF    FD8.0
2962:  RRCF   4A,F
2964:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
2966:  MOVFF  495,497
296A:  MOVFF  496,498
296E:  RCALL  2708
....................     } 
2970:  BRA    2974
....................    else reset_toan_bo_bien(); 
2972:  RCALL  262E
2974:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
288C:  MOVF   53,W
288E:  SUBLW  1F
2890:  BNC   28DE
....................    {   
....................       xuat_32led_don_1dw(y); 
2892:  MOVFF  34,49A
2896:  MOVFF  33,499
289A:  MOVFF  32,498
289E:  MOVFF  31,497
28A2:  RCALL  25EE
....................       y= (y<<1)+1; 
28A4:  BCF    FD8.0
28A6:  RLCF   31,W
28A8:  MOVLB  4
28AA:  MOVWF  x98
28AC:  RLCF   32,W
28AE:  MOVWF  x99
28B0:  RLCF   33,W
28B2:  MOVWF  x9A
28B4:  RLCF   34,W
28B6:  MOVWF  x9B
28B8:  MOVLW  01
28BA:  ADDWF  x98,W
28BC:  MOVWF  31
28BE:  MOVLW  00
28C0:  ADDWFC x99,W
28C2:  MOVWF  32
28C4:  MOVLW  00
28C6:  ADDWFC x9A,W
28C8:  MOVWF  33
28CA:  MOVLW  00
28CC:  ADDWFC x9B,W
28CE:  MOVWF  34
....................       delay_chon(dl,chondelay); 
28D0:  MOVFF  495,497
28D4:  MOVFF  496,498
28D8:  MOVLB  0
28DA:  RCALL  2708
....................    } 
28DC:  BRA    290E
....................    else  if (dem_led<64) 
28DE:  MOVF   53,W
28E0:  SUBLW  3F
28E2:  BNC   290C
....................    {   
....................       xuat_32led_don_1dw(y);    
28E4:  MOVFF  34,49A
28E8:  MOVFF  33,499
28EC:  MOVFF  32,498
28F0:  MOVFF  31,497
28F4:  RCALL  25EE
....................       y= (y<<1);  
28F6:  BCF    FD8.0
28F8:  RLCF   31,F
28FA:  RLCF   32,F
28FC:  RLCF   33,F
28FE:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
2900:  MOVFF  495,497
2904:  MOVFF  496,498
2908:  RCALL  2708
....................    }  
290A:  BRA    290E
....................    else reset_toan_bo_bien(); 
290C:  RCALL  262E
290E:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
2976:  MOVF   53,W
2978:  SUBLW  1F
297A:  BNC   29BE
....................       {   
....................          xuat_32led_don_1dw(y); 
297C:  MOVFF  34,49A
2980:  MOVFF  33,499
2984:  MOVFF  32,498
2988:  MOVFF  31,497
298C:  RCALL  25EE
....................          y= (y>>1)+0x80000000;  
298E:  BCF    FD8.0
2990:  RRCF   34,W
2992:  MOVLB  4
2994:  MOVWF  x9B
2996:  RRCF   33,W
2998:  MOVWF  x9A
299A:  RRCF   32,W
299C:  MOVWF  x99
299E:  RRCF   31,W
29A0:  MOVWF  31
29A2:  MOVFF  499,32
29A6:  MOVFF  49A,33
29AA:  MOVLW  80
29AC:  ADDWF  x9B,W
29AE:  MOVWF  34
....................          delay_chon(dl,chondelay);       
29B0:  MOVFF  495,497
29B4:  MOVFF  496,498
29B8:  MOVLB  0
29BA:  RCALL  2708
....................       } 
29BC:  BRA    29EE
....................       else 
....................       if (dem_led<64) 
29BE:  MOVF   53,W
29C0:  SUBLW  3F
29C2:  BNC   29EC
....................       {   
....................          xuat_32led_don_1dw(y);  
29C4:  MOVFF  34,49A
29C8:  MOVFF  33,499
29CC:  MOVFF  32,498
29D0:  MOVFF  31,497
29D4:  RCALL  25EE
....................          y= (y>>1); 
29D6:  BCF    FD8.0
29D8:  RRCF   34,F
29DA:  RRCF   33,F
29DC:  RRCF   32,F
29DE:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
29E0:  MOVFF  495,497
29E4:  MOVFF  496,498
29E8:  RCALL  2708
....................       }  
29EA:  BRA    29EE
....................       else reset_toan_bo_bien(); 
29EC:  RCALL  262E
29EE:  GOTO   2DC2 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
280A:  BTFSC  54.7
280C:  BRA    2888
280E:  MOVF   54,W
2810:  SUBLW  00
2812:  BC    2888
....................    { 
....................       if(j32<i32) 
2814:  MOVF   55,W
2816:  XORLW  80
2818:  MOVWF  00
281A:  MOVF   54,W
281C:  XORLW  80
281E:  SUBWF  00,W
2820:  BC    2862
....................       { 
....................          y = y_codinh|yp_chay; 
2822:  MOVF   3D,W
2824:  IORWF  35,W
2826:  MOVWF  31
2828:  MOVF   3E,W
282A:  IORWF  36,W
282C:  MOVWF  32
282E:  MOVF   3F,W
2830:  IORWF  37,W
2832:  MOVWF  33
2834:  MOVF   40,W
2836:  IORWF  38,W
2838:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
283A:  MOVFF  34,49A
283E:  MOVFF  33,499
2842:  MOVFF  32,498
2846:  MOVFF  31,497
284A:  RCALL  25EE
....................          delay_chon(dl,chondelay);        
284C:  MOVFF  495,497
2850:  MOVFF  496,498
2854:  RCALL  2708
....................          yp_chay = yp_chay <<1; 
2856:  BCF    FD8.0
2858:  RLCF   35,F
285A:  RLCF   36,F
285C:  RLCF   37,F
285E:  RLCF   38,F
....................          j32++; 
2860:  INCF   55,F
....................       } 
....................       if (j32==i32)  
2862:  MOVF   54,W
2864:  SUBWF  55,W
2866:  BNZ   2886
....................       { 
....................          i32--; 
2868:  DECF   54,F
....................          j32=0;          
286A:  CLRF   55
....................          y_codinh=y; 
286C:  MOVFF  34,40
2870:  MOVFF  33,3F
2874:  MOVFF  32,3E
2878:  MOVFF  31,3D
....................          yp_chay = 1; 
287C:  CLRF   38
287E:  CLRF   37
2880:  CLRF   36
2882:  MOVLW  01
2884:  MOVWF  35
....................       } 
....................    } 
2886:  BRA    288A
....................    else reset_toan_bo_bien(); 
2888:  RCALL  262E
288A:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
0252:  BSF    x73.0
0254:  MOVFF  73,4AA
0258:  MOVFF  4A9,4AB
025C:  RCALL  023E
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
025E:  BCF    x73.0
0260:  MOVFF  73,4AA
0264:  MOVFF  4A9,4AB
0268:  RCALL  023E
026A:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
026C:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
026E:  MOVFF  49B,4A9
0272:  RCALL  0252
....................       delay_us(20); 
0274:  MOVLW  21
0276:  MOVWF  00
0278:  DECFSZ 00,F
027A:  BRA    0278
027C:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0396:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0398:  MOVFF  4A8,4A9
039C:  RCALL  0252
....................       delay_us(20); 
039E:  MOVLW  21
03A0:  MOVWF  00
03A2:  DECFSZ 00,F
03A4:  BRA    03A2
03A6:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
02A6:  BCF    x73.0
....................          lcd_rw = 0;  
02A8:  BCF    x73.1
....................          lcd_rs = 1;  
02AA:  BSF    x73.2
....................          lcd_p =0; 
02AC:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
02AE:  MOVLW  38
02B0:  MOVLB  4
02B2:  MOVWF  x9B
02B4:  MOVLB  0
02B6:  RCALL  026C
....................          delay_us(40); 
02B8:  MOVLW  42
02BA:  MOVWF  00
02BC:  DECFSZ 00,F
02BE:  BRA    02BC
02C0:  NOP   
....................          lcd_command(lcd_display_control);    
02C2:  MOVLW  0C
02C4:  MOVLB  4
02C6:  MOVWF  x9B
02C8:  MOVLB  0
02CA:  RCALL  026C
....................          delay_us(40); 
02CC:  MOVLW  42
02CE:  MOVWF  00
02D0:  DECFSZ 00,F
02D2:  BRA    02D0
02D4:  NOP   
....................          lcd_command(lcd_clear_display);       
02D6:  MOVLW  01
02D8:  MOVLB  4
02DA:  MOVWF  x9B
02DC:  MOVLB  0
02DE:  RCALL  026C
....................          delay_ms(2); 
02E0:  MOVLW  02
02E2:  MOVLB  4
02E4:  MOVWF  x9A
02E6:  MOVLB  0
02E8:  RCALL  027E
....................          lcd_command(lcd_entry_mode);        
02EA:  MOVLW  06
02EC:  MOVLB  4
02EE:  MOVWF  x9B
02F0:  MOVLB  0
02F2:  RCALL  026C
....................          delay_us(40);                 
02F4:  MOVLW  42
02F6:  MOVWF  00
02F8:  DECFSZ 00,F
02FA:  BRA    02F8
02FC:  NOP   
02FE:  GOTO   2BD0 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0316:  BSF    x74.2
0318:  MOVFF  74,498
031C:  MOVFF  497,499
0320:  RCALL  0302
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
0322:  BCF    x74.2
0324:  MOVFF  74,498
0328:  MOVFF  497,499
032C:  RCALL  0302
032E:  GOTO   033A (RETURN)
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
0332:  BCF    x74.4
....................       glcd_xuat_8bit(glcd_data2);       
0334:  MOVFF  496,497
0338:  BRA    0316
033A:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(glcd_data3);      
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
033C:  BSF    x74.0
....................          glcd_cs2 = 1; 
033E:  BSF    x74.1
....................          glcd_e  = 0; 
0340:  BCF    x74.2
....................          glcd_rw = 0;           
0342:  BCF    x74.3
....................          glcd_p =0;          
0344:  BCF    x74.5
....................          glcd_command(glcd_function_set_mode);          
0346:  MOVFF  495,496
034A:  RCALL  0332
....................          delay_us(10); 
034C:  MOVLW  10
034E:  MOVWF  00
0350:  DECFSZ 00,F
0352:  BRA    0350
0354:  NOP   
....................          glcd_command(glcd_cursor_display);        
0356:  MOVLW  0C
0358:  MOVLB  4
035A:  MOVWF  x96
035C:  MOVLB  0
035E:  RCALL  0332
....................          delay_us(10);     
0360:  MOVLW  10
0362:  MOVWF  00
0364:  DECFSZ 00,F
0366:  BRA    0364
0368:  NOP   
....................          glcd_command(glcd_clear_display);       
036A:  MOVLW  01
036C:  MOVLB  4
036E:  MOVWF  x96
0370:  MOVLB  0
0372:  RCALL  0332
....................          delay_ms(2); 
0374:  MOVLW  02
0376:  MOVLB  4
0378:  MOVWF  x9A
037A:  MOVLB  0
037C:  RCALL  027E
....................          glcd_command(glcd_entry_mode);       
037E:  MOVLW  06
0380:  MOVLB  4
0382:  MOVWF  x96
0384:  MOVLB  0
0386:  RCALL  0332
....................          delay_us(10);                           
0388:  MOVLW  10
038A:  MOVWF  00
038C:  DECFSZ 00,F
038E:  BRA    038C
0390:  NOP   
0392:  GOTO   2BDC (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
....................   for (doc=0; doc < glcd_doc; doc++)  
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
....................     }  
....................   }  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
....................   doc = y;  
....................   ngang = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
....................       }  
....................     }  
....................     gdram_vdk.refresh = false;  
....................   }  
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
0E08:  MOVLB  4
0E0A:  BCF    xC4.0
....................    y = x; 
0E0C:  MOVFF  4B8,4BD
0E10:  MOVFF  4B7,4BC
0E14:  MOVFF  4B6,4BB
0E18:  MOVFF  4B5,4BA
....................  
....................    if (x < 0) 
0E1C:  MOVFF  4B8,4C8
0E20:  MOVFF  4B7,4C7
0E24:  MOVFF  4B6,4C6
0E28:  MOVFF  4B5,4C5
0E2C:  CLRF   xCC
0E2E:  CLRF   xCB
0E30:  CLRF   xCA
0E32:  CLRF   xC9
0E34:  MOVLB  0
0E36:  RCALL  0886
0E38:  BNC   0E46
....................    { 
....................       s = 1; 
0E3A:  MOVLB  4
0E3C:  BSF    xC4.0
....................       y = -y; 
0E3E:  MOVF   xBB,W
0E40:  XORLW  80
0E42:  MOVWF  xBB
0E44:  MOVLB  0
....................    } 
....................  
....................    if (y <= 32768.0) 
0E46:  MOVFF  4BD,4C8
0E4A:  MOVFF  4BC,4C7
0E4E:  MOVFF  4BB,4C6
0E52:  MOVFF  4BA,4C5
0E56:  MOVLB  4
0E58:  CLRF   xCC
0E5A:  CLRF   xCB
0E5C:  CLRF   xCA
0E5E:  MOVLW  8E
0E60:  MOVWF  xC9
0E62:  MOVLB  0
0E64:  RCALL  0886
0E66:  BC    0E6A
0E68:  BNZ   0E98
....................       res = (float32)(unsigned int16)y; 
0E6A:  MOVFF  4BD,4C8
0E6E:  MOVFF  4BC,4C7
0E72:  MOVFF  4BB,4C6
0E76:  MOVFF  4BA,4C5
0E7A:  RCALL  0A5E
0E7C:  MOVFF  02,4CA
0E80:  MOVFF  01,4C9
0E84:  RCALL  0850
0E86:  MOVFF  03,4C1
0E8A:  MOVFF  02,4C0
0E8E:  MOVFF  01,4BF
0E92:  MOVFF  00,4BE
0E96:  BRA    1026
....................  
....................  else if (y < 10000000.0) 
0E98:  MOVFF  4BD,4C8
0E9C:  MOVFF  4BC,4C7
0EA0:  MOVFF  4BB,4C6
0EA4:  MOVFF  4BA,4C5
0EA8:  MOVLW  80
0EAA:  MOVLB  4
0EAC:  MOVWF  xCC
0EAE:  MOVLW  96
0EB0:  MOVWF  xCB
0EB2:  MOVLW  18
0EB4:  MOVWF  xCA
0EB6:  MOVLW  96
0EB8:  MOVWF  xC9
0EBA:  MOVLB  0
0EBC:  RCALL  0886
0EBE:  BTFSS  FD8.0
0EC0:  BRA    1016
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
0EC2:  MOVFF  4BD,4C8
0EC6:  MOVFF  4BC,4C7
0ECA:  MOVFF  4BB,4C6
0ECE:  MOVFF  4BA,4C5
0ED2:  MOVLB  4
0ED4:  CLRF   xCC
0ED6:  CLRF   xCB
0ED8:  CLRF   xCA
0EDA:  MOVLW  70
0EDC:  MOVWF  xC9
0EDE:  MOVLB  0
0EE0:  RCALL  0A9A
0EE2:  MOVFF  03,4C8
0EE6:  MOVFF  02,4C7
0EEA:  MOVFF  01,4C6
0EEE:  MOVFF  00,4C5
0EF2:  RCALL  0A5E
0EF4:  MOVFF  02,4C3
0EF8:  MOVFF  01,4C2
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
0EFC:  MOVFF  4BD,4C8
0F00:  MOVFF  4BC,4C7
0F04:  MOVFF  4BB,4C6
0F08:  MOVFF  4BA,4C5
0F0C:  MOVLB  4
0F0E:  CLRF   xCC
0F10:  CLRF   xCB
0F12:  CLRF   xCA
0F14:  MOVLW  70
0F16:  MOVWF  xC9
0F18:  MOVLB  0
0F1A:  RCALL  0A9A
0F1C:  MOVFF  03,4C8
0F20:  MOVFF  02,4C7
0F24:  MOVFF  01,4C6
0F28:  MOVFF  00,4C5
0F2C:  MOVFF  4C3,4CA
0F30:  MOVFF  4C2,4C9
0F34:  RCALL  0850
0F36:  BSF    FD8.1
0F38:  MOVFF  4C8,4CC
0F3C:  MOVFF  4C7,4CB
0F40:  MOVFF  4C6,4CA
0F44:  MOVFF  4C5,4C9
0F48:  MOVFF  03,4D0
0F4C:  MOVFF  02,4CF
0F50:  MOVFF  01,4CE
0F54:  MOVFF  00,4CD
0F58:  RCALL  0B90
0F5A:  MOVLB  4
0F5C:  CLRF   xC8
0F5E:  CLRF   xC7
0F60:  CLRF   xC6
0F62:  MOVLW  8E
0F64:  MOVWF  xC5
0F66:  MOVFF  03,4CC
0F6A:  MOVFF  02,4CB
0F6E:  MOVFF  01,4CA
0F72:  MOVFF  00,4C9
0F76:  MOVLB  0
0F78:  RCALL  0A9A
0F7A:  MOVFF  03,4BD
0F7E:  MOVFF  02,4BC
0F82:  MOVFF  01,4BB
0F86:  MOVFF  00,4BA
....................       res = 32768.0*(float32)l; 
0F8A:  MOVFF  4C3,4CA
0F8E:  MOVFF  4C2,4C9
0F92:  RCALL  0850
0F94:  MOVLB  4
0F96:  CLRF   xC8
0F98:  CLRF   xC7
0F9A:  CLRF   xC6
0F9C:  MOVLW  8E
0F9E:  MOVWF  xC5
0FA0:  MOVFF  03,4CC
0FA4:  MOVFF  02,4CB
0FA8:  MOVFF  01,4CA
0FAC:  MOVFF  00,4C9
0FB0:  MOVLB  0
0FB2:  RCALL  0A9A
0FB4:  MOVFF  03,4C1
0FB8:  MOVFF  02,4C0
0FBC:  MOVFF  01,4BF
0FC0:  MOVFF  00,4BE
....................       res += (float32)(unsigned int16)y; 
0FC4:  MOVFF  4BD,4C8
0FC8:  MOVFF  4BC,4C7
0FCC:  MOVFF  4BB,4C6
0FD0:  MOVFF  4BA,4C5
0FD4:  RCALL  0A5E
0FD6:  MOVFF  02,4CA
0FDA:  MOVFF  01,4C9
0FDE:  RCALL  0850
0FE0:  BCF    FD8.1
0FE2:  MOVFF  4C1,4CC
0FE6:  MOVFF  4C0,4CB
0FEA:  MOVFF  4BF,4CA
0FEE:  MOVFF  4BE,4C9
0FF2:  MOVFF  03,4D0
0FF6:  MOVFF  02,4CF
0FFA:  MOVFF  01,4CE
0FFE:  MOVFF  00,4CD
1002:  RCALL  0B90
1004:  MOVFF  03,4C1
1008:  MOVFF  02,4C0
100C:  MOVFF  01,4BF
1010:  MOVFF  00,4BE
....................    } 
1014:  BRA    1026
....................  
....................  else 
....................   res = y; 
1016:  MOVFF  4BD,4C1
101A:  MOVFF  4BC,4C0
101E:  MOVFF  4BB,4BF
1022:  MOVFF  4BA,4BE
....................  
....................  y = y - (float32)(unsigned int16)y; 
1026:  MOVFF  4BD,4C8
102A:  MOVFF  4BC,4C7
102E:  MOVFF  4BB,4C6
1032:  MOVFF  4BA,4C5
1036:  RCALL  0A5E
1038:  MOVFF  02,4CA
103C:  MOVFF  01,4C9
1040:  RCALL  0850
1042:  BSF    FD8.1
1044:  MOVFF  4BD,4CC
1048:  MOVFF  4BC,4CB
104C:  MOVFF  4BB,4CA
1050:  MOVFF  4BA,4C9
1054:  MOVFF  03,4D0
1058:  MOVFF  02,4CF
105C:  MOVFF  01,4CE
1060:  MOVFF  00,4CD
1064:  RCALL  0B90
1066:  MOVFF  03,4BD
106A:  MOVFF  02,4BC
106E:  MOVFF  01,4BB
1072:  MOVFF  00,4BA
....................  
....................  if (s) 
1076:  MOVLB  4
1078:  BTFSS  xC4.0
107A:  BRA    1082
....................   res = -res; 
107C:  MOVF   xBF,W
107E:  XORLW  80
1080:  MOVWF  xBF
....................  
....................  if (y != 0) 
1082:  MOVFF  4BD,4C8
1086:  MOVFF  4BC,4C7
108A:  MOVFF  4BB,4C6
108E:  MOVFF  4BA,4C5
1092:  CLRF   xCC
1094:  CLRF   xCB
1096:  CLRF   xCA
1098:  CLRF   xC9
109A:  MOVLB  0
109C:  CALL   0886
10A0:  BZ    1116
....................  { 
....................   if (s == 1 && n == 0) 
10A2:  MOVLB  4
10A4:  BTFSS  xC4.0
10A6:  BRA    10DE
10A8:  MOVF   xB9,F
10AA:  BNZ   10DE
....................    res -= 1.0; 
10AC:  BSF    FD8.1
10AE:  MOVFF  4C1,4CC
10B2:  MOVFF  4C0,4CB
10B6:  MOVFF  4BF,4CA
10BA:  MOVFF  4BE,4C9
10BE:  CLRF   xD0
10C0:  CLRF   xCF
10C2:  CLRF   xCE
10C4:  MOVLW  7F
10C6:  MOVWF  xCD
10C8:  MOVLB  0
10CA:  RCALL  0B90
10CC:  MOVFF  03,4C1
10D0:  MOVFF  02,4C0
10D4:  MOVFF  01,4BF
10D8:  MOVFF  00,4BE
10DC:  MOVLB  4
....................  
....................   if (s == 0 && n == 1) 
10DE:  BTFSC  xC4.0
10E0:  BRA    1118
10E2:  DECFSZ xB9,W
10E4:  BRA    1118
....................    res += 1.0; 
10E6:  BCF    FD8.1
10E8:  MOVFF  4C1,4CC
10EC:  MOVFF  4C0,4CB
10F0:  MOVFF  4BF,4CA
10F4:  MOVFF  4BE,4C9
10F8:  CLRF   xD0
10FA:  CLRF   xCF
10FC:  CLRF   xCE
10FE:  MOVLW  7F
1100:  MOVWF  xCD
1102:  MOVLB  0
1104:  RCALL  0B90
1106:  MOVFF  03,4C1
110A:  MOVFF  02,4C0
110E:  MOVFF  01,4BF
1112:  MOVFF  00,4BE
1116:  MOVLB  4
....................  } 
....................  if (x == 0) 
1118:  MOVFF  4B8,4C8
111C:  MOVFF  4B7,4C7
1120:  MOVFF  4B6,4C6
1124:  MOVFF  4B5,4C5
1128:  CLRF   xCC
112A:  CLRF   xCB
112C:  CLRF   xCA
112E:  CLRF   xC9
1130:  MOVLB  0
1132:  CALL   0886
1136:  BNZ   1144
....................     res = 0; 
1138:  MOVLB  4
113A:  CLRF   xC1
113C:  CLRF   xC0
113E:  CLRF   xBF
1140:  CLRF   xBE
1142:  MOVLB  0
....................  
....................  return (res); 
1144:  MOVFF  4BE,00
1148:  MOVFF  4BF,01
114C:  MOVFF  4C0,02
1150:  MOVFF  4C1,03
1154:  RETURN 0
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
*
1174:  MOVFF  4B4,4B8
1178:  MOVFF  4B3,4B7
117C:  MOVFF  4B2,4B6
1180:  MOVFF  4B1,4B5
1184:  MOVLB  4
1186:  CLRF   xB9
1188:  MOVLB  0
118A:  RCALL  0E08
118C:  GOTO   1298 (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
1156:  MOVFF  4B4,4B8
115A:  MOVFF  4B3,4B7
115E:  MOVFF  4B2,4B6
1162:  MOVFF  4B1,4B5
1166:  MOVLW  01
1168:  MOVLB  4
116A:  MOVWF  xB9
116C:  MOVLB  0
116E:  RCALL  0E08
1170:  GOTO   1250 (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
1190:  MOVFF  4A8,4C8
1194:  MOVFF  4A7,4C7
1198:  MOVFF  4A6,4C6
119C:  MOVFF  4A5,4C5
11A0:  MOVLB  4
11A2:  CLRF   xCC
11A4:  CLRF   xCB
11A6:  CLRF   xCA
11A8:  CLRF   xC9
11AA:  MOVLB  0
11AC:  CALL   0886
11B0:  BTFSC  FD8.2
11B2:  BRA    12F2
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
11B4:  MOVFF  4A4,4C1
11B8:  MOVFF  4A3,4C0
11BC:  MOVFF  4A2,4BF
11C0:  MOVFF  4A1,4BE
11C4:  MOVFF  4A8,4C5
11C8:  MOVFF  4A7,4C4
11CC:  MOVFF  4A6,4C3
11D0:  MOVFF  4A5,4C2
11D4:  CALL   0900
11D8:  MOVFF  03,4B0
11DC:  MOVFF  02,4AF
11E0:  MOVFF  01,4AE
11E4:  MOVFF  00,4AD
11E8:  MOVFF  03,4C8
11EC:  MOVFF  02,4C7
11F0:  MOVFF  01,4C6
11F4:  MOVFF  00,4C5
11F8:  MOVLB  4
11FA:  CLRF   xCC
11FC:  CLRF   xCB
11FE:  CLRF   xCA
1200:  CLRF   xC9
1202:  MOVLB  0
1204:  CALL   0886
1208:  BNC   1252
120A:  MOVFF  4A4,4C1
120E:  MOVFF  4A3,4C0
1212:  MOVFF  4A2,4BF
1216:  MOVFF  4A1,4BE
121A:  MOVFF  4A8,4C5
121E:  MOVFF  4A7,4C4
1222:  MOVFF  4A6,4C3
1226:  MOVFF  4A5,4C2
122A:  CALL   0900
122E:  MOVFF  03,4B0
1232:  MOVFF  02,4AF
1236:  MOVFF  01,4AE
123A:  MOVFF  00,4AD
123E:  MOVFF  03,4B4
1242:  MOVFF  02,4B3
1246:  MOVFF  01,4B2
124A:  MOVFF  00,4B1
124E:  BRA    1156
1250:  BRA    1298
1252:  MOVFF  4A4,4C1
1256:  MOVFF  4A3,4C0
125A:  MOVFF  4A2,4BF
125E:  MOVFF  4A1,4BE
1262:  MOVFF  4A8,4C5
1266:  MOVFF  4A7,4C4
126A:  MOVFF  4A6,4C3
126E:  MOVFF  4A5,4C2
1272:  CALL   0900
1276:  MOVFF  03,4B0
127A:  MOVFF  02,4AF
127E:  MOVFF  01,4AE
1282:  MOVFF  00,4AD
1286:  MOVFF  03,4B4
128A:  MOVFF  02,4B3
128E:  MOVFF  01,4B2
1292:  MOVFF  00,4B1
1296:  BRA    1174
1298:  MOVFF  03,4AC
129C:  MOVFF  02,4AB
12A0:  MOVFF  01,4AA
12A4:  MOVFF  00,4A9
....................       return(x-(i*y)); 
12A8:  MOVFF  4AC,4C8
12AC:  MOVFF  4AB,4C7
12B0:  MOVFF  4AA,4C6
12B4:  MOVFF  4A9,4C5
12B8:  MOVFF  4A8,4CC
12BC:  MOVFF  4A7,4CB
12C0:  MOVFF  4A6,4CA
12C4:  MOVFF  4A5,4C9
12C8:  CALL   0A9A
12CC:  BSF    FD8.1
12CE:  MOVFF  4A4,4CC
12D2:  MOVFF  4A3,4CB
12D6:  MOVFF  4A2,4CA
12DA:  MOVFF  4A1,4C9
12DE:  MOVFF  03,4D0
12E2:  MOVFF  02,4CF
12E6:  MOVFF  01,4CE
12EA:  MOVFF  00,4CD
12EE:  RCALL  0B90
12F0:  BRA    12F2
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
12F2:  RETURN 0
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
*
16DC:  MOVFF  4A8,4C8
16E0:  MOVFF  4A7,4C7
16E4:  MOVFF  4A6,4C6
16E8:  MOVFF  4A5,4C5
16EC:  MOVLW  3B
16EE:  MOVLB  4
16F0:  MOVWF  xCC
16F2:  MOVLW  AA
16F4:  MOVWF  xCB
16F6:  MOVLW  38
16F8:  MOVWF  xCA
16FA:  MOVLW  7F
16FC:  MOVWF  xC9
16FE:  MOVLB  0
1700:  CALL   0A9A
1704:  MOVFF  03,4C8
1708:  MOVFF  02,4C7
170C:  MOVFF  01,4C6
1710:  MOVFF  00,4C5
1714:  CALL   0A5E
1718:  MOVFF  01,4B5
....................    s = 0; 
171C:  MOVLB  4
171E:  BCF    xB6.0
....................    y = x; 
1720:  MOVFF  4A8,4AC
1724:  MOVFF  4A7,4AB
1728:  MOVFF  4A6,4AA
172C:  MOVFF  4A5,4A9
....................  
....................    if (x < 0) 
1730:  MOVFF  4A8,4C8
1734:  MOVFF  4A7,4C7
1738:  MOVFF  4A6,4C6
173C:  MOVFF  4A5,4C5
1740:  CLRF   xCC
1742:  CLRF   xCB
1744:  CLRF   xCA
1746:  CLRF   xC9
1748:  MOVLB  0
174A:  CALL   0886
174E:  BNC   175E
....................    { 
....................       s = 1; 
1750:  MOVLB  4
1752:  BSF    xB6.0
....................       n = -n; 
1754:  NEGF   xB5
....................       y = -y; 
1756:  MOVF   xAA,W
1758:  XORLW  80
175A:  MOVWF  xAA
175C:  MOVLB  0
....................    } 
....................  
....................    res = 0.0; 
175E:  MOVLB  4
1760:  CLRF   xB0
1762:  CLRF   xAF
1764:  CLRF   xAE
1766:  CLRF   xAD
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
1768:  MOVLW  04
176A:  MOVWF  xB8
176C:  MOVLW  AD
176E:  MOVFF  4B8,03
1772:  MOVWF  FE9
1774:  MOVFF  03,FEA
1778:  MOVLW  7F
177A:  ADDWF  xB5,W
177C:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
177E:  MOVFF  4AC,4C8
1782:  MOVFF  4AB,4C7
1786:  MOVFF  4AA,4C6
178A:  MOVFF  4A9,4C5
178E:  MOVLW  3B
1790:  MOVWF  xCC
1792:  MOVLW  AA
1794:  MOVWF  xCB
1796:  MOVLW  38
1798:  MOVWF  xCA
179A:  MOVLW  7F
179C:  MOVWF  xC9
179E:  MOVLB  0
17A0:  CALL   0A9A
17A4:  MOVFF  03,4BA
17A8:  MOVFF  02,4B9
17AC:  MOVFF  01,4B8
17B0:  MOVFF  00,4B7
17B4:  MOVLB  4
17B6:  CLRF   xBC
17B8:  MOVFF  4B5,4BB
17BC:  BTFSC  xBB.7
17BE:  DECF   xBC,F
17C0:  MOVLB  0
17C2:  RCALL  12F4
17C4:  BSF    FD8.1
17C6:  MOVFF  4BA,4CC
17CA:  MOVFF  4B9,4CB
17CE:  MOVFF  4B8,4CA
17D2:  MOVFF  4B7,4C9
17D6:  MOVFF  03,4D0
17DA:  MOVFF  02,4CF
17DE:  MOVFF  01,4CE
17E2:  MOVFF  00,4CD
17E6:  CALL   0B90
17EA:  MOVFF  03,4AC
17EE:  MOVFF  02,4AB
17F2:  MOVFF  01,4AA
17F6:  MOVFF  00,4A9
....................  
....................    r = pe[0]*y + pe[1]; 
17FA:  MOVLW  7C
17FC:  MOVLB  4
17FE:  MOVWF  xC8
1800:  MOVLW  88
1802:  MOVWF  xC7
1804:  MOVLW  59
1806:  MOVWF  xC6
1808:  MOVLW  72
180A:  MOVWF  xC5
180C:  MOVFF  4AC,4CC
1810:  MOVFF  4AB,4CB
1814:  MOVFF  4AA,4CA
1818:  MOVFF  4A9,4C9
181C:  MOVLB  0
181E:  CALL   0A9A
1822:  MOVFF  03,4BA
1826:  MOVFF  02,4B9
182A:  MOVFF  01,4B8
182E:  MOVFF  00,4B7
1832:  BCF    FD8.1
1834:  MOVFF  03,4CC
1838:  MOVFF  02,4CB
183C:  MOVFF  01,4CA
1840:  MOVFF  00,4C9
1844:  MOVLW  E0
1846:  MOVLB  4
1848:  MOVWF  xD0
184A:  MOVLW  97
184C:  MOVWF  xCF
184E:  MOVLW  26
1850:  MOVWF  xCE
1852:  MOVLW  75
1854:  MOVWF  xCD
1856:  MOVLB  0
1858:  CALL   0B90
185C:  MOVFF  03,4B4
1860:  MOVFF  02,4B3
1864:  MOVFF  01,4B2
1868:  MOVFF  00,4B1
....................    r = r*y + pe[2]; 
186C:  MOVFF  4B4,4C8
1870:  MOVFF  4B3,4C7
1874:  MOVFF  4B2,4C6
1878:  MOVFF  4B1,4C5
187C:  MOVFF  4AC,4CC
1880:  MOVFF  4AB,4CB
1884:  MOVFF  4AA,4CA
1888:  MOVFF  4A9,4C9
188C:  CALL   0A9A
1890:  MOVFF  03,4BA
1894:  MOVFF  02,4B9
1898:  MOVFF  01,4B8
189C:  MOVFF  00,4B7
18A0:  BCF    FD8.1
18A2:  MOVFF  03,4CC
18A6:  MOVFF  02,4CB
18AA:  MOVFF  01,4CA
18AE:  MOVFF  00,4C9
18B2:  MOVLW  C4
18B4:  MOVLB  4
18B6:  MOVWF  xD0
18B8:  MOVLW  1D
18BA:  MOVWF  xCF
18BC:  MOVLW  1E
18BE:  MOVWF  xCE
18C0:  MOVLW  78
18C2:  MOVWF  xCD
18C4:  MOVLB  0
18C6:  CALL   0B90
18CA:  MOVFF  03,4B4
18CE:  MOVFF  02,4B3
18D2:  MOVFF  01,4B2
18D6:  MOVFF  00,4B1
....................    r = r*y + pe[3]; 
18DA:  MOVFF  4B4,4C8
18DE:  MOVFF  4B3,4C7
18E2:  MOVFF  4B2,4C6
18E6:  MOVFF  4B1,4C5
18EA:  MOVFF  4AC,4CC
18EE:  MOVFF  4AB,4CB
18F2:  MOVFF  4AA,4CA
18F6:  MOVFF  4A9,4C9
18FA:  CALL   0A9A
18FE:  MOVFF  03,4BA
1902:  MOVFF  02,4B9
1906:  MOVFF  01,4B8
190A:  MOVFF  00,4B7
190E:  BCF    FD8.1
1910:  MOVFF  03,4CC
1914:  MOVFF  02,4CB
1918:  MOVFF  01,4CA
191C:  MOVFF  00,4C9
1920:  MOVLW  5E
1922:  MOVLB  4
1924:  MOVWF  xD0
1926:  MOVLW  50
1928:  MOVWF  xCF
192A:  MOVLW  63
192C:  MOVWF  xCE
192E:  MOVLW  7A
1930:  MOVWF  xCD
1932:  MOVLB  0
1934:  CALL   0B90
1938:  MOVFF  03,4B4
193C:  MOVFF  02,4B3
1940:  MOVFF  01,4B2
1944:  MOVFF  00,4B1
....................    r = r*y + pe[4]; 
1948:  MOVFF  4B4,4C8
194C:  MOVFF  4B3,4C7
1950:  MOVFF  4B2,4C6
1954:  MOVFF  4B1,4C5
1958:  MOVFF  4AC,4CC
195C:  MOVFF  4AB,4CB
1960:  MOVFF  4AA,4CA
1964:  MOVFF  4A9,4C9
1968:  CALL   0A9A
196C:  MOVFF  03,4BA
1970:  MOVFF  02,4B9
1974:  MOVFF  01,4B8
1978:  MOVFF  00,4B7
197C:  BCF    FD8.1
197E:  MOVFF  03,4CC
1982:  MOVFF  02,4CB
1986:  MOVFF  01,4CA
198A:  MOVFF  00,4C9
198E:  MOVLW  1A
1990:  MOVLB  4
1992:  MOVWF  xD0
1994:  MOVLW  FE
1996:  MOVWF  xCF
1998:  MOVLW  75
199A:  MOVWF  xCE
199C:  MOVLW  7C
199E:  MOVWF  xCD
19A0:  MOVLB  0
19A2:  CALL   0B90
19A6:  MOVFF  03,4B4
19AA:  MOVFF  02,4B3
19AE:  MOVFF  01,4B2
19B2:  MOVFF  00,4B1
....................    r = r*y + pe[5]; 
19B6:  MOVFF  4B4,4C8
19BA:  MOVFF  4B3,4C7
19BE:  MOVFF  4B2,4C6
19C2:  MOVFF  4B1,4C5
19C6:  MOVFF  4AC,4CC
19CA:  MOVFF  4AB,4CB
19CE:  MOVFF  4AA,4CA
19D2:  MOVFF  4A9,4C9
19D6:  CALL   0A9A
19DA:  MOVFF  03,4BA
19DE:  MOVFF  02,4B9
19E2:  MOVFF  01,4B8
19E6:  MOVFF  00,4B7
19EA:  BCF    FD8.1
19EC:  MOVFF  03,4CC
19F0:  MOVFF  02,4CB
19F4:  MOVFF  01,4CA
19F8:  MOVFF  00,4C9
19FC:  MOVLW  18
19FE:  MOVLB  4
1A00:  MOVWF  xD0
1A02:  MOVLW  72
1A04:  MOVWF  xCF
1A06:  MOVLW  31
1A08:  MOVWF  xCE
1A0A:  MOVLW  7E
1A0C:  MOVWF  xCD
1A0E:  MOVLB  0
1A10:  CALL   0B90
1A14:  MOVFF  03,4B4
1A18:  MOVFF  02,4B3
1A1C:  MOVFF  01,4B2
1A20:  MOVFF  00,4B1
....................  
....................    res = res*(1.0 + y*r); 
1A24:  MOVFF  4AC,4C8
1A28:  MOVFF  4AB,4C7
1A2C:  MOVFF  4AA,4C6
1A30:  MOVFF  4A9,4C5
1A34:  MOVFF  4B4,4CC
1A38:  MOVFF  4B3,4CB
1A3C:  MOVFF  4B2,4CA
1A40:  MOVFF  4B1,4C9
1A44:  CALL   0A9A
1A48:  BCF    FD8.1
1A4A:  MOVLB  4
1A4C:  CLRF   xCC
1A4E:  CLRF   xCB
1A50:  CLRF   xCA
1A52:  MOVLW  7F
1A54:  MOVWF  xC9
1A56:  MOVFF  03,4D0
1A5A:  MOVFF  02,4CF
1A5E:  MOVFF  01,4CE
1A62:  MOVFF  00,4CD
1A66:  MOVLB  0
1A68:  CALL   0B90
1A6C:  MOVFF  4B0,4C8
1A70:  MOVFF  4AF,4C7
1A74:  MOVFF  4AE,4C6
1A78:  MOVFF  4AD,4C5
1A7C:  MOVFF  03,4CC
1A80:  MOVFF  02,4CB
1A84:  MOVFF  01,4CA
1A88:  MOVFF  00,4C9
1A8C:  CALL   0A9A
1A90:  MOVFF  03,4B0
1A94:  MOVFF  02,4AF
1A98:  MOVFF  01,4AE
1A9C:  MOVFF  00,4AD
....................  
....................    if (s) 
1AA0:  MOVLB  4
1AA2:  BTFSS  xB6.0
1AA4:  BRA    1AD8
....................       res = 1.0/res; 
1AA6:  CLRF   xC1
1AA8:  CLRF   xC0
1AAA:  CLRF   xBF
1AAC:  MOVLW  7F
1AAE:  MOVWF  xBE
1AB0:  MOVFF  4B0,4C5
1AB4:  MOVFF  4AF,4C4
1AB8:  MOVFF  4AE,4C3
1ABC:  MOVFF  4AD,4C2
1AC0:  MOVLB  0
1AC2:  CALL   0900
1AC6:  MOVFF  03,4B0
1ACA:  MOVFF  02,4AF
1ACE:  MOVFF  01,4AE
1AD2:  MOVFF  00,4AD
1AD6:  MOVLB  4
....................    return(res); 
1AD8:  MOVFF  4AD,00
1ADC:  MOVFF  4AE,01
1AE0:  MOVFF  4AF,02
1AE4:  MOVFF  4B0,03
1AE8:  MOVLB  0
1AEA:  RETURN 0
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1344:  MOVFF  4A8,4AC
1348:  MOVFF  4A7,4AB
134C:  MOVFF  4A6,4AA
1350:  MOVFF  4A5,4A9
....................  
....................    if (y != 1.0) 
1354:  MOVFF  4AC,4C8
1358:  MOVFF  4AB,4C7
135C:  MOVFF  4AA,4C6
1360:  MOVFF  4A9,4C5
1364:  MOVLB  4
1366:  CLRF   xCC
1368:  CLRF   xCB
136A:  CLRF   xCA
136C:  MOVLW  7F
136E:  MOVWF  xC9
1370:  MOVLB  0
1372:  CALL   0886
1376:  BTFSC  FD8.2
1378:  BRA    16BE
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
137A:  MOVLW  04
137C:  MOVLB  4
137E:  MOVWF  xBB
1380:  MOVLW  A9
1382:  MOVFF  4BB,03
1386:  MOVWF  FE9
1388:  MOVFF  03,FEA
138C:  MOVLW  7E
138E:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
1390:  BSF    FD8.1
1392:  MOVFF  4AC,4CC
1396:  MOVFF  4AB,4CB
139A:  MOVFF  4AA,4CA
139E:  MOVFF  4A9,4C9
13A2:  CLRF   xD0
13A4:  CLRF   xCF
13A6:  CLRF   xCE
13A8:  MOVLW  7F
13AA:  MOVWF  xCD
13AC:  MOVLB  0
13AE:  CALL   0B90
13B2:  MOVFF  03,4BD
13B6:  MOVFF  02,4BC
13BA:  MOVFF  01,4BB
13BE:  MOVFF  00,4BA
13C2:  BCF    FD8.1
13C4:  MOVFF  4AC,4CC
13C8:  MOVFF  4AB,4CB
13CC:  MOVFF  4AA,4CA
13D0:  MOVFF  4A9,4C9
13D4:  MOVLB  4
13D6:  CLRF   xD0
13D8:  CLRF   xCF
13DA:  CLRF   xCE
13DC:  MOVLW  7F
13DE:  MOVWF  xCD
13E0:  MOVLB  0
13E2:  CALL   0B90
13E6:  MOVFF  4BD,4C1
13EA:  MOVFF  4BC,4C0
13EE:  MOVFF  4BB,4BF
13F2:  MOVFF  4BA,4BE
13F6:  MOVFF  03,4C5
13FA:  MOVFF  02,4C4
13FE:  MOVFF  01,4C3
1402:  MOVFF  00,4C2
1406:  CALL   0900
140A:  MOVFF  03,4AC
140E:  MOVFF  02,4AB
1412:  MOVFF  01,4AA
1416:  MOVFF  00,4A9
....................  
....................       y2=y*y; 
141A:  MOVFF  4AC,4C8
141E:  MOVFF  4AB,4C7
1422:  MOVFF  4AA,4C6
1426:  MOVFF  4A9,4C5
142A:  MOVFF  4AC,4CC
142E:  MOVFF  4AB,4CB
1432:  MOVFF  4AA,4CA
1436:  MOVFF  4A9,4C9
143A:  CALL   0A9A
143E:  MOVFF  03,4B8
1442:  MOVFF  02,4B7
1446:  MOVFF  01,4B6
144A:  MOVFF  00,4B5
....................  
....................       res = pl[0]*y2 + pl[1]; 
144E:  MOVLW  99
1450:  MOVLB  4
1452:  MOVWF  xC8
1454:  MOVLW  47
1456:  MOVWF  xC7
1458:  MOVLW  8A
145A:  MOVWF  xC6
145C:  MOVLW  7F
145E:  MOVWF  xC5
1460:  MOVFF  4B8,4CC
1464:  MOVFF  4B7,4CB
1468:  MOVFF  4B6,4CA
146C:  MOVFF  4B5,4C9
1470:  MOVLB  0
1472:  CALL   0A9A
1476:  MOVFF  03,4BD
147A:  MOVFF  02,4BC
147E:  MOVFF  01,4BB
1482:  MOVFF  00,4BA
1486:  BCF    FD8.1
1488:  MOVFF  03,4CC
148C:  MOVFF  02,4CB
1490:  MOVFF  01,4CA
1494:  MOVFF  00,4C9
1498:  MOVLB  4
149A:  CLRF   xD0
149C:  CLRF   xCF
149E:  CLRF   xCE
14A0:  MOVLW  80
14A2:  MOVWF  xCD
14A4:  MOVLB  0
14A6:  CALL   0B90
14AA:  MOVFF  03,4B0
14AE:  MOVFF  02,4AF
14B2:  MOVFF  01,4AE
14B6:  MOVFF  00,4AD
....................  
....................       r = ql[0]*y2 + ql[1]; 
14BA:  MOVLW  4C
14BC:  MOVLB  4
14BE:  MOVWF  xC8
14C0:  MOVLW  F3
14C2:  MOVWF  xC7
14C4:  MOVLW  3A
14C6:  MOVWF  xC6
14C8:  MOVLW  7B
14CA:  MOVWF  xC5
14CC:  MOVFF  4B8,4CC
14D0:  MOVFF  4B7,4CB
14D4:  MOVFF  4B6,4CA
14D8:  MOVFF  4B5,4C9
14DC:  MOVLB  0
14DE:  CALL   0A9A
14E2:  MOVFF  03,4BD
14E6:  MOVFF  02,4BC
14EA:  MOVFF  01,4BB
14EE:  MOVFF  00,4BA
14F2:  BCF    FD8.1
14F4:  MOVFF  03,4CC
14F8:  MOVFF  02,4CB
14FC:  MOVFF  01,4CA
1500:  MOVFF  00,4C9
1504:  MOVLW  2B
1506:  MOVLB  4
1508:  MOVWF  xD0
150A:  MOVLW  9D
150C:  MOVWF  xCF
150E:  MOVLW  DF
1510:  MOVWF  xCE
1512:  MOVLW  7E
1514:  MOVWF  xCD
1516:  MOVLB  0
1518:  CALL   0B90
151C:  MOVFF  03,4B4
1520:  MOVFF  02,4B3
1524:  MOVFF  01,4B2
1528:  MOVFF  00,4B1
....................       r = r*y2 + 1.0; 
152C:  MOVFF  4B4,4C8
1530:  MOVFF  4B3,4C7
1534:  MOVFF  4B2,4C6
1538:  MOVFF  4B1,4C5
153C:  MOVFF  4B8,4CC
1540:  MOVFF  4B7,4CB
1544:  MOVFF  4B6,4CA
1548:  MOVFF  4B5,4C9
154C:  CALL   0A9A
1550:  MOVFF  03,4BD
1554:  MOVFF  02,4BC
1558:  MOVFF  01,4BB
155C:  MOVFF  00,4BA
1560:  BCF    FD8.1
1562:  MOVFF  03,4CC
1566:  MOVFF  02,4CB
156A:  MOVFF  01,4CA
156E:  MOVFF  00,4C9
1572:  MOVLB  4
1574:  CLRF   xD0
1576:  CLRF   xCF
1578:  CLRF   xCE
157A:  MOVLW  7F
157C:  MOVWF  xCD
157E:  MOVLB  0
1580:  CALL   0B90
1584:  MOVFF  03,4B4
1588:  MOVFF  02,4B3
158C:  MOVFF  01,4B2
1590:  MOVFF  00,4B1
....................  
....................       res = y*res/r; 
1594:  MOVFF  4AC,4C8
1598:  MOVFF  4AB,4C7
159C:  MOVFF  4AA,4C6
15A0:  MOVFF  4A9,4C5
15A4:  MOVFF  4B0,4CC
15A8:  MOVFF  4AF,4CB
15AC:  MOVFF  4AE,4CA
15B0:  MOVFF  4AD,4C9
15B4:  CALL   0A9A
15B8:  MOVFF  03,4BD
15BC:  MOVFF  02,4BC
15C0:  MOVFF  01,4BB
15C4:  MOVFF  00,4BA
15C8:  MOVFF  03,4C1
15CC:  MOVFF  02,4C0
15D0:  MOVFF  01,4BF
15D4:  MOVFF  00,4BE
15D8:  MOVFF  4B4,4C5
15DC:  MOVFF  4B3,4C4
15E0:  MOVFF  4B2,4C3
15E4:  MOVFF  4B1,4C2
15E8:  CALL   0900
15EC:  MOVFF  03,4B0
15F0:  MOVFF  02,4AF
15F4:  MOVFF  01,4AE
15F8:  MOVFF  00,4AD
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
15FC:  MOVLW  04
15FE:  MOVLB  4
1600:  MOVWF  xBB
1602:  MOVLW  A5
1604:  MOVFF  4BB,03
1608:  MOVWF  FE9
160A:  MOVFF  03,FEA
160E:  MOVLW  7E
1610:  SUBWF  FEF,W
1612:  MOVWF  xB9
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1614:  BTFSS  xB9.7
1616:  BRA    1640
....................          r = -(float32)-n; 
1618:  MOVLW  00
161A:  BSF    FD8.0
161C:  SUBFWB xB9,W
161E:  CLRF   xBC
1620:  MOVWF  xBB
1622:  BTFSC  xBB.7
1624:  DECF   xBC,F
1626:  MOVLB  0
1628:  RCALL  12F4
162A:  MOVFF  00,4B1
162E:  MOVF   01,W
1630:  XORLW  80
1632:  MOVLB  4
1634:  MOVWF  xB2
1636:  MOVFF  02,4B3
163A:  MOVFF  03,4B4
163E:  BRA    1660
....................       else 
....................          r = (float32)n; 
1640:  CLRF   xBC
1642:  MOVFF  4B9,4BB
1646:  BTFSC  xBB.7
1648:  DECF   xBC,F
164A:  MOVLB  0
164C:  RCALL  12F4
164E:  MOVFF  03,4B4
1652:  MOVFF  02,4B3
1656:  MOVFF  01,4B2
165A:  MOVFF  00,4B1
165E:  MOVLB  4
....................  
....................       res += r*LN2; 
1660:  MOVFF  4B4,4C8
1664:  MOVFF  4B3,4C7
1668:  MOVFF  4B2,4C6
166C:  MOVFF  4B1,4C5
1670:  MOVLW  18
1672:  MOVWF  xCC
1674:  MOVLW  72
1676:  MOVWF  xCB
1678:  MOVLW  31
167A:  MOVWF  xCA
167C:  MOVLW  7E
167E:  MOVWF  xC9
1680:  MOVLB  0
1682:  CALL   0A9A
1686:  BCF    FD8.1
1688:  MOVFF  4B0,4CC
168C:  MOVFF  4AF,4CB
1690:  MOVFF  4AE,4CA
1694:  MOVFF  4AD,4C9
1698:  MOVFF  03,4D0
169C:  MOVFF  02,4CF
16A0:  MOVFF  01,4CE
16A4:  MOVFF  00,4CD
16A8:  CALL   0B90
16AC:  MOVFF  03,4B0
16B0:  MOVFF  02,4AF
16B4:  MOVFF  01,4AE
16B8:  MOVFF  00,4AD
....................    } 
16BC:  BRA    16CA
....................  
....................    else 
....................       res = 0.0; 
16BE:  MOVLB  4
16C0:  CLRF   xB0
16C2:  CLRF   xAF
16C4:  CLRF   xAE
16C6:  CLRF   xAD
16C8:  MOVLB  0
....................  
....................    return(res); 
16CA:  MOVFF  4AD,00
16CE:  MOVFF  4AE,01
16D2:  MOVFF  4AF,02
16D6:  MOVFF  4B0,03
16DA:  RETURN 0
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
1AEC:  MOVFF  49C,4C8
1AF0:  MOVFF  49B,4C7
1AF4:  MOVFF  49A,4C6
1AF8:  MOVFF  499,4C5
1AFC:  MOVLB  4
1AFE:  CLRF   xCC
1B00:  CLRF   xCB
1B02:  CLRF   xCA
1B04:  CLRF   xC9
1B06:  MOVLB  0
1B08:  CALL   0886
1B0C:  BTFSS  FD8.0
1B0E:  BRA    1CC2
1B10:  MOVFF  4A0,4A4
1B14:  MOVFF  49F,4A3
1B18:  MOVFF  49E,4A2
1B1C:  MOVFF  49D,4A1
1B20:  MOVLB  4
1B22:  CLRF   xA8
1B24:  CLRF   xA7
1B26:  CLRF   xA6
1B28:  MOVLW  7F
1B2A:  MOVWF  xA5
1B2C:  MOVLB  0
1B2E:  CALL   1190
1B32:  MOVFF  03,4A4
1B36:  MOVFF  02,4A3
1B3A:  MOVFF  01,4A2
1B3E:  MOVFF  00,4A1
1B42:  MOVFF  03,4C8
1B46:  MOVFF  02,4C7
1B4A:  MOVFF  01,4C6
1B4E:  MOVFF  00,4C5
1B52:  MOVLB  4
1B54:  CLRF   xCC
1B56:  CLRF   xCB
1B58:  CLRF   xCA
1B5A:  CLRF   xC9
1B5C:  MOVLB  0
1B5E:  CALL   0886
1B62:  BTFSS  FD8.2
1B64:  BRA    1CC2
....................       if(fmod(y, 2) == 0) { 
1B66:  MOVFF  4A0,4A4
1B6A:  MOVFF  49F,4A3
1B6E:  MOVFF  49E,4A2
1B72:  MOVFF  49D,4A1
1B76:  MOVLB  4
1B78:  CLRF   xA8
1B7A:  CLRF   xA7
1B7C:  CLRF   xA6
1B7E:  MOVLW  80
1B80:  MOVWF  xA5
1B82:  MOVLB  0
1B84:  CALL   1190
1B88:  MOVFF  03,4A4
1B8C:  MOVFF  02,4A3
1B90:  MOVFF  01,4A2
1B94:  MOVFF  00,4A1
1B98:  MOVFF  03,4C8
1B9C:  MOVFF  02,4C7
1BA0:  MOVFF  01,4C6
1BA4:  MOVFF  00,4C5
1BA8:  MOVLB  4
1BAA:  CLRF   xCC
1BAC:  CLRF   xCB
1BAE:  CLRF   xCA
1BB0:  CLRF   xC9
1BB2:  MOVLB  0
1BB4:  CALL   0886
1BB8:  BNZ   1C3C
....................          return (exp(log(-x) * y)); 
1BBA:  MOVFF  499,4A1
1BBE:  MOVLB  4
1BC0:  MOVF   x9A,W
1BC2:  XORLW  80
1BC4:  MOVWF  xA2
1BC6:  MOVFF  49B,4A3
1BCA:  MOVFF  49C,4A4
1BCE:  MOVFF  49C,4A8
1BD2:  MOVFF  49B,4A7
1BD6:  MOVWF  xA6
1BD8:  MOVFF  499,4A5
1BDC:  MOVLB  0
1BDE:  CALL   1344
1BE2:  MOVFF  03,4A4
1BE6:  MOVFF  02,4A3
1BEA:  MOVFF  01,4A2
1BEE:  MOVFF  00,4A1
1BF2:  MOVFF  03,4C8
1BF6:  MOVFF  02,4C7
1BFA:  MOVFF  01,4C6
1BFE:  MOVFF  00,4C5
1C02:  MOVFF  4A0,4CC
1C06:  MOVFF  49F,4CB
1C0A:  MOVFF  49E,4CA
1C0E:  MOVFF  49D,4C9
1C12:  CALL   0A9A
1C16:  MOVFF  03,4A4
1C1A:  MOVFF  02,4A3
1C1E:  MOVFF  01,4A2
1C22:  MOVFF  00,4A1
1C26:  MOVFF  03,4A8
1C2A:  MOVFF  02,4A7
1C2E:  MOVFF  01,4A6
1C32:  MOVFF  00,4A5
1C36:  RCALL  16DC
1C38:  BRA    1E00
....................       } else { 
1C3A:  BRA    1CC0
....................          return (-exp(log(-x) * y)); 
1C3C:  MOVFF  499,4A1
1C40:  MOVLB  4
1C42:  MOVF   x9A,W
1C44:  XORLW  80
1C46:  MOVWF  xA2
1C48:  MOVFF  49B,4A3
1C4C:  MOVFF  49C,4A4
1C50:  MOVFF  49C,4A8
1C54:  MOVFF  49B,4A7
1C58:  MOVWF  xA6
1C5A:  MOVFF  499,4A5
1C5E:  MOVLB  0
1C60:  CALL   1344
1C64:  MOVFF  03,4A4
1C68:  MOVFF  02,4A3
1C6C:  MOVFF  01,4A2
1C70:  MOVFF  00,4A1
1C74:  MOVFF  03,4C8
1C78:  MOVFF  02,4C7
1C7C:  MOVFF  01,4C6
1C80:  MOVFF  00,4C5
1C84:  MOVFF  4A0,4CC
1C88:  MOVFF  49F,4CB
1C8C:  MOVFF  49E,4CA
1C90:  MOVFF  49D,4C9
1C94:  CALL   0A9A
1C98:  MOVFF  03,4A4
1C9C:  MOVFF  02,4A3
1CA0:  MOVFF  01,4A2
1CA4:  MOVFF  00,4A1
1CA8:  MOVFF  03,4A8
1CAC:  MOVFF  02,4A7
1CB0:  MOVFF  01,4A6
1CB4:  MOVFF  00,4A5
1CB8:  RCALL  16DC
1CBA:  MOVLW  80
1CBC:  XORWF  01,F
1CBE:  BRA    1E00
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
1CC0:  BRA    1E00
1CC2:  MOVFF  49C,4C8
1CC6:  MOVFF  49B,4C7
1CCA:  MOVFF  49A,4C6
1CCE:  MOVFF  499,4C5
1CD2:  MOVLB  4
1CD4:  CLRF   xCC
1CD6:  CLRF   xCB
1CD8:  CLRF   xCA
1CDA:  CLRF   xC9
1CDC:  MOVLB  0
1CDE:  CALL   0886
1CE2:  BNC   1D44
1CE4:  MOVFF  4A0,4A4
1CE8:  MOVFF  49F,4A3
1CEC:  MOVFF  49E,4A2
1CF0:  MOVFF  49D,4A1
1CF4:  MOVLB  4
1CF6:  CLRF   xA8
1CF8:  CLRF   xA7
1CFA:  CLRF   xA6
1CFC:  MOVLW  7F
1CFE:  MOVWF  xA5
1D00:  MOVLB  0
1D02:  CALL   1190
1D06:  MOVFF  03,4A4
1D0A:  MOVFF  02,4A3
1D0E:  MOVFF  01,4A2
1D12:  MOVFF  00,4A1
1D16:  MOVFF  03,4C8
1D1A:  MOVFF  02,4C7
1D1E:  MOVFF  01,4C6
1D22:  MOVFF  00,4C5
1D26:  MOVLB  4
1D28:  CLRF   xCC
1D2A:  CLRF   xCB
1D2C:  CLRF   xCA
1D2E:  CLRF   xC9
1D30:  MOVLB  0
1D32:  CALL   0886
1D36:  BZ    1D44
....................       return 0; 
1D38:  CLRF   00
1D3A:  CLRF   01
1D3C:  CLRF   02
1D3E:  CLRF   03
1D40:  BRA    1E00
....................    } else { 
1D42:  BRA    1E00
....................       if(x != 0 || 0 >= y) { 
1D44:  MOVFF  49C,4C8
1D48:  MOVFF  49B,4C7
1D4C:  MOVFF  49A,4C6
1D50:  MOVFF  499,4C5
1D54:  MOVLB  4
1D56:  CLRF   xCC
1D58:  CLRF   xCB
1D5A:  CLRF   xCA
1D5C:  CLRF   xC9
1D5E:  MOVLB  0
1D60:  CALL   0886
1D64:  BNZ   1D8A
1D66:  MOVFF  4A0,4C8
1D6A:  MOVFF  49F,4C7
1D6E:  MOVFF  49E,4C6
1D72:  MOVFF  49D,4C5
1D76:  MOVLB  4
1D78:  CLRF   xCC
1D7A:  CLRF   xCB
1D7C:  CLRF   xCA
1D7E:  CLRF   xC9
1D80:  MOVLB  0
1D82:  CALL   0886
1D86:  BC    1D8A
1D88:  BNZ   1DF8
....................          return (exp(log(x) * y)); 
1D8A:  MOVFF  49C,4A8
1D8E:  MOVFF  49B,4A7
1D92:  MOVFF  49A,4A6
1D96:  MOVFF  499,4A5
1D9A:  CALL   1344
1D9E:  MOVFF  03,4A4
1DA2:  MOVFF  02,4A3
1DA6:  MOVFF  01,4A2
1DAA:  MOVFF  00,4A1
1DAE:  MOVFF  03,4C8
1DB2:  MOVFF  02,4C7
1DB6:  MOVFF  01,4C6
1DBA:  MOVFF  00,4C5
1DBE:  MOVFF  4A0,4CC
1DC2:  MOVFF  49F,4CB
1DC6:  MOVFF  49E,4CA
1DCA:  MOVFF  49D,4C9
1DCE:  CALL   0A9A
1DD2:  MOVFF  03,4A4
1DD6:  MOVFF  02,4A3
1DDA:  MOVFF  01,4A2
1DDE:  MOVFF  00,4A1
1DE2:  MOVFF  03,4A8
1DE6:  MOVFF  02,4A7
1DEA:  MOVFF  01,4A6
1DEE:  MOVFF  00,4A5
1DF2:  RCALL  16DC
1DF4:  BRA    1E00
....................       } else return 0; 
1DF6:  BRA    1E00
1DF8:  CLRF   00
1DFA:  CLRF   01
1DFC:  CLRF   02
1DFE:  CLRF   03
....................    } 
1E00:  GOTO   232C (RETURN)
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio; 
.................... int8 dem = 0; 
.................... int16 lm35a = 0,lm35b = 0; 
.................... int1 ttqn = 0; 
.................... signed int8 max = 100,D,C; 
.................... int8 maxT = 40; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0, j; 
.................... unsigned int16 kqadc; 
.................... float k_cach, clk_cach; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
0138:  MOVLB  4
013A:  INCF   x79,F
....................    set_timer1(3036); //3036 
013C:  MOVLW  0B
013E:  MOVWF  FCF
0140:  MOVLW  DC
0142:  MOVWF  FCE
0144:  BCF    F9E.0
0146:  MOVLB  0
0148:  GOTO   0060
.................... } 
....................  
....................  
.................... void BaoChay(){ 
....................    if ((lm35a>maxT) && (lm35b>maxT)){ 
*
23C4:  MOVLB  4
23C6:  MOVF   x7E,F
23C8:  BNZ   23D0
23CA:  MOVF   x7D,W
23CC:  SUBWF  x85,W
23CE:  BC    23E0
23D0:  MOVF   x80,F
23D2:  BNZ   23DA
23D4:  MOVF   x7F,W
23D6:  SUBWF  x85,W
23D8:  BC    23E0
....................       triac_2_off(); 
23DA:  MOVLB  0
23DC:  BRA    23B4
23DE:  MOVLB  4
....................    } 
....................    if ((lm35a<maxT - 5)  && (lm35b<maxT -5)){ 
23E0:  MOVLW  05
23E2:  SUBWF  x85,W
23E4:  MOVF   x7E,F
23E6:  BNZ   23FE
23E8:  SUBWF  x7D,W
23EA:  BC    23FE
23EC:  MOVLW  05
23EE:  SUBWF  x85,W
23F0:  MOVF   x80,F
23F2:  BNZ   23FE
23F4:  SUBWF  x7F,W
23F6:  BC    23FE
....................       triac_2_on(); 
23F8:  MOVLB  0
23FA:  BRA    23BC
23FC:  MOVLB  4
....................    } 
23FE:  MOVLB  0
2400:  GOTO   2CA6 (RETURN)
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
....................    for (int i = 0; i<6;i++){ 
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
....................       lcd_data(lcd_so_x[lcd_so][i]); 
....................    } 
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
051A:  MOVFF  478,495
051E:  MOVLW  0A
0520:  MOVLB  4
0522:  MOVWF  x96
0524:  MOVLB  0
0526:  RCALL  03A8
0528:  CLRF   03
052A:  MOVF   00,W
052C:  RCALL  00AE
052E:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
0530:  MOVFF  478,495
0534:  MOVLW  0A
0536:  MOVLB  4
0538:  MOVWF  x96
053A:  MOVLB  0
053C:  RCALL  03A8
053E:  CLRF   03
0540:  MOVF   01,W
0542:  RCALL  00AE
0544:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0546:  MOVFF  47A,495
054A:  MOVLW  0A
054C:  MOVLB  4
054E:  MOVWF  x96
0550:  MOVLB  0
0552:  RCALL  03A8
0554:  CLRF   03
0556:  MOVF   00,W
0558:  RCALL  00AE
055A:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
055C:  MOVFF  47A,495
0560:  MOVLW  0A
0562:  MOVLB  4
0564:  MOVWF  x96
0566:  MOVLB  0
0568:  RCALL  03A8
056A:  CLRF   03
056C:  MOVF   01,W
056E:  RCALL  00AE
0570:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
0572:  MOVFF  47B,495
0576:  MOVLW  0A
0578:  MOVLB  4
057A:  MOVWF  x96
057C:  MOVLB  0
057E:  RCALL  03A8
0580:  CLRF   03
0582:  MOVF   00,W
0584:  RCALL  00AE
0586:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0588:  MOVFF  47B,495
058C:  MOVLW  0A
058E:  MOVLB  4
0590:  MOVWF  x96
0592:  MOVLB  0
0594:  RCALL  03A8
0596:  CLRF   03
0598:  MOVF   01,W
059A:  RCALL  00AE
059C:  MOVWF  2D
....................    lcd_command(lcd_addr_line1); 
059E:  MOVLW  80
05A0:  MOVLB  4
05A2:  MOVWF  x9B
05A4:  MOVLB  0
05A6:  RCALL  026C
....................    printf(lcd_data,"NHIET DO LM35B: %ld",lm35a); 
05A8:  MOVLW  4C
05AA:  MOVWF  FF6
05AC:  MOVLW  01
05AE:  MOVWF  FF7
05B0:  MOVLW  10
05B2:  MOVLB  4
05B4:  MOVWF  x9B
05B6:  MOVLB  0
05B8:  RCALL  03F4
05BA:  MOVLW  10
05BC:  MOVWF  FE9
05BE:  MOVFF  47E,496
05C2:  MOVFF  47D,495
05C6:  RCALL  041C
....................    lcd_command(lcd_addr_line2); 
05C8:  MOVLW  C0
05CA:  MOVLB  4
05CC:  MOVWF  x9B
05CE:  MOVLB  0
05D0:  RCALL  026C
....................    printf(lcd_data,"NHIET DO LM35A: %ld",lm35b); 
05D2:  MOVLW  60
05D4:  MOVWF  FF6
05D6:  MOVLW  01
05D8:  MOVWF  FF7
05DA:  MOVLW  10
05DC:  MOVLB  4
05DE:  MOVWF  x9B
05E0:  MOVLB  0
05E2:  RCALL  03F4
05E4:  MOVLW  10
05E6:  MOVWF  FE9
05E8:  MOVFF  480,496
05EC:  MOVFF  47F,495
05F0:  RCALL  041C
05F2:  RETURN 0
.................... } 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    D = count/10; 
....................    C = count%10; 
....................    LCD_SO_LON(D,1,0); 
....................    LCD_SO_LON(C,1,3); 
.................... }*/ 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    lcd_command(lcd_addr_line3); 
*
07BE:  MOVLW  94
07C0:  MOVLB  4
07C2:  MOVWF  x9B
07C4:  MOVLB  0
07C6:  RCALL  026C
....................    printf(lcd_data,"DEM SAN PHAM: %d",count); 
07C8:  MOVLW  74
07CA:  MOVWF  FF6
07CC:  MOVLW  01
07CE:  MOVWF  FF7
07D0:  MOVLW  0E
07D2:  MOVLB  4
07D4:  MOVWF  x9B
07D6:  MOVLB  0
07D8:  RCALL  03F4
07DA:  MOVFF  486,495
07DE:  MOVLW  18
07E0:  MOVLB  4
07E2:  MOVWF  x96
07E4:  MOVLB  0
07E6:  BRA    0700
07E8:  GOTO   2C84 (RETURN)
.................... } 
....................  
.................... void read_temp(){ 
....................    set_adc_channel(0);  
*
29F2:  MOVLW  00
29F4:  MOVWF  01
29F6:  MOVF   FC2,W
29F8:  ANDLW  C3
29FA:  IORWF  01,W
29FC:  MOVWF  FC2
....................    lm35a = read_adc()/2.046; 
29FE:  BSF    FC2.1
2A00:  BTFSC  FC2.1
2A02:  BRA    2A00
2A04:  MOVFF  FC4,496
2A08:  MOVFF  FC3,495
2A0C:  MOVFF  FC4,4CA
2A10:  MOVFF  FC3,4C9
2A14:  MOVLB  0
2A16:  CALL   0850
2A1A:  MOVFF  03,4C1
2A1E:  MOVFF  02,4C0
2A22:  MOVFF  01,4BF
2A26:  MOVFF  00,4BE
2A2A:  MOVLW  AA
2A2C:  MOVLB  4
2A2E:  MOVWF  xC5
2A30:  MOVLW  F1
2A32:  MOVWF  xC4
2A34:  MOVLW  02
2A36:  MOVWF  xC3
2A38:  MOVLW  80
2A3A:  MOVWF  xC2
2A3C:  MOVLB  0
2A3E:  CALL   0900
2A42:  MOVFF  03,4C8
2A46:  MOVFF  02,4C7
2A4A:  MOVFF  01,4C6
2A4E:  MOVFF  00,4C5
2A52:  CALL   0A5E
2A56:  MOVFF  02,47E
2A5A:  MOVFF  01,47D
....................    set_adc_channel(1); 
2A5E:  MOVLW  04
2A60:  MOVWF  01
2A62:  MOVF   FC2,W
2A64:  ANDLW  C3
2A66:  IORWF  01,W
2A68:  MOVWF  FC2
....................    lm35b = read_adc()/2.046; 
2A6A:  BSF    FC2.1
2A6C:  BTFSC  FC2.1
2A6E:  BRA    2A6C
2A70:  MOVFF  FC4,496
2A74:  MOVFF  FC3,495
2A78:  MOVFF  FC4,4CA
2A7C:  MOVFF  FC3,4C9
2A80:  MOVLB  0
2A82:  CALL   0850
2A86:  MOVFF  03,4C1
2A8A:  MOVFF  02,4C0
2A8E:  MOVFF  01,4BF
2A92:  MOVFF  00,4BE
2A96:  MOVLW  AA
2A98:  MOVLB  4
2A9A:  MOVWF  xC5
2A9C:  MOVLW  F1
2A9E:  MOVWF  xC4
2AA0:  MOVLW  02
2AA2:  MOVWF  xC3
2AA4:  MOVLW  80
2AA6:  MOVWF  xC2
2AA8:  MOVLB  0
2AAA:  CALL   0900
2AAE:  MOVFF  03,4C8
2AB2:  MOVFF  02,4C7
2AB6:  MOVFF  01,4C6
2ABA:  MOVFF  00,4C5
2ABE:  CALL   0A5E
2AC2:  MOVFF  02,480
2AC6:  MOVFF  01,47F
2ACA:  GOTO   2DF2 (RETURN)
.................... } 
....................  
.................... void phim_up() { 
....................    if (!input(up)) { 
*
2404:  BSF    F93.5
2406:  BTFSC  F81.5
2408:  BRA    24C8
....................       delay_ms(5); 
240A:  MOVLW  05
240C:  MOVLB  4
240E:  MOVWF  x9A
2410:  MOVLB  0
2412:  CALL   027E
....................       if (!input(up)) 
2416:  BSF    F93.5
2418:  BTFSC  F81.5
241A:  BRA    24C8
....................       { 
....................          maxT++; 
241C:  MOVLB  4
241E:  INCF   x85,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
2420:  MOVFF  485,49B
2424:  MOVLW  0A
2426:  MOVWF  x9C
2428:  MOVLB  0
242A:  CALL   06D4
242E:  CLRF   03
2430:  MOVF   01,W
2432:  CALL   00AE
2436:  MOVLB  4
2438:  MOVWF  x95
243A:  MOVFF  485,49B
243E:  MOVLW  0A
2440:  MOVWF  x9C
2442:  MOVLB  0
2444:  CALL   06D4
2448:  CLRF   03
244A:  MOVF   00,W
244C:  CALL   00AE
2450:  MOVLB  4
2452:  MOVWF  x96
2454:  MOVFF  47E,4A0
2458:  MOVFF  47D,49F
245C:  CLRF   xA2
245E:  MOVLW  0A
2460:  MOVWF  xA1
2462:  MOVLB  0
2464:  CALL   080A
2468:  MOVFF  02,498
246C:  MOVFF  01,497
2470:  MOVFF  02,03
2474:  MOVLB  4
2476:  MOVF   01,W
2478:  MOVLB  0
247A:  CALL   00AE
247E:  MOVLB  4
2480:  MOVWF  x99
2482:  MOVFF  47E,4A0
2486:  MOVFF  47D,49F
248A:  CLRF   xA2
248C:  MOVLW  0A
248E:  MOVWF  xA1
2490:  MOVLB  0
2492:  CALL   080A
2496:  MOVFF  00,49A
249A:  MOVLB  4
249C:  MOVFF  03,49B
24A0:  MOVFF  03,03
24A4:  MOVF   00,W
24A6:  MOVLB  0
24A8:  CALL   00AE
24AC:  MOVLB  4
24AE:  MOVWF  x9C
24B0:  MOVFF  495,49D
24B4:  MOVFF  496,49E
24B8:  MOVFF  499,49F
24BC:  MOVWF  xA0
24BE:  MOVLB  0
24C0:  RCALL  1E04
....................          while(!input(up)); 
24C2:  BSF    F93.5
24C4:  BTFSS  F81.5
24C6:  BRA    24C2
....................       } 
....................    } 
24C8:  GOTO   2CAA (RETURN)
.................... } 
.................... void phim_dw() { 
....................    if (!input(dw)) { 
24CC:  BSF    F93.4
24CE:  BTFSC  F81.4
24D0:  BRA    2590
....................       delay_ms(5); 
24D2:  MOVLW  05
24D4:  MOVLB  4
24D6:  MOVWF  x9A
24D8:  MOVLB  0
24DA:  CALL   027E
....................       if (!input(dw)) 
24DE:  BSF    F93.4
24E0:  BTFSC  F81.4
24E2:  BRA    2590
....................       { 
....................          maxT--; 
24E4:  MOVLB  4
24E6:  DECF   x85,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
24E8:  MOVFF  485,49B
24EC:  MOVLW  0A
24EE:  MOVWF  x9C
24F0:  MOVLB  0
24F2:  CALL   06D4
24F6:  CLRF   03
24F8:  MOVF   01,W
24FA:  CALL   00AE
24FE:  MOVLB  4
2500:  MOVWF  x95
2502:  MOVFF  485,49B
2506:  MOVLW  0A
2508:  MOVWF  x9C
250A:  MOVLB  0
250C:  CALL   06D4
2510:  CLRF   03
2512:  MOVF   00,W
2514:  CALL   00AE
2518:  MOVLB  4
251A:  MOVWF  x96
251C:  MOVFF  47E,4A0
2520:  MOVFF  47D,49F
2524:  CLRF   xA2
2526:  MOVLW  0A
2528:  MOVWF  xA1
252A:  MOVLB  0
252C:  CALL   080A
2530:  MOVFF  02,498
2534:  MOVFF  01,497
2538:  MOVFF  02,03
253C:  MOVLB  4
253E:  MOVF   01,W
2540:  MOVLB  0
2542:  CALL   00AE
2546:  MOVLB  4
2548:  MOVWF  x99
254A:  MOVFF  47E,4A0
254E:  MOVFF  47D,49F
2552:  CLRF   xA2
2554:  MOVLW  0A
2556:  MOVWF  xA1
2558:  MOVLB  0
255A:  CALL   080A
255E:  MOVFF  00,49A
2562:  MOVLB  4
2564:  MOVFF  03,49B
2568:  MOVFF  03,03
256C:  MOVF   00,W
256E:  MOVLB  0
2570:  CALL   00AE
2574:  MOVLB  4
2576:  MOVWF  x9C
2578:  MOVFF  495,49D
257C:  MOVFF  496,49E
2580:  MOVFF  499,49F
2584:  MOVWF  xA0
2586:  MOVLB  0
2588:  RCALL  1E04
....................          while (!input(dw)); 
258A:  BSF    F93.4
258C:  BTFSS  F81.4
258E:  BRA    258A
....................       } 
....................    } 
2590:  GOTO   2CAC (RETURN)
.................... } 
....................  
.................... void dispDistance(float tam){ 
*
2204:  MOVFF  498,4C8
2208:  MOVFF  497,4C7
220C:  MOVFF  496,4C6
2210:  MOVFF  495,4C5
2214:  CALL   0A5E
2218:  MOVFF  02,49A
221C:  MOVFF  01,499
....................    unsigned int16 x = (unsigned int16)tam; 
....................    xuat_4led_7doan_giaima_xoa_so0(x); 
2220:  MOVFF  49A,49C
2224:  MOVFF  499,49B
2228:  BRA    1E38
....................    lcd_command(lcd_addr_line4); 
222A:  MOVLW  D4
222C:  MOVLB  4
222E:  MOVWF  x9B
2230:  MOVLB  0
2232:  CALL   026C
....................    printf(lcd_data,"KHOANG CACH: %0.1f ",tam); 
2236:  MOVLW  86
2238:  MOVWF  FF6
223A:  MOVLW  01
223C:  MOVWF  FF7
223E:  MOVLW  0D
2240:  MOVLB  4
2242:  MOVWF  x9B
2244:  MOVLB  0
2246:  CALL   03F4
224A:  MOVLW  C9
224C:  MOVWF  FE9
224E:  MOVFF  498,49E
2252:  MOVFF  497,49D
2256:  MOVFF  496,49C
225A:  MOVFF  495,49B
225E:  MOVLW  01
2260:  MOVLB  4
2262:  MOVWF  x9F
2264:  MOVLB  0
2266:  BRA    2052
2268:  MOVLW  20
226A:  MOVLB  4
226C:  MOVWF  xA8
226E:  MOVLB  0
2270:  CALL   0396
2274:  GOTO   2384 (RETURN)
.................... } 
....................  
....................  
.................... void readGP2D12() { 
....................    set_adc_channel(2); 
2278:  MOVLW  08
227A:  MOVWF  01
227C:  MOVF   FC2,W
227E:  ANDLW  C3
2280:  IORWF  01,W
2282:  MOVWF  FC2
....................    kqadc = 0; 
2284:  MOVLB  4
2286:  CLRF   x8B
2288:  CLRF   x8A
....................    for (j = 0; j<30; j++){ 
228A:  CLRF   x89
228C:  MOVF   x89,W
228E:  SUBLW  1D
2290:  BNC   22B2
....................       kqadc = kqadc + read_adc(); 
2292:  BSF    FC2.1
2294:  BTFSC  FC2.1
2296:  BRA    2294
2298:  MOVF   FC3,W
229A:  ADDWF  x8A,F
229C:  MOVF   FC4,W
229E:  ADDWFC x8B,F
....................       delay_quet_8led(1); 
22A0:  CLRF   x96
22A2:  MOVLW  01
22A4:  MOVWF  x95
22A6:  MOVLB  0
22A8:  GOTO   07EC
22AC:  MOVLB  4
22AE:  INCF   x89,F
22B0:  BRA    228C
....................    } 
....................    kqadc = kqadc /30; 
22B2:  MOVFF  48B,4A0
22B6:  MOVFF  48A,49F
22BA:  CLRF   xA2
22BC:  MOVLW  1E
22BE:  MOVWF  xA1
22C0:  MOVLB  0
22C2:  CALL   080A
22C6:  MOVFF  02,48B
22CA:  MOVFF  01,48A
....................    k_cach = pow(4277/kqadc,1.106); 
22CE:  MOVLW  10
22D0:  MOVLB  4
22D2:  MOVWF  xA0
22D4:  MOVLW  B5
22D6:  MOVWF  x9F
22D8:  MOVFF  48B,4A2
22DC:  MOVFF  48A,4A1
22E0:  MOVLB  0
22E2:  CALL   080A
22E6:  MOVFF  02,4CA
22EA:  MOVFF  01,4C9
22EE:  MOVLB  0
22F0:  CALL   0850
22F4:  MOVFF  03,498
22F8:  MOVFF  02,497
22FC:  MOVFF  01,496
2300:  MOVFF  00,495
2304:  MOVFF  03,49C
2308:  MOVFF  02,49B
230C:  MOVFF  01,49A
2310:  MOVFF  00,499
2314:  MOVLW  68
2316:  MOVLB  4
2318:  MOVWF  xA0
231A:  MOVLW  91
231C:  MOVWF  x9F
231E:  MOVLW  0D
2320:  MOVWF  x9E
2322:  MOVLW  7F
2324:  MOVWF  x9D
2326:  MOVLB  0
2328:  GOTO   1AEC
232C:  MOVFF  03,48F
2330:  MOVFF  02,48E
2334:  MOVFF  01,48D
2338:  MOVFF  00,48C
....................    if (k_cach >80) k_cach = 80; 
233C:  MOVLB  4
233E:  CLRF   xC8
2340:  CLRF   xC7
2342:  MOVLW  20
2344:  MOVWF  xC6
2346:  MOVLW  85
2348:  MOVWF  xC5
234A:  MOVFF  48F,4CC
234E:  MOVFF  48E,4CB
2352:  MOVFF  48D,4CA
2356:  MOVFF  48C,4C9
235A:  MOVLB  0
235C:  CALL   0886
2360:  BNC   2372
2362:  MOVLB  4
2364:  CLRF   x8F
2366:  CLRF   x8E
2368:  MOVLW  20
236A:  MOVWF  x8D
236C:  MOVLW  85
236E:  MOVWF  x8C
2370:  MOVLB  0
....................    dispDistance(k_cach); 
2372:  MOVFF  48F,498
2376:  MOVFF  48E,497
237A:  MOVFF  48D,496
237E:  MOVFF  48C,495
2382:  BRA    2204
2384:  GOTO   2CA2 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
2ACE:  CLRF   FF8
2AD0:  BCF    FD0.7
2AD2:  BSF    07.7
2AD4:  BSF    F93.1
2AD6:  BSF    F93.0
2AD8:  MOVLW  31
2ADA:  MOVWF  FC8
2ADC:  MOVLW  28
2ADE:  MOVWF  FC6
2AE0:  BSF    FC7.7
2AE2:  BCF    FC7.6
2AE4:  CLRF   1B
2AE6:  CLRF   22
2AE8:  CLRF   23
2AEA:  CLRF   24
2AEC:  CLRF   25
2AEE:  CLRF   2E
2AF0:  CLRF   2F
2AF2:  CLRF   30
2AF4:  CLRF   34
2AF6:  CLRF   33
2AF8:  CLRF   32
2AFA:  CLRF   31
2AFC:  CLRF   38
2AFE:  CLRF   37
2B00:  CLRF   36
2B02:  MOVLW  01
2B04:  MOVWF  35
2B06:  MOVLW  80
2B08:  MOVWF  3C
2B0A:  CLRF   3B
2B0C:  CLRF   3A
2B0E:  CLRF   39
2B10:  CLRF   40
2B12:  CLRF   3F
2B14:  CLRF   3E
2B16:  CLRF   3D
2B18:  MOVWF  44
2B1A:  CLRF   43
2B1C:  CLRF   46
2B1E:  MOVLW  01
2B20:  MOVWF  45
2B22:  CLRF   48
2B24:  CLRF   47
2B26:  MOVLW  80
2B28:  MOVWF  4C
2B2A:  CLRF   4B
2B2C:  CLRF   4E
2B2E:  MOVLW  01
2B30:  MOVWF  4D
2B32:  CLRF   50
2B34:  CLRF   4F
2B36:  CLRF   52
2B38:  CLRF   51
2B3A:  CLRF   53
2B3C:  MOVLW  20
2B3E:  MOVWF  54
2B40:  CLRF   55
2B42:  MOVLW  01
2B44:  MOVWF  56
2B46:  MOVLW  10
2B48:  MOVWF  57
2B4A:  CLRF   58
2B4C:  CLRF   5C
2B4E:  CLRF   5B
2B50:  CLRF   5A
2B52:  MOVLW  01
2B54:  MOVWF  59
2B56:  CLRF   x60
2B58:  CLRF   5F
2B5A:  CLRF   5E
2B5C:  MOVWF  5D
2B5E:  SETF   x64
2B60:  SETF   x63
2B62:  SETF   x62
2B64:  MOVLW  FE
2B66:  MOVWF  x61
2B68:  MOVLW  80
2B6A:  MOVWF  x68
2B6C:  CLRF   x67
2B6E:  CLRF   x66
2B70:  CLRF   x65
2B72:  MOVWF  x6C
2B74:  CLRF   x6B
2B76:  CLRF   x6A
2B78:  CLRF   x69
2B7A:  MOVLW  7F
2B7C:  MOVWF  x70
2B7E:  SETF   x6F
2B80:  SETF   x6E
2B82:  SETF   x6D
2B84:  MOVLW  01
2B86:  MOVWF  x71
2B88:  MOVWF  x72
2B8A:  MOVLB  4
2B8C:  CLRF   x7C
2B8E:  CLRF   x7E
2B90:  CLRF   x7D
2B92:  CLRF   x80
2B94:  CLRF   x7F
2B96:  BCF    x81.0
2B98:  MOVLW  64
2B9A:  MOVWF  x82
2B9C:  MOVLW  28
2B9E:  MOVWF  x85
2BA0:  CLRF   x86
2BA2:  CLRF   x87
2BA4:  CLRF   x88
2BA6:  MOVF   FC1,W
2BA8:  ANDLW  C0
2BAA:  IORLW  0F
2BAC:  MOVWF  FC1
2BAE:  MOVLW  07
2BB0:  MOVWF  FB4
2BB2:  SETF   26
2BB4:  SETF   27
2BB6:  SETF   28
2BB8:  SETF   29
2BBA:  SETF   2A
2BBC:  SETF   2B
2BBE:  SETF   2C
2BC0:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
2BC2:  MOVLB  0
2BC4:  GOTO   019A
....................    set_tris_b(0x3c); 
2BC8:  MOVLW  3C
2BCA:  MOVWF  F93
....................    setup_lcd(); 
2BCC:  GOTO   02A6
....................    setup_glcd(glcd_graphic_mode); 
2BD0:  MOVLW  36
2BD2:  MOVLB  4
2BD4:  MOVWF  x95
2BD6:  MOVLB  0
2BD8:  GOTO   033C
....................  
....................  
....................  
....................    lcd_command(0x40); 
2BDC:  MOVLW  40
2BDE:  MOVLB  4
2BE0:  MOVWF  x9B
2BE2:  MOVLB  0
2BE4:  CALL   026C
....................    for (int i = 0; i<64;i++){ 
2BE8:  MOVLB  4
2BEA:  CLRF   x94
2BEC:  MOVF   x94,W
2BEE:  SUBLW  3F
2BF0:  BNC   2C0E
....................       lcd_data(lcd_ma_8doan[i]); 
2BF2:  CLRF   03
2BF4:  MOVF   x94,W
2BF6:  MOVLB  0
2BF8:  CALL   00E8
2BFC:  MOVLB  4
2BFE:  MOVWF  x95
2C00:  MOVWF  xA8
2C02:  MOVLB  0
2C04:  CALL   0396
2C08:  MOVLB  4
2C0A:  INCF   x94,F
2C0C:  BRA    2BEC
....................    } 
....................  
....................  
....................    setup_adc(ADC_CLOCK_DIV_32); 
2C0E:  MOVF   FC0,W
2C10:  ANDLW  C0
2C12:  IORLW  02
2C14:  MOVWF  FC0
2C16:  BSF    FC0.7
2C18:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN2|VSS_VDD); 
2C1A:  MOVF   FC1,W
2C1C:  ANDLW  C0
2C1E:  IORLW  0C
2C20:  MOVWF  FC1
....................    set_adc_channel(2); 
2C22:  MOVLW  08
2C24:  MOVWF  01
2C26:  MOVF   FC2,W
2C28:  ANDLW  C3
2C2A:  IORWF  01,W
2C2C:  MOVWF  FC2
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
2C2E:  MOVLW  A8
2C30:  MOVWF  FD5
....................    set_timer0(0);    
2C32:  CLRF   FD7
2C34:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
2C36:  MOVLW  B5
2C38:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
2C3A:  MOVLW  0B
2C3C:  MOVWF  FCF
2C3E:  MOVLW  DC
2C40:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
2C42:  MOVLW  C0
2C44:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
2C46:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
2C48:  CLRF   x78
....................    bdn = 0; 
2C4A:  CLRF   x79
....................    phut = 29; 
2C4C:  MOVLW  1D
2C4E:  MOVWF  x7A
....................    gio = 15; 
2C50:  MOVLW  0F
2C52:  MOVWF  x7B
....................    giai_ma(); 
2C54:  MOVLB  0
2C56:  CALL   051A
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
2C5A:  MOVLB  4
2C5C:  BTFSC  x79.7
2C5E:  BRA    2C68
2C60:  MOVF   x79,W
2C62:  SUBLW  09
2C64:  BTFSS  FD8.0
2C66:  BRA    2DE8
....................          hien_thi_8led_7doan_quet_all();      
2C68:  MOVLB  0
2C6A:  CALL   06A2
....................          count = get_timer0(); 
2C6E:  MOVF   FD6,W
2C70:  MOVLB  4
2C72:  MOVWF  x86
....................          if (count != countT) { 
2C74:  MOVF   x87,W
2C76:  SUBWF  x86,W
2C78:  BZ    2C9C
....................             countT = count;          
2C7A:  MOVFF  486,487
....................             LCD_DISPLAY_COUNTER(); 
2C7E:  MOVLB  0
2C80:  GOTO   07BE
....................             if (count >= max+1) {set_timer0(1);}    
2C84:  MOVLW  01
2C86:  MOVLB  4
2C88:  ADDWF  x82,W
2C8A:  MOVWF  00
2C8C:  BTFSC  FE8.7
2C8E:  BRA    2C96
2C90:  MOVF   00,W
2C92:  SUBWF  x86,W
2C94:  BNC   2C9C
2C96:  CLRF   FD7
2C98:  MOVLW  01
2C9A:  MOVWF  FD6
....................          } 
....................          readGP2D12(); 
2C9C:  MOVLB  0
2C9E:  GOTO   2278
....................          BaoChay(); 
2CA2:  GOTO   23C4
....................          phim_up(); 
2CA6:  GOTO   2404
....................          phim_dw(); 
2CAA:  BRA    24CC
....................          if(ttct_td==1) sang_tat_32led(5,1); 
2CAC:  DECFSZ 56,W
2CAE:  BRA    2CBE
2CB0:  MOVLW  05
2CB2:  MOVLB  4
2CB4:  MOVWF  x95
2CB6:  MOVLW  01
2CB8:  MOVWF  x96
2CBA:  MOVLB  0
2CBC:  RCALL  2724
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
2CBE:  MOVF   56,W
2CC0:  SUBLW  02
2CC2:  BNZ   2CD2
2CC4:  MOVLW  05
2CC6:  MOVLB  4
2CC8:  MOVWF  x95
2CCA:  MOVLW  01
2CCC:  MOVWF  x96
2CCE:  MOVLB  0
2CD0:  RCALL  2788
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
2CD2:  MOVF   56,W
2CD4:  SUBLW  03
2CD6:  BNZ   2CE6
2CD8:  MOVLW  05
2CDA:  MOVLB  4
2CDC:  MOVWF  x95
2CDE:  MOVLW  01
2CE0:  MOVWF  x96
2CE2:  MOVLB  0
2CE4:  RCALL  280A
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
2CE6:  MOVF   56,W
2CE8:  SUBLW  04
2CEA:  BNZ   2CFA
2CEC:  MOVLW  05
2CEE:  MOVLB  4
2CF0:  MOVWF  x95
2CF2:  MOVLW  01
2CF4:  MOVWF  x96
2CF6:  MOVLB  0
2CF8:  RCALL  288C
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
2CFA:  MOVF   56,W
2CFC:  SUBLW  05
2CFE:  BNZ   2D0E
2D00:  MOVLW  05
2D02:  MOVLB  4
2D04:  MOVWF  x95
2D06:  MOVLW  01
2D08:  MOVWF  x96
2D0A:  MOVLB  0
2D0C:  RCALL  2910
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
2D0E:  MOVF   56,W
2D10:  SUBLW  06
2D12:  BNZ   2D22
2D14:  MOVLW  05
2D16:  MOVLB  4
2D18:  MOVWF  x95
2D1A:  MOVLW  01
2D1C:  MOVWF  x96
2D1E:  MOVLB  0
2D20:  RCALL  280A
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
2D22:  MOVF   56,W
2D24:  SUBLW  07
2D26:  BNZ   2D36
2D28:  MOVLW  05
2D2A:  MOVLB  4
2D2C:  MOVWF  x95
2D2E:  MOVLW  01
2D30:  MOVWF  x96
2D32:  MOVLB  0
2D34:  RCALL  280A
....................          if(ttct_td==8) sang_tat_32led(5,1); 
2D36:  MOVF   56,W
2D38:  SUBLW  08
2D3A:  BNZ   2D4A
2D3C:  MOVLW  05
2D3E:  MOVLB  4
2D40:  MOVWF  x95
2D42:  MOVLW  01
2D44:  MOVWF  x96
2D46:  MOVLB  0
2D48:  RCALL  2724
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
2D4A:  MOVF   56,W
2D4C:  SUBLW  09
2D4E:  BNZ   2D5E
2D50:  MOVLW  05
2D52:  MOVLB  4
2D54:  MOVWF  x95
2D56:  MOVLW  01
2D58:  MOVWF  x96
2D5A:  MOVLB  0
2D5C:  RCALL  2788
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
2D5E:  MOVF   56,W
2D60:  SUBLW  0A
2D62:  BNZ   2D72
2D64:  MOVLW  05
2D66:  MOVLB  4
2D68:  MOVWF  x95
2D6A:  MOVLW  01
2D6C:  MOVWF  x96
2D6E:  MOVLB  0
2D70:  RCALL  280A
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
2D72:  MOVF   56,W
2D74:  SUBLW  0B
2D76:  BNZ   2D86
2D78:  MOVLW  05
2D7A:  MOVLB  4
2D7C:  MOVWF  x95
2D7E:  MOVLW  01
2D80:  MOVWF  x96
2D82:  MOVLB  0
2D84:  RCALL  288C
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
2D86:  MOVF   56,W
2D88:  SUBLW  0C
2D8A:  BNZ   2D9A
2D8C:  MOVLW  05
2D8E:  MOVLB  4
2D90:  MOVWF  x95
2D92:  MOVLW  01
2D94:  MOVWF  x96
2D96:  MOVLB  0
2D98:  RCALL  2910
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
2D9A:  MOVF   56,W
2D9C:  SUBLW  0D
2D9E:  BNZ   2DAE
2DA0:  MOVLW  05
2DA2:  MOVLB  4
2DA4:  MOVWF  x95
2DA6:  MOVLW  01
2DA8:  MOVWF  x96
2DAA:  MOVLB  0
2DAC:  RCALL  288C
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
2DAE:  MOVF   56,W
2DB0:  SUBLW  0E
2DB2:  BNZ   2DC2
2DB4:  MOVLW  05
2DB6:  MOVLB  4
2DB8:  MOVWF  x95
2DBA:  MOVLW  01
2DBC:  MOVWF  x96
2DBE:  MOVLB  0
2DC0:  BRA    2976
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
2DC2:  MOVF   56,W
2DC4:  SUBLW  0F
2DC6:  BNZ   2DD6
2DC8:  MOVLW  05
2DCA:  MOVLB  4
2DCC:  MOVWF  x95
2DCE:  MOVLW  01
2DD0:  MOVWF  x96
2DD2:  MOVLB  0
2DD4:  RCALL  280A
....................          if(ttct_td>15) ttct_td =1;       
2DD6:  BTFSC  56.7
2DD8:  BRA    2DE4
2DDA:  MOVF   56,W
2DDC:  SUBLW  0F
2DDE:  BC    2DE4
2DE0:  MOVLW  01
2DE2:  MOVWF  56
....................       } 
2DE4:  BRA    2E16
2DE6:  MOVLB  4
....................       else  
....................       { 
....................          bdn = bdn -10; 
2DE8:  MOVLW  0A
2DEA:  SUBWF  x79,F
....................          giay++;  
2DEC:  INCF   x78,F
....................          read_temp(); 
2DEE:  MOVLB  0
2DF0:  BRA    29F2
....................             if (giay==60) { giay = 0; phut++; 
2DF2:  MOVLB  4
2DF4:  MOVF   x78,W
2DF6:  SUBLW  3C
2DF8:  BNZ   2E10
2DFA:  CLRF   x78
2DFC:  INCF   x7A,F
....................                if (phut == 60) { phut = 0; gio++;  
2DFE:  MOVF   x7A,W
2E00:  SUBLW  3C
2E02:  BNZ   2E10
2E04:  CLRF   x7A
2E06:  INCF   x7B,F
....................                   if (gio == 24) gio = 0; 
2E08:  MOVF   x7B,W
2E0A:  SUBLW  18
2E0C:  BNZ   2E10
2E0E:  CLRF   x7B
....................                }  
....................             } 
....................          giai_ma(); 
2E10:  MOVLB  0
2E12:  CALL   051A
....................       } 
2E16:  BRA    2C5A
....................    }            
.................... } 
....................  
2E18:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
