CCS PCH C Compiler, Version 5.078, 43599               07-Dec-20 13:37

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\664\664.lst

               ROM used:   5558 bytes (17%)
                           Largest free fragment is 27206
               RAM used:   1162 (57%) at main() level
                           1202 (59%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   1266
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   019E
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 00,01
00FA:  DATA 02,05
00FC:  DATA 03,04
00FE:  DATA 01,02
0100:  DATA 20,03
0102:  DATA 07,03
0104:  DATA 06,06
0106:  DATA 02,05
0108:  DATA 03,03
010A:  DATA 06,06
010C:  DATA 02,03
010E:  DATA 03,04
0110:  DATA 07,03
0112:  DATA 07,20
0114:  DATA 20,07
0116:  DATA 07,06
0118:  DATA 06,03
011A:  DATA 03,04
011C:  DATA 00,06
011E:  DATA 06,05
0120:  DATA 03,04
0122:  DATA 01,01
0124:  DATA 07,20
0126:  DATA 20,07
0128:  DATA 00,06
012A:  DATA 02,05
012C:  DATA 03,04
012E:  DATA 00,06
0130:  DATA 02,03
0132:  DATA 03,04
0134:  DATA 20,20
0136:  DATA 20,20
0138:  DATA 20,20
013A:  CLRF   FF7
013C:  ADDLW  4A
013E:  MOVWF  FF6
0140:  MOVLW  01
0142:  ADDWFC FF7,F
0144:  TBLRD*+
0146:  MOVF   FF5,W
0148:  RETURN 0
014A:  DATA 07,0F
014C:  DATA 1F,1F
014E:  DATA 1F,1F
0150:  DATA 1F,1F
0152:  DATA 1F,1F
0154:  DATA 1F,00
0156:  DATA 00,00
0158:  DATA 00,00
015A:  DATA 1C,1E
015C:  DATA 1F,1F
015E:  DATA 1F,1F
0160:  DATA 1F,1F
0162:  DATA 00,00
0164:  DATA 00,00
0166:  DATA 00,1F
0168:  DATA 1F,1F
016A:  DATA 1F,1F
016C:  DATA 1F,1F
016E:  DATA 1F,1F
0170:  DATA 1E,1C
0172:  DATA 1F,1F
0174:  DATA 1F,1F
0176:  DATA 1F,1F
0178:  DATA 0F,07
017A:  DATA 1F,1F
017C:  DATA 1F,00
017E:  DATA 00,00
0180:  DATA 1F,1F
0182:  DATA 1F,1F
0184:  DATA 1F,1F
0186:  DATA 1F,1F
0188:  DATA 1F,1F
018A:  CLRF   FF7
018C:  ADDLW  9A
018E:  MOVWF  FF6
0190:  MOVLW  01
0192:  ADDWFC FF7,F
0194:  TBLRD*+
0196:  MOVF   FF5,W
0198:  RETURN 0
019A:  DATA 80,C0
019C:  DATA 94,D4
*
01B2:  DATA 2A,2A
01B4:  DATA 44,45
01B6:  DATA 4D,20
01B8:  DATA 53,41
01BA:  DATA 4E,20
01BC:  DATA 50,48
01BE:  DATA 41,4D
01C0:  DATA 2A,2A
01C2:  DATA 20,00
*
03BE:  MOVLB  4
03C0:  MOVF   xAD,W
03C2:  MULWF  xAF
03C4:  MOVFF  FF3,01
03C8:  MOVFF  FF4,00
03CC:  MULWF  xB0
03CE:  MOVF   FF3,W
03D0:  ADDWF  00,F
03D2:  MOVF   xAE,W
03D4:  MULWF  xAF
03D6:  MOVF   FF3,W
03D8:  ADDWFC 00,W
03DA:  MOVWF  02
03DC:  MOVLB  0
03DE:  RETURN 0
*
0556:  TBLRD*+
0558:  MOVF   FF5,F
055A:  BZ    0574
055C:  MOVFF  FF6,489
0560:  MOVFF  FF7,48A
0564:  MOVFF  FF5,48E
0568:  RCALL  0544
056A:  MOVFF  489,FF6
056E:  MOVFF  48A,FF7
0572:  BRA    0556
0574:  GOTO   13C6 (RETURN)
0578:  MOVLB  4
057A:  MOVF   x89,W
057C:  XORWF  x8A,W
057E:  ANDLW  80
0580:  MOVWF  x8C
0582:  BTFSS  x89.7
0584:  BRA    058A
0586:  COMF   x89,F
0588:  INCF   x89,F
058A:  BTFSS  x8A.7
058C:  BRA    0592
058E:  COMF   x8A,F
0590:  INCF   x8A,F
0592:  MOVF   x8A,W
0594:  CLRF   01
0596:  SUBWF  x89,W
0598:  BC    05A0
059A:  MOVFF  489,00
059E:  BRA    05B8
05A0:  CLRF   00
05A2:  MOVLW  08
05A4:  MOVWF  x8B
05A6:  RLCF   x89,F
05A8:  RLCF   00,F
05AA:  MOVF   x8A,W
05AC:  SUBWF  00,W
05AE:  BTFSC  FD8.0
05B0:  MOVWF  00
05B2:  RLCF   01,F
05B4:  DECFSZ x8B,F
05B6:  BRA    05A6
05B8:  BTFSS  x8C.7
05BA:  BRA    05C0
05BC:  COMF   01,F
05BE:  INCF   01,F
05C0:  MOVLB  0
05C2:  RETURN 0
*
0748:  CLRF   01
074A:  CLRF   02
074C:  CLRF   00
074E:  CLRF   03
0750:  MOVLB  4
0752:  MOVF   x90,W
0754:  BNZ   075A
0756:  MOVF   x8F,W
0758:  BZ    078A
075A:  MOVLW  10
075C:  MOVWF  x91
075E:  BCF    FD8.0
0760:  RLCF   x8D,F
0762:  RLCF   x8E,F
0764:  RLCF   00,F
0766:  RLCF   03,F
0768:  MOVF   x90,W
076A:  SUBWF  03,W
076C:  BNZ   0772
076E:  MOVF   x8F,W
0770:  SUBWF  00,W
0772:  BNC   0782
0774:  MOVF   x8F,W
0776:  SUBWF  00,F
0778:  BTFSS  FD8.0
077A:  DECF   03,F
077C:  MOVF   x90,W
077E:  SUBWF  03,F
0780:  BSF    FD8.0
0782:  RLCF   01,F
0784:  RLCF   02,F
0786:  DECFSZ x91,F
0788:  BRA    075E
078A:  MOVLB  0
078C:  RETURN 0
*
08E8:  MOVLB  4
08EA:  MOVF   x8F,W
08EC:  CLRF   01
08EE:  SUBWF  x8E,W
08F0:  BC    08F8
08F2:  MOVFF  48E,00
08F6:  BRA    0910
08F8:  CLRF   00
08FA:  MOVLW  08
08FC:  MOVWF  x90
08FE:  RLCF   x8E,F
0900:  RLCF   00,F
0902:  MOVF   x8F,W
0904:  SUBWF  00,W
0906:  BTFSC  FD8.0
0908:  MOVWF  00
090A:  RLCF   01,F
090C:  DECFSZ x90,F
090E:  BRA    08FE
0910:  MOVLB  0
0912:  RETURN 0
*
092C:  CLRF   00
092E:  CLRF   01
0930:  MOVLB  4
0932:  MOVF   x8D,W
0934:  BCF    FD8.0
0936:  BTFSC  x8E.0
0938:  ADDWF  00,F
093A:  RRCF   00,F
093C:  RRCF   01,F
093E:  BTFSC  x8E.1
0940:  ADDWF  00,F
0942:  RRCF   00,F
0944:  RRCF   01,F
0946:  BTFSC  x8E.2
0948:  ADDWF  00,F
094A:  RRCF   00,F
094C:  RRCF   01,F
094E:  BTFSC  x8E.3
0950:  ADDWF  00,F
0952:  RRCF   00,F
0954:  RRCF   01,F
0956:  BTFSC  x8E.4
0958:  ADDWF  00,F
095A:  RRCF   00,F
095C:  RRCF   01,F
095E:  BTFSC  x8E.5
0960:  ADDWF  00,F
0962:  RRCF   00,F
0964:  RRCF   01,F
0966:  BTFSC  x8E.6
0968:  ADDWF  00,F
096A:  RRCF   00,F
096C:  RRCF   01,F
096E:  BTFSC  x8E.7
0970:  ADDWF  00,F
0972:  RRCF   00,F
0974:  RRCF   01,F
0976:  MOVLB  0
0978:  GOTO   09B4 (RETURN)
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
02A8:  MOVLW  04
02AA:  MOVWF  FEA
02AC:  MOVLW  8E
02AE:  MOVWF  FE9
02B0:  MOVF   FEF,W
02B2:  BZ    02CE
02B4:  MOVLW  06
02B6:  MOVWF  01
02B8:  CLRF   00
02BA:  DECFSZ 00,F
02BC:  BRA    02BA
02BE:  DECFSZ 01,F
02C0:  BRA    02B8
02C2:  MOVLW  7B
02C4:  MOVWF  00
02C6:  DECFSZ 00,F
02C8:  BRA    02C6
02CA:  DECFSZ FEF,F
02CC:  BRA    02B4
02CE:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
01E2:  MOVFF  49F,4A1
....................    for (sb=0;sb<8;sb++) 
01E6:  MOVLB  4
01E8:  CLRF   xA0
01EA:  MOVF   xA0,W
01EC:  SUBLW  07
01EE:  BNC   020C
....................       {                                                  
....................          output_bit(ssdo,bseri);     
01F0:  BTFSC  xA1.7
01F2:  BRA    01F8
01F4:  BCF    F8D.2
01F6:  BRA    01FA
01F8:  BSF    F8D.2
01FA:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
01FC:  BCF    F96.0
01FE:  BCF    F8D.0
0200:  BCF    F96.0
0202:  BSF    F8D.0
....................          x= x<<1;          
0204:  BCF    FD8.0
0206:  RLCF   xA1,F
0208:  INCF   xA0,F
020A:  BRA    01EA
....................      } 
020C:  MOVLB  0
020E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
0E08:  MOVFF  49B,49F
0E0C:  CALL   01E2
....................       xuat_1byte(bld2); 
0E10:  MOVFF  49C,49F
0E14:  CALL   01E2
....................       xuat_1byte(bld1);           
0E18:  MOVFF  49D,49F
0E1C:  CALL   01E2
....................       xuat_1byte(bld0);             
0E20:  MOVFF  49E,49F
0E24:  CALL   01E2
....................       mo_32_led_don;       
0E28:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
0E2A:  CALL   0210
....................       output_high(rck_32led);    output_low(rck_32led); 
0E2E:  BCF    F95.5
0E30:  BSF    F8C.5
0E32:  BCF    F95.5
0E34:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
0E36:  BCF    F95.1
0E38:  BCF    F8C.1
0E3A:  GOTO   0E60 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
0E3E:  MOVFF  494,497
0E42:  MOVFF  493,498
....................      b1 = wld0>>8;  b0 = wld0; 
0E46:  MOVFF  496,499
0E4A:  MOVFF  495,49A
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0E4E:  MOVFF  497,49B
0E52:  MOVFF  498,49C
0E56:  MOVFF  499,49D
0E5A:  MOVFF  49A,49E
0E5E:  BRA    0E08
0E60:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
0E62:  MOVFF  48D,48F
0E66:  MOVFF  48E,490
0E6A:  MOVFF  48C,492
0E6E:  MOVFF  48B,491
....................      xuat_32led_don_2word(wd1,wd0); 
0E72:  MOVFF  490,494
0E76:  MOVFF  48F,493
0E7A:  MOVFF  492,496
0E7E:  MOVFF  491,495
0E82:  RCALL  0E3E
0E84:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
01C4:  MOVLW  00
01C6:  MOVWF  F95
....................       set_tris_e(0x00); 
01C8:  MOVWF  F96
....................       output_d(0xff); 
01CA:  CLRF   F95
01CC:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
01CE:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
01D0:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
01D2:  BCF    F95.1
01D4:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
01D6:  BCF    F95.0
01D8:  BCF    F8C.0
....................       rbdc=0; 
01DA:  CLRF   1D
01DC:  CLRF   1C
01DE:  GOTO   135C (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0210:  CLRF   F95
0212:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
0214:  BTFSC  19.4
0216:  BRA    021C
0218:  BCF    F8C.4
021A:  BRA    021E
021C:  BSF    F8C.4
021E:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
0220:  BTFSC  19.6
0222:  BRA    0228
0224:  BCF    F8C.6
0226:  BRA    022A
0228:  BSF    F8C.6
022A:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
022C:  BTFSC  19.2
022E:  BRA    0234
0230:  BCF    F8C.2
0232:  BRA    0236
0234:  BSF    F8C.2
0236:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
0238:  BCF    F95.1
023A:  BSF    F8C.1
023C:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
0668:  CLRF   F95
066A:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
066C:  BTFSC  1A.6
066E:  BRA    0674
0670:  BCF    F8C.6
0672:  BRA    0676
0674:  BSF    F8C.6
0676:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
0678:  BTFSC  1A.4
067A:  BRA    0680
067C:  BCF    F8C.4
067E:  BRA    0682
0680:  BSF    F8C.4
0682:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0684:  BTFSC  1A.2
0686:  BRA    068C
0688:  BCF    F8C.2
068A:  BRA    068E
068C:  BSF    F8C.2
068E:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
0690:  BCF    F95.0
0692:  BSF    F8C.0
0694:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
078E:  MOVFF  48E,49F
0792:  RCALL  01E2
0794:  MOVFF  48D,49F
0798:  RCALL  01E2
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
079A:  MOVFF  48C,49F
079E:  RCALL  01E2
07A0:  MOVFF  48B,49F
07A4:  RCALL  01E2
....................        
....................       mo_4_led_7doan; 
07A6:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
07A8:  RCALL  0210
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
07AA:  BCF    F95.7
07AC:  BCF    F8C.7
07AE:  BCF    F95.7
07B0:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
07B2:  BCF    F95.1
07B4:  BCF    F8C.1
07B6:  GOTO   08E4 (RETURN)
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
07BA:  MOVFF  48A,48E
07BE:  MOVFF  489,48D
07C2:  MOVLB  4
07C4:  CLRF   x90
07C6:  MOVLW  0A
07C8:  MOVWF  x8F
07CA:  MOVLB  0
07CC:  RCALL  0748
07CE:  MOVFF  00,48B
07D2:  MOVLB  4
07D4:  MOVFF  03,48C
07D8:  MOVFF  03,03
07DC:  MOVF   00,W
07DE:  MOVLB  0
07E0:  RCALL  00AE
07E2:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
07E4:  MOVFF  48A,48E
07E8:  MOVFF  489,48D
07EC:  MOVLB  4
07EE:  CLRF   x90
07F0:  MOVLW  0A
07F2:  MOVWF  x8F
07F4:  MOVLB  0
07F6:  RCALL  0748
07F8:  MOVFF  02,48C
07FC:  MOVFF  01,48B
0800:  MOVFF  02,48E
0804:  MOVFF  01,48D
0808:  MOVLB  4
080A:  CLRF   x90
080C:  MOVLW  0A
080E:  MOVWF  x8F
0810:  MOVLB  0
0812:  RCALL  0748
0814:  MOVFF  00,48B
0818:  MOVLB  4
081A:  MOVFF  03,48C
081E:  MOVFF  03,03
0822:  MOVF   00,W
0824:  MOVLB  0
0826:  RCALL  00AE
0828:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
082A:  MOVFF  48A,48E
082E:  MOVFF  489,48D
0832:  MOVLB  4
0834:  CLRF   x90
0836:  MOVLW  64
0838:  MOVWF  x8F
083A:  MOVLB  0
083C:  RCALL  0748
083E:  MOVFF  02,48C
0842:  MOVFF  01,48B
0846:  MOVFF  02,48E
084A:  MOVFF  01,48D
084E:  MOVLB  4
0850:  CLRF   x90
0852:  MOVLW  0A
0854:  MOVWF  x8F
0856:  MOVLB  0
0858:  RCALL  0748
085A:  MOVFF  00,48B
085E:  MOVLB  4
0860:  MOVFF  03,48C
0864:  MOVFF  03,03
0868:  MOVF   00,W
086A:  MOVLB  0
086C:  RCALL  00AE
086E:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
0870:  MOVFF  48A,48E
0874:  MOVFF  489,48D
0878:  MOVLW  03
087A:  MOVLB  4
087C:  MOVWF  x90
087E:  MOVLW  E8
0880:  MOVWF  x8F
0882:  MOVLB  0
0884:  RCALL  0748
0886:  MOVFF  02,48C
088A:  MOVFF  01,48B
088E:  MOVFF  02,48E
0892:  MOVFF  01,48D
0896:  MOVLB  4
0898:  CLRF   x90
089A:  MOVLW  0A
089C:  MOVWF  x8F
089E:  MOVLB  0
08A0:  RCALL  0748
08A2:  MOVFF  00,48B
08A6:  MOVLB  4
08A8:  MOVFF  03,48C
08AC:  MOVFF  03,03
08B0:  MOVF   00,W
08B2:  MOVLB  0
08B4:  CALL   00AE
08B8:  MOVWF  21
....................       if (ngan4==0xc0) 
08BA:  MOVF   21,W
08BC:  SUBLW  C0
08BE:  BNZ   08D2
....................       { 
....................          ngan4=0xff; 
08C0:  SETF   21
....................          if (tram4==0xc0) 
08C2:  MOVF   20,W
08C4:  SUBLW  C0
08C6:  BNZ   08D2
....................          { 
....................             tram4=0xff; 
08C8:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
08CA:  MOVF   1F,W
08CC:  SUBLW  C0
08CE:  BNZ   08D2
08D0:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
08D2:  MOVFF  21,48B
08D6:  MOVFF  20,48C
08DA:  MOVFF  1F,48D
08DE:  MOVFF  1E,48E
08E2:  BRA    078E
08E4:  GOTO   1426 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
023E:  MOVFF  25,49F
0242:  RCALL  01E2
....................     xuat_1byte(glcddata); 
0244:  MOVFF  24,49F
0248:  RCALL  01E2
....................     xuat_1byte(lcdcontrol);        
024A:  MOVFF  23,49F
024E:  RCALL  01E2
....................     xuat_1byte(lcddata);       
0250:  MOVFF  22,49F
0254:  RCALL  01E2
....................        
....................     mo_glcd_lcd; 
0256:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
0258:  RCALL  0210
....................     output_high(rck_lcd20x4);      
025A:  BCF    F95.3
025C:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
025E:  BCF    F95.3
0260:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0262:  BCF    F95.1
0264:  BCF    F8C.1
0266:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
0268:  MOVLB  4
026A:  MOVFF  493,23
026E:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
0270:  MOVFF  494,22
0274:  COMF   22,F
....................     xuat_glcd_lcd(); 
0276:  MOVLB  0
0278:  RCALL  023E
027A:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
032C:  MOVLB  4
032E:  MOVFF  492,25
0332:  COMF   25,F
....................     glcddata    = ~glcd_ins_hthi;      
0334:  MOVFF  493,24
0338:  COMF   24,F
....................     xuat_glcd_lcd(); 
033A:  MOVLB  0
033C:  RCALL  023E
033E:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
06D4:  MOVLB  4
06D6:  MOVFF  48F,491
06DA:  COMF   x91,F
06DC:  MOVFF  491,49F
06E0:  MOVLB  0
06E2:  RCALL  01E2
06E4:  MOVLB  4
06E6:  MOVFF  490,491
06EA:  COMF   x91,F
06EC:  MOVFF  491,49F
06F0:  MOVLB  0
06F2:  RCALL  01E2
....................        
....................       mo_8_led_quet; 
06F4:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
06F6:  RCALL  0668
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
06F8:  BCF    F95.5
06FA:  BSF    F8C.5
06FC:  BCF    F95.5
06FE:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0700:  BCF    F95.0
0702:  BCF    F8C.0
0704:  GOTO   0712 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0708:  MOVLB  4
070A:  SETF   x8F
070C:  SETF   x90
070E:  MOVLB  0
0710:  BRA    06D4
0712:  GOTO   0742 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
0696:  CLRF   03
0698:  MOVLB  4
069A:  MOVF   x90,W
069C:  MOVLB  0
069E:  RCALL  00D0
06A0:  MOVWF  01
06A2:  MOVLB  4
06A4:  MOVWF  x92
06A6:  COMF   x92,F
06A8:  MOVFF  492,49F
06AC:  MOVLB  0
06AE:  RCALL  01E2
06B0:  MOVLB  4
06B2:  MOVFF  491,492
06B6:  COMF   x92,F
06B8:  MOVFF  492,49F
06BC:  MOVLB  0
06BE:  RCALL  01E2
....................       mo_8_led_quet; 
06C0:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
06C2:  RCALL  0668
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
06C4:  BCF    F95.5
06C6:  BSF    F8C.5
06C8:  BCF    F95.5
06CA:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
06CC:  BCF    F95.0
06CE:  BCF    F8C.0
06D0:  GOTO   0736 (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
0716:  CLRF   2E
0718:  MOVF   2E,W
071A:  SUBLW  07
071C:  BNC   0746
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
071E:  CLRF   03
0720:  MOVF   2E,W
0722:  ADDLW  26
0724:  MOVWF  FE9
0726:  MOVLW  00
0728:  ADDWFC 03,W
072A:  MOVWF  FEA
072C:  MOVFF  FEF,491
0730:  MOVFF  2E,490
0734:  BRA    0696
....................             delay_us(100); 
0736:  MOVLW  A6
0738:  MOVWF  00
073A:  DECFSZ 00,F
073C:  BRA    073A
073E:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
0740:  BRA    0708
0742:  INCF   2E,F
0744:  BRA    0718
....................             } 
0746:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
0EA2:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
0EA4:  CLRF   34
0EA6:  CLRF   33
0EA8:  CLRF   32
0EAA:  CLRF   31
0EAC:  CLRF   38
0EAE:  CLRF   37
0EB0:  CLRF   36
0EB2:  MOVLW  01
0EB4:  MOVWF  35
0EB6:  MOVLW  80
0EB8:  MOVWF  3C
0EBA:  CLRF   3B
0EBC:  CLRF   3A
0EBE:  CLRF   39
0EC0:  CLRF   40
0EC2:  CLRF   3F
0EC4:  CLRF   3E
0EC6:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
0EC8:  MOVWF  44
0ECA:  CLRF   43
0ECC:  CLRF   46
0ECE:  MOVLW  01
0ED0:  MOVWF  45
0ED2:  CLRF   48
0ED4:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
0ED6:  MOVLW  80
0ED8:  MOVWF  4C
0EDA:  CLRF   4B
0EDC:  CLRF   4E
0EDE:  MOVLW  01
0EE0:  MOVWF  4D
0EE2:  CLRF   50
0EE4:  CLRF   4F
....................       zt=zp=0; 
0EE6:  CLRF   4A
0EE8:  CLRF   49
0EEA:  MOVFF  4A,42
0EEE:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
0EF2:  MOVLW  20
0EF4:  MOVWF  54
0EF6:  CLRF   55
0EF8:  MOVLW  10
0EFA:  MOVWF  57
0EFC:  CLRF   58
....................       dem_led=0; 
0EFE:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
0F00:  CLRF   5C
0F02:  CLRF   5B
0F04:  CLRF   5A
0F06:  MOVLW  01
0F08:  MOVWF  59
0F0A:  CLRF   x60
0F0C:  CLRF   5F
0F0E:  CLRF   5E
0F10:  MOVWF  5D
0F12:  SETF   x64
0F14:  SETF   x63
0F16:  SETF   x62
0F18:  MOVLW  FE
0F1A:  MOVWF  x61
0F1C:  MOVLW  01
0F1E:  MOVWF  x71
0F20:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
0F22:  MOVLW  80
0F24:  MOVWF  x68
0F26:  CLRF   x67
0F28:  CLRF   x66
0F2A:  CLRF   x65
0F2C:  MOVWF  x6C
0F2E:  CLRF   x6B
0F30:  CLRF   x6A
0F32:  CLRF   x69
0F34:  MOVLW  7F
0F36:  MOVWF  x70
0F38:  SETF   x6F
0F3A:  SETF   x6E
0F3C:  SETF   x6D
....................      tgdlay = 0; 
0F3E:  CLRF   52
0F40:  CLRF   51
0F42:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
0F5E:  MOVLB  4
0F60:  CLRF   x8E
0F62:  MOVF   x8D,W
0F64:  SUBWF  x8E,W
0F66:  BC    0F74
....................       hien_thi_8led_7doan_quet_all(); 
0F68:  MOVLB  0
0F6A:  CALL   0716
0F6E:  MOVLB  4
0F70:  INCF   x8E,F
0F72:  BRA    0F62
....................       dem_led++; 
0F74:  INCF   53,F
0F76:  MOVLB  0
0F78:  GOTO   0F96 (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
0F44:  MOVLB  4
0F46:  MOVF   x8D,F
0F48:  BZ    0F56
0F4A:  MOVFF  48D,48E
0F4E:  MOVLB  0
0F50:  CALL   02A8
0F54:  MOVLB  4
....................       dem_led++; 
0F56:  INCF   53,F
0F58:  MOVLB  0
0F5A:  GOTO   0F96 (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
0F7C:  MOVLB  4
0F7E:  MOVF   x8C,F
0F80:  BNZ   0F8E
0F82:  MOVFF  48B,48D
0F86:  MOVLB  0
0F88:  BRA    0F44
0F8A:  MOVLB  0
0F8C:  BRA    0F96
....................    else              tang_dem_led_delay_1(dl); 
0F8E:  MOVFF  48B,48D
0F92:  MOVLB  0
0F94:  BRA    0F5E
0F96:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
0E86:  COMF   31,F
0E88:  COMF   32,F
0E8A:  COMF   33,F
0E8C:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
0E8E:  MOVFF  34,48E
0E92:  MOVFF  33,48D
0E96:  MOVFF  32,48C
0E9A:  MOVFF  31,48B
0E9E:  RCALL  0E62
0EA0:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
0F98:  DECFSZ 51,W
0F9A:  BRA    0FB4
0F9C:  MOVF   52,F
0F9E:  BNZ   0FB4
0FA0:  MOVFF  34,48E
0FA4:  MOVFF  33,48D
0FA8:  MOVFF  32,48C
0FAC:  MOVFF  31,48B
0FB0:  RCALL  0E62
0FB2:  BRA    0FEA
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
0FB4:  MOVF   51,W
0FB6:  SUBLW  32
0FB8:  BNZ   0FC2
0FBA:  MOVF   52,F
0FBC:  BNZ   0FC2
0FBE:  RCALL  0E86
0FC0:  BRA    0FEA
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
0FC2:  MOVF   51,W
0FC4:  SUBLW  64
0FC6:  BNZ   0FD0
0FC8:  MOVF   52,F
0FCA:  BNZ   0FD0
0FCC:  RCALL  0E86
0FCE:  BRA    0FEA
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
0FD0:  MOVF   51,W
0FD2:  SUBLW  96
0FD4:  BNZ   0FDE
0FD6:  MOVF   52,F
0FD8:  BNZ   0FDE
0FDA:  RCALL  0E86
0FDC:  BRA    0FEA
....................       else if (tgdlay==200)   
0FDE:  MOVF   51,W
0FE0:  SUBLW  C8
0FE2:  BNZ   0FEA
0FE4:  MOVF   52,F
0FE6:  BNZ   0FEA
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
0FE8:  RCALL  0EA2
....................       } 
....................       tgdlay++; 
0FEA:  INCF   51,F
0FEC:  BTFSC  FD8.2
0FEE:  INCF   52,F
....................       delay_chon(dl,chondelay); 
0FF0:  MOVFF  489,48B
0FF4:  MOVFF  48A,48C
0FF8:  RCALL  0F7C
0FFA:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
0FFC:  MOVF   53,W
0FFE:  SUBLW  0F
1000:  BNC   104A
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
1002:  MOVFF  4A,494
1006:  MOVFF  49,493
100A:  MOVFF  42,496
100E:  MOVFF  41,495
1012:  RCALL  0E3E
....................       zp= (zp<<1)+1;  
1014:  BCF    FD8.0
1016:  RLCF   49,W
1018:  MOVLB  4
101A:  MOVWF  x8B
101C:  RLCF   4A,W
101E:  MOVWF  x8C
1020:  MOVLW  01
1022:  ADDWF  x8B,W
1024:  MOVWF  49
1026:  MOVLW  00
1028:  ADDWFC x8C,W
102A:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
102C:  BCF    FD8.0
102E:  RRCF   42,W
1030:  MOVWF  x8C
1032:  RRCF   41,W
1034:  MOVWF  41
1036:  MOVLW  80
1038:  ADDWF  x8C,W
103A:  MOVWF  42
....................       delay_chon(dl,chondelay); 
103C:  MOVFF  489,48B
1040:  MOVFF  48A,48C
1044:  MOVLB  0
1046:  RCALL  0F7C
....................    } 
1048:  BRA    107C
....................    else  if (dem_led<32) 
104A:  MOVF   53,W
104C:  SUBLW  1F
104E:  BNC   107A
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
1050:  MOVFF  4A,494
1054:  MOVFF  49,493
1058:  MOVFF  42,496
105C:  MOVFF  41,495
1060:  RCALL  0E3E
....................       zp= (zp<<1);  
1062:  BCF    FD8.0
1064:  RLCF   49,F
1066:  RLCF   4A,F
....................       zt= (zt>>1); 
1068:  BCF    FD8.0
106A:  RRCF   42,F
106C:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
106E:  MOVFF  489,48B
1072:  MOVFF  48A,48C
1076:  RCALL  0F7C
....................    } 
1078:  BRA    107C
....................    else reset_toan_bo_bien(); 
107A:  RCALL  0EA2
107C:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
1184:  MOVF   53,W
1186:  SUBLW  0F
1188:  BNC   11BC
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
118A:  MOVFF  4A,494
118E:  MOVFF  49,493
1192:  MOVFF  4A,496
1196:  MOVFF  49,495
119A:  RCALL  0E3E
....................       zp= (zp>>1)+0x8000; 
119C:  BCF    FD8.0
119E:  RRCF   4A,W
11A0:  MOVLB  4
11A2:  MOVWF  x8C
11A4:  RRCF   49,W
11A6:  MOVWF  49
11A8:  MOVLW  80
11AA:  ADDWF  x8C,W
11AC:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
11AE:  MOVFF  489,48B
11B2:  MOVFF  48A,48C
11B6:  MOVLB  0
11B8:  RCALL  0F7C
....................    } 
11BA:  BRA    11E8
....................    else  if (dem_led<32) 
11BC:  MOVF   53,W
11BE:  SUBLW  1F
11C0:  BNC   11E6
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
11C2:  MOVFF  4A,494
11C6:  MOVFF  49,493
11CA:  MOVFF  4A,496
11CE:  MOVFF  49,495
11D2:  RCALL  0E3E
....................       zp= (zp>>1); 
11D4:  BCF    FD8.0
11D6:  RRCF   4A,F
11D8:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
11DA:  MOVFF  489,48B
11DE:  MOVFF  48A,48C
11E2:  RCALL  0F7C
....................     } 
11E4:  BRA    11E8
....................    else reset_toan_bo_bien(); 
11E6:  RCALL  0EA2
11E8:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
1100:  MOVF   53,W
1102:  SUBLW  1F
1104:  BNC   1152
....................    {   
....................       xuat_32led_don_1dw(y); 
1106:  MOVFF  34,48E
110A:  MOVFF  33,48D
110E:  MOVFF  32,48C
1112:  MOVFF  31,48B
1116:  RCALL  0E62
....................       y= (y<<1)+1; 
1118:  BCF    FD8.0
111A:  RLCF   31,W
111C:  MOVLB  4
111E:  MOVWF  x8C
1120:  RLCF   32,W
1122:  MOVWF  x8D
1124:  RLCF   33,W
1126:  MOVWF  x8E
1128:  RLCF   34,W
112A:  MOVWF  x8F
112C:  MOVLW  01
112E:  ADDWF  x8C,W
1130:  MOVWF  31
1132:  MOVLW  00
1134:  ADDWFC x8D,W
1136:  MOVWF  32
1138:  MOVLW  00
113A:  ADDWFC x8E,W
113C:  MOVWF  33
113E:  MOVLW  00
1140:  ADDWFC x8F,W
1142:  MOVWF  34
....................       delay_chon(dl,chondelay); 
1144:  MOVFF  489,48B
1148:  MOVFF  48A,48C
114C:  MOVLB  0
114E:  RCALL  0F7C
....................    } 
1150:  BRA    1182
....................    else  if (dem_led<64) 
1152:  MOVF   53,W
1154:  SUBLW  3F
1156:  BNC   1180
....................    {   
....................       xuat_32led_don_1dw(y);    
1158:  MOVFF  34,48E
115C:  MOVFF  33,48D
1160:  MOVFF  32,48C
1164:  MOVFF  31,48B
1168:  RCALL  0E62
....................       y= (y<<1);  
116A:  BCF    FD8.0
116C:  RLCF   31,F
116E:  RLCF   32,F
1170:  RLCF   33,F
1172:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
1174:  MOVFF  489,48B
1178:  MOVFF  48A,48C
117C:  RCALL  0F7C
....................    }  
117E:  BRA    1182
....................    else reset_toan_bo_bien(); 
1180:  RCALL  0EA2
1182:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
11EA:  MOVF   53,W
11EC:  SUBLW  1F
11EE:  BNC   1232
....................       {   
....................          xuat_32led_don_1dw(y); 
11F0:  MOVFF  34,48E
11F4:  MOVFF  33,48D
11F8:  MOVFF  32,48C
11FC:  MOVFF  31,48B
1200:  RCALL  0E62
....................          y= (y>>1)+0x80000000;  
1202:  BCF    FD8.0
1204:  RRCF   34,W
1206:  MOVLB  4
1208:  MOVWF  x8F
120A:  RRCF   33,W
120C:  MOVWF  x8E
120E:  RRCF   32,W
1210:  MOVWF  x8D
1212:  RRCF   31,W
1214:  MOVWF  31
1216:  MOVFF  48D,32
121A:  MOVFF  48E,33
121E:  MOVLW  80
1220:  ADDWF  x8F,W
1222:  MOVWF  34
....................          delay_chon(dl,chondelay);       
1224:  MOVFF  489,48B
1228:  MOVFF  48A,48C
122C:  MOVLB  0
122E:  RCALL  0F7C
....................       } 
1230:  BRA    1262
....................       else 
....................       if (dem_led<64) 
1232:  MOVF   53,W
1234:  SUBLW  3F
1236:  BNC   1260
....................       {   
....................          xuat_32led_don_1dw(y);  
1238:  MOVFF  34,48E
123C:  MOVFF  33,48D
1240:  MOVFF  32,48C
1244:  MOVFF  31,48B
1248:  RCALL  0E62
....................          y= (y>>1); 
124A:  BCF    FD8.0
124C:  RRCF   34,F
124E:  RRCF   33,F
1250:  RRCF   32,F
1252:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
1254:  MOVFF  489,48B
1258:  MOVFF  48A,48C
125C:  RCALL  0F7C
....................       }  
125E:  BRA    1262
....................       else reset_toan_bo_bien(); 
1260:  RCALL  0EA2
1262:  GOTO   155C (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
107E:  BTFSC  54.7
1080:  BRA    10FC
1082:  MOVF   54,W
1084:  SUBLW  00
1086:  BC    10FC
....................    { 
....................       if(j32<i32) 
1088:  MOVF   55,W
108A:  XORLW  80
108C:  MOVWF  00
108E:  MOVF   54,W
1090:  XORLW  80
1092:  SUBWF  00,W
1094:  BC    10D6
....................       { 
....................          y = y_codinh|yp_chay; 
1096:  MOVF   3D,W
1098:  IORWF  35,W
109A:  MOVWF  31
109C:  MOVF   3E,W
109E:  IORWF  36,W
10A0:  MOVWF  32
10A2:  MOVF   3F,W
10A4:  IORWF  37,W
10A6:  MOVWF  33
10A8:  MOVF   40,W
10AA:  IORWF  38,W
10AC:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
10AE:  MOVFF  34,48E
10B2:  MOVFF  33,48D
10B6:  MOVFF  32,48C
10BA:  MOVFF  31,48B
10BE:  RCALL  0E62
....................          delay_chon(dl,chondelay);        
10C0:  MOVFF  489,48B
10C4:  MOVFF  48A,48C
10C8:  RCALL  0F7C
....................          yp_chay = yp_chay <<1; 
10CA:  BCF    FD8.0
10CC:  RLCF   35,F
10CE:  RLCF   36,F
10D0:  RLCF   37,F
10D2:  RLCF   38,F
....................          j32++; 
10D4:  INCF   55,F
....................       } 
....................       if (j32==i32)  
10D6:  MOVF   54,W
10D8:  SUBWF  55,W
10DA:  BNZ   10FA
....................       { 
....................          i32--; 
10DC:  DECF   54,F
....................          j32=0;          
10DE:  CLRF   55
....................          y_codinh=y; 
10E0:  MOVFF  34,40
10E4:  MOVFF  33,3F
10E8:  MOVFF  32,3E
10EC:  MOVFF  31,3D
....................          yp_chay = 1; 
10F0:  CLRF   38
10F2:  CLRF   37
10F4:  CLRF   36
10F6:  MOVLW  01
10F8:  MOVWF  35
....................       } 
....................    } 
10FA:  BRA    10FE
....................    else reset_toan_bo_bien(); 
10FC:  RCALL  0EA2
10FE:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
027C:  BSF    x73.0
027E:  MOVFF  73,493
0282:  MOVFF  492,494
0286:  RCALL  0268
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
0288:  BCF    x73.0
028A:  MOVFF  73,493
028E:  MOVFF  492,494
0292:  RCALL  0268
0294:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0296:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0298:  MOVFF  491,492
029C:  RCALL  027C
....................       delay_us(20); 
029E:  MOVLW  21
02A0:  MOVWF  00
02A2:  DECFSZ 00,F
02A4:  BRA    02A2
02A6:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0544:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0546:  MOVFF  48E,492
054A:  RCALL  027C
....................       delay_us(20); 
054C:  MOVLW  21
054E:  MOVWF  00
0550:  DECFSZ 00,F
0552:  BRA    0550
0554:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
02D0:  BCF    x73.0
....................          lcd_rw = 0;  
02D2:  BCF    x73.1
....................          lcd_rs = 1;  
02D4:  BSF    x73.2
....................          lcd_p =0; 
02D6:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
02D8:  MOVLW  38
02DA:  MOVLB  4
02DC:  MOVWF  x91
02DE:  MOVLB  0
02E0:  RCALL  0296
....................          delay_us(40); 
02E2:  MOVLW  42
02E4:  MOVWF  00
02E6:  DECFSZ 00,F
02E8:  BRA    02E6
02EA:  NOP   
....................          lcd_command(lcd_display_control);    
02EC:  MOVLW  0C
02EE:  MOVLB  4
02F0:  MOVWF  x91
02F2:  MOVLB  0
02F4:  RCALL  0296
....................          delay_us(40); 
02F6:  MOVLW  42
02F8:  MOVWF  00
02FA:  DECFSZ 00,F
02FC:  BRA    02FA
02FE:  NOP   
....................          lcd_command(lcd_clear_display);       
0300:  MOVLW  01
0302:  MOVLB  4
0304:  MOVWF  x91
0306:  MOVLB  0
0308:  RCALL  0296
....................          delay_ms(2); 
030A:  MOVLW  02
030C:  MOVLB  4
030E:  MOVWF  x8E
0310:  MOVLB  0
0312:  RCALL  02A8
....................          lcd_command(lcd_entry_mode);        
0314:  MOVLW  06
0316:  MOVLB  4
0318:  MOVWF  x91
031A:  MOVLB  0
031C:  RCALL  0296
....................          delay_us(40);                 
031E:  MOVLW  42
0320:  MOVWF  00
0322:  DECFSZ 00,F
0324:  BRA    0322
0326:  NOP   
0328:  GOTO   1364 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
*
0914:  CLRF   03
0916:  MOVLB  4
0918:  MOVF   x8E,W
091A:  MOVLB  0
091C:  RCALL  018A
091E:  MOVLB  4
0920:  ADDWF  x8F,W
0922:  MOVWF  x90
0924:  MOVWF  x91
0926:  MOVLB  0
0928:  RCALL  0296
092A:  RETURN 0
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0340:  BSF    x74.2
0342:  MOVFF  74,492
0346:  MOVFF  491,493
034A:  RCALL  032C
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
034C:  BCF    x74.2
034E:  MOVFF  74,492
0352:  MOVFF  491,493
0356:  RCALL  032C
0358:  RETURN 0
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
035A:  BCF    x74.4
....................       glcd_xuat_8bit(glcd_data2);       
035C:  MOVFF  48E,491
0360:  RCALL  0340
0362:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
*
045E:  BSF    x74.4
....................       glcd_xuat_8bit(glcd_data3);      
0460:  MOVFF  490,491
0464:  RCALL  0340
0466:  RETURN 0
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
*
0364:  BSF    x74.0
....................          glcd_cs2 = 1; 
0366:  BSF    x74.1
....................          glcd_e  = 0; 
0368:  BCF    x74.2
....................          glcd_rw = 0;           
036A:  BCF    x74.3
....................          glcd_p =0;          
036C:  BCF    x74.5
....................          glcd_command(glcd_function_set_mode);          
036E:  MOVFF  489,48E
0372:  RCALL  035A
....................          delay_us(10); 
0374:  MOVLW  10
0376:  MOVWF  00
0378:  DECFSZ 00,F
037A:  BRA    0378
037C:  NOP   
....................          glcd_command(glcd_cursor_display);        
037E:  MOVLW  0C
0380:  MOVLB  4
0382:  MOVWF  x8E
0384:  MOVLB  0
0386:  RCALL  035A
....................          delay_us(10);     
0388:  MOVLW  10
038A:  MOVWF  00
038C:  DECFSZ 00,F
038E:  BRA    038C
0390:  NOP   
....................          glcd_command(glcd_clear_display);       
0392:  MOVLW  01
0394:  MOVLB  4
0396:  MOVWF  x8E
0398:  MOVLB  0
039A:  RCALL  035A
....................          delay_ms(2); 
039C:  MOVLW  02
039E:  MOVLB  4
03A0:  MOVWF  x8E
03A2:  MOVLB  0
03A4:  RCALL  02A8
....................          glcd_command(glcd_entry_mode);       
03A6:  MOVLW  06
03A8:  MOVLB  4
03AA:  MOVWF  x8E
03AC:  MOVLB  0
03AE:  RCALL  035A
....................          delay_us(10);                           
03B0:  MOVLW  10
03B2:  MOVWF  00
03B4:  DECFSZ 00,F
03B6:  BRA    03B4
03B8:  NOP   
03BA:  GOTO   1370 (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
*
03E0:  MOVLB  4
03E2:  MOVF   x8D,F
03E4:  BZ    03EC
03E6:  SETF   x8F
03E8:  SETF   x8E
03EA:  BRA    03F0
03EC:  CLRF   x8F
03EE:  CLRF   x8E
....................   for (doc=0; doc < glcd_doc; doc++)  
03F0:  MOVLB  0
03F2:  CLRF   x75
03F4:  MOVF   x75,W
03F6:  SUBLW  1F
03F8:  BNC   045A
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
03FA:  CLRF   x76
03FC:  MOVF   x76,W
03FE:  SUBLW  0F
0400:  BNC   0456
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
0402:  MOVLB  4
0404:  CLRF   xAE
0406:  MOVFF  75,4AD
040A:  CLRF   xB0
040C:  MOVLW  20
040E:  MOVWF  xAF
0410:  MOVLB  0
0412:  RCALL  03BE
0414:  MOVF   01,W
0416:  ADDLW  01
0418:  MOVLB  4
041A:  MOVWF  x90
041C:  MOVLW  00
041E:  ADDWFC 02,W
0420:  MOVWF  x91
0422:  CLRF   03
0424:  MOVLB  0
0426:  MOVFF  76,02
042A:  BCF    FD8.0
042C:  RLCF   02,F
042E:  RLCF   03,F
0430:  MOVF   02,W
0432:  MOVLB  4
0434:  ADDWF  x90,F
0436:  MOVF   03,W
0438:  ADDWFC x91,F
043A:  MOVLW  77
043C:  ADDWF  x90,W
043E:  MOVWF  FE9
0440:  MOVLW  00
0442:  ADDWFC x91,W
0444:  MOVWF  FEA
0446:  MOVFF  48F,FEC
044A:  MOVF   FED,F
044C:  MOVFF  48E,FEF
0450:  MOVLB  0
0452:  INCF   x76,F
0454:  BRA    03FC
....................     }  
0456:  INCF   x75,F
0458:  BRA    03F4
....................   }  
....................   gdram_vdk.refresh = true;  
045A:  BSF    x77.0
045C:  RETURN 0
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
*
0A2E:  MOVLB  4
0A30:  MOVF   xAA,W
0A32:  SUBLW  1F
0A34:  BC    0A3E
0A36:  MOVLW  80
0A38:  ADDWF  xA9,F
0A3A:  MOVLW  20
0A3C:  SUBWF  xAA,F
....................   doc = y;  
0A3E:  MOVFF  4AA,75
....................   ngang = x/16;  
0A42:  SWAPF  xA9,W
0A44:  MOVLB  0
0A46:  MOVWF  x76
0A48:  MOVLW  0F
0A4A:  ANDWF  x76,F
....................   b = 15 - (x % 16);  
0A4C:  MOVLB  4
0A4E:  MOVF   xA9,W
0A50:  ANDLW  0F
0A52:  XORLW  FF
0A54:  ADDLW  10
0A56:  MOVWF  xAC
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
0A58:  DECFSZ xAB,W
0A5A:  BRA    0AC6
0A5C:  CLRF   xAE
0A5E:  MOVFF  75,4AD
0A62:  CLRF   xB0
0A64:  MOVLW  20
0A66:  MOVWF  xAF
0A68:  MOVLB  0
0A6A:  RCALL  03BE
0A6C:  MOVF   01,W
0A6E:  ADDLW  01
0A70:  MOVLB  4
0A72:  MOVWF  xAD
0A74:  MOVLW  00
0A76:  ADDWFC 02,W
0A78:  MOVWF  xAE
0A7A:  CLRF   03
0A7C:  MOVLB  0
0A7E:  MOVFF  76,02
0A82:  BCF    FD8.0
0A84:  RLCF   02,F
0A86:  RLCF   03,F
0A88:  MOVF   02,W
0A8A:  MOVLB  4
0A8C:  ADDWF  xAD,F
0A8E:  MOVF   03,W
0A90:  ADDWFC xAE,F
0A92:  MOVLW  77
0A94:  ADDWF  xAD,W
0A96:  MOVWF  01
0A98:  MOVLW  00
0A9A:  ADDWFC xAE,W
0A9C:  MOVWF  03
0A9E:  MOVFF  01,FE9
0AA2:  MOVWF  FEA
0AA4:  CLRF   03
0AA6:  MOVLW  01
0AA8:  MOVWF  02
0AAA:  MOVF   xAC,W
0AAC:  MOVWF  00
0AAE:  BZ    0ABA
0AB0:  BCF    FD8.0
0AB2:  RLCF   02,F
0AB4:  RLCF   03,F
0AB6:  DECFSZ 00,F
0AB8:  BRA    0AB0
0ABA:  MOVF   02,W
0ABC:  IORWF  FEF,F
0ABE:  MOVF   03,W
0AC0:  IORWF  FEC,W
0AC2:  MOVWF  FEF
0AC4:  BRA    0B38
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
0AC6:  CLRF   xAE
0AC8:  MOVFF  75,4AD
0ACC:  CLRF   xB0
0ACE:  MOVLW  20
0AD0:  MOVWF  xAF
0AD2:  MOVLB  0
0AD4:  RCALL  03BE
0AD6:  MOVF   01,W
0AD8:  ADDLW  01
0ADA:  MOVLB  4
0ADC:  MOVWF  xAD
0ADE:  MOVLW  00
0AE0:  ADDWFC 02,W
0AE2:  MOVWF  xAE
0AE4:  CLRF   03
0AE6:  MOVLB  0
0AE8:  MOVFF  76,02
0AEC:  BCF    FD8.0
0AEE:  RLCF   02,F
0AF0:  RLCF   03,F
0AF2:  MOVF   02,W
0AF4:  MOVLB  4
0AF6:  ADDWF  xAD,F
0AF8:  MOVF   03,W
0AFA:  ADDWFC xAE,F
0AFC:  MOVLW  77
0AFE:  ADDWF  xAD,W
0B00:  MOVWF  01
0B02:  MOVLW  00
0B04:  ADDWFC xAE,W
0B06:  MOVWF  03
0B08:  MOVFF  01,FE9
0B0C:  MOVWF  FEA
0B0E:  CLRF   03
0B10:  MOVLW  01
0B12:  MOVWF  02
0B14:  MOVF   xAC,W
0B16:  MOVWF  00
0B18:  BZ    0B24
0B1A:  BCF    FD8.0
0B1C:  RLCF   02,F
0B1E:  RLCF   03,F
0B20:  DECFSZ 00,F
0B22:  BRA    0B1A
0B24:  MOVF   02,W
0B26:  XORLW  FF
0B28:  MOVWF  00
0B2A:  MOVLW  FF
0B2C:  XORWF  03,F
0B2E:  MOVF   00,W
0B30:  ANDWF  FEF,F
0B32:  MOVF   03,W
0B34:  ANDWF  FEC,W
0B36:  MOVWF  FEF
....................   gdram_vdk.refresh = true;  
0B38:  MOVLB  0
0B3A:  BSF    x77.0
0B3C:  RETURN 0
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
*
0468:  BTFSS  x77.0
046A:  BRA    0542
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
046C:  CLRF   x75
046E:  MOVF   x75,W
0470:  SUBLW  1F
0472:  BNC   0540
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
0474:  MOVF   x75,W
0476:  IORLW  80
0478:  MOVLB  4
047A:  MOVWF  x8D
047C:  MOVWF  x8E
047E:  MOVLB  0
0480:  RCALL  035A
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
0482:  MOVLW  80
0484:  MOVLB  4
0486:  MOVWF  x8E
0488:  MOVLB  0
048A:  RCALL  035A
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
048C:  CLRF   x76
048E:  MOVF   x76,W
0490:  SUBLW  0F
0492:  BNC   053C
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
0494:  MOVLB  4
0496:  CLRF   xAE
0498:  MOVFF  75,4AD
049C:  CLRF   xB0
049E:  MOVLW  20
04A0:  MOVWF  xAF
04A2:  MOVLB  0
04A4:  RCALL  03BE
04A6:  MOVF   01,W
04A8:  ADDLW  01
04AA:  MOVLB  4
04AC:  MOVWF  x8D
04AE:  MOVLW  00
04B0:  ADDWFC 02,W
04B2:  MOVWF  x8E
04B4:  CLRF   03
04B6:  MOVLB  0
04B8:  MOVFF  76,02
04BC:  BCF    FD8.0
04BE:  RLCF   02,F
04C0:  RLCF   03,F
04C2:  MOVF   02,W
04C4:  MOVLB  4
04C6:  ADDWF  x8D,F
04C8:  MOVF   03,W
04CA:  ADDWFC x8E,F
04CC:  MOVLW  01
04CE:  ADDWF  x8D,W
04D0:  MOVWF  01
04D2:  MOVLW  00
04D4:  ADDWFC x8E,W
04D6:  MOVWF  03
04D8:  MOVF   01,W
04DA:  ADDLW  77
04DC:  MOVWF  FE9
04DE:  MOVLW  00
04E0:  ADDWFC 03,W
04E2:  MOVWF  FEA
04E4:  MOVFF  FEF,490
04E8:  MOVLB  0
04EA:  RCALL  045E
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
04EC:  MOVLB  4
04EE:  CLRF   xAE
04F0:  MOVFF  75,4AD
04F4:  CLRF   xB0
04F6:  MOVLW  20
04F8:  MOVWF  xAF
04FA:  MOVLB  0
04FC:  RCALL  03BE
04FE:  MOVF   01,W
0500:  ADDLW  01
0502:  MOVLB  4
0504:  MOVWF  x8D
0506:  MOVLW  00
0508:  ADDWFC 02,W
050A:  MOVWF  x8E
050C:  CLRF   03
050E:  MOVLB  0
0510:  MOVFF  76,02
0514:  BCF    FD8.0
0516:  RLCF   02,F
0518:  RLCF   03,F
051A:  MOVF   02,W
051C:  MOVLB  4
051E:  ADDWF  x8D,F
0520:  MOVF   03,W
0522:  ADDWFC x8E,F
0524:  MOVLW  77
0526:  ADDWF  x8D,W
0528:  MOVWF  FE9
052A:  MOVLW  00
052C:  ADDWFC x8E,W
052E:  MOVWF  FEA
0530:  MOVFF  FEF,490
0534:  MOVLB  0
0536:  RCALL  045E
0538:  INCF   x76,F
053A:  BRA    048E
....................       }  
053C:  INCF   x75,F
053E:  BRA    046E
....................     }  
....................     gdram_vdk.refresh = false;  
0540:  BCF    x77.0
....................   }  
0542:  RETURN 0
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0B3E:  MOVLW  01
0B40:  MOVLB  4
0B42:  MOVWF  xA2
0B44:  MOVWF  xA3
0B46:  CLRF   xA8
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0B48:  MOVF   x99,W
0B4A:  SUBWF  x9B,W
0B4C:  MOVWF  xA9
0B4E:  MOVF   xA9,W
0B50:  BTFSS  xA9.7
0B52:  BRA    0B5A
0B54:  MOVLW  00
0B56:  BSF    FD8.0
0B58:  SUBFWB xA9,W
0B5A:  CLRF   03
0B5C:  MOVWF  xA0
0B5E:  MOVFF  03,4A1
....................    dy = abs((signed int8)(y2 - y1)); 
0B62:  MOVF   x9A,W
0B64:  SUBWF  x9C,W
0B66:  MOVWF  xA9
0B68:  MOVF   xA9,W
0B6A:  BTFSS  xA9.7
0B6C:  BRA    0B74
0B6E:  MOVLW  00
0B70:  BSF    FD8.0
0B72:  SUBFWB xA9,W
0B74:  CLRF   03
0B76:  MOVWF  x9E
0B78:  MOVFF  03,49F
....................    #endif 
....................  
....................    if(x1 > x2) 
0B7C:  MOVF   x99,W
0B7E:  SUBWF  x9B,W
0B80:  BC    0B84
....................       addx = -1; 
0B82:  SETF   xA2
....................    if(y1 > y2) 
0B84:  MOVF   x9A,W
0B86:  SUBWF  x9C,W
0B88:  BC    0B8C
....................       addy = -1; 
0B8A:  SETF   xA3
....................  
....................    if(dx >= dy) 
0B8C:  MOVF   x9F,W
0B8E:  SUBWF  xA1,W
0B90:  BNC   0C06
0B92:  BNZ   0B9A
0B94:  MOVF   x9E,W
0B96:  SUBWF  xA0,W
0B98:  BNC   0C06
....................    { 
....................       dy *= 2; 
0B9A:  BCF    FD8.0
0B9C:  RLCF   x9E,F
0B9E:  RLCF   x9F,F
....................       P = dy - dx; 
0BA0:  MOVF   xA0,W
0BA2:  SUBWF  x9E,W
0BA4:  MOVWF  00
0BA6:  MOVF   xA1,W
0BA8:  SUBWFB x9F,W
0BAA:  MOVFF  00,4A4
0BAE:  MOVWF  xA5
....................       diff = P - dx; 
0BB0:  MOVF   xA0,W
0BB2:  SUBWF  xA4,W
0BB4:  MOVWF  xA6
0BB6:  MOVF   xA1,W
0BB8:  SUBWFB xA5,W
0BBA:  MOVWF  xA7
....................  
....................       for(; i<=dx; ++i) 
0BBC:  MOVF   xA1,F
0BBE:  BNZ   0BC6
0BC0:  MOVF   xA8,W
0BC2:  SUBWF  xA0,W
0BC4:  BNC   0C04
....................       { 
....................          glcd_pixel(x1, y1, color); 
0BC6:  MOVFF  499,4A9
0BCA:  MOVFF  49A,4AA
0BCE:  MOVFF  49D,4AB
0BD2:  MOVLB  0
0BD4:  RCALL  0A2E
....................  
....................          if(P < 0) 
0BD6:  MOVLB  4
0BD8:  BTFSS  xA5.7
0BDA:  BRA    0BEC
....................          { 
....................             P  += dy; 
0BDC:  MOVF   x9E,W
0BDE:  ADDWF  xA4,F
0BE0:  MOVF   x9F,W
0BE2:  ADDWFC xA5,F
....................             x1 += addx; 
0BE4:  MOVF   xA2,W
0BE6:  ADDWF  x99,W
0BE8:  MOVWF  x99
....................          } 
0BEA:  BRA    0C00
....................          else 
....................          { 
....................             P  += diff; 
0BEC:  MOVF   xA6,W
0BEE:  ADDWF  xA4,F
0BF0:  MOVF   xA7,W
0BF2:  ADDWFC xA5,F
....................             x1 += addx; 
0BF4:  MOVF   xA2,W
0BF6:  ADDWF  x99,W
0BF8:  MOVWF  x99
....................             y1 += addy; 
0BFA:  MOVF   xA3,W
0BFC:  ADDWF  x9A,W
0BFE:  MOVWF  x9A
....................          } 
0C00:  INCF   xA8,F
0C02:  BRA    0BBC
....................       } 
....................    } 
0C04:  BRA    0C70
....................    else 
....................    { 
....................       dx *= 2; 
0C06:  BCF    FD8.0
0C08:  RLCF   xA0,F
0C0A:  RLCF   xA1,F
....................       P = dx - dy; 
0C0C:  MOVF   x9E,W
0C0E:  SUBWF  xA0,W
0C10:  MOVWF  00
0C12:  MOVF   x9F,W
0C14:  SUBWFB xA1,W
0C16:  MOVFF  00,4A4
0C1A:  MOVWF  xA5
....................       diff = P - dy; 
0C1C:  MOVF   x9E,W
0C1E:  SUBWF  xA4,W
0C20:  MOVWF  xA6
0C22:  MOVF   x9F,W
0C24:  SUBWFB xA5,W
0C26:  MOVWF  xA7
....................  
....................       for(; i<=dy; ++i) 
0C28:  MOVF   x9F,F
0C2A:  BNZ   0C32
0C2C:  MOVF   xA8,W
0C2E:  SUBWF  x9E,W
0C30:  BNC   0C70
....................       { 
....................          glcd_pixel(x1, y1, color); 
0C32:  MOVFF  499,4A9
0C36:  MOVFF  49A,4AA
0C3A:  MOVFF  49D,4AB
0C3E:  MOVLB  0
0C40:  RCALL  0A2E
....................  
....................          if(P < 0) 
0C42:  MOVLB  4
0C44:  BTFSS  xA5.7
0C46:  BRA    0C58
....................          { 
....................             P  += dx; 
0C48:  MOVF   xA0,W
0C4A:  ADDWF  xA4,F
0C4C:  MOVF   xA1,W
0C4E:  ADDWFC xA5,F
....................             y1 += addy; 
0C50:  MOVF   xA3,W
0C52:  ADDWF  x9A,W
0C54:  MOVWF  x9A
....................          } 
0C56:  BRA    0C6C
....................          else 
....................          { 
....................             P  += diff; 
0C58:  MOVF   xA6,W
0C5A:  ADDWF  xA4,F
0C5C:  MOVF   xA7,W
0C5E:  ADDWFC xA5,F
....................             x1 += addx; 
0C60:  MOVF   xA2,W
0C62:  ADDWF  x99,W
0C64:  MOVWF  x99
....................             y1 += addy; 
0C66:  MOVF   xA3,W
0C68:  ADDWF  x9A,W
0C6A:  MOVWF  x9A
....................          } 
0C6C:  INCF   xA8,F
0C6E:  BRA    0C28
....................       } 
....................    } 
0C70:  MOVLB  0
0C72:  RETURN 0
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
0C74:  MOVLB  4
0C76:  MOVF   x92,F
0C78:  BZ    0CD6
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
0C7A:  MOVF   x90,W
0C7C:  SUBWF  x8E,W
0C7E:  BC    0C8A
....................       { 
....................          xmin = x1; 
0C80:  MOVFF  48E,495
....................          xmax = x2; 
0C84:  MOVFF  490,496
....................       } 
0C88:  BRA    0C92
....................       else 
....................       { 
....................          xmin = x2; 
0C8A:  MOVFF  490,495
....................          xmax = x1; 
0C8E:  MOVFF  48E,496
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
0C92:  MOVF   x91,W
0C94:  SUBWF  x8F,W
0C96:  BC    0CA2
....................       { 
....................          ymin = y1; 
0C98:  MOVFF  48F,497
....................          ymax = y2; 
0C9C:  MOVFF  491,498
....................       } 
0CA0:  BRA    0CAA
....................       else 
....................       { 
....................          ymin = y2; 
0CA2:  MOVFF  491,497
....................          ymax = y1; 
0CA6:  MOVFF  48F,498
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
0CAA:  MOVF   x95,W
0CAC:  SUBWF  x96,W
0CAE:  BNC   0CD4
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
0CB0:  MOVFF  497,494
0CB4:  MOVF   x94,W
0CB6:  SUBWF  x98,W
0CB8:  BNC   0CD0
....................          { 
....................             glcd_pixel(xmin, i, color); 
0CBA:  MOVFF  495,4A9
0CBE:  MOVFF  494,4AA
0CC2:  MOVFF  493,4AB
0CC6:  MOVLB  0
0CC8:  RCALL  0A2E
0CCA:  MOVLB  4
0CCC:  INCF   x94,F
0CCE:  BRA    0CB4
....................          } 
0CD0:  INCF   x95,F
0CD2:  BRA    0CAA
....................       } 
....................    } 
0CD4:  BRA    0D32
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
0CD6:  MOVFF  48E,499
0CDA:  MOVFF  48F,49A
0CDE:  MOVFF  490,49B
0CE2:  MOVFF  48F,49C
0CE6:  MOVFF  493,49D
0CEA:  MOVLB  0
0CEC:  RCALL  0B3E
....................       glcd_line(x1, y2, x2, y2, color); 
0CEE:  MOVFF  48E,499
0CF2:  MOVFF  491,49A
0CF6:  MOVFF  490,49B
0CFA:  MOVFF  491,49C
0CFE:  MOVFF  493,49D
0D02:  RCALL  0B3E
....................       glcd_line(x1, y1, x1, y2, color); 
0D04:  MOVFF  48E,499
0D08:  MOVFF  48F,49A
0D0C:  MOVFF  48E,49B
0D10:  MOVFF  491,49C
0D14:  MOVFF  493,49D
0D18:  RCALL  0B3E
....................       glcd_line(x2, y1, x2, y2, color); 
0D1A:  MOVFF  490,499
0D1E:  MOVFF  48F,49A
0D22:  MOVFF  490,49B
0D26:  MOVFF  491,49C
0D2A:  MOVFF  493,49D
0D2E:  RCALL  0B3E
0D30:  MOVLB  4
....................    } 
0D32:  MOVLB  0
0D34:  RETURN 0
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio,dem_tg_exit = 0; 
.................... int8 dem = 0; 
.................... int8 dead = 0; 
.................... int8 mode = 0; 
.................... signed int8 max = 120,D,C; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
019E:  MOVLB  4
01A0:  INCF   x79,F
....................    set_timer1(3036); //3036 
01A2:  MOVLW  0B
01A4:  MOVWF  FCF
01A6:  MOVLW  DC
01A8:  MOVWF  FCE
01AA:  BCF    F9E.0
01AC:  MOVLB  0
01AE:  GOTO   0060
.................... } 
....................  
.................... void draw(unsigned int8 Number) { 
*
0D36:  MOVFF  483,48E
0D3A:  MOVLW  64
0D3C:  MOVLB  4
0D3E:  MOVWF  x8F
0D40:  MOVLB  0
0D42:  RCALL  08E8
0D44:  MOVFF  01,48A
0D48:  MOVFF  483,48E
0D4C:  MOVLW  0A
0D4E:  MOVLB  4
0D50:  MOVWF  x8F
0D52:  MOVLB  0
0D54:  RCALL  08E8
0D56:  MOVFF  01,48E
0D5A:  MOVLW  0A
0D5C:  MOVLB  4
0D5E:  MOVWF  x8F
0D60:  MOVLB  0
0D62:  RCALL  08E8
0D64:  MOVFF  00,48B
0D68:  MOVFF  483,48E
0D6C:  MOVLW  0A
0D6E:  MOVLB  4
0D70:  MOVWF  x8F
0D72:  MOVLB  0
0D74:  RCALL  08E8
0D76:  MOVFF  00,48C
....................    int G = count/100; 
....................    int H = (count/10)%10; 
....................    int J = count%10; 
....................    glcd_mau_nen(0); 
0D7A:  MOVLB  4
0D7C:  CLRF   x8D
0D7E:  MOVLB  0
0D80:  CALL   03E0
....................    gdram_vdk_to_gdram_glcd_all();     
0D84:  CALL   0468
....................    glcd_rect(10,63,20,63-7*G,1,1); 
0D88:  MOVLB  4
0D8A:  MOVF   x8A,W
0D8C:  MULLW  07
0D8E:  MOVF   FF3,W
0D90:  XORLW  FF
0D92:  ADDLW  40
0D94:  MOVWF  x8D
0D96:  MOVLW  0A
0D98:  MOVWF  x8E
0D9A:  MOVLW  3F
0D9C:  MOVWF  x8F
0D9E:  MOVLW  14
0DA0:  MOVWF  x90
0DA2:  MOVFF  48D,491
0DA6:  MOVLW  01
0DA8:  MOVWF  x92
0DAA:  MOVWF  x93
0DAC:  MOVLB  0
0DAE:  RCALL  0C74
....................    glcd_rect(30,63,40,63-7*H,1,1); 
0DB0:  MOVLB  4
0DB2:  MOVF   x8B,W
0DB4:  MULLW  07
0DB6:  MOVF   FF3,W
0DB8:  XORLW  FF
0DBA:  ADDLW  40
0DBC:  MOVWF  x8D
0DBE:  MOVLW  1E
0DC0:  MOVWF  x8E
0DC2:  MOVLW  3F
0DC4:  MOVWF  x8F
0DC6:  MOVLW  28
0DC8:  MOVWF  x90
0DCA:  MOVFF  48D,491
0DCE:  MOVLW  01
0DD0:  MOVWF  x92
0DD2:  MOVWF  x93
0DD4:  MOVLB  0
0DD6:  RCALL  0C74
....................    glcd_rect(50,63,60,63-7*J,1,1);   
0DD8:  MOVLB  4
0DDA:  MOVF   x8C,W
0DDC:  MULLW  07
0DDE:  MOVF   FF3,W
0DE0:  XORLW  FF
0DE2:  ADDLW  40
0DE4:  MOVWF  x8D
0DE6:  MOVLW  32
0DE8:  MOVWF  x8E
0DEA:  MOVLW  3F
0DEC:  MOVWF  x8F
0DEE:  MOVLW  3C
0DF0:  MOVWF  x90
0DF2:  MOVFF  48D,491
0DF6:  MOVLW  01
0DF8:  MOVWF  x92
0DFA:  MOVWF  x93
0DFC:  MOVLB  0
0DFE:  RCALL  0C74
....................    gdram_vdk_to_gdram_glcd_all();     
0E00:  CALL   0468
0E04:  GOTO   1430 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
*
097C:  MOVFF  48A,48E
0980:  MOVFF  48B,48F
0984:  RCALL  0914
....................    for (int i = 0; i<6;i++){ 
0986:  MOVLB  4
0988:  CLRF   x8C
098A:  MOVF   x8C,W
098C:  SUBLW  05
098E:  BNC   09E0
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
0990:  MOVF   x8C,W
0992:  SUBLW  03
0994:  BNZ   09A8
0996:  MOVLW  01
0998:  ADDWF  x8A,W
099A:  MOVWF  x8D
099C:  MOVWF  x8E
099E:  MOVFF  48B,48F
09A2:  MOVLB  0
09A4:  RCALL  0914
09A6:  MOVLB  4
....................       lcd_data(lcd_so_x[lcd_so][i]); 
09A8:  MOVFF  489,48D
09AC:  MOVLW  06
09AE:  MOVWF  x8E
09B0:  MOVLB  0
09B2:  BRA    092C
09B4:  MOVF   01,W
09B6:  MOVLB  4
09B8:  CLRF   x8E
09BA:  MOVWF  x8D
09BC:  CLRF   03
09BE:  MOVF   x8C,W
09C0:  ADDWF  x8D,W
09C2:  MOVWF  01
09C4:  MOVF   x8E,W
09C6:  ADDWFC 03,F
09C8:  MOVF   01,W
09CA:  MOVLB  0
09CC:  CALL   00E8
09D0:  MOVLB  4
09D2:  MOVWF  x8D
09D4:  MOVWF  x8E
09D6:  MOVLB  0
09D8:  RCALL  0544
09DA:  MOVLB  4
09DC:  INCF   x8C,F
09DE:  BRA    098A
....................    } 
09E0:  MOVLB  0
09E2:  RETURN 0
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
05C4:  MOVFF  478,489
05C8:  MOVLW  0A
05CA:  MOVLB  4
05CC:  MOVWF  x8A
05CE:  MOVLB  0
05D0:  RCALL  0578
05D2:  CLRF   03
05D4:  MOVF   00,W
05D6:  RCALL  00AE
05D8:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
05DA:  MOVFF  478,489
05DE:  MOVLW  0A
05E0:  MOVLB  4
05E2:  MOVWF  x8A
05E4:  MOVLB  0
05E6:  RCALL  0578
05E8:  CLRF   03
05EA:  MOVF   01,W
05EC:  RCALL  00AE
05EE:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
05F0:  MOVFF  47A,489
05F4:  MOVLW  0A
05F6:  MOVLB  4
05F8:  MOVWF  x8A
05FA:  MOVLB  0
05FC:  RCALL  0578
05FE:  CLRF   03
0600:  MOVF   00,W
0602:  RCALL  00AE
0604:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0606:  MOVFF  47A,489
060A:  MOVLW  0A
060C:  MOVLB  4
060E:  MOVWF  x8A
0610:  MOVLB  0
0612:  RCALL  0578
0614:  CLRF   03
0616:  MOVF   01,W
0618:  RCALL  00AE
061A:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
061C:  MOVFF  47B,489
0620:  MOVLW  0A
0622:  MOVLB  4
0624:  MOVWF  x8A
0626:  MOVLB  0
0628:  RCALL  0578
062A:  CLRF   03
062C:  MOVF   00,W
062E:  RCALL  00AE
0630:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0632:  MOVFF  47B,489
0636:  MOVLW  0A
0638:  MOVLB  4
063A:  MOVWF  x8A
063C:  MOVLB  0
063E:  RCALL  0578
0640:  CLRF   03
0642:  MOVF   01,W
0644:  RCALL  00AE
0646:  MOVWF  2D
....................    if (mode == 1) led_7dq[0] = led_7dq[0] & 0x7f; 
0648:  MOVLB  4
064A:  DECFSZ x7F,W
064C:  BRA    0652
064E:  BCF    26.7
0650:  BRA    0664
....................    else if (mode == 2) led_7dq[3] = led_7dq[3] & 0x7f; 
0652:  MOVF   x7F,W
0654:  SUBLW  02
0656:  BNZ   065C
0658:  BCF    29.7
065A:  BRA    0664
....................    else if (mode == 3) led_7dq[6] = led_7dq[6] & 0x7f; 
065C:  MOVF   x7F,W
065E:  SUBLW  03
0660:  BNZ   0664
0662:  BCF    2C.7
0664:  MOVLB  0
0666:  RETURN 0
.................... } 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    D = count/10; 
*
09E4:  MOVFF  483,48E
09E8:  MOVLW  0A
09EA:  MOVLB  4
09EC:  MOVWF  x8F
09EE:  MOVLB  0
09F0:  RCALL  08E8
09F2:  MOVFF  01,481
09F6:  MOVLB  4
....................    C = count%10; 
09F8:  MOVFF  483,48E
09FC:  MOVLW  0A
09FE:  MOVWF  x8F
0A00:  MOVLB  0
0A02:  RCALL  08E8
0A04:  MOVFF  00,482
0A08:  MOVLB  4
....................    LCD_SO_LON(D,1,0); 
0A0A:  MOVFF  481,489
0A0E:  MOVLW  01
0A10:  MOVWF  x8A
0A12:  CLRF   x8B
0A14:  MOVLB  0
0A16:  RCALL  097C
....................    LCD_SO_LON(C,1,3); 
0A18:  MOVFF  482,489
0A1C:  MOVLW  01
0A1E:  MOVLB  4
0A20:  MOVWF  x8A
0A22:  MOVLW  03
0A24:  MOVWF  x8B
0A26:  MOVLB  0
0A28:  RCALL  097C
0A2A:  GOTO   142A (RETURN)
....................     
....................     
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void tat_2_led_chinh(){ 
....................    if (mode == 1) {led_7dq[0] = 0xff; led_7dq[1] = 0xff;} 
....................    else if (mode == 2) {led_7dq[3] = 0xff; led_7dq[4] = 0xff;} 
....................    else if (mode == 3) {led_7dq[6] = 0xff; led_7dq[7] = 0xff;}    
.................... } 
....................  
.................... void main() 
*
1266:  CLRF   FF8
1268:  BCF    FD0.7
126A:  BSF    07.7
126C:  BSF    F93.1
126E:  BSF    F93.0
1270:  MOVLW  31
1272:  MOVWF  FC8
1274:  MOVLW  28
1276:  MOVWF  FC6
1278:  BSF    FC7.7
127A:  BCF    FC7.6
127C:  CLRF   1B
127E:  CLRF   22
1280:  CLRF   23
1282:  CLRF   24
1284:  CLRF   25
1286:  CLRF   2E
1288:  CLRF   2F
128A:  CLRF   30
128C:  CLRF   34
128E:  CLRF   33
1290:  CLRF   32
1292:  CLRF   31
1294:  CLRF   38
1296:  CLRF   37
1298:  CLRF   36
129A:  MOVLW  01
129C:  MOVWF  35
129E:  MOVLW  80
12A0:  MOVWF  3C
12A2:  CLRF   3B
12A4:  CLRF   3A
12A6:  CLRF   39
12A8:  CLRF   40
12AA:  CLRF   3F
12AC:  CLRF   3E
12AE:  CLRF   3D
12B0:  MOVWF  44
12B2:  CLRF   43
12B4:  CLRF   46
12B6:  MOVLW  01
12B8:  MOVWF  45
12BA:  CLRF   48
12BC:  CLRF   47
12BE:  MOVLW  80
12C0:  MOVWF  4C
12C2:  CLRF   4B
12C4:  CLRF   4E
12C6:  MOVLW  01
12C8:  MOVWF  4D
12CA:  CLRF   50
12CC:  CLRF   4F
12CE:  CLRF   52
12D0:  CLRF   51
12D2:  CLRF   53
12D4:  MOVLW  20
12D6:  MOVWF  54
12D8:  CLRF   55
12DA:  MOVLW  01
12DC:  MOVWF  56
12DE:  MOVLW  10
12E0:  MOVWF  57
12E2:  CLRF   58
12E4:  CLRF   5C
12E6:  CLRF   5B
12E8:  CLRF   5A
12EA:  MOVLW  01
12EC:  MOVWF  59
12EE:  CLRF   x60
12F0:  CLRF   5F
12F2:  CLRF   5E
12F4:  MOVWF  5D
12F6:  SETF   x64
12F8:  SETF   x63
12FA:  SETF   x62
12FC:  MOVLW  FE
12FE:  MOVWF  x61
1300:  MOVLW  80
1302:  MOVWF  x68
1304:  CLRF   x67
1306:  CLRF   x66
1308:  CLRF   x65
130A:  MOVWF  x6C
130C:  CLRF   x6B
130E:  CLRF   x6A
1310:  CLRF   x69
1312:  MOVLW  7F
1314:  MOVWF  x70
1316:  SETF   x6F
1318:  SETF   x6E
131A:  SETF   x6D
131C:  MOVLW  01
131E:  MOVWF  x71
1320:  MOVWF  x72
1322:  MOVLB  4
1324:  CLRF   x7C
1326:  CLRF   x7D
1328:  CLRF   x7E
132A:  CLRF   x7F
132C:  MOVLW  78
132E:  MOVWF  x80
1330:  CLRF   x83
1332:  CLRF   x84
1334:  CLRF   x85
1336:  CLRF   x87
1338:  CLRF   x86
133A:  MOVF   FC1,W
133C:  ANDLW  C0
133E:  IORLW  0F
1340:  MOVWF  FC1
1342:  MOVLW  07
1344:  MOVWF  FB4
1346:  SETF   26
1348:  SETF   27
134A:  SETF   28
134C:  SETF   29
134E:  SETF   2A
1350:  SETF   2B
1352:  SETF   2C
1354:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
1356:  MOVLB  0
1358:  GOTO   01C4
....................    set_tris_b(0x3c); 
135C:  MOVLW  3C
135E:  MOVWF  F93
....................    setup_lcd(); 
1360:  GOTO   02D0
....................    setup_glcd(glcd_graphic_mode); 
1364:  MOVLW  36
1366:  MOVLB  4
1368:  MOVWF  x89
136A:  MOVLB  0
136C:  GOTO   0364
....................  
....................    glcd_mau_nen(0); 
1370:  MOVLB  4
1372:  CLRF   x8D
1374:  MOVLB  0
1376:  CALL   03E0
....................    gdram_vdk_to_gdram_glcd_all(); 
137A:  CALL   0468
....................  
....................  
....................    lcd_command(0x40); 
137E:  MOVLW  40
1380:  MOVLB  4
1382:  MOVWF  x91
1384:  MOVLB  0
1386:  CALL   0296
....................    for (int i = 0; i<64;i++){ 
138A:  MOVLB  4
138C:  CLRF   x88
138E:  MOVF   x88,W
1390:  SUBLW  3F
1392:  BNC   13B0
....................       lcd_data(lcd_ma_8doan[i]); 
1394:  CLRF   03
1396:  MOVF   x88,W
1398:  MOVLB  0
139A:  CALL   013A
139E:  MOVLB  4
13A0:  MOVWF  x89
13A2:  MOVWF  x8E
13A4:  MOVLB  0
13A6:  CALL   0544
13AA:  MOVLB  4
13AC:  INCF   x88,F
13AE:  BRA    138E
....................    } 
....................  
....................    lcd_command(lcd_addr_line1); 
13B0:  MOVLW  80
13B2:  MOVWF  x91
13B4:  MOVLB  0
13B6:  CALL   0296
....................    lcd_data("**DEM SAN PHAM** "); 
13BA:  MOVLW  B2
13BC:  MOVWF  FF6
13BE:  MOVLW  01
13C0:  MOVWF  FF7
13C2:  GOTO   0556
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
13C6:  MOVLW  A8
13C8:  MOVWF  FD5
....................    set_timer0(0);    
13CA:  CLRF   FD7
13CC:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
13CE:  MOVLW  B5
13D0:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
13D2:  MOVLW  0B
13D4:  MOVWF  FCF
13D6:  MOVLW  DC
13D8:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
13DA:  MOVLW  C0
13DC:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
13DE:  BSF    F9D.0
....................  
....................  
....................    giay = 30; 
13E0:  MOVLW  1E
13E2:  MOVLB  4
13E4:  MOVWF  x78
....................    bdn = 0; 
13E6:  CLRF   x79
....................    phut = 29; 
13E8:  MOVLW  1D
13EA:  MOVWF  x7A
....................    gio = 15; 
13EC:  MOVLW  0F
13EE:  MOVWF  x7B
....................    giai_ma(); 
13F0:  MOVLB  0
13F2:  CALL   05C4
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
13F6:  MOVLB  4
13F8:  BTFSC  x79.7
13FA:  BRA    1404
13FC:  MOVF   x79,W
13FE:  SUBLW  09
1400:  BTFSS  FD8.0
1402:  BRA    1582
....................          hien_thi_8led_7doan_quet_all();      
1404:  MOVLB  0
1406:  CALL   0716
....................          count = get_timer0(); 
140A:  MOVF   FD6,W
140C:  MOVLB  4
140E:  MOVWF  x83
....................          if (count != countT) { 
1410:  MOVF   x84,W
1412:  SUBWF  x83,W
1414:  BZ    1448
....................             countT = count;          
1416:  MOVFF  483,484
....................             xuat_4led_7doan_giaima_xoa_so0(count); 
141A:  CLRF   x8A
141C:  MOVFF  483,489
1420:  MOVLB  0
1422:  GOTO   07BA
....................             LCD_DISPLAY_COUNTER(); 
1426:  GOTO   09E4
....................             draw(count); 
142A:  MOVFF  483,489
142E:  BRA    0D36
....................             if (count >= max+1) {set_timer0(1);}    
1430:  MOVLW  01
1432:  MOVLB  4
1434:  ADDWF  x80,W
1436:  MOVWF  00
1438:  BTFSC  FE8.7
143A:  BRA    1442
143C:  MOVF   00,W
143E:  SUBWF  x83,W
1440:  BNC   1448
1442:  CLRF   FD7
1444:  MOVLW  01
1446:  MOVWF  FD6
....................          } 
....................          if(ttct_td==1) sang_tat_32led(5,1); 
1448:  DECFSZ 56,W
144A:  BRA    145A
144C:  MOVLW  05
144E:  MOVWF  x89
1450:  MOVLW  01
1452:  MOVWF  x8A
1454:  MOVLB  0
1456:  RCALL  0F98
1458:  MOVLB  4
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
145A:  MOVF   56,W
145C:  SUBLW  02
145E:  BNZ   146E
1460:  MOVLW  05
1462:  MOVWF  x89
1464:  MOVLW  01
1466:  MOVWF  x8A
1468:  MOVLB  0
146A:  RCALL  0FFC
146C:  MOVLB  4
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
146E:  MOVF   56,W
1470:  SUBLW  03
1472:  BNZ   1482
1474:  MOVLW  05
1476:  MOVWF  x89
1478:  MOVLW  01
147A:  MOVWF  x8A
147C:  MOVLB  0
147E:  RCALL  107E
1480:  MOVLB  4
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
1482:  MOVF   56,W
1484:  SUBLW  04
1486:  BNZ   1496
1488:  MOVLW  05
148A:  MOVWF  x89
148C:  MOVLW  01
148E:  MOVWF  x8A
1490:  MOVLB  0
1492:  RCALL  1100
1494:  MOVLB  4
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
1496:  MOVF   56,W
1498:  SUBLW  05
149A:  BNZ   14AA
149C:  MOVLW  05
149E:  MOVWF  x89
14A0:  MOVLW  01
14A2:  MOVWF  x8A
14A4:  MOVLB  0
14A6:  RCALL  1184
14A8:  MOVLB  4
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
14AA:  MOVF   56,W
14AC:  SUBLW  06
14AE:  BNZ   14BE
14B0:  MOVLW  05
14B2:  MOVWF  x89
14B4:  MOVLW  01
14B6:  MOVWF  x8A
14B8:  MOVLB  0
14BA:  RCALL  107E
14BC:  MOVLB  4
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
14BE:  MOVF   56,W
14C0:  SUBLW  07
14C2:  BNZ   14D2
14C4:  MOVLW  05
14C6:  MOVWF  x89
14C8:  MOVLW  01
14CA:  MOVWF  x8A
14CC:  MOVLB  0
14CE:  RCALL  107E
14D0:  MOVLB  4
....................          if(ttct_td==8) sang_tat_32led(5,1); 
14D2:  MOVF   56,W
14D4:  SUBLW  08
14D6:  BNZ   14E6
14D8:  MOVLW  05
14DA:  MOVWF  x89
14DC:  MOVLW  01
14DE:  MOVWF  x8A
14E0:  MOVLB  0
14E2:  RCALL  0F98
14E4:  MOVLB  4
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
14E6:  MOVF   56,W
14E8:  SUBLW  09
14EA:  BNZ   14FA
14EC:  MOVLW  05
14EE:  MOVWF  x89
14F0:  MOVLW  01
14F2:  MOVWF  x8A
14F4:  MOVLB  0
14F6:  RCALL  0FFC
14F8:  MOVLB  4
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
14FA:  MOVF   56,W
14FC:  SUBLW  0A
14FE:  BNZ   150E
1500:  MOVLW  05
1502:  MOVWF  x89
1504:  MOVLW  01
1506:  MOVWF  x8A
1508:  MOVLB  0
150A:  RCALL  107E
150C:  MOVLB  4
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
150E:  MOVF   56,W
1510:  SUBLW  0B
1512:  BNZ   1522
1514:  MOVLW  05
1516:  MOVWF  x89
1518:  MOVLW  01
151A:  MOVWF  x8A
151C:  MOVLB  0
151E:  RCALL  1100
1520:  MOVLB  4
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
1522:  MOVF   56,W
1524:  SUBLW  0C
1526:  BNZ   1536
1528:  MOVLW  05
152A:  MOVWF  x89
152C:  MOVLW  01
152E:  MOVWF  x8A
1530:  MOVLB  0
1532:  RCALL  1184
1534:  MOVLB  4
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
1536:  MOVF   56,W
1538:  SUBLW  0D
153A:  BNZ   154A
153C:  MOVLW  05
153E:  MOVWF  x89
1540:  MOVLW  01
1542:  MOVWF  x8A
1544:  MOVLB  0
1546:  RCALL  1100
1548:  MOVLB  4
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
154A:  MOVF   56,W
154C:  SUBLW  0E
154E:  BNZ   155E
1550:  MOVLW  05
1552:  MOVWF  x89
1554:  MOVLW  01
1556:  MOVWF  x8A
1558:  MOVLB  0
155A:  BRA    11EA
155C:  MOVLB  4
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
155E:  MOVF   56,W
1560:  SUBLW  0F
1562:  BNZ   1572
1564:  MOVLW  05
1566:  MOVWF  x89
1568:  MOVLW  01
156A:  MOVWF  x8A
156C:  MOVLB  0
156E:  RCALL  107E
1570:  MOVLB  4
....................          if(ttct_td>15) ttct_td =1;       
1572:  BTFSC  56.7
1574:  BRA    1580
1576:  MOVF   56,W
1578:  SUBLW  0F
157A:  BC    1580
157C:  MOVLW  01
157E:  MOVWF  56
....................       } 
1580:  BRA    15B6
....................       else  
....................       { 
....................          bdn = bdn -10; 
1582:  MOVLW  0A
1584:  SUBWF  x79,F
....................          dem_tg_exit++; 
1586:  INCF   x7C,F
....................          if (dem_tg_exit == 20) mode = 0; giay++; 
1588:  MOVF   x7C,W
158A:  SUBLW  14
158C:  BTFSC  FD8.2
158E:  CLRF   x7F
1590:  INCF   x78,F
....................             if (giay==60) { giay = 0; phut++; 
1592:  MOVF   x78,W
1594:  SUBLW  3C
1596:  BNZ   15AE
1598:  CLRF   x78
159A:  INCF   x7A,F
....................                if (phut == 60) { phut = 0; gio++;  
159C:  MOVF   x7A,W
159E:  SUBLW  3C
15A0:  BNZ   15AE
15A2:  CLRF   x7A
15A4:  INCF   x7B,F
....................                   if (gio == 24) gio = 0; 
15A6:  MOVF   x7B,W
15A8:  SUBLW  18
15AA:  BNZ   15AE
15AC:  CLRF   x7B
....................                }  
....................             } 
....................          giai_ma(); 
15AE:  MOVLB  0
15B0:  CALL   05C4
15B4:  MOVLB  4
....................       } 
15B6:  BRA    13F8
....................    }            
.................... } 
....................  
15B8:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
