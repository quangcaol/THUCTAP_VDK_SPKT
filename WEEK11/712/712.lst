CCS PCH C Compiler, Version 5.078, 43599               13-Dec-20 08:30

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\712\712.lst

               ROM used:   7700 bytes (23%)
                           Largest free fragment is 25064
               RAM used:   1174 (57%) at main() level
                           1198 (58%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   1ACC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0138
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,8E
00CE:  DATA 7F,00
00D0:  CLRF   FF7
00D2:  ADDLW  E0
00D4:  MOVWF  FF6
00D6:  MOVLW  00
00D8:  ADDWFC FF7,F
00DA:  TBLRD*+
00DC:  MOVF   FF5,W
00DE:  RETURN 0
00E0:  DATA 7F,BF
00E2:  DATA DF,EF
00E4:  DATA F7,FB
00E6:  DATA FD,FE
00E8:  CLRF   FF7
00EA:  ADDLW  F8
00EC:  MOVWF  FF6
00EE:  MOVLW  00
00F0:  ADDWFC FF7,F
00F2:  TBLRD*+
00F4:  MOVF   FF5,W
00F6:  RETURN 0
00F8:  DATA 07,0F
00FA:  DATA 1F,1F
00FC:  DATA 1F,1F
00FE:  DATA 1F,1F
0100:  DATA 1F,1F
0102:  DATA 1F,00
0104:  DATA 00,00
0106:  DATA 00,00
0108:  DATA 1C,1E
010A:  DATA 1F,1F
010C:  DATA 1F,1F
010E:  DATA 1F,1F
0110:  DATA 00,00
0112:  DATA 00,00
0114:  DATA 00,1F
0116:  DATA 1F,1F
0118:  DATA 1F,1F
011A:  DATA 1F,1F
011C:  DATA 1F,1F
011E:  DATA 1E,1C
0120:  DATA 1F,1F
0122:  DATA 1F,1F
0124:  DATA 1F,1F
0126:  DATA 0F,07
0128:  DATA 1F,1F
012A:  DATA 1F,00
012C:  DATA 00,00
012E:  DATA 1F,1F
0130:  DATA 1F,1F
0132:  DATA 1F,1F
0134:  DATA 1F,1F
0136:  DATA 1F,1F
*
014C:  DATA 4E,48
014E:  DATA 49,45
0150:  DATA 54,20
0152:  DATA 44,4F
0154:  DATA 20,4C
0156:  DATA 4D,33
0158:  DATA 35,42
015A:  DATA 3A,20
015C:  DATA 25,6C
015E:  DATA 64,00
0160:  DATA 4E,48
0162:  DATA 49,45
0164:  DATA 54,20
0166:  DATA 44,4F
0168:  DATA 20,4C
016A:  DATA 4D,33
016C:  DATA 35,41
016E:  DATA 3A,20
0170:  DATA 25,6C
0172:  DATA 64,00
0174:  DATA 44,45
0176:  DATA 4D,20
0178:  DATA 53,41
017A:  DATA 4E,20
017C:  DATA 50,48
017E:  DATA 41,4D
0180:  DATA 3A,20
0182:  DATA 25,64
0184:  DATA 00,00
*
0394:  MOVLB  4
0396:  MOVF   x95,W
0398:  XORWF  x96,W
039A:  ANDLW  80
039C:  MOVWF  x98
039E:  BTFSS  x95.7
03A0:  BRA    03A6
03A2:  COMF   x95,F
03A4:  INCF   x95,F
03A6:  BTFSS  x96.7
03A8:  BRA    03AE
03AA:  COMF   x96,F
03AC:  INCF   x96,F
03AE:  MOVF   x96,W
03B0:  CLRF   01
03B2:  SUBWF  x95,W
03B4:  BC    03BC
03B6:  MOVFF  495,00
03BA:  BRA    03D4
03BC:  CLRF   00
03BE:  MOVLW  08
03C0:  MOVWF  x97
03C2:  RLCF   x95,F
03C4:  RLCF   00,F
03C6:  MOVF   x96,W
03C8:  SUBWF  00,W
03CA:  BTFSC  FD8.0
03CC:  MOVWF  00
03CE:  RLCF   01,F
03D0:  DECFSZ x97,F
03D2:  BRA    03C2
03D4:  BTFSS  x98.7
03D6:  BRA    03DC
03D8:  COMF   01,F
03DA:  INCF   01,F
03DC:  MOVLB  0
03DE:  RETURN 0
03E0:  TBLRD*+
03E2:  MOVFF  FF6,496
03E6:  MOVFF  FF7,497
03EA:  MOVFF  FF5,49E
03EE:  RCALL  0382
03F0:  MOVFF  496,FF6
03F4:  MOVFF  497,FF7
03F8:  MOVLB  4
03FA:  DECFSZ x95,F
03FC:  BRA    0400
03FE:  BRA    0404
0400:  MOVLB  0
0402:  BRA    03E0
0404:  MOVLB  0
0406:  RETURN 0
0408:  MOVFF  FEA,49D
040C:  MOVFF  FE9,49C
0410:  MOVLB  4
0412:  BTFSS  x96.7
0414:  BRA    0426
0416:  BSF    x9C.7
0418:  BTFSS  x9C.4
041A:  INCF   x9C,F
041C:  COMF   x95,F
041E:  COMF   x96,F
0420:  INCF   x95,F
0422:  BTFSC  FD8.2
0424:  INCF   x96,F
0426:  SWAPF  x96,W
0428:  IORLW  F0
042A:  MOVWF  x98
042C:  ADDWF  x98,F
042E:  ADDLW  E2
0430:  MOVWF  x99
0432:  ADDLW  32
0434:  MOVWF  x9B
0436:  MOVF   x96,W
0438:  ANDLW  0F
043A:  ADDWF  x99,F
043C:  ADDWF  x99,F
043E:  ADDWF  x9B,F
0440:  ADDLW  E9
0442:  MOVWF  x9A
0444:  ADDWF  x9A,F
0446:  ADDWF  x9A,F
0448:  SWAPF  x95,W
044A:  ANDLW  0F
044C:  ADDWF  x9A,F
044E:  ADDWF  x9B,F
0450:  RLCF   x9A,F
0452:  RLCF   x9B,F
0454:  COMF   x9B,F
0456:  RLCF   x9B,F
0458:  MOVF   x95,W
045A:  ANDLW  0F
045C:  ADDWF  x9B,F
045E:  RLCF   x98,F
0460:  MOVLW  07
0462:  MOVWF  x97
0464:  MOVLW  0A
0466:  DECF   x9A,F
0468:  ADDWF  x9B,F
046A:  BNC   0466
046C:  DECF   x99,F
046E:  ADDWF  x9A,F
0470:  BNC   046C
0472:  DECF   x98,F
0474:  ADDWF  x99,F
0476:  BNC   0472
0478:  DECF   x97,F
047A:  ADDWF  x98,F
047C:  BNC   0478
047E:  MOVLW  04
0480:  MOVWF  FEA
0482:  MOVLW  97
0484:  MOVWF  FE9
0486:  MOVLW  07
0488:  ANDWF  x9C,W
048A:  BCF    x9C.6
048C:  MOVF   FED,F
048E:  ANDWF  x9C,W
0490:  BNZ   04A0
0492:  BTFSC  x9C.4
0494:  MOVF   FEE,F
0496:  BTFSC  x9C.4
0498:  BRA    04A0
049A:  MOVLW  20
049C:  MOVWF  00
049E:  BRA    04E2
04A0:  ADDWF  FE9,F
04A2:  MOVLW  00
04A4:  ADDWFC FEA,F
04A6:  MOVF   FE9,W
04A8:  SUBLW  9B
04AA:  BNZ   04B4
04AC:  MOVF   FEA,W
04AE:  SUBLW  04
04B0:  BNZ   04B4
04B2:  BSF    x9C.6
04B4:  MOVF   FEF,W
04B6:  MOVWF  00
04B8:  BNZ   04CA
04BA:  BTFSC  x9C.6
04BC:  BRA    04CA
04BE:  BTFSC  x9C.4
04C0:  BRA    04FC
04C2:  BTFSC  x9C.3
04C4:  BRA    04CA
04C6:  MOVLW  20
04C8:  BRA    04E0
04CA:  BTFSS  x9C.7
04CC:  BRA    04DA
04CE:  MOVLW  2D
04D0:  MOVWF  00
04D2:  MOVF   FED,W
04D4:  BCF    x9C.6
04D6:  BCF    x9C.7
04D8:  BRA    04E2
04DA:  BSF    x9C.3
04DC:  BCF    x9C.4
04DE:  MOVLW  30
04E0:  ADDWF  00,F
04E2:  MOVFF  FEA,496
04E6:  MOVFF  FE9,495
04EA:  MOVFF  00,49E
04EE:  MOVLB  0
04F0:  RCALL  0382
04F2:  MOVFF  496,FEA
04F6:  MOVFF  495,FE9
04FA:  MOVLB  4
04FC:  MOVF   FEE,W
04FE:  BTFSS  x9C.6
0500:  BRA    04A6
0502:  MOVLB  0
0504:  RETURN 0
*
06C0:  MOVLB  4
06C2:  MOVF   x9C,W
06C4:  CLRF   01
06C6:  SUBWF  x9B,W
06C8:  BC    06D0
06CA:  MOVFF  49B,00
06CE:  BRA    06E8
06D0:  CLRF   00
06D2:  MOVLW  08
06D4:  MOVWF  x9D
06D6:  RLCF   x9B,F
06D8:  RLCF   00,F
06DA:  MOVF   x9C,W
06DC:  SUBWF  00,W
06DE:  BTFSC  FD8.0
06E0:  MOVWF  00
06E2:  RLCF   01,F
06E4:  DECFSZ x9D,F
06E6:  BRA    06D6
06E8:  MOVLB  0
06EA:  RETURN 0
06EC:  MOVLW  20
06EE:  MOVLB  4
06F0:  BTFSS  x96.4
06F2:  MOVLW  30
06F4:  MOVWF  x97
06F6:  MOVFF  495,00
06FA:  BTFSS  00.7
06FC:  BRA    070E
06FE:  COMF   00,F
0700:  INCF   00,F
0702:  MOVFF  00,495
0706:  MOVLW  2D
0708:  MOVWF  x97
070A:  BSF    x96.7
070C:  BSF    x96.0
070E:  MOVF   01,W
0710:  MOVFF  495,49B
0714:  MOVLW  64
0716:  MOVWF  x9C
0718:  MOVLB  0
071A:  RCALL  06C0
071C:  MOVFF  00,495
0720:  MOVLW  30
0722:  ADDWF  01,W
0724:  MOVLB  4
0726:  MOVWF  x98
0728:  MOVFF  495,49B
072C:  MOVLW  0A
072E:  MOVWF  x9C
0730:  MOVLB  0
0732:  RCALL  06C0
0734:  MOVLW  30
0736:  ADDWF  00,W
0738:  MOVLB  4
073A:  MOVWF  x9A
073C:  MOVLW  30
073E:  ADDWF  01,W
0740:  MOVWF  x99
0742:  MOVFF  497,00
0746:  MOVLW  30
0748:  SUBWF  x98,W
074A:  BZ    0754
074C:  BSF    x96.1
074E:  BTFSC  x96.7
0750:  BSF    x96.2
0752:  BRA    0778
0754:  MOVFF  497,498
0758:  MOVLW  20
075A:  MOVWF  x97
075C:  MOVLW  30
075E:  SUBWF  x99,W
0760:  BZ    076A
0762:  BSF    x96.0
0764:  BTFSC  x96.7
0766:  BSF    x96.1
0768:  BRA    0778
076A:  BTFSS  FD8.2
076C:  BSF    x96.0
076E:  BNZ   0778
0770:  MOVFF  498,499
0774:  MOVLW  20
0776:  MOVWF  x98
0778:  BTFSC  x96.2
077A:  BRA    0786
077C:  BTFSC  x96.1
077E:  BRA    078E
0780:  BTFSC  x96.0
0782:  BRA    0796
0784:  BRA    079E
0786:  MOVFF  497,49E
078A:  MOVLB  0
078C:  RCALL  0382
078E:  MOVFF  498,49E
0792:  MOVLB  0
0794:  RCALL  0382
0796:  MOVFF  499,49E
079A:  MOVLB  0
079C:  RCALL  0382
079E:  MOVFF  49A,49E
07A2:  MOVLB  0
07A4:  RCALL  0382
07A6:  GOTO   07D4 (RETURN)
*
07F6:  CLRF   01
07F8:  CLRF   02
07FA:  CLRF   00
07FC:  CLRF   03
07FE:  MOVLB  4
0800:  MOVF   xA2,W
0802:  BNZ   0808
0804:  MOVF   xA1,W
0806:  BZ    0838
0808:  MOVLW  10
080A:  MOVWF  xA3
080C:  BCF    FD8.0
080E:  RLCF   x9F,F
0810:  RLCF   xA0,F
0812:  RLCF   00,F
0814:  RLCF   03,F
0816:  MOVF   xA2,W
0818:  SUBWF  03,W
081A:  BNZ   0820
081C:  MOVF   xA1,W
081E:  SUBWF  00,W
0820:  BNC   0830
0822:  MOVF   xA1,W
0824:  SUBWF  00,F
0826:  BTFSS  FD8.0
0828:  DECF   03,F
082A:  MOVF   xA2,W
082C:  SUBWF  03,F
082E:  BSF    FD8.0
0830:  RLCF   01,F
0832:  RLCF   02,F
0834:  DECFSZ xA3,F
0836:  BRA    080C
0838:  MOVLB  0
083A:  RETURN 0
083C:  MOVLW  8E
083E:  MOVWF  00
0840:  MOVFF  498,01
0844:  MOVFF  497,02
0848:  CLRF   03
084A:  MOVF   01,F
084C:  BNZ   0860
084E:  MOVFF  02,01
0852:  CLRF   02
0854:  MOVLW  08
0856:  SUBWF  00,F
0858:  MOVF   01,F
085A:  BNZ   0860
085C:  CLRF   00
085E:  BRA    0870
0860:  BCF    FD8.0
0862:  BTFSC  01.7
0864:  BRA    086E
0866:  RLCF   02,F
0868:  RLCF   01,F
086A:  DECF   00,F
086C:  BRA    0860
086E:  BCF    01.7
0870:  RETURN 0
0872:  MOVLB  4
0874:  MOVF   x97,W
0876:  BTFSC  FD8.2
0878:  BRA    09C4
087A:  MOVWF  xA3
087C:  MOVF   x9B,W
087E:  BTFSC  FD8.2
0880:  BRA    09C4
0882:  SUBWF  xA3,F
0884:  BNC   0890
0886:  MOVLW  7F
0888:  ADDWF  xA3,F
088A:  BTFSC  FD8.0
088C:  BRA    09C4
088E:  BRA    089C
0890:  MOVLW  81
0892:  SUBWF  xA3,F
0894:  BTFSS  FD8.0
0896:  BRA    09C4
0898:  BTFSC  FD8.2
089A:  BRA    09C4
089C:  MOVFF  4A3,00
08A0:  CLRF   01
08A2:  CLRF   02
08A4:  CLRF   03
08A6:  CLRF   xA2
08A8:  MOVFF  498,4A1
08AC:  BSF    xA1.7
08AE:  MOVFF  499,4A0
08B2:  MOVFF  49A,49F
08B6:  MOVLW  19
08B8:  MOVWF  xA3
08BA:  MOVF   x9E,W
08BC:  SUBWF  x9F,F
08BE:  BC    08DA
08C0:  MOVLW  01
08C2:  SUBWF  xA0,F
08C4:  BC    08DA
08C6:  SUBWF  xA1,F
08C8:  BC    08DA
08CA:  SUBWF  xA2,F
08CC:  BC    08DA
08CE:  INCF   xA2,F
08D0:  INCF   xA1,F
08D2:  INCF   xA0,F
08D4:  MOVF   x9E,W
08D6:  ADDWF  x9F,F
08D8:  BRA    092A
08DA:  MOVF   x9D,W
08DC:  SUBWF  xA0,F
08DE:  BC    0904
08E0:  MOVLW  01
08E2:  SUBWF  xA1,F
08E4:  BC    0904
08E6:  SUBWF  xA2,F
08E8:  BC    0904
08EA:  INCF   xA2,F
08EC:  INCF   xA1,F
08EE:  MOVF   x9D,W
08F0:  ADDWF  xA0,F
08F2:  MOVF   x9E,W
08F4:  ADDWF  x9F,F
08F6:  BNC   092A
08F8:  INCF   xA0,F
08FA:  BNZ   092A
08FC:  INCF   xA1,F
08FE:  BNZ   092A
0900:  INCF   xA2,F
0902:  BRA    092A
0904:  MOVF   x9C,W
0906:  IORLW  80
0908:  SUBWF  xA1,F
090A:  BC    0928
090C:  MOVLW  01
090E:  SUBWF  xA2,F
0910:  BC    0928
0912:  INCF   xA2,F
0914:  MOVF   x9C,W
0916:  IORLW  80
0918:  ADDWF  xA1,F
091A:  MOVF   x9D,W
091C:  ADDWF  xA0,F
091E:  BNC   08F2
0920:  INCF   xA1,F
0922:  BNZ   08F2
0924:  INCF   xA2,F
0926:  BRA    08F2
0928:  BSF    03.0
092A:  DECFSZ xA3,F
092C:  BRA    0930
092E:  BRA    0946
0930:  BCF    FD8.0
0932:  RLCF   x9F,F
0934:  RLCF   xA0,F
0936:  RLCF   xA1,F
0938:  RLCF   xA2,F
093A:  BCF    FD8.0
093C:  RLCF   03,F
093E:  RLCF   02,F
0940:  RLCF   01,F
0942:  RLCF   xA4,F
0944:  BRA    08BA
0946:  BTFSS  xA4.0
0948:  BRA    0956
094A:  BCF    FD8.0
094C:  RRCF   01,F
094E:  RRCF   02,F
0950:  RRCF   03,F
0952:  RRCF   xA4,F
0954:  BRA    095A
0956:  DECF   00,F
0958:  BZ    09C4
095A:  BTFSC  xA4.7
095C:  BRA    099A
095E:  BCF    FD8.0
0960:  RLCF   x9F,F
0962:  RLCF   xA0,F
0964:  RLCF   xA1,F
0966:  RLCF   xA2,F
0968:  MOVF   x9E,W
096A:  SUBWF  x9F,F
096C:  BC    097C
096E:  MOVLW  01
0970:  SUBWF  xA0,F
0972:  BC    097C
0974:  SUBWF  xA1,F
0976:  BC    097C
0978:  SUBWF  xA2,F
097A:  BNC   09B0
097C:  MOVF   x9D,W
097E:  SUBWF  xA0,F
0980:  BC    098C
0982:  MOVLW  01
0984:  SUBWF  xA1,F
0986:  BC    098C
0988:  SUBWF  xA2,F
098A:  BNC   09B0
098C:  MOVF   x9C,W
098E:  IORLW  80
0990:  SUBWF  xA1,F
0992:  BC    099A
0994:  MOVLW  01
0996:  SUBWF  xA2,F
0998:  BNC   09B0
099A:  INCF   03,F
099C:  BNZ   09B0
099E:  INCF   02,F
09A0:  BNZ   09B0
09A2:  INCF   01,F
09A4:  BNZ   09B0
09A6:  INCF   00,F
09A8:  BZ    09C4
09AA:  RRCF   01,F
09AC:  RRCF   02,F
09AE:  RRCF   03,F
09B0:  MOVFF  498,4A3
09B4:  MOVF   x9C,W
09B6:  XORWF  xA3,F
09B8:  BTFSS  xA3.7
09BA:  BRA    09C0
09BC:  BSF    01.7
09BE:  BRA    09CC
09C0:  BCF    01.7
09C2:  BRA    09CC
09C4:  CLRF   00
09C6:  CLRF   01
09C8:  CLRF   02
09CA:  CLRF   03
09CC:  MOVLB  0
09CE:  RETURN 0
09D0:  MOVLW  80
09D2:  BTFSS  FD8.1
09D4:  BRA    09DA
09D6:  MOVLB  4
09D8:  XORWF  x9A,F
09DA:  MOVLB  4
09DC:  CLRF   x9F
09DE:  CLRF   xA0
09E0:  MOVFF  496,49E
09E4:  MOVF   x9A,W
09E6:  XORWF  x9E,F
09E8:  MOVF   x95,W
09EA:  BTFSC  FD8.2
09EC:  BRA    0BAC
09EE:  MOVWF  x9D
09F0:  MOVWF  00
09F2:  MOVF   x99,W
09F4:  BTFSC  FD8.2
09F6:  BRA    0BBE
09F8:  SUBWF  x9D,F
09FA:  BTFSC  FD8.2
09FC:  BRA    0B04
09FE:  BNC   0A7C
0A00:  MOVFF  49A,4A3
0A04:  BSF    xA3.7
0A06:  MOVFF  49B,4A2
0A0A:  MOVFF  49C,4A1
0A0E:  CLRF   xA0
0A10:  BCF    FD8.0
0A12:  RRCF   xA3,F
0A14:  RRCF   xA2,F
0A16:  RRCF   xA1,F
0A18:  RRCF   xA0,F
0A1A:  DECFSZ x9D,F
0A1C:  BRA    0A0E
0A1E:  BTFSS  x9E.7
0A20:  BRA    0A28
0A22:  BSF    x9F.0
0A24:  BRA    0BE6
0A26:  BCF    x9F.0
0A28:  BCF    x9D.0
0A2A:  BSF    x9F.4
0A2C:  MOVLW  04
0A2E:  MOVWF  FEA
0A30:  MOVLW  98
0A32:  MOVWF  FE9
0A34:  BRA    0C0C
0A36:  BCF    x9F.4
0A38:  BTFSC  x9E.7
0A3A:  BRA    0A50
0A3C:  BTFSS  x9D.0
0A3E:  BRA    0A66
0A40:  RRCF   xA3,F
0A42:  RRCF   xA2,F
0A44:  RRCF   xA1,F
0A46:  RRCF   xA0,F
0A48:  INCF   00,F
0A4A:  BTFSC  FD8.2
0A4C:  BRA    0BDC
0A4E:  BRA    0A66
0A50:  BTFSC  xA3.7
0A52:  BRA    0A6C
0A54:  BCF    FD8.0
0A56:  RLCF   xA0,F
0A58:  RLCF   xA1,F
0A5A:  RLCF   xA2,F
0A5C:  RLCF   xA3,F
0A5E:  DECF   00,F
0A60:  BTFSC  FD8.2
0A62:  BRA    0BDC
0A64:  BRA    0A50
0A66:  BSF    x9F.6
0A68:  BRA    0B44
0A6A:  BCF    x9F.6
0A6C:  MOVFF  496,49E
0A70:  BTFSS  x96.7
0A72:  BRA    0A78
0A74:  BSF    xA3.7
0A76:  BRA    0BCE
0A78:  BCF    xA3.7
0A7A:  BRA    0BCE
0A7C:  MOVFF  499,49D
0A80:  MOVFF  499,00
0A84:  MOVF   x95,W
0A86:  SUBWF  x9D,F
0A88:  MOVFF  496,4A3
0A8C:  BSF    xA3.7
0A8E:  MOVFF  497,4A2
0A92:  MOVFF  498,4A1
0A96:  CLRF   xA0
0A98:  BCF    FD8.0
0A9A:  RRCF   xA3,F
0A9C:  RRCF   xA2,F
0A9E:  RRCF   xA1,F
0AA0:  RRCF   xA0,F
0AA2:  DECFSZ x9D,F
0AA4:  BRA    0A96
0AA6:  BTFSS  x9E.7
0AA8:  BRA    0AB0
0AAA:  BSF    x9F.1
0AAC:  BRA    0BE6
0AAE:  BCF    x9F.1
0AB0:  BCF    x9D.0
0AB2:  BSF    x9F.5
0AB4:  MOVLW  04
0AB6:  MOVWF  FEA
0AB8:  MOVLW  9C
0ABA:  MOVWF  FE9
0ABC:  BRA    0C0C
0ABE:  BCF    x9F.5
0AC0:  BTFSC  x9E.7
0AC2:  BRA    0AD8
0AC4:  BTFSS  x9D.0
0AC6:  BRA    0AEE
0AC8:  RRCF   xA3,F
0ACA:  RRCF   xA2,F
0ACC:  RRCF   xA1,F
0ACE:  RRCF   xA0,F
0AD0:  INCF   00,F
0AD2:  BTFSC  FD8.2
0AD4:  BRA    0BDC
0AD6:  BRA    0AEE
0AD8:  BTFSC  xA3.7
0ADA:  BRA    0AF4
0ADC:  BCF    FD8.0
0ADE:  RLCF   xA0,F
0AE0:  RLCF   xA1,F
0AE2:  RLCF   xA2,F
0AE4:  RLCF   xA3,F
0AE6:  DECF   00,F
0AE8:  BTFSC  FD8.2
0AEA:  BRA    0BDC
0AEC:  BRA    0AD8
0AEE:  BSF    x9F.7
0AF0:  BRA    0B44
0AF2:  BCF    x9F.7
0AF4:  MOVFF  49A,49E
0AF8:  BTFSS  x9A.7
0AFA:  BRA    0B00
0AFC:  BSF    xA3.7
0AFE:  BRA    0BCE
0B00:  BCF    xA3.7
0B02:  BRA    0BCE
0B04:  MOVFF  49A,4A3
0B08:  BSF    xA3.7
0B0A:  MOVFF  49B,4A2
0B0E:  MOVFF  49C,4A1
0B12:  BTFSS  x9E.7
0B14:  BRA    0B1E
0B16:  BCF    xA3.7
0B18:  BSF    x9F.2
0B1A:  BRA    0BE6
0B1C:  BCF    x9F.2
0B1E:  CLRF   xA0
0B20:  BCF    x9D.0
0B22:  MOVLW  04
0B24:  MOVWF  FEA
0B26:  MOVLW  98
0B28:  MOVWF  FE9
0B2A:  BRA    0C0C
0B2C:  BTFSC  x9E.7
0B2E:  BRA    0B68
0B30:  MOVFF  496,49E
0B34:  BTFSS  x9D.0
0B36:  BRA    0B44
0B38:  RRCF   xA3,F
0B3A:  RRCF   xA2,F
0B3C:  RRCF   xA1,F
0B3E:  RRCF   xA0,F
0B40:  INCF   00,F
0B42:  BZ    0BDC
0B44:  BTFSS  xA0.7
0B46:  BRA    0B5E
0B48:  INCF   xA1,F
0B4A:  BNZ   0B5E
0B4C:  INCF   xA2,F
0B4E:  BNZ   0B5E
0B50:  INCF   xA3,F
0B52:  BNZ   0B5E
0B54:  RRCF   xA3,F
0B56:  RRCF   xA2,F
0B58:  RRCF   xA1,F
0B5A:  INCF   00,F
0B5C:  BZ    0BDC
0B5E:  BTFSC  x9F.6
0B60:  BRA    0A6A
0B62:  BTFSC  x9F.7
0B64:  BRA    0AF2
0B66:  BRA    0BA0
0B68:  MOVLW  80
0B6A:  XORWF  xA3,F
0B6C:  BTFSS  xA3.7
0B6E:  BRA    0B78
0B70:  BRA    0BE6
0B72:  MOVFF  49A,49E
0B76:  BRA    0B8C
0B78:  MOVFF  496,49E
0B7C:  MOVF   xA3,F
0B7E:  BNZ   0B8C
0B80:  MOVF   xA2,F
0B82:  BNZ   0B8C
0B84:  MOVF   xA1,F
0B86:  BNZ   0B8C
0B88:  CLRF   00
0B8A:  BRA    0BCE
0B8C:  BTFSC  xA3.7
0B8E:  BRA    0BA0
0B90:  BCF    FD8.0
0B92:  RLCF   xA0,F
0B94:  RLCF   xA1,F
0B96:  RLCF   xA2,F
0B98:  RLCF   xA3,F
0B9A:  DECFSZ 00,F
0B9C:  BRA    0B8C
0B9E:  BRA    0BDC
0BA0:  BTFSS  x9E.7
0BA2:  BRA    0BA8
0BA4:  BSF    xA3.7
0BA6:  BRA    0BCE
0BA8:  BCF    xA3.7
0BAA:  BRA    0BCE
0BAC:  MOVFF  499,00
0BB0:  MOVFF  49A,4A3
0BB4:  MOVFF  49B,4A2
0BB8:  MOVFF  49C,4A1
0BBC:  BRA    0BCE
0BBE:  MOVFF  495,00
0BC2:  MOVFF  496,4A3
0BC6:  MOVFF  497,4A2
0BCA:  MOVFF  498,4A1
0BCE:  MOVFF  4A3,01
0BD2:  MOVFF  4A2,02
0BD6:  MOVFF  4A1,03
0BDA:  BRA    0C44
0BDC:  CLRF   00
0BDE:  CLRF   01
0BE0:  CLRF   02
0BE2:  CLRF   03
0BE4:  BRA    0C44
0BE6:  CLRF   xA0
0BE8:  COMF   xA1,F
0BEA:  COMF   xA2,F
0BEC:  COMF   xA3,F
0BEE:  COMF   xA0,F
0BF0:  INCF   xA0,F
0BF2:  BNZ   0BFE
0BF4:  INCF   xA1,F
0BF6:  BNZ   0BFE
0BF8:  INCF   xA2,F
0BFA:  BNZ   0BFE
0BFC:  INCF   xA3,F
0BFE:  BTFSC  x9F.0
0C00:  BRA    0A26
0C02:  BTFSC  x9F.1
0C04:  BRA    0AAE
0C06:  BTFSC  x9F.2
0C08:  BRA    0B1C
0C0A:  BRA    0B72
0C0C:  MOVF   FEF,W
0C0E:  ADDWF  xA1,F
0C10:  BNC   0C1C
0C12:  INCF   xA2,F
0C14:  BNZ   0C1C
0C16:  INCF   xA3,F
0C18:  BTFSC  FD8.2
0C1A:  BSF    x9D.0
0C1C:  MOVF   FED,F
0C1E:  MOVF   FEF,W
0C20:  ADDWF  xA2,F
0C22:  BNC   0C2A
0C24:  INCF   xA3,F
0C26:  BTFSC  FD8.2
0C28:  BSF    x9D.0
0C2A:  MOVF   FED,F
0C2C:  MOVF   FEF,W
0C2E:  BTFSC  FEF.7
0C30:  BRA    0C34
0C32:  XORLW  80
0C34:  ADDWF  xA3,F
0C36:  BTFSC  FD8.0
0C38:  BSF    x9D.0
0C3A:  BTFSC  x9F.4
0C3C:  BRA    0A36
0C3E:  BTFSC  x9F.5
0C40:  BRA    0ABE
0C42:  BRA    0B2C
0C44:  MOVLB  0
0C46:  RETURN 0
0C48:  MOVLW  8E
0C4A:  MOVWF  00
0C4C:  MOVLB  4
0C4E:  MOVF   x9B,W
0C50:  SUBWF  00,F
0C52:  MOVFF  49C,02
0C56:  MOVFF  49D,01
0C5A:  BSF    02.7
0C5C:  MOVF   00,F
0C5E:  BZ    0C72
0C60:  BCF    FD8.0
0C62:  MOVF   02,F
0C64:  BNZ   0C6A
0C66:  MOVF   01,F
0C68:  BZ    0C72
0C6A:  RRCF   02,F
0C6C:  RRCF   01,F
0C6E:  DECFSZ 00,F
0C70:  BRA    0C60
0C72:  BTFSS  x9C.7
0C74:  BRA    0C80
0C76:  COMF   01,F
0C78:  COMF   02,F
0C7A:  INCF   01,F
0C7C:  BTFSC  FD8.2
0C7E:  INCF   02,F
0C80:  MOVLB  0
0C82:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
026A:  MOVLW  04
026C:  MOVWF  FEA
026E:  MOVLW  9A
0270:  MOVWF  FE9
0272:  MOVF   FEF,W
0274:  BZ    0290
0276:  MOVLW  06
0278:  MOVWF  01
027A:  CLRF   00
027C:  DECFSZ 00,F
027E:  BRA    027C
0280:  DECFSZ 01,F
0282:  BRA    027A
0284:  MOVLW  7B
0286:  MOVWF  00
0288:  DECFSZ 00,F
028A:  BRA    0288
028C:  DECFSZ FEF,F
028E:  BRA    0276
0290:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
01A4:  MOVFF  4AB,4AD
....................    for (sb=0;sb<8;sb++) 
01A8:  MOVLB  4
01AA:  CLRF   xAC
01AC:  MOVF   xAC,W
01AE:  SUBLW  07
01B0:  BNC   01CE
....................       {                                                  
....................          output_bit(ssdo,bseri);     
01B2:  BTFSC  xAD.7
01B4:  BRA    01BA
01B6:  BCF    F8D.2
01B8:  BRA    01BC
01BA:  BSF    F8D.2
01BC:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
01BE:  BCF    F96.0
01C0:  BCF    F8D.0
01C2:  BCF    F96.0
01C4:  BSF    F8D.0
....................          x= x<<1;          
01C6:  BCF    FD8.0
01C8:  RLCF   xAD,F
01CA:  INCF   xAC,F
01CC:  BRA    01AC
....................      } 
01CE:  MOVLB  0
01D0:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
1592:  MOVFF  4A7,4AB
1596:  CALL   01A4
....................       xuat_1byte(bld2); 
159A:  MOVFF  4A8,4AB
159E:  CALL   01A4
....................       xuat_1byte(bld1);           
15A2:  MOVFF  4A9,4AB
15A6:  CALL   01A4
....................       xuat_1byte(bld0);             
15AA:  MOVFF  4AA,4AB
15AE:  CALL   01A4
....................       mo_32_led_don;       
15B2:  BCF    19.4
....................       mo_ic_74573_a_thong_dl();             
15B4:  CALL   01D2
....................       output_high(rck_32led);    output_low(rck_32led); 
15B8:  BCF    F95.5
15BA:  BSF    F8C.5
15BC:  BCF    F95.5
15BE:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
15C0:  BCF    F95.1
15C2:  BCF    F8C.1
15C4:  GOTO   15EA (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
15C8:  MOVFF  4A0,4A3
15CC:  MOVFF  49F,4A4
....................      b1 = wld0>>8;  b0 = wld0; 
15D0:  MOVFF  4A2,4A5
15D4:  MOVFF  4A1,4A6
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
15D8:  MOVFF  4A3,4A7
15DC:  MOVFF  4A4,4A8
15E0:  MOVFF  4A5,4A9
15E4:  MOVFF  4A6,4AA
15E8:  BRA    1592
15EA:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
15EC:  MOVFF  499,49B
15F0:  MOVFF  49A,49C
15F4:  MOVFF  498,49E
15F8:  MOVFF  497,49D
....................      xuat_32led_don_2word(wd1,wd0); 
15FC:  MOVFF  49C,4A0
1600:  MOVFF  49B,49F
1604:  MOVFF  49E,4A2
1608:  MOVFF  49D,4A1
160C:  RCALL  15C8
160E:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
0186:  MOVLW  00
0188:  MOVWF  F95
....................       set_tris_e(0x00); 
018A:  MOVWF  F96
....................       output_d(0xff); 
018C:  CLRF   F95
018E:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
0190:  SETF   19
....................       tin_hieu_dk_74573_b=0xff;       
0192:  SETF   1A
....................       chot_ic_74573_a_goi_du_lieu; 
0194:  BCF    F95.1
0196:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
0198:  BCF    F95.0
019A:  BCF    F8C.0
....................       rbdc=0; 
019C:  CLRF   1D
019E:  CLRF   1C
01A0:  GOTO   1BC6 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
01D2:  CLRF   F95
01D4:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
01D6:  BTFSC  19.4
01D8:  BRA    01DE
01DA:  BCF    F8C.4
01DC:  BRA    01E0
01DE:  BSF    F8C.4
01E0:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
01E2:  BTFSC  19.6
01E4:  BRA    01EA
01E6:  BCF    F8C.6
01E8:  BRA    01EC
01EA:  BSF    F8C.6
01EC:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
01EE:  BTFSC  19.2
01F0:  BRA    01F6
01F2:  BCF    F8C.2
01F4:  BRA    01F8
01F6:  BSF    F8C.2
01F8:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
01FA:  BCF    F95.1
01FC:  BSF    F8C.1
01FE:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
05E0:  CLRF   F95
05E2:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
05E4:  BTFSC  1A.6
05E6:  BRA    05EC
05E8:  BCF    F8C.6
05EA:  BRA    05EE
05EC:  BSF    F8C.6
05EE:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
05F0:  BTFSC  1A.4
05F2:  BRA    05F8
05F4:  BCF    F8C.4
05F6:  BRA    05FA
05F8:  BSF    F8C.4
05FA:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
05FC:  BTFSC  1A.2
05FE:  BRA    0604
0600:  BCF    F8C.2
0602:  BRA    0606
0604:  BSF    F8C.2
0606:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
0608:  BCF    F95.0
060A:  BSF    F8C.0
060C:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
0C84:  MOVFF  4A0,4AB
0C88:  CALL   01A4
0C8C:  MOVFF  49F,4AB
0C90:  CALL   01A4
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
0C94:  MOVFF  49E,4AB
0C98:  CALL   01A4
0C9C:  MOVFF  49D,4AB
0CA0:  CALL   01A4
....................        
....................       mo_4_led_7doan; 
0CA4:  BCF    19.6
....................       mo_ic_74573_a_thong_dl(); 
0CA6:  CALL   01D2
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
0CAA:  BCF    F95.7
0CAC:  BCF    F8C.7
0CAE:  BCF    F95.7
0CB0:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
0CB2:  BCF    F95.1
0CB4:  BCF    F8C.1
0CB6:  RETURN 0
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
0CB8:  MOVFF  49C,4A0
0CBC:  MOVFF  49B,49F
0CC0:  MOVLB  4
0CC2:  CLRF   xA2
0CC4:  MOVLW  0A
0CC6:  MOVWF  xA1
0CC8:  MOVLB  0
0CCA:  RCALL  07F6
0CCC:  MOVFF  00,49D
0CD0:  MOVLB  4
0CD2:  MOVFF  03,49E
0CD6:  MOVFF  03,03
0CDA:  MOVF   00,W
0CDC:  MOVLB  0
0CDE:  CALL   00AE
0CE2:  MOVWF  1E
....................       chuc4  = ma7doan[tam/10%10]; 
0CE4:  MOVFF  49C,4A0
0CE8:  MOVFF  49B,49F
0CEC:  MOVLB  4
0CEE:  CLRF   xA2
0CF0:  MOVLW  0A
0CF2:  MOVWF  xA1
0CF4:  MOVLB  0
0CF6:  RCALL  07F6
0CF8:  MOVFF  02,49E
0CFC:  MOVFF  01,49D
0D00:  MOVFF  02,4A0
0D04:  MOVFF  01,49F
0D08:  MOVLB  4
0D0A:  CLRF   xA2
0D0C:  MOVLW  0A
0D0E:  MOVWF  xA1
0D10:  MOVLB  0
0D12:  RCALL  07F6
0D14:  MOVFF  00,49D
0D18:  MOVLB  4
0D1A:  MOVFF  03,49E
0D1E:  MOVFF  03,03
0D22:  MOVF   00,W
0D24:  MOVLB  0
0D26:  CALL   00AE
0D2A:  MOVWF  1F
....................       tram4  = ma7doan[tam/100%10];  
0D2C:  MOVFF  49C,4A0
0D30:  MOVFF  49B,49F
0D34:  MOVLB  4
0D36:  CLRF   xA2
0D38:  MOVLW  64
0D3A:  MOVWF  xA1
0D3C:  MOVLB  0
0D3E:  RCALL  07F6
0D40:  MOVFF  02,49E
0D44:  MOVFF  01,49D
0D48:  MOVFF  02,4A0
0D4C:  MOVFF  01,49F
0D50:  MOVLB  4
0D52:  CLRF   xA2
0D54:  MOVLW  0A
0D56:  MOVWF  xA1
0D58:  MOVLB  0
0D5A:  RCALL  07F6
0D5C:  MOVFF  00,49D
0D60:  MOVLB  4
0D62:  MOVFF  03,49E
0D66:  MOVFF  03,03
0D6A:  MOVF   00,W
0D6C:  MOVLB  0
0D6E:  CALL   00AE
0D72:  MOVWF  20
....................       ngan4  = ma7doan[tam/1000%10];        
0D74:  MOVFF  49C,4A0
0D78:  MOVFF  49B,49F
0D7C:  MOVLW  03
0D7E:  MOVLB  4
0D80:  MOVWF  xA2
0D82:  MOVLW  E8
0D84:  MOVWF  xA1
0D86:  MOVLB  0
0D88:  RCALL  07F6
0D8A:  MOVFF  02,49E
0D8E:  MOVFF  01,49D
0D92:  MOVFF  02,4A0
0D96:  MOVFF  01,49F
0D9A:  MOVLB  4
0D9C:  CLRF   xA2
0D9E:  MOVLW  0A
0DA0:  MOVWF  xA1
0DA2:  MOVLB  0
0DA4:  RCALL  07F6
0DA6:  MOVFF  00,49D
0DAA:  MOVLB  4
0DAC:  MOVFF  03,49E
0DB0:  MOVFF  03,03
0DB4:  MOVF   00,W
0DB6:  MOVLB  0
0DB8:  CALL   00AE
0DBC:  MOVWF  21
....................       if (ngan4==0xc0) 
0DBE:  MOVF   21,W
0DC0:  SUBLW  C0
0DC2:  BNZ   0DD6
....................       { 
....................          ngan4=0xff; 
0DC4:  SETF   21
....................          if (tram4==0xc0) 
0DC6:  MOVF   20,W
0DC8:  SUBLW  C0
0DCA:  BNZ   0DD6
....................          { 
....................             tram4=0xff; 
0DCC:  SETF   20
....................             if (chuc4==0xc0)   chuc4=0xff; 
0DCE:  MOVF   1F,W
0DD0:  SUBLW  C0
0DD2:  BNZ   0DD6
0DD4:  SETF   1F
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
0DD6:  MOVFF  21,49D
0DDA:  MOVFF  20,49E
0DDE:  MOVFF  1F,49F
0DE2:  MOVFF  1E,4A0
0DE6:  RCALL  0C84
0DE8:  GOTO   0E10 (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
*
0200:  MOVFF  25,4AB
0204:  RCALL  01A4
....................     xuat_1byte(glcddata); 
0206:  MOVFF  24,4AB
020A:  RCALL  01A4
....................     xuat_1byte(lcdcontrol);        
020C:  MOVFF  23,4AB
0210:  RCALL  01A4
....................     xuat_1byte(lcddata);       
0212:  MOVFF  22,4AB
0216:  RCALL  01A4
....................        
....................     mo_glcd_lcd; 
0218:  BCF    19.2
....................     mo_ic_74573_a_thong_dl();             
021A:  RCALL  01D2
....................     output_high(rck_lcd20x4);      
021C:  BCF    F95.3
021E:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
0220:  BCF    F95.3
0222:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0224:  BCF    F95.1
0226:  BCF    F8C.1
0228:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
022A:  MOVLB  4
022C:  MOVFF  4A0,23
0230:  COMF   23,F
....................     lcddata    = ~lcd_ins_hthi;       
0232:  MOVFF  4A1,22
0236:  COMF   22,F
....................     xuat_glcd_lcd(); 
0238:  MOVLB  0
023A:  RCALL  0200
023C:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
02EE:  MOVLB  4
02F0:  MOVFF  498,25
02F4:  COMF   25,F
....................     glcddata    = ~glcd_ins_hthi;      
02F6:  MOVFF  499,24
02FA:  COMF   24,F
....................     xuat_glcd_lcd(); 
02FC:  MOVLB  0
02FE:  RCALL  0200
0300:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
064C:  MOVLB  4
064E:  MOVFF  49B,49D
0652:  COMF   x9D,F
0654:  MOVFF  49D,4AB
0658:  MOVLB  0
065A:  RCALL  01A4
065C:  MOVLB  4
065E:  MOVFF  49C,49D
0662:  COMF   x9D,F
0664:  MOVFF  49D,4AB
0668:  MOVLB  0
066A:  RCALL  01A4
....................        
....................       mo_8_led_quet; 
066C:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
066E:  RCALL  05E0
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
0670:  BCF    F95.5
0672:  BSF    F8C.5
0674:  BCF    F95.5
0676:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0678:  BCF    F95.0
067A:  BCF    F8C.0
067C:  GOTO   068A (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
0680:  MOVLB  4
0682:  SETF   x9B
0684:  SETF   x9C
0686:  MOVLB  0
0688:  BRA    064C
068A:  GOTO   06BA (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
060E:  CLRF   03
0610:  MOVLB  4
0612:  MOVF   x9C,W
0614:  MOVLB  0
0616:  RCALL  00D0
0618:  MOVWF  01
061A:  MOVLB  4
061C:  MOVWF  x9E
061E:  COMF   x9E,F
0620:  MOVFF  49E,4AB
0624:  MOVLB  0
0626:  RCALL  01A4
0628:  MOVLB  4
062A:  MOVFF  49D,49E
062E:  COMF   x9E,F
0630:  MOVFF  49E,4AB
0634:  MOVLB  0
0636:  RCALL  01A4
....................       mo_8_led_quet; 
0638:  BCF    1A.4
....................       mo_ic_74573_b_thong_dl(); 
063A:  RCALL  05E0
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
063C:  BCF    F95.5
063E:  BSF    F8C.5
0640:  BCF    F95.5
0642:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0644:  BCF    F95.0
0646:  BCF    F8C.0
0648:  GOTO   06AE (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
068E:  CLRF   2E
0690:  MOVF   2E,W
0692:  SUBLW  07
0694:  BNC   06BE
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
0696:  CLRF   03
0698:  MOVF   2E,W
069A:  ADDLW  26
069C:  MOVWF  FE9
069E:  MOVLW  00
06A0:  ADDWFC 03,W
06A2:  MOVWF  FEA
06A4:  MOVFF  FEF,49D
06A8:  MOVFF  2E,49C
06AC:  BRA    060E
....................             delay_us(100); 
06AE:  MOVLW  A6
06B0:  MOVWF  00
06B2:  DECFSZ 00,F
06B4:  BRA    06B2
06B6:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
06B8:  BRA    0680
06BA:  INCF   2E,F
06BC:  BRA    0690
....................             } 
06BE:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
07D8:  MOVLB  4
07DA:  CLRF   x97
07DC:  MOVF   x96,F
07DE:  BNZ   07E6
07E0:  MOVF   x95,W
07E2:  SUBWF  x97,W
07E4:  BC    07F0
....................       hien_thi_8led_7doan_quet_all(); 
07E6:  MOVLB  0
07E8:  RCALL  068E
07EA:  MOVLB  4
07EC:  INCF   x97,F
07EE:  BRA    07DC
07F0:  MOVLB  0
07F2:  GOTO   0E46 (RETURN)
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
*
1382:  MOVFF  1C,495
1386:  MOVFF  1D,496
....................       xuat_1byte(rbdc2);       
138A:  MOVFF  496,4AB
138E:  CALL   01A4
....................       xuat_1byte(rbdc1); 
1392:  MOVFF  495,4AB
1396:  CALL   01A4
....................       mo_relay_buzzer_dc; 
139A:  BCF    1A.2
....................       mo_ic_74573_b_thong_dl(); 
139C:  CALL   05E0
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
13A0:  BCF    F95.3
13A2:  BSF    F8C.3
13A4:  BCF    F95.3
13A6:  BCF    F8C.3
....................       chot_ic_74573_b_goi_du_lieu; 
13A8:  BCF    F95.0
13AA:  BCF    F8C.0
13AC:  RETURN 0
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
*
13B6:  BSF    1D.2
....................       xuat_buzzer_relay();          
13B8:  RCALL  1382
13BA:  GOTO   13F6 (RETURN)
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
*
13AE:  BCF    1D.2
....................       xuat_buzzer_relay();          
13B0:  RCALL  1382
13B2:  GOTO   13D8 (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
162C:  INCF   56,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
162E:  CLRF   34
1630:  CLRF   33
1632:  CLRF   32
1634:  CLRF   31
1636:  CLRF   38
1638:  CLRF   37
163A:  CLRF   36
163C:  MOVLW  01
163E:  MOVWF  35
1640:  MOVLW  80
1642:  MOVWF  3C
1644:  CLRF   3B
1646:  CLRF   3A
1648:  CLRF   39
164A:  CLRF   40
164C:  CLRF   3F
164E:  CLRF   3E
1650:  CLRF   3D
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
1652:  MOVWF  44
1654:  CLRF   43
1656:  CLRF   46
1658:  MOVLW  01
165A:  MOVWF  45
165C:  CLRF   48
165E:  CLRF   47
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
1660:  MOVLW  80
1662:  MOVWF  4C
1664:  CLRF   4B
1666:  CLRF   4E
1668:  MOVLW  01
166A:  MOVWF  4D
166C:  CLRF   50
166E:  CLRF   4F
....................       zt=zp=0; 
1670:  CLRF   4A
1672:  CLRF   49
1674:  MOVFF  4A,42
1678:  MOVFF  49,41
....................       i32=32;j32=0;i16=16,j16=0; 
167C:  MOVLW  20
167E:  MOVWF  54
1680:  CLRF   55
1682:  MOVLW  10
1684:  MOVWF  57
1686:  CLRF   58
....................       dem_led=0; 
1688:  CLRF   53
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
168A:  CLRF   5C
168C:  CLRF   5B
168E:  CLRF   5A
1690:  MOVLW  01
1692:  MOVWF  59
1694:  CLRF   x60
1696:  CLRF   5F
1698:  CLRF   5E
169A:  MOVWF  5D
169C:  SETF   x64
169E:  SETF   x63
16A0:  SETF   x62
16A2:  MOVLW  FE
16A4:  MOVWF  x61
16A6:  MOVLW  01
16A8:  MOVWF  x71
16AA:  MOVWF  x72
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
16AC:  MOVLW  80
16AE:  MOVWF  x68
16B0:  CLRF   x67
16B2:  CLRF   x66
16B4:  CLRF   x65
16B6:  MOVWF  x6C
16B8:  CLRF   x6B
16BA:  CLRF   x6A
16BC:  CLRF   x69
16BE:  MOVLW  7F
16C0:  MOVWF  x70
16C2:  SETF   x6F
16C4:  SETF   x6E
16C6:  SETF   x6D
....................      tgdlay = 0; 
16C8:  CLRF   52
16CA:  CLRF   51
16CC:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
16E8:  MOVLB  4
16EA:  CLRF   x9A
16EC:  MOVF   x99,W
16EE:  SUBWF  x9A,W
16F0:  BC    16FE
....................       hien_thi_8led_7doan_quet_all(); 
16F2:  MOVLB  0
16F4:  CALL   068E
16F8:  MOVLB  4
16FA:  INCF   x9A,F
16FC:  BRA    16EC
....................       dem_led++; 
16FE:  INCF   53,F
1700:  MOVLB  0
1702:  GOTO   1720 (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
16CE:  MOVLB  4
16D0:  MOVF   x99,F
16D2:  BZ    16E0
16D4:  MOVFF  499,49A
16D8:  MOVLB  0
16DA:  CALL   026A
16DE:  MOVLB  4
....................       dem_led++; 
16E0:  INCF   53,F
16E2:  MOVLB  0
16E4:  GOTO   1720 (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
1706:  MOVLB  4
1708:  MOVF   x98,F
170A:  BNZ   1718
170C:  MOVFF  497,499
1710:  MOVLB  0
1712:  BRA    16CE
1714:  MOVLB  0
1716:  BRA    1720
....................    else              tang_dem_led_delay_1(dl); 
1718:  MOVFF  497,499
171C:  MOVLB  0
171E:  BRA    16E8
1720:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
1610:  COMF   31,F
1612:  COMF   32,F
1614:  COMF   33,F
1616:  COMF   34,F
....................    xuat_32led_don_1dw(y);  
1618:  MOVFF  34,49A
161C:  MOVFF  33,499
1620:  MOVFF  32,498
1624:  MOVFF  31,497
1628:  RCALL  15EC
162A:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
1722:  DECFSZ 51,W
1724:  BRA    173E
1726:  MOVF   52,F
1728:  BNZ   173E
172A:  MOVFF  34,49A
172E:  MOVFF  33,499
1732:  MOVFF  32,498
1736:  MOVFF  31,497
173A:  RCALL  15EC
173C:  BRA    1774
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
173E:  MOVF   51,W
1740:  SUBLW  32
1742:  BNZ   174C
1744:  MOVF   52,F
1746:  BNZ   174C
1748:  RCALL  1610
174A:  BRA    1774
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
174C:  MOVF   51,W
174E:  SUBLW  64
1750:  BNZ   175A
1752:  MOVF   52,F
1754:  BNZ   175A
1756:  RCALL  1610
1758:  BRA    1774
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
175A:  MOVF   51,W
175C:  SUBLW  96
175E:  BNZ   1768
1760:  MOVF   52,F
1762:  BNZ   1768
1764:  RCALL  1610
1766:  BRA    1774
....................       else if (tgdlay==200)   
1768:  MOVF   51,W
176A:  SUBLW  C8
176C:  BNZ   1774
176E:  MOVF   52,F
1770:  BNZ   1774
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
1772:  RCALL  162C
....................       } 
....................       tgdlay++; 
1774:  INCF   51,F
1776:  BTFSC  FD8.2
1778:  INCF   52,F
....................       delay_chon(dl,chondelay); 
177A:  MOVFF  495,497
177E:  MOVFF  496,498
1782:  RCALL  1706
1784:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
1786:  MOVF   53,W
1788:  SUBLW  0F
178A:  BNC   17D4
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
178C:  MOVFF  4A,4A0
1790:  MOVFF  49,49F
1794:  MOVFF  42,4A2
1798:  MOVFF  41,4A1
179C:  RCALL  15C8
....................       zp= (zp<<1)+1;  
179E:  BCF    FD8.0
17A0:  RLCF   49,W
17A2:  MOVLB  4
17A4:  MOVWF  x97
17A6:  RLCF   4A,W
17A8:  MOVWF  x98
17AA:  MOVLW  01
17AC:  ADDWF  x97,W
17AE:  MOVWF  49
17B0:  MOVLW  00
17B2:  ADDWFC x98,W
17B4:  MOVWF  4A
....................       zt= (zt>>1)+0x8000; 
17B6:  BCF    FD8.0
17B8:  RRCF   42,W
17BA:  MOVWF  x98
17BC:  RRCF   41,W
17BE:  MOVWF  41
17C0:  MOVLW  80
17C2:  ADDWF  x98,W
17C4:  MOVWF  42
....................       delay_chon(dl,chondelay); 
17C6:  MOVFF  495,497
17CA:  MOVFF  496,498
17CE:  MOVLB  0
17D0:  RCALL  1706
....................    } 
17D2:  BRA    1806
....................    else  if (dem_led<32) 
17D4:  MOVF   53,W
17D6:  SUBLW  1F
17D8:  BNC   1804
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
17DA:  MOVFF  4A,4A0
17DE:  MOVFF  49,49F
17E2:  MOVFF  42,4A2
17E6:  MOVFF  41,4A1
17EA:  RCALL  15C8
....................       zp= (zp<<1);  
17EC:  BCF    FD8.0
17EE:  RLCF   49,F
17F0:  RLCF   4A,F
....................       zt= (zt>>1); 
17F2:  BCF    FD8.0
17F4:  RRCF   42,F
17F6:  RRCF   41,F
....................       delay_chon(dl,chondelay); 
17F8:  MOVFF  495,497
17FC:  MOVFF  496,498
1800:  RCALL  1706
....................    } 
1802:  BRA    1806
....................    else reset_toan_bo_bien(); 
1804:  RCALL  162C
1806:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
190E:  MOVF   53,W
1910:  SUBLW  0F
1912:  BNC   1946
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
1914:  MOVFF  4A,4A0
1918:  MOVFF  49,49F
191C:  MOVFF  4A,4A2
1920:  MOVFF  49,4A1
1924:  RCALL  15C8
....................       zp= (zp>>1)+0x8000; 
1926:  BCF    FD8.0
1928:  RRCF   4A,W
192A:  MOVLB  4
192C:  MOVWF  x98
192E:  RRCF   49,W
1930:  MOVWF  49
1932:  MOVLW  80
1934:  ADDWF  x98,W
1936:  MOVWF  4A
....................       delay_chon(dl,chondelay); 
1938:  MOVFF  495,497
193C:  MOVFF  496,498
1940:  MOVLB  0
1942:  RCALL  1706
....................    } 
1944:  BRA    1972
....................    else  if (dem_led<32) 
1946:  MOVF   53,W
1948:  SUBLW  1F
194A:  BNC   1970
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
194C:  MOVFF  4A,4A0
1950:  MOVFF  49,49F
1954:  MOVFF  4A,4A2
1958:  MOVFF  49,4A1
195C:  RCALL  15C8
....................       zp= (zp>>1); 
195E:  BCF    FD8.0
1960:  RRCF   4A,F
1962:  RRCF   49,F
....................       delay_chon(dl,chondelay); 
1964:  MOVFF  495,497
1968:  MOVFF  496,498
196C:  RCALL  1706
....................     } 
196E:  BRA    1972
....................    else reset_toan_bo_bien(); 
1970:  RCALL  162C
1972:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
188A:  MOVF   53,W
188C:  SUBLW  1F
188E:  BNC   18DC
....................    {   
....................       xuat_32led_don_1dw(y); 
1890:  MOVFF  34,49A
1894:  MOVFF  33,499
1898:  MOVFF  32,498
189C:  MOVFF  31,497
18A0:  RCALL  15EC
....................       y= (y<<1)+1; 
18A2:  BCF    FD8.0
18A4:  RLCF   31,W
18A6:  MOVLB  4
18A8:  MOVWF  x98
18AA:  RLCF   32,W
18AC:  MOVWF  x99
18AE:  RLCF   33,W
18B0:  MOVWF  x9A
18B2:  RLCF   34,W
18B4:  MOVWF  x9B
18B6:  MOVLW  01
18B8:  ADDWF  x98,W
18BA:  MOVWF  31
18BC:  MOVLW  00
18BE:  ADDWFC x99,W
18C0:  MOVWF  32
18C2:  MOVLW  00
18C4:  ADDWFC x9A,W
18C6:  MOVWF  33
18C8:  MOVLW  00
18CA:  ADDWFC x9B,W
18CC:  MOVWF  34
....................       delay_chon(dl,chondelay); 
18CE:  MOVFF  495,497
18D2:  MOVFF  496,498
18D6:  MOVLB  0
18D8:  RCALL  1706
....................    } 
18DA:  BRA    190C
....................    else  if (dem_led<64) 
18DC:  MOVF   53,W
18DE:  SUBLW  3F
18E0:  BNC   190A
....................    {   
....................       xuat_32led_don_1dw(y);    
18E2:  MOVFF  34,49A
18E6:  MOVFF  33,499
18EA:  MOVFF  32,498
18EE:  MOVFF  31,497
18F2:  RCALL  15EC
....................       y= (y<<1);  
18F4:  BCF    FD8.0
18F6:  RLCF   31,F
18F8:  RLCF   32,F
18FA:  RLCF   33,F
18FC:  RLCF   34,F
....................       delay_chon(dl,chondelay); 
18FE:  MOVFF  495,497
1902:  MOVFF  496,498
1906:  RCALL  1706
....................    }  
1908:  BRA    190C
....................    else reset_toan_bo_bien(); 
190A:  RCALL  162C
190C:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
1974:  MOVF   53,W
1976:  SUBLW  1F
1978:  BNC   19BC
....................       {   
....................          xuat_32led_don_1dw(y); 
197A:  MOVFF  34,49A
197E:  MOVFF  33,499
1982:  MOVFF  32,498
1986:  MOVFF  31,497
198A:  RCALL  15EC
....................          y= (y>>1)+0x80000000;  
198C:  BCF    FD8.0
198E:  RRCF   34,W
1990:  MOVLB  4
1992:  MOVWF  x9B
1994:  RRCF   33,W
1996:  MOVWF  x9A
1998:  RRCF   32,W
199A:  MOVWF  x99
199C:  RRCF   31,W
199E:  MOVWF  31
19A0:  MOVFF  499,32
19A4:  MOVFF  49A,33
19A8:  MOVLW  80
19AA:  ADDWF  x9B,W
19AC:  MOVWF  34
....................          delay_chon(dl,chondelay);       
19AE:  MOVFF  495,497
19B2:  MOVFF  496,498
19B6:  MOVLB  0
19B8:  RCALL  1706
....................       } 
19BA:  BRA    19EC
....................       else 
....................       if (dem_led<64) 
19BC:  MOVF   53,W
19BE:  SUBLW  3F
19C0:  BNC   19EA
....................       {   
....................          xuat_32led_don_1dw(y);  
19C2:  MOVFF  34,49A
19C6:  MOVFF  33,499
19CA:  MOVFF  32,498
19CE:  MOVFF  31,497
19D2:  RCALL  15EC
....................          y= (y>>1); 
19D4:  BCF    FD8.0
19D6:  RRCF   34,F
19D8:  RRCF   33,F
19DA:  RRCF   32,F
19DC:  RRCF   31,F
....................          delay_chon(dl,chondelay); 
19DE:  MOVFF  495,497
19E2:  MOVFF  496,498
19E6:  RCALL  1706
....................       }  
19E8:  BRA    19EC
....................       else reset_toan_bo_bien(); 
19EA:  RCALL  162C
19EC:  GOTO   1DC0 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
1808:  BTFSC  54.7
180A:  BRA    1886
180C:  MOVF   54,W
180E:  SUBLW  00
1810:  BC    1886
....................    { 
....................       if(j32<i32) 
1812:  MOVF   55,W
1814:  XORLW  80
1816:  MOVWF  00
1818:  MOVF   54,W
181A:  XORLW  80
181C:  SUBWF  00,W
181E:  BC    1860
....................       { 
....................          y = y_codinh|yp_chay; 
1820:  MOVF   3D,W
1822:  IORWF  35,W
1824:  MOVWF  31
1826:  MOVF   3E,W
1828:  IORWF  36,W
182A:  MOVWF  32
182C:  MOVF   3F,W
182E:  IORWF  37,W
1830:  MOVWF  33
1832:  MOVF   40,W
1834:  IORWF  38,W
1836:  MOVWF  34
....................          xuat_32led_don_1dw(y); 
1838:  MOVFF  34,49A
183C:  MOVFF  33,499
1840:  MOVFF  32,498
1844:  MOVFF  31,497
1848:  RCALL  15EC
....................          delay_chon(dl,chondelay);        
184A:  MOVFF  495,497
184E:  MOVFF  496,498
1852:  RCALL  1706
....................          yp_chay = yp_chay <<1; 
1854:  BCF    FD8.0
1856:  RLCF   35,F
1858:  RLCF   36,F
185A:  RLCF   37,F
185C:  RLCF   38,F
....................          j32++; 
185E:  INCF   55,F
....................       } 
....................       if (j32==i32)  
1860:  MOVF   54,W
1862:  SUBWF  55,W
1864:  BNZ   1884
....................       { 
....................          i32--; 
1866:  DECF   54,F
....................          j32=0;          
1868:  CLRF   55
....................          y_codinh=y; 
186A:  MOVFF  34,40
186E:  MOVFF  33,3F
1872:  MOVFF  32,3E
1876:  MOVFF  31,3D
....................          yp_chay = 1; 
187A:  CLRF   38
187C:  CLRF   37
187E:  CLRF   36
1880:  MOVLW  01
1882:  MOVWF  35
....................       } 
....................    } 
1884:  BRA    1888
....................    else reset_toan_bo_bien(); 
1886:  RCALL  162C
1888:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
023E:  BSF    x73.0
0240:  MOVFF  73,4A0
0244:  MOVFF  49F,4A1
0248:  RCALL  022A
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
024A:  BCF    x73.0
024C:  MOVFF  73,4A0
0250:  MOVFF  49F,4A1
0254:  RCALL  022A
0256:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0258:  BCF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
025A:  MOVFF  495,49F
025E:  RCALL  023E
....................       delay_us(20); 
0260:  MOVLW  21
0262:  MOVWF  00
0264:  DECFSZ 00,F
0266:  BRA    0264
0268:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
0382:  BSF    x73.2
....................       lcd_xuat_8bit(lcd_data_x); 
0384:  MOVFF  49E,49F
0388:  RCALL  023E
....................       delay_us(20); 
038A:  MOVLW  21
038C:  MOVWF  00
038E:  DECFSZ 00,F
0390:  BRA    038E
0392:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
0292:  BCF    x73.0
....................          lcd_rw = 0;  
0294:  BCF    x73.1
....................          lcd_rs = 1;  
0296:  BSF    x73.2
....................          lcd_p =0; 
0298:  BCF    x73.3
....................          lcd_command(lcd_function_set);          
029A:  MOVLW  38
029C:  MOVLB  4
029E:  MOVWF  x95
02A0:  MOVLB  0
02A2:  RCALL  0258
....................          delay_us(40); 
02A4:  MOVLW  42
02A6:  MOVWF  00
02A8:  DECFSZ 00,F
02AA:  BRA    02A8
02AC:  NOP   
....................          lcd_command(lcd_display_control);    
02AE:  MOVLW  0C
02B0:  MOVLB  4
02B2:  MOVWF  x95
02B4:  MOVLB  0
02B6:  RCALL  0258
....................          delay_us(40); 
02B8:  MOVLW  42
02BA:  MOVWF  00
02BC:  DECFSZ 00,F
02BE:  BRA    02BC
02C0:  NOP   
....................          lcd_command(lcd_clear_display);       
02C2:  MOVLW  01
02C4:  MOVLB  4
02C6:  MOVWF  x95
02C8:  MOVLB  0
02CA:  RCALL  0258
....................          delay_ms(2); 
02CC:  MOVLW  02
02CE:  MOVLB  4
02D0:  MOVWF  x9A
02D2:  MOVLB  0
02D4:  RCALL  026A
....................          lcd_command(lcd_entry_mode);        
02D6:  MOVLW  06
02D8:  MOVLB  4
02DA:  MOVWF  x95
02DC:  MOVLB  0
02DE:  RCALL  0258
....................          delay_us(40);                 
02E0:  MOVLW  42
02E2:  MOVWF  00
02E4:  DECFSZ 00,F
02E6:  BRA    02E4
02E8:  NOP   
02EA:  GOTO   1BCE (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
0302:  BSF    x74.2
0304:  MOVFF  74,498
0308:  MOVFF  497,499
030C:  RCALL  02EE
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
030E:  BCF    x74.2
0310:  MOVFF  74,498
0314:  MOVFF  497,499
0318:  RCALL  02EE
031A:  GOTO   0326 (RETURN)
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
031E:  BCF    x74.4
....................       glcd_xuat_8bit(glcd_data2);       
0320:  MOVFF  496,497
0324:  BRA    0302
0326:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(glcd_data3);      
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
0328:  BSF    x74.0
....................          glcd_cs2 = 1; 
032A:  BSF    x74.1
....................          glcd_e  = 0; 
032C:  BCF    x74.2
....................          glcd_rw = 0;           
032E:  BCF    x74.3
....................          glcd_p =0;          
0330:  BCF    x74.5
....................          glcd_command(glcd_function_set_mode);          
0332:  MOVFF  495,496
0336:  RCALL  031E
....................          delay_us(10); 
0338:  MOVLW  10
033A:  MOVWF  00
033C:  DECFSZ 00,F
033E:  BRA    033C
0340:  NOP   
....................          glcd_command(glcd_cursor_display);        
0342:  MOVLW  0C
0344:  MOVLB  4
0346:  MOVWF  x96
0348:  MOVLB  0
034A:  RCALL  031E
....................          delay_us(10);     
034C:  MOVLW  10
034E:  MOVWF  00
0350:  DECFSZ 00,F
0352:  BRA    0350
0354:  NOP   
....................          glcd_command(glcd_clear_display);       
0356:  MOVLW  01
0358:  MOVLB  4
035A:  MOVWF  x96
035C:  MOVLB  0
035E:  RCALL  031E
....................          delay_ms(2); 
0360:  MOVLW  02
0362:  MOVLB  4
0364:  MOVWF  x9A
0366:  MOVLB  0
0368:  RCALL  026A
....................          glcd_command(glcd_entry_mode);       
036A:  MOVLW  06
036C:  MOVLB  4
036E:  MOVWF  x96
0370:  MOVLB  0
0372:  RCALL  031E
....................          delay_us(10);                           
0374:  MOVLW  10
0376:  MOVWF  00
0378:  DECFSZ 00,F
037A:  BRA    0378
037C:  NOP   
037E:  GOTO   1BDA (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
....................   for (doc=0; doc < glcd_doc; doc++)  
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
....................     }  
....................   }  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
....................   doc = y;  
....................   ngang = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
....................       }  
....................     }  
....................     gdram_vdk.refresh = false;  
....................   }  
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
....................  
.................... signed int8 giay,bdn,phut,gio; 
.................... int8 dem = 0; 
.................... int16 lm35a = 0,lm35b = 0; 
.................... int1 ttqn = 0; 
.................... signed int8 max = 100,D,C; 
.................... int8 maxT = 40; 
.................... unsigned int8 count = 0,countT = 0; 
.................... unsigned int8 donvi = 0, j; 
.................... unsigned int16 kqadc; 
.................... float k_cach, clk_cach; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
*
0138:  MOVLB  4
013A:  INCF   x79,F
....................    set_timer1(3036); //3036 
013C:  MOVLW  0B
013E:  MOVWF  FCF
0140:  MOVLW  DC
0142:  MOVWF  FCE
0144:  BCF    F9E.0
0146:  MOVLB  0
0148:  GOTO   0060
.................... } 
....................  
....................  
.................... void BaoChay(){ 
....................    if ((lm35a>maxT) && (lm35b>maxT)){ 
*
13BE:  MOVLB  4
13C0:  MOVF   x7E,F
13C2:  BNZ   13CA
13C4:  MOVF   x7D,W
13C6:  SUBWF  x85,W
13C8:  BC    13DA
13CA:  MOVF   x80,F
13CC:  BNZ   13D4
13CE:  MOVF   x7F,W
13D0:  SUBWF  x85,W
13D2:  BC    13DA
....................       triac_2_off(); 
13D4:  MOVLB  0
13D6:  BRA    13AE
13D8:  MOVLB  4
....................    } 
....................    if ((lm35a<maxT - 5)  && (lm35b<maxT -5)){ 
13DA:  MOVLW  05
13DC:  SUBWF  x85,W
13DE:  MOVF   x7E,F
13E0:  BNZ   13F8
13E2:  SUBWF  x7D,W
13E4:  BC    13F8
13E6:  MOVLW  05
13E8:  SUBWF  x85,W
13EA:  MOVF   x80,F
13EC:  BNZ   13F8
13EE:  SUBWF  x7F,W
13F0:  BC    13F8
....................       triac_2_on(); 
13F2:  MOVLB  0
13F4:  BRA    13B6
13F6:  MOVLB  4
....................    } 
13F8:  MOVLB  0
13FA:  GOTO   1CA4 (RETURN)
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
....................    for (int i = 0; i<6;i++){ 
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
....................       lcd_data(lcd_so_x[lcd_so][i]); 
....................    } 
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0506:  MOVFF  478,495
050A:  MOVLW  0A
050C:  MOVLB  4
050E:  MOVWF  x96
0510:  MOVLB  0
0512:  RCALL  0394
0514:  CLRF   03
0516:  MOVF   00,W
0518:  RCALL  00AE
051A:  MOVWF  26
....................    led_7dq[1] = ma7doan[giay/10]; 
051C:  MOVFF  478,495
0520:  MOVLW  0A
0522:  MOVLB  4
0524:  MOVWF  x96
0526:  MOVLB  0
0528:  RCALL  0394
052A:  CLRF   03
052C:  MOVF   01,W
052E:  RCALL  00AE
0530:  MOVWF  27
....................    led_7dq[3] = ma7doan[phut%10]; 
0532:  MOVFF  47A,495
0536:  MOVLW  0A
0538:  MOVLB  4
053A:  MOVWF  x96
053C:  MOVLB  0
053E:  RCALL  0394
0540:  CLRF   03
0542:  MOVF   00,W
0544:  RCALL  00AE
0546:  MOVWF  29
....................    led_7dq[4] = ma7doan[phut/10]; 
0548:  MOVFF  47A,495
054C:  MOVLW  0A
054E:  MOVLB  4
0550:  MOVWF  x96
0552:  MOVLB  0
0554:  RCALL  0394
0556:  CLRF   03
0558:  MOVF   01,W
055A:  RCALL  00AE
055C:  MOVWF  2A
....................    led_7dq[6] = ma7doan[gio%10]; 
055E:  MOVFF  47B,495
0562:  MOVLW  0A
0564:  MOVLB  4
0566:  MOVWF  x96
0568:  MOVLB  0
056A:  RCALL  0394
056C:  CLRF   03
056E:  MOVF   00,W
0570:  RCALL  00AE
0572:  MOVWF  2C
....................    led_7dq[7] = ma7doan[gio/10]; 
0574:  MOVFF  47B,495
0578:  MOVLW  0A
057A:  MOVLB  4
057C:  MOVWF  x96
057E:  MOVLB  0
0580:  RCALL  0394
0582:  CLRF   03
0584:  MOVF   01,W
0586:  RCALL  00AE
0588:  MOVWF  2D
....................    lcd_command(lcd_addr_line1); 
058A:  MOVLW  80
058C:  MOVLB  4
058E:  MOVWF  x95
0590:  MOVLB  0
0592:  RCALL  0258
....................    printf(lcd_data,"NHIET DO LM35B: %ld",lm35a); 
0594:  MOVLW  4C
0596:  MOVWF  FF6
0598:  MOVLW  01
059A:  MOVWF  FF7
059C:  MOVLW  10
059E:  MOVLB  4
05A0:  MOVWF  x95
05A2:  MOVLB  0
05A4:  RCALL  03E0
05A6:  MOVLW  10
05A8:  MOVWF  FE9
05AA:  MOVFF  47E,496
05AE:  MOVFF  47D,495
05B2:  RCALL  0408
....................    lcd_command(lcd_addr_line2); 
05B4:  MOVLW  C0
05B6:  MOVLB  4
05B8:  MOVWF  x95
05BA:  MOVLB  0
05BC:  RCALL  0258
....................    printf(lcd_data,"NHIET DO LM35A: %ld",lm35b); 
05BE:  MOVLW  60
05C0:  MOVWF  FF6
05C2:  MOVLW  01
05C4:  MOVWF  FF7
05C6:  MOVLW  10
05C8:  MOVLB  4
05CA:  MOVWF  x95
05CC:  MOVLB  0
05CE:  RCALL  03E0
05D0:  MOVLW  10
05D2:  MOVWF  FE9
05D4:  MOVFF  480,496
05D8:  MOVFF  47F,495
05DC:  RCALL  0408
05DE:  RETURN 0
.................... } 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    D = count/10; 
....................    C = count%10; 
....................    LCD_SO_LON(D,1,0); 
....................    LCD_SO_LON(C,1,3); 
.................... }*/ 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    lcd_command(lcd_addr_line3); 
*
07AA:  MOVLW  94
07AC:  MOVLB  4
07AE:  MOVWF  x95
07B0:  MOVLB  0
07B2:  RCALL  0258
....................    printf(lcd_data,"DEM SAN PHAM: %d",count); 
07B4:  MOVLW  74
07B6:  MOVWF  FF6
07B8:  MOVLW  01
07BA:  MOVWF  FF7
07BC:  MOVLW  0E
07BE:  MOVLB  4
07C0:  MOVWF  x95
07C2:  MOVLB  0
07C4:  RCALL  03E0
07C6:  MOVFF  486,495
07CA:  MOVLW  18
07CC:  MOVLB  4
07CE:  MOVWF  x96
07D0:  MOVLB  0
07D2:  BRA    06EC
07D4:  GOTO   1C82 (RETURN)
.................... } 
....................  
.................... void read_temp(){ 
....................    set_adc_channel(0);  
*
19F0:  MOVLW  00
19F2:  MOVWF  01
19F4:  MOVF   FC2,W
19F6:  ANDLW  C3
19F8:  IORWF  01,W
19FA:  MOVWF  FC2
....................    lm35a = read_adc()/2.046; 
19FC:  BSF    FC2.1
19FE:  BTFSC  FC2.1
1A00:  BRA    19FE
1A02:  MOVFF  FC4,496
1A06:  MOVFF  FC3,495
1A0A:  MOVFF  FC4,498
1A0E:  MOVFF  FC3,497
1A12:  MOVLB  0
1A14:  CALL   083C
1A18:  MOVFF  03,49A
1A1C:  MOVFF  02,499
1A20:  MOVFF  01,498
1A24:  MOVFF  00,497
1A28:  MOVLW  AA
1A2A:  MOVLB  4
1A2C:  MOVWF  x9E
1A2E:  MOVLW  F1
1A30:  MOVWF  x9D
1A32:  MOVLW  02
1A34:  MOVWF  x9C
1A36:  MOVLW  80
1A38:  MOVWF  x9B
1A3A:  MOVLB  0
1A3C:  CALL   0872
1A40:  MOVFF  03,49E
1A44:  MOVFF  02,49D
1A48:  MOVFF  01,49C
1A4C:  MOVFF  00,49B
1A50:  CALL   0C48
1A54:  MOVFF  02,47E
1A58:  MOVFF  01,47D
....................    set_adc_channel(1); 
1A5C:  MOVLW  04
1A5E:  MOVWF  01
1A60:  MOVF   FC2,W
1A62:  ANDLW  C3
1A64:  IORWF  01,W
1A66:  MOVWF  FC2
....................    lm35b = read_adc()/2.046; 
1A68:  BSF    FC2.1
1A6A:  BTFSC  FC2.1
1A6C:  BRA    1A6A
1A6E:  MOVFF  FC4,496
1A72:  MOVFF  FC3,495
1A76:  MOVFF  FC4,498
1A7A:  MOVFF  FC3,497
1A7E:  MOVLB  0
1A80:  CALL   083C
1A84:  MOVFF  03,49A
1A88:  MOVFF  02,499
1A8C:  MOVFF  01,498
1A90:  MOVFF  00,497
1A94:  MOVLW  AA
1A96:  MOVLB  4
1A98:  MOVWF  x9E
1A9A:  MOVLW  F1
1A9C:  MOVWF  x9D
1A9E:  MOVLW  02
1AA0:  MOVWF  x9C
1AA2:  MOVLW  80
1AA4:  MOVWF  x9B
1AA6:  MOVLB  0
1AA8:  CALL   0872
1AAC:  MOVFF  03,49E
1AB0:  MOVFF  02,49D
1AB4:  MOVFF  01,49C
1AB8:  MOVFF  00,49B
1ABC:  CALL   0C48
1AC0:  MOVFF  02,480
1AC4:  MOVFF  01,47F
1AC8:  GOTO   1DF0 (RETURN)
.................... } 
....................  
.................... void phim_up() { 
....................    if (!input(up)) { 
*
13FE:  BSF    F93.5
1400:  BTFSC  F81.5
1402:  BRA    14C4
....................       delay_ms(5); 
1404:  MOVLW  05
1406:  MOVLB  4
1408:  MOVWF  x9A
140A:  MOVLB  0
140C:  CALL   026A
....................       if (!input(up)) 
1410:  BSF    F93.5
1412:  BTFSC  F81.5
1414:  BRA    14C4
....................       { 
....................          maxT++; 
1416:  MOVLB  4
1418:  INCF   x85,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
141A:  MOVFF  485,49B
141E:  MOVLW  0A
1420:  MOVWF  x9C
1422:  MOVLB  0
1424:  CALL   06C0
1428:  CLRF   03
142A:  MOVF   01,W
142C:  CALL   00AE
1430:  MOVLB  4
1432:  MOVWF  x95
1434:  MOVFF  485,49B
1438:  MOVLW  0A
143A:  MOVWF  x9C
143C:  MOVLB  0
143E:  CALL   06C0
1442:  CLRF   03
1444:  MOVF   00,W
1446:  CALL   00AE
144A:  MOVLB  4
144C:  MOVWF  x96
144E:  MOVFF  47E,4A0
1452:  MOVFF  47D,49F
1456:  CLRF   xA2
1458:  MOVLW  0A
145A:  MOVWF  xA1
145C:  MOVLB  0
145E:  CALL   07F6
1462:  MOVFF  02,498
1466:  MOVFF  01,497
146A:  MOVFF  02,03
146E:  MOVLB  4
1470:  MOVF   01,W
1472:  MOVLB  0
1474:  CALL   00AE
1478:  MOVLB  4
147A:  MOVWF  x99
147C:  MOVFF  47E,4A0
1480:  MOVFF  47D,49F
1484:  CLRF   xA2
1486:  MOVLW  0A
1488:  MOVWF  xA1
148A:  MOVLB  0
148C:  CALL   07F6
1490:  MOVFF  00,49A
1494:  MOVLB  4
1496:  MOVFF  03,49B
149A:  MOVFF  03,03
149E:  MOVF   00,W
14A0:  MOVLB  0
14A2:  CALL   00AE
14A6:  MOVLB  4
14A8:  MOVWF  x9C
14AA:  MOVFF  495,49D
14AE:  MOVFF  496,49E
14B2:  MOVFF  499,49F
14B6:  MOVWF  xA0
14B8:  MOVLB  0
14BA:  CALL   0C84
....................          while(!input(up)); 
14BE:  BSF    F93.5
14C0:  BTFSS  F81.5
14C2:  BRA    14BE
....................       } 
....................    } 
14C4:  GOTO   1CA8 (RETURN)
.................... } 
.................... void phim_dw() { 
....................    if (!input(dw)) { 
14C8:  BSF    F93.4
14CA:  BTFSC  F81.4
14CC:  BRA    158E
....................       delay_ms(5); 
14CE:  MOVLW  05
14D0:  MOVLB  4
14D2:  MOVWF  x9A
14D4:  MOVLB  0
14D6:  CALL   026A
....................       if (!input(dw)) 
14DA:  BSF    F93.4
14DC:  BTFSC  F81.4
14DE:  BRA    158E
....................       { 
....................          maxT--; 
14E0:  MOVLB  4
14E2:  DECF   x85,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
14E4:  MOVFF  485,49B
14E8:  MOVLW  0A
14EA:  MOVWF  x9C
14EC:  MOVLB  0
14EE:  CALL   06C0
14F2:  CLRF   03
14F4:  MOVF   01,W
14F6:  CALL   00AE
14FA:  MOVLB  4
14FC:  MOVWF  x95
14FE:  MOVFF  485,49B
1502:  MOVLW  0A
1504:  MOVWF  x9C
1506:  MOVLB  0
1508:  CALL   06C0
150C:  CLRF   03
150E:  MOVF   00,W
1510:  CALL   00AE
1514:  MOVLB  4
1516:  MOVWF  x96
1518:  MOVFF  47E,4A0
151C:  MOVFF  47D,49F
1520:  CLRF   xA2
1522:  MOVLW  0A
1524:  MOVWF  xA1
1526:  MOVLB  0
1528:  CALL   07F6
152C:  MOVFF  02,498
1530:  MOVFF  01,497
1534:  MOVFF  02,03
1538:  MOVLB  4
153A:  MOVF   01,W
153C:  MOVLB  0
153E:  CALL   00AE
1542:  MOVLB  4
1544:  MOVWF  x99
1546:  MOVFF  47E,4A0
154A:  MOVFF  47D,49F
154E:  CLRF   xA2
1550:  MOVLW  0A
1552:  MOVWF  xA1
1554:  MOVLB  0
1556:  CALL   07F6
155A:  MOVFF  00,49A
155E:  MOVLB  4
1560:  MOVFF  03,49B
1564:  MOVFF  03,03
1568:  MOVF   00,W
156A:  MOVLB  0
156C:  CALL   00AE
1570:  MOVLB  4
1572:  MOVWF  x9C
1574:  MOVFF  495,49D
1578:  MOVFF  496,49E
157C:  MOVFF  499,49F
1580:  MOVWF  xA0
1582:  MOVLB  0
1584:  CALL   0C84
....................          while (!input(dw)); 
1588:  BSF    F93.4
158A:  BTFSS  F81.4
158C:  BRA    1588
....................       } 
....................    } 
158E:  GOTO   1CAA (RETURN)
.................... } 
....................  
.................... void dispDistance(float tam){ 
*
0DEC:  MOVFF  498,49E
0DF0:  MOVFF  497,49D
0DF4:  MOVFF  496,49C
0DF8:  MOVFF  495,49B
0DFC:  RCALL  0C48
0DFE:  MOVFF  02,49A
0E02:  MOVFF  01,499
....................    unsigned int16 x = (unsigned int16)tam; 
....................    xuat_4led_7doan_giaima_xoa_so0(x); 
0E06:  MOVFF  49A,49C
0E0A:  MOVFF  499,49B
0E0E:  BRA    0CB8
0E10:  GOTO   137E (RETURN)
.................... } 
....................  
....................  
.................... void readGP2D12() { 
....................    set_adc_channel(2); 
0E14:  MOVLW  08
0E16:  MOVWF  01
0E18:  MOVF   FC2,W
0E1A:  ANDLW  C3
0E1C:  IORWF  01,W
0E1E:  MOVWF  FC2
....................    kqadc = 0; 
0E20:  MOVLB  4
0E22:  CLRF   x8B
0E24:  CLRF   x8A
....................    for (j = 0; j<30; j++){ 
0E26:  CLRF   x89
0E28:  MOVF   x89,W
0E2A:  SUBLW  1D
0E2C:  BNC   0E4C
....................       kqadc = kqadc + read_adc(); 
0E2E:  BSF    FC2.1
0E30:  BTFSC  FC2.1
0E32:  BRA    0E30
0E34:  MOVF   FC3,W
0E36:  ADDWF  x8A,F
0E38:  MOVF   FC4,W
0E3A:  ADDWFC x8B,F
....................       delay_quet_8led(1); 
0E3C:  CLRF   x96
0E3E:  MOVLW  01
0E40:  MOVWF  x95
0E42:  MOVLB  0
0E44:  BRA    07D8
0E46:  MOVLB  4
0E48:  INCF   x89,F
0E4A:  BRA    0E28
....................    } 
....................    kqadc = kqadc /20; 
0E4C:  MOVFF  48B,4A0
0E50:  MOVFF  48A,49F
0E54:  CLRF   xA2
0E56:  MOVLW  14
0E58:  MOVWF  xA1
0E5A:  MOVLB  0
0E5C:  RCALL  07F6
0E5E:  MOVFF  02,48B
0E62:  MOVFF  01,48A
....................    if (kqadc<=80) k_cach = 80; 
0E66:  MOVLB  4
0E68:  MOVF   x8B,F
0E6A:  BNZ   0E80
0E6C:  MOVF   x8A,W
0E6E:  SUBLW  50
0E70:  BNC   0E80
0E72:  CLRF   x8F
0E74:  CLRF   x8E
0E76:  MOVLW  20
0E78:  MOVWF  x8D
0E7A:  MOVLW  85
0E7C:  MOVWF  x8C
0E7E:  BRA    136A
....................    else if ((kqadc>80)&&(kqadc<87)){ 
0E80:  MOVF   x8B,F
0E82:  BNZ   0E8A
0E84:  MOVF   x8A,W
0E86:  SUBLW  50
0E88:  BC    0F18
0E8A:  MOVF   x8B,F
0E8C:  BNZ   0F18
0E8E:  MOVF   x8A,W
0E90:  SUBLW  56
0E92:  BNC   0F18
....................       clk_cach = kqadc-80; 
0E94:  MOVLW  50
0E96:  SUBWF  x8A,W
0E98:  MOVWF  00
0E9A:  MOVLW  00
0E9C:  SUBWFB x8B,W
0E9E:  MOVWF  03
0EA0:  MOVFF  00,497
0EA4:  MOVWF  x98
0EA6:  MOVLB  0
0EA8:  RCALL  083C
0EAA:  MOVFF  03,493
0EAE:  MOVFF  02,492
0EB2:  MOVFF  01,491
0EB6:  MOVFF  00,490
....................       k_cach = 80 - clk_cach/0.77; 
0EBA:  MOVFF  493,49A
0EBE:  MOVFF  492,499
0EC2:  MOVFF  491,498
0EC6:  MOVFF  490,497
0ECA:  MOVLW  B8
0ECC:  MOVLB  4
0ECE:  MOVWF  x9E
0ED0:  MOVLW  1E
0ED2:  MOVWF  x9D
0ED4:  MOVLW  45
0ED6:  MOVWF  x9C
0ED8:  MOVLW  7E
0EDA:  MOVWF  x9B
0EDC:  MOVLB  0
0EDE:  RCALL  0872
0EE0:  BSF    FD8.1
0EE2:  MOVLB  4
0EE4:  CLRF   x98
0EE6:  CLRF   x97
0EE8:  MOVLW  20
0EEA:  MOVWF  x96
0EEC:  MOVLW  85
0EEE:  MOVWF  x95
0EF0:  MOVFF  03,49C
0EF4:  MOVFF  02,49B
0EF8:  MOVFF  01,49A
0EFC:  MOVFF  00,499
0F00:  MOVLB  0
0F02:  RCALL  09D0
0F04:  MOVFF  03,48F
0F08:  MOVFF  02,48E
0F0C:  MOVFF  01,48D
0F10:  MOVFF  00,48C
....................    } 
0F14:  BRA    136C
0F16:  MOVLB  4
....................    else if (kqadc == 87) k_cach=70; 
0F18:  MOVF   x8A,W
0F1A:  SUBLW  57
0F1C:  BNZ   0F30
0F1E:  MOVF   x8B,F
0F20:  BNZ   0F30
0F22:  CLRF   x8F
0F24:  CLRF   x8E
0F26:  MOVLW  0C
0F28:  MOVWF  x8D
0F2A:  MOVLW  85
0F2C:  MOVWF  x8C
0F2E:  BRA    136A
....................    else if ((kqadc>87) && (kqadc<106)){ 
0F30:  MOVF   x8B,F
0F32:  BNZ   0F3A
0F34:  MOVF   x8A,W
0F36:  SUBLW  57
0F38:  BC    0FC8
0F3A:  MOVF   x8B,F
0F3C:  BNZ   0FC8
0F3E:  MOVF   x8A,W
0F40:  SUBLW  69
0F42:  BNC   0FC8
....................       clk_cach = kqadc -87; 
0F44:  MOVLW  57
0F46:  SUBWF  x8A,W
0F48:  MOVWF  00
0F4A:  MOVLW  00
0F4C:  SUBWFB x8B,W
0F4E:  MOVWF  03
0F50:  MOVFF  00,497
0F54:  MOVWF  x98
0F56:  MOVLB  0
0F58:  RCALL  083C
0F5A:  MOVFF  03,493
0F5E:  MOVFF  02,492
0F62:  MOVFF  01,491
0F66:  MOVFF  00,490
....................       k_cach = 70 - clk_cach/2.11; 
0F6A:  MOVFF  493,49A
0F6E:  MOVFF  492,499
0F72:  MOVFF  491,498
0F76:  MOVFF  490,497
0F7A:  MOVLW  3D
0F7C:  MOVLB  4
0F7E:  MOVWF  x9E
0F80:  MOVLW  0A
0F82:  MOVWF  x9D
0F84:  MOVLW  07
0F86:  MOVWF  x9C
0F88:  MOVLW  80
0F8A:  MOVWF  x9B
0F8C:  MOVLB  0
0F8E:  RCALL  0872
0F90:  BSF    FD8.1
0F92:  MOVLB  4
0F94:  CLRF   x98
0F96:  CLRF   x97
0F98:  MOVLW  0C
0F9A:  MOVWF  x96
0F9C:  MOVLW  85
0F9E:  MOVWF  x95
0FA0:  MOVFF  03,49C
0FA4:  MOVFF  02,49B
0FA8:  MOVFF  01,49A
0FAC:  MOVFF  00,499
0FB0:  MOVLB  0
0FB2:  RCALL  09D0
0FB4:  MOVFF  03,48F
0FB8:  MOVFF  02,48E
0FBC:  MOVFF  01,48D
0FC0:  MOVFF  00,48C
....................    } 
0FC4:  BRA    136C
0FC6:  MOVLB  4
....................    else if(kqadc == 106) k_cach=60; 
0FC8:  MOVF   x8A,W
0FCA:  SUBLW  6A
0FCC:  BNZ   0FE0
0FCE:  MOVF   x8B,F
0FD0:  BNZ   0FE0
0FD2:  CLRF   x8F
0FD4:  CLRF   x8E
0FD6:  MOVLW  70
0FD8:  MOVWF  x8D
0FDA:  MOVLW  84
0FDC:  MOVWF  x8C
0FDE:  BRA    136A
....................    else if (kqadc>106 && kqadc<124){ 
0FE0:  MOVF   x8B,F
0FE2:  BNZ   0FEA
0FE4:  MOVF   x8A,W
0FE6:  SUBLW  6A
0FE8:  BC    1072
0FEA:  MOVF   x8B,F
0FEC:  BNZ   1072
0FEE:  MOVF   x8A,W
0FF0:  SUBLW  7B
0FF2:  BNC   1072
....................       clk_cach = kqadc - 106; 
0FF4:  MOVLW  6A
0FF6:  SUBWF  x8A,W
0FF8:  MOVWF  00
0FFA:  MOVLW  00
0FFC:  SUBWFB x8B,W
0FFE:  MOVWF  03
1000:  MOVFF  00,497
1004:  MOVWF  x98
1006:  MOVLB  0
1008:  RCALL  083C
100A:  MOVFF  03,493
100E:  MOVFF  02,492
1012:  MOVFF  01,491
1016:  MOVFF  00,490
....................       k_cach = 60 - clk_cach/2; 
101A:  MOVFF  493,49A
101E:  MOVFF  492,499
1022:  MOVFF  491,498
1026:  MOVFF  490,497
102A:  MOVLB  4
102C:  CLRF   x9E
102E:  CLRF   x9D
1030:  CLRF   x9C
1032:  MOVLW  80
1034:  MOVWF  x9B
1036:  MOVLB  0
1038:  RCALL  0872
103A:  BSF    FD8.1
103C:  MOVLB  4
103E:  CLRF   x98
1040:  CLRF   x97
1042:  MOVLW  70
1044:  MOVWF  x96
1046:  MOVLW  84
1048:  MOVWF  x95
104A:  MOVFF  03,49C
104E:  MOVFF  02,49B
1052:  MOVFF  01,49A
1056:  MOVFF  00,499
105A:  MOVLB  0
105C:  RCALL  09D0
105E:  MOVFF  03,48F
1062:  MOVFF  02,48E
1066:  MOVFF  01,48D
106A:  MOVFF  00,48C
....................    } 
106E:  BRA    136C
1070:  MOVLB  4
....................    else if ( kqadc == 124) k_cach=50; 
1072:  MOVF   x8A,W
1074:  SUBLW  7C
1076:  BNZ   108A
1078:  MOVF   x8B,F
107A:  BNZ   108A
107C:  CLRF   x8F
107E:  CLRF   x8E
1080:  MOVLW  48
1082:  MOVWF  x8D
1084:  MOVLW  84
1086:  MOVWF  x8C
1088:  BRA    136A
....................    else if (kqadc>124 && kqadc<150) 
108A:  MOVF   x8B,F
108C:  BNZ   1094
108E:  MOVF   x8A,W
1090:  SUBLW  7C
1092:  BC    1126
1094:  MOVF   x8B,F
1096:  BNZ   1126
1098:  MOVF   x8A,W
109A:  SUBLW  95
109C:  BNC   1126
....................    { 
....................       clk_cach = kqadc -124; 
109E:  MOVLW  7C
10A0:  SUBWF  x8A,W
10A2:  MOVWF  00
10A4:  MOVLW  00
10A6:  SUBWFB x8B,W
10A8:  MOVWF  03
10AA:  MOVFF  00,497
10AE:  MOVWF  x98
10B0:  MOVLB  0
10B2:  CALL   083C
10B6:  MOVFF  03,493
10BA:  MOVFF  02,492
10BE:  MOVFF  01,491
10C2:  MOVFF  00,490
....................       k_cach = 50 - clk_cach/2.88; 
10C6:  MOVFF  493,49A
10CA:  MOVFF  492,499
10CE:  MOVFF  491,498
10D2:  MOVFF  490,497
10D6:  MOVLW  EC
10D8:  MOVLB  4
10DA:  MOVWF  x9E
10DC:  MOVLW  51
10DE:  MOVWF  x9D
10E0:  MOVLW  38
10E2:  MOVWF  x9C
10E4:  MOVLW  80
10E6:  MOVWF  x9B
10E8:  MOVLB  0
10EA:  CALL   0872
10EE:  BSF    FD8.1
10F0:  MOVLB  4
10F2:  CLRF   x98
10F4:  CLRF   x97
10F6:  MOVLW  48
10F8:  MOVWF  x96
10FA:  MOVLW  84
10FC:  MOVWF  x95
10FE:  MOVFF  03,49C
1102:  MOVFF  02,49B
1106:  MOVFF  01,49A
110A:  MOVFF  00,499
110E:  MOVLB  0
1110:  RCALL  09D0
1112:  MOVFF  03,48F
1116:  MOVFF  02,48E
111A:  MOVFF  01,48D
111E:  MOVFF  00,48C
....................    } 
1122:  BRA    136C
1124:  MOVLB  4
....................    else if (kqadc == 150) k_cach = 40; 
1126:  MOVF   x8A,W
1128:  SUBLW  96
112A:  BNZ   113E
112C:  MOVF   x8B,F
112E:  BNZ   113E
1130:  CLRF   x8F
1132:  CLRF   x8E
1134:  MOVLW  20
1136:  MOVWF  x8D
1138:  MOVLW  84
113A:  MOVWF  x8C
113C:  BRA    136A
....................    else if (kqadc > 150 && kqadc <196){ 
113E:  MOVF   x8B,F
1140:  BNZ   1148
1142:  MOVF   x8A,W
1144:  SUBLW  96
1146:  BC    11DA
1148:  MOVF   x8B,F
114A:  BNZ   11DA
114C:  MOVF   x8A,W
114E:  SUBLW  C3
1150:  BNC   11DA
....................       clk_cach = kqadc - 150; 
1152:  MOVLW  96
1154:  SUBWF  x8A,W
1156:  MOVWF  00
1158:  MOVLW  00
115A:  SUBWFB x8B,W
115C:  MOVWF  03
115E:  MOVFF  00,497
1162:  MOVWF  x98
1164:  MOVLB  0
1166:  CALL   083C
116A:  MOVFF  03,493
116E:  MOVFF  02,492
1172:  MOVFF  01,491
1176:  MOVFF  00,490
....................       k_cach = 40 -clk_cach/5.11; 
117A:  MOVFF  493,49A
117E:  MOVFF  492,499
1182:  MOVFF  491,498
1186:  MOVFF  490,497
118A:  MOVLW  1F
118C:  MOVLB  4
118E:  MOVWF  x9E
1190:  MOVLW  85
1192:  MOVWF  x9D
1194:  MOVLW  23
1196:  MOVWF  x9C
1198:  MOVLW  81
119A:  MOVWF  x9B
119C:  MOVLB  0
119E:  CALL   0872
11A2:  BSF    FD8.1
11A4:  MOVLB  4
11A6:  CLRF   x98
11A8:  CLRF   x97
11AA:  MOVLW  20
11AC:  MOVWF  x96
11AE:  MOVLW  84
11B0:  MOVWF  x95
11B2:  MOVFF  03,49C
11B6:  MOVFF  02,49B
11BA:  MOVFF  01,49A
11BE:  MOVFF  00,499
11C2:  MOVLB  0
11C4:  RCALL  09D0
11C6:  MOVFF  03,48F
11CA:  MOVFF  02,48E
11CE:  MOVFF  01,48D
11D2:  MOVFF  00,48C
....................    } 
11D6:  BRA    136C
11D8:  MOVLB  4
....................    else if (kqadc == 196) k_cach = 30; 
11DA:  MOVF   x8A,W
11DC:  SUBLW  C4
11DE:  BNZ   11F2
11E0:  MOVF   x8B,F
11E2:  BNZ   11F2
11E4:  CLRF   x8F
11E6:  CLRF   x8E
11E8:  MOVLW  70
11EA:  MOVWF  x8D
11EC:  MOVLW  83
11EE:  MOVWF  x8C
11F0:  BRA    136A
....................    else if (kqadc > 196 && kqadc<276) { 
11F2:  MOVF   x8B,F
11F4:  BNZ   11FC
11F6:  MOVF   x8A,W
11F8:  SUBLW  C4
11FA:  BC    1294
11FC:  MOVF   x8B,W
11FE:  SUBLW  01
1200:  BNC   1294
1202:  BNZ   120A
1204:  MOVF   x8A,W
1206:  SUBLW  13
1208:  BNC   1294
....................       clk_cach = kqadc-196; 
120A:  MOVLW  C4
120C:  SUBWF  x8A,W
120E:  MOVWF  00
1210:  MOVLW  00
1212:  SUBWFB x8B,W
1214:  MOVWF  03
1216:  MOVFF  00,497
121A:  MOVWF  x98
121C:  MOVLB  0
121E:  CALL   083C
1222:  MOVFF  03,493
1226:  MOVFF  02,492
122A:  MOVFF  01,491
122E:  MOVFF  00,490
....................       k_cach = 30 - clk_cach/8.88; 
1232:  MOVFF  493,49A
1236:  MOVFF  492,499
123A:  MOVFF  491,498
123E:  MOVFF  490,497
1242:  MOVLW  7B
1244:  MOVLB  4
1246:  MOVWF  x9E
1248:  MOVLW  14
124A:  MOVWF  x9D
124C:  MOVLW  0E
124E:  MOVWF  x9C
1250:  MOVLW  82
1252:  MOVWF  x9B
1254:  MOVLB  0
1256:  CALL   0872
125A:  BSF    FD8.1
125C:  MOVLB  4
125E:  CLRF   x98
1260:  CLRF   x97
1262:  MOVLW  70
1264:  MOVWF  x96
1266:  MOVLW  83
1268:  MOVWF  x95
126A:  MOVFF  03,49C
126E:  MOVFF  02,49B
1272:  MOVFF  01,49A
1276:  MOVFF  00,499
127A:  MOVLB  0
127C:  CALL   09D0
1280:  MOVFF  03,48F
1284:  MOVFF  02,48E
1288:  MOVFF  01,48D
128C:  MOVFF  00,48C
....................    } 
1290:  BRA    136C
1292:  MOVLB  4
....................    else if(kqadc == 276) k_cach = 20; 
1294:  MOVF   x8A,W
1296:  SUBLW  14
1298:  BNZ   12AC
129A:  DECFSZ x8B,W
129C:  BRA    12AC
129E:  CLRF   x8F
12A0:  CLRF   x8E
12A2:  MOVLW  20
12A4:  MOVWF  x8D
12A6:  MOVLW  83
12A8:  MOVWF  x8C
12AA:  BRA    136A
....................    else if (kqadc > 276 && kqadc<490){ 
12AC:  MOVF   x8B,W
12AE:  SUBLW  00
12B0:  BC    1354
12B2:  XORLW  FF
12B4:  BNZ   12BC
12B6:  MOVF   x8A,W
12B8:  SUBLW  14
12BA:  BC    1354
12BC:  MOVF   x8B,W
12BE:  SUBLW  01
12C0:  BNC   1354
12C2:  BNZ   12CA
12C4:  MOVF   x8A,W
12C6:  SUBLW  E9
12C8:  BNC   1354
....................       clk_cach = kqadc - 276; 
12CA:  MOVLW  14
12CC:  SUBWF  x8A,W
12CE:  MOVWF  00
12D0:  MOVLW  01
12D2:  SUBWFB x8B,W
12D4:  MOVWF  03
12D6:  MOVFF  00,497
12DA:  MOVWF  x98
12DC:  MOVLB  0
12DE:  CALL   083C
12E2:  MOVFF  03,493
12E6:  MOVFF  02,492
12EA:  MOVFF  01,491
12EE:  MOVFF  00,490
....................       k_cach = 20 - clk_cach/23.77; 
12F2:  MOVFF  493,49A
12F6:  MOVFF  492,499
12FA:  MOVFF  491,498
12FE:  MOVFF  490,497
1302:  MOVLW  F6
1304:  MOVLB  4
1306:  MOVWF  x9E
1308:  MOVLW  28
130A:  MOVWF  x9D
130C:  MOVLW  3E
130E:  MOVWF  x9C
1310:  MOVLW  83
1312:  MOVWF  x9B
1314:  MOVLB  0
1316:  CALL   0872
131A:  BSF    FD8.1
131C:  MOVLB  4
131E:  CLRF   x98
1320:  CLRF   x97
1322:  MOVLW  20
1324:  MOVWF  x96
1326:  MOVLW  83
1328:  MOVWF  x95
132A:  MOVFF  03,49C
132E:  MOVFF  02,49B
1332:  MOVFF  01,49A
1336:  MOVFF  00,499
133A:  MOVLB  0
133C:  CALL   09D0
1340:  MOVFF  03,48F
1344:  MOVFF  02,48E
1348:  MOVFF  01,48D
134C:  MOVFF  00,48C
....................    } 
1350:  BRA    136C
1352:  MOVLB  4
....................    else if (kqadc == 490) k_cach=10; 
1354:  MOVF   x8A,W
1356:  SUBLW  EA
1358:  BNZ   136A
135A:  DECFSZ x8B,W
135C:  BRA    136A
135E:  CLRF   x8F
1360:  CLRF   x8E
1362:  MOVLW  20
1364:  MOVWF  x8D
1366:  MOVLW  82
1368:  MOVWF  x8C
136A:  MOVLB  0
....................    dispDistance(k_cach); 
136C:  MOVFF  48F,498
1370:  MOVFF  48E,497
1374:  MOVFF  48D,496
1378:  MOVFF  48C,495
137C:  BRA    0DEC
137E:  GOTO   1CA0 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
1ACC:  CLRF   FF8
1ACE:  BCF    FD0.7
1AD0:  BSF    07.7
1AD2:  BSF    F93.1
1AD4:  BSF    F93.0
1AD6:  MOVLW  31
1AD8:  MOVWF  FC8
1ADA:  MOVLW  28
1ADC:  MOVWF  FC6
1ADE:  BSF    FC7.7
1AE0:  BCF    FC7.6
1AE2:  CLRF   1B
1AE4:  CLRF   22
1AE6:  CLRF   23
1AE8:  CLRF   24
1AEA:  CLRF   25
1AEC:  CLRF   2E
1AEE:  CLRF   2F
1AF0:  CLRF   30
1AF2:  CLRF   34
1AF4:  CLRF   33
1AF6:  CLRF   32
1AF8:  CLRF   31
1AFA:  CLRF   38
1AFC:  CLRF   37
1AFE:  CLRF   36
1B00:  MOVLW  01
1B02:  MOVWF  35
1B04:  MOVLW  80
1B06:  MOVWF  3C
1B08:  CLRF   3B
1B0A:  CLRF   3A
1B0C:  CLRF   39
1B0E:  CLRF   40
1B10:  CLRF   3F
1B12:  CLRF   3E
1B14:  CLRF   3D
1B16:  MOVWF  44
1B18:  CLRF   43
1B1A:  CLRF   46
1B1C:  MOVLW  01
1B1E:  MOVWF  45
1B20:  CLRF   48
1B22:  CLRF   47
1B24:  MOVLW  80
1B26:  MOVWF  4C
1B28:  CLRF   4B
1B2A:  CLRF   4E
1B2C:  MOVLW  01
1B2E:  MOVWF  4D
1B30:  CLRF   50
1B32:  CLRF   4F
1B34:  CLRF   52
1B36:  CLRF   51
1B38:  CLRF   53
1B3A:  MOVLW  20
1B3C:  MOVWF  54
1B3E:  CLRF   55
1B40:  MOVLW  01
1B42:  MOVWF  56
1B44:  MOVLW  10
1B46:  MOVWF  57
1B48:  CLRF   58
1B4A:  CLRF   5C
1B4C:  CLRF   5B
1B4E:  CLRF   5A
1B50:  MOVLW  01
1B52:  MOVWF  59
1B54:  CLRF   x60
1B56:  CLRF   5F
1B58:  CLRF   5E
1B5A:  MOVWF  5D
1B5C:  SETF   x64
1B5E:  SETF   x63
1B60:  SETF   x62
1B62:  MOVLW  FE
1B64:  MOVWF  x61
1B66:  MOVLW  80
1B68:  MOVWF  x68
1B6A:  CLRF   x67
1B6C:  CLRF   x66
1B6E:  CLRF   x65
1B70:  MOVWF  x6C
1B72:  CLRF   x6B
1B74:  CLRF   x6A
1B76:  CLRF   x69
1B78:  MOVLW  7F
1B7A:  MOVWF  x70
1B7C:  SETF   x6F
1B7E:  SETF   x6E
1B80:  SETF   x6D
1B82:  MOVLW  01
1B84:  MOVWF  x71
1B86:  MOVWF  x72
1B88:  MOVLB  4
1B8A:  CLRF   x7C
1B8C:  CLRF   x7E
1B8E:  CLRF   x7D
1B90:  CLRF   x80
1B92:  CLRF   x7F
1B94:  BCF    x81.0
1B96:  MOVLW  64
1B98:  MOVWF  x82
1B9A:  MOVLW  28
1B9C:  MOVWF  x85
1B9E:  CLRF   x86
1BA0:  CLRF   x87
1BA2:  CLRF   x88
1BA4:  MOVF   FC1,W
1BA6:  ANDLW  C0
1BA8:  IORLW  0F
1BAA:  MOVWF  FC1
1BAC:  MOVLW  07
1BAE:  MOVWF  FB4
1BB0:  SETF   26
1BB2:  SETF   27
1BB4:  SETF   28
1BB6:  SETF   29
1BB8:  SETF   2A
1BBA:  SETF   2B
1BBC:  SETF   2C
1BBE:  SETF   2D
.................... { 
....................    set_up_port_ic_chot(); 
1BC0:  MOVLB  0
1BC2:  GOTO   0186
....................    set_tris_b(0x3c); 
1BC6:  MOVLW  3C
1BC8:  MOVWF  F93
....................    setup_lcd(); 
1BCA:  GOTO   0292
....................    setup_glcd(glcd_graphic_mode); 
1BCE:  MOVLW  36
1BD0:  MOVLB  4
1BD2:  MOVWF  x95
1BD4:  MOVLB  0
1BD6:  GOTO   0328
....................  
....................  
....................  
....................    lcd_command(0x40); 
1BDA:  MOVLW  40
1BDC:  MOVLB  4
1BDE:  MOVWF  x95
1BE0:  MOVLB  0
1BE2:  CALL   0258
....................    for (int i = 0; i<64;i++){ 
1BE6:  MOVLB  4
1BE8:  CLRF   x94
1BEA:  MOVF   x94,W
1BEC:  SUBLW  3F
1BEE:  BNC   1C0C
....................       lcd_data(lcd_ma_8doan[i]); 
1BF0:  CLRF   03
1BF2:  MOVF   x94,W
1BF4:  MOVLB  0
1BF6:  CALL   00E8
1BFA:  MOVLB  4
1BFC:  MOVWF  x95
1BFE:  MOVWF  x9E
1C00:  MOVLB  0
1C02:  CALL   0382
1C06:  MOVLB  4
1C08:  INCF   x94,F
1C0A:  BRA    1BEA
....................    } 
....................  
....................  
....................    setup_adc(ADC_CLOCK_DIV_32); 
1C0C:  MOVF   FC0,W
1C0E:  ANDLW  C0
1C10:  IORLW  02
1C12:  MOVWF  FC0
1C14:  BSF    FC0.7
1C16:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN2|VSS_VDD); 
1C18:  MOVF   FC1,W
1C1A:  ANDLW  C0
1C1C:  IORLW  0C
1C1E:  MOVWF  FC1
....................    set_adc_channel(2); 
1C20:  MOVLW  08
1C22:  MOVWF  01
1C24:  MOVF   FC2,W
1C26:  ANDLW  C3
1C28:  IORWF  01,W
1C2A:  MOVWF  FC2
....................  
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
1C2C:  MOVLW  A8
1C2E:  MOVWF  FD5
....................    set_timer0(0);    
1C30:  CLRF   FD7
1C32:  CLRF   FD6
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
1C34:  MOVLW  B5
1C36:  MOVWF  FCD
....................    set_timer1(3036); // 3036 
1C38:  MOVLW  0B
1C3A:  MOVWF  FCF
1C3C:  MOVLW  DC
1C3E:  MOVWF  FCE
....................    enable_interrupts(GLOBAL); 
1C40:  MOVLW  C0
1C42:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
1C44:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
1C46:  CLRF   x78
....................    bdn = 0; 
1C48:  CLRF   x79
....................    phut = 29; 
1C4A:  MOVLW  1D
1C4C:  MOVWF  x7A
....................    gio = 15; 
1C4E:  MOVLW  0F
1C50:  MOVWF  x7B
....................    giai_ma(); 
1C52:  MOVLB  0
1C54:  CALL   0506
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
1C58:  MOVLB  4
1C5A:  BTFSC  x79.7
1C5C:  BRA    1C66
1C5E:  MOVF   x79,W
1C60:  SUBLW  09
1C62:  BTFSS  FD8.0
1C64:  BRA    1DE6
....................          hien_thi_8led_7doan_quet_all();      
1C66:  MOVLB  0
1C68:  CALL   068E
....................          count = get_timer0(); 
1C6C:  MOVF   FD6,W
1C6E:  MOVLB  4
1C70:  MOVWF  x86
....................          if (count != countT) { 
1C72:  MOVF   x87,W
1C74:  SUBWF  x86,W
1C76:  BZ    1C9A
....................             countT = count;          
1C78:  MOVFF  486,487
....................             LCD_DISPLAY_COUNTER(); 
1C7C:  MOVLB  0
1C7E:  GOTO   07AA
....................             if (count >= max+1) {set_timer0(1);}    
1C82:  MOVLW  01
1C84:  MOVLB  4
1C86:  ADDWF  x82,W
1C88:  MOVWF  00
1C8A:  BTFSC  FE8.7
1C8C:  BRA    1C94
1C8E:  MOVF   00,W
1C90:  SUBWF  x86,W
1C92:  BNC   1C9A
1C94:  CLRF   FD7
1C96:  MOVLW  01
1C98:  MOVWF  FD6
....................          } 
....................          readGP2D12(); 
1C9A:  MOVLB  0
1C9C:  GOTO   0E14
....................          BaoChay(); 
1CA0:  GOTO   13BE
....................          phim_up(); 
1CA4:  GOTO   13FE
....................          phim_dw(); 
1CA8:  BRA    14C8
....................          if(ttct_td==1) sang_tat_32led(5,1); 
1CAA:  DECFSZ 56,W
1CAC:  BRA    1CBC
1CAE:  MOVLW  05
1CB0:  MOVLB  4
1CB2:  MOVWF  x95
1CB4:  MOVLW  01
1CB6:  MOVWF  x96
1CB8:  MOVLB  0
1CBA:  RCALL  1722
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
1CBC:  MOVF   56,W
1CBE:  SUBLW  02
1CC0:  BNZ   1CD0
1CC2:  MOVLW  05
1CC4:  MOVLB  4
1CC6:  MOVWF  x95
1CC8:  MOVLW  01
1CCA:  MOVWF  x96
1CCC:  MOVLB  0
1CCE:  RCALL  1786
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
1CD0:  MOVF   56,W
1CD2:  SUBLW  03
1CD4:  BNZ   1CE4
1CD6:  MOVLW  05
1CD8:  MOVLB  4
1CDA:  MOVWF  x95
1CDC:  MOVLW  01
1CDE:  MOVWF  x96
1CE0:  MOVLB  0
1CE2:  RCALL  1808
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
1CE4:  MOVF   56,W
1CE6:  SUBLW  04
1CE8:  BNZ   1CF8
1CEA:  MOVLW  05
1CEC:  MOVLB  4
1CEE:  MOVWF  x95
1CF0:  MOVLW  01
1CF2:  MOVWF  x96
1CF4:  MOVLB  0
1CF6:  RCALL  188A
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
1CF8:  MOVF   56,W
1CFA:  SUBLW  05
1CFC:  BNZ   1D0C
1CFE:  MOVLW  05
1D00:  MOVLB  4
1D02:  MOVWF  x95
1D04:  MOVLW  01
1D06:  MOVWF  x96
1D08:  MOVLB  0
1D0A:  RCALL  190E
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
1D0C:  MOVF   56,W
1D0E:  SUBLW  06
1D10:  BNZ   1D20
1D12:  MOVLW  05
1D14:  MOVLB  4
1D16:  MOVWF  x95
1D18:  MOVLW  01
1D1A:  MOVWF  x96
1D1C:  MOVLB  0
1D1E:  RCALL  1808
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
1D20:  MOVF   56,W
1D22:  SUBLW  07
1D24:  BNZ   1D34
1D26:  MOVLW  05
1D28:  MOVLB  4
1D2A:  MOVWF  x95
1D2C:  MOVLW  01
1D2E:  MOVWF  x96
1D30:  MOVLB  0
1D32:  RCALL  1808
....................          if(ttct_td==8) sang_tat_32led(5,1); 
1D34:  MOVF   56,W
1D36:  SUBLW  08
1D38:  BNZ   1D48
1D3A:  MOVLW  05
1D3C:  MOVLB  4
1D3E:  MOVWF  x95
1D40:  MOVLW  01
1D42:  MOVWF  x96
1D44:  MOVLB  0
1D46:  RCALL  1722
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
1D48:  MOVF   56,W
1D4A:  SUBLW  09
1D4C:  BNZ   1D5C
1D4E:  MOVLW  05
1D50:  MOVLB  4
1D52:  MOVWF  x95
1D54:  MOVLW  01
1D56:  MOVWF  x96
1D58:  MOVLB  0
1D5A:  RCALL  1786
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
1D5C:  MOVF   56,W
1D5E:  SUBLW  0A
1D60:  BNZ   1D70
1D62:  MOVLW  05
1D64:  MOVLB  4
1D66:  MOVWF  x95
1D68:  MOVLW  01
1D6A:  MOVWF  x96
1D6C:  MOVLB  0
1D6E:  RCALL  1808
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
1D70:  MOVF   56,W
1D72:  SUBLW  0B
1D74:  BNZ   1D84
1D76:  MOVLW  05
1D78:  MOVLB  4
1D7A:  MOVWF  x95
1D7C:  MOVLW  01
1D7E:  MOVWF  x96
1D80:  MOVLB  0
1D82:  RCALL  188A
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
1D84:  MOVF   56,W
1D86:  SUBLW  0C
1D88:  BNZ   1D98
1D8A:  MOVLW  05
1D8C:  MOVLB  4
1D8E:  MOVWF  x95
1D90:  MOVLW  01
1D92:  MOVWF  x96
1D94:  MOVLB  0
1D96:  RCALL  190E
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
1D98:  MOVF   56,W
1D9A:  SUBLW  0D
1D9C:  BNZ   1DAC
1D9E:  MOVLW  05
1DA0:  MOVLB  4
1DA2:  MOVWF  x95
1DA4:  MOVLW  01
1DA6:  MOVWF  x96
1DA8:  MOVLB  0
1DAA:  RCALL  188A
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
1DAC:  MOVF   56,W
1DAE:  SUBLW  0E
1DB0:  BNZ   1DC0
1DB2:  MOVLW  05
1DB4:  MOVLB  4
1DB6:  MOVWF  x95
1DB8:  MOVLW  01
1DBA:  MOVWF  x96
1DBC:  MOVLB  0
1DBE:  BRA    1974
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
1DC0:  MOVF   56,W
1DC2:  SUBLW  0F
1DC4:  BNZ   1DD4
1DC6:  MOVLW  05
1DC8:  MOVLB  4
1DCA:  MOVWF  x95
1DCC:  MOVLW  01
1DCE:  MOVWF  x96
1DD0:  MOVLB  0
1DD2:  RCALL  1808
....................          if(ttct_td>15) ttct_td =1;       
1DD4:  BTFSC  56.7
1DD6:  BRA    1DE2
1DD8:  MOVF   56,W
1DDA:  SUBLW  0F
1DDC:  BC    1DE2
1DDE:  MOVLW  01
1DE0:  MOVWF  56
....................       } 
1DE2:  BRA    1E14
1DE4:  MOVLB  4
....................       else  
....................       { 
....................          bdn = bdn -10; 
1DE6:  MOVLW  0A
1DE8:  SUBWF  x79,F
....................          giay++;  
1DEA:  INCF   x78,F
....................          read_temp(); 
1DEC:  MOVLB  0
1DEE:  BRA    19F0
....................             if (giay==60) { giay = 0; phut++; 
1DF0:  MOVLB  4
1DF2:  MOVF   x78,W
1DF4:  SUBLW  3C
1DF6:  BNZ   1E0E
1DF8:  CLRF   x78
1DFA:  INCF   x7A,F
....................                if (phut == 60) { phut = 0; gio++;  
1DFC:  MOVF   x7A,W
1DFE:  SUBLW  3C
1E00:  BNZ   1E0E
1E02:  CLRF   x7A
1E04:  INCF   x7B,F
....................                   if (gio == 24) gio = 0; 
1E06:  MOVF   x7B,W
1E08:  SUBLW  18
1E0A:  BNZ   1E0E
1E0C:  CLRF   x7B
....................                }  
....................             } 
....................          giai_ma(); 
1E0E:  MOVLB  0
1E10:  CALL   0506
....................       } 
1E14:  BRA    1C58
....................    }            
.................... } 
....................  
1E16:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
