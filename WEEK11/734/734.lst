CCS PCH C Compiler, Version 5.078, 43599               13-Dec-20 11:10

               Filename:   D:\Document\TTVXL\TH_VDK_PIC_N1_SANG_THU_2\WEEK11\734\734.lst

               ROM used:   6092 bytes (19%)
                           Largest free fragment is 26676
               RAM used:   1168 (57%) at main() level
                           1189 (58%) worst case
               Stack used: 7 locations
               Stack size: 31

*
0000:  GOTO   13FA
.................... #include "TV_PICKIT2_SHIFT_1.c" 
.................... #include    <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
0024:  DATA 7F,00
0026:  CLRF   FF7
0028:  ADDLW  36
002A:  MOVWF  FF6
002C:  MOVLW  00
002E:  ADDWFC FF7,F
0030:  TBLRD*+
0032:  MOVF   FF5,W
0034:  RETURN 0
0036:  DATA 7F,BF
0038:  DATA DF,EF
003A:  DATA F7,FB
003C:  DATA FD,FE
003E:  CLRF   FF7
0040:  ADDLW  4E
0042:  MOVWF  FF6
0044:  MOVLW  00
0046:  ADDWFC FF7,F
0048:  TBLRD*+
004A:  MOVF   FF5,W
004C:  RETURN 0
004E:  DATA 07,0F
0050:  DATA 1F,1F
0052:  DATA 1F,1F
0054:  DATA 1F,1F
0056:  DATA 1F,1F
0058:  DATA 1F,00
005A:  DATA 00,00
005C:  DATA 00,00
005E:  DATA 1C,1E
0060:  DATA 1F,1F
0062:  DATA 1F,1F
0064:  DATA 1F,1F
0066:  DATA 00,00
0068:  DATA 00,00
006A:  DATA 00,1F
006C:  DATA 1F,1F
006E:  DATA 1F,1F
0070:  DATA 1F,1F
0072:  DATA 1F,1F
0074:  DATA 1E,1C
0076:  DATA 1F,1F
0078:  DATA 1F,1F
007A:  DATA 1F,1F
007C:  DATA 0F,07
007E:  DATA 1F,1F
0080:  DATA 1F,00
0082:  DATA 00,00
0084:  DATA 1F,1F
0086:  DATA 1F,1F
0088:  DATA 1F,1F
008A:  DATA 1F,1F
008C:  DATA 1F,1F
008E:  DATA 4E,48
0090:  DATA 49,45
0092:  DATA 54,20
0094:  DATA 44,4F
0096:  DATA 20,4C
0098:  DATA 4D,33
009A:  DATA 35,42
009C:  DATA 3A,20
009E:  DATA 25,6C
00A0:  DATA 64,00
00A2:  DATA 4E,48
00A4:  DATA 49,45
00A6:  DATA 54,20
00A8:  DATA 44,4F
00AA:  DATA 20,4C
00AC:  DATA 4D,33
00AE:  DATA 35,41
00B0:  DATA 3A,20
00B2:  DATA 25,6C
00B4:  DATA 64,00
00B6:  DATA 44,45
00B8:  DATA 4D,20
00BA:  DATA 53,41
00BC:  DATA 4E,20
00BE:  DATA 50,48
00C0:  DATA 41,4D
00C2:  DATA 3A,20
00C4:  DATA 25,64
00C6:  DATA 00,00
*
0244:  CLRF   01
0246:  CLRF   02
0248:  CLRF   00
024A:  CLRF   03
024C:  MOVLB  4
024E:  MOVF   x94,W
0250:  BNZ   0256
0252:  MOVF   x93,W
0254:  BZ    0286
0256:  MOVLW  10
0258:  MOVWF  x95
025A:  BCF    FD8.0
025C:  RLCF   x91,F
025E:  RLCF   x92,F
0260:  RLCF   00,F
0262:  RLCF   03,F
0264:  MOVF   x94,W
0266:  SUBWF  03,W
0268:  BNZ   026E
026A:  MOVF   x93,W
026C:  SUBWF  00,W
026E:  BNC   027E
0270:  MOVF   x93,W
0272:  SUBWF  00,F
0274:  BTFSS  FD8.0
0276:  DECF   03,F
0278:  MOVF   x94,W
027A:  SUBWF  03,F
027C:  BSF    FD8.0
027E:  RLCF   01,F
0280:  RLCF   02,F
0282:  DECFSZ x95,F
0284:  BRA    025A
0286:  MOVLB  0
0288:  RETURN 0
*
05D0:  MOVLB  4
05D2:  MOVF   x8C,W
05D4:  XORWF  x8D,W
05D6:  ANDLW  80
05D8:  MOVWF  x8F
05DA:  BTFSS  x8C.7
05DC:  BRA    05E2
05DE:  COMF   x8C,F
05E0:  INCF   x8C,F
05E2:  BTFSS  x8D.7
05E4:  BRA    05EA
05E6:  COMF   x8D,F
05E8:  INCF   x8D,F
05EA:  MOVF   x8D,W
05EC:  CLRF   01
05EE:  SUBWF  x8C,W
05F0:  BC    05F8
05F2:  MOVFF  48C,00
05F6:  BRA    0610
05F8:  CLRF   00
05FA:  MOVLW  08
05FC:  MOVWF  x8E
05FE:  RLCF   x8C,F
0600:  RLCF   00,F
0602:  MOVF   x8D,W
0604:  SUBWF  00,W
0606:  BTFSC  FD8.0
0608:  MOVWF  00
060A:  RLCF   01,F
060C:  DECFSZ x8E,F
060E:  BRA    05FE
0610:  BTFSS  x8F.7
0612:  BRA    0618
0614:  COMF   01,F
0616:  INCF   01,F
0618:  MOVLB  0
061A:  RETURN 0
061C:  TBLRD*+
061E:  MOVFF  FF6,48D
0622:  MOVFF  FF7,48E
0626:  MOVFF  FF5,495
062A:  RCALL  05BE
062C:  MOVFF  48D,FF6
0630:  MOVFF  48E,FF7
0634:  MOVLB  4
0636:  DECFSZ x8C,F
0638:  BRA    063C
063A:  BRA    0640
063C:  MOVLB  0
063E:  BRA    061C
0640:  MOVLB  0
0642:  RETURN 0
0644:  MOVFF  FEA,494
0648:  MOVFF  FE9,493
064C:  MOVLB  4
064E:  BTFSS  x8D.7
0650:  BRA    0662
0652:  BSF    x93.7
0654:  BTFSS  x93.4
0656:  INCF   x93,F
0658:  COMF   x8C,F
065A:  COMF   x8D,F
065C:  INCF   x8C,F
065E:  BTFSC  FD8.2
0660:  INCF   x8D,F
0662:  SWAPF  x8D,W
0664:  IORLW  F0
0666:  MOVWF  x8F
0668:  ADDWF  x8F,F
066A:  ADDLW  E2
066C:  MOVWF  x90
066E:  ADDLW  32
0670:  MOVWF  x92
0672:  MOVF   x8D,W
0674:  ANDLW  0F
0676:  ADDWF  x90,F
0678:  ADDWF  x90,F
067A:  ADDWF  x92,F
067C:  ADDLW  E9
067E:  MOVWF  x91
0680:  ADDWF  x91,F
0682:  ADDWF  x91,F
0684:  SWAPF  x8C,W
0686:  ANDLW  0F
0688:  ADDWF  x91,F
068A:  ADDWF  x92,F
068C:  RLCF   x91,F
068E:  RLCF   x92,F
0690:  COMF   x92,F
0692:  RLCF   x92,F
0694:  MOVF   x8C,W
0696:  ANDLW  0F
0698:  ADDWF  x92,F
069A:  RLCF   x8F,F
069C:  MOVLW  07
069E:  MOVWF  x8E
06A0:  MOVLW  0A
06A2:  DECF   x91,F
06A4:  ADDWF  x92,F
06A6:  BNC   06A2
06A8:  DECF   x90,F
06AA:  ADDWF  x91,F
06AC:  BNC   06A8
06AE:  DECF   x8F,F
06B0:  ADDWF  x90,F
06B2:  BNC   06AE
06B4:  DECF   x8E,F
06B6:  ADDWF  x8F,F
06B8:  BNC   06B4
06BA:  MOVLW  04
06BC:  MOVWF  FEA
06BE:  MOVLW  8E
06C0:  MOVWF  FE9
06C2:  MOVLW  07
06C4:  ANDWF  x93,W
06C6:  BCF    x93.6
06C8:  MOVF   FED,F
06CA:  ANDWF  x93,W
06CC:  BNZ   06DC
06CE:  BTFSC  x93.4
06D0:  MOVF   FEE,F
06D2:  BTFSC  x93.4
06D4:  BRA    06DC
06D6:  MOVLW  20
06D8:  MOVWF  00
06DA:  BRA    071E
06DC:  ADDWF  FE9,F
06DE:  MOVLW  00
06E0:  ADDWFC FEA,F
06E2:  MOVF   FE9,W
06E4:  SUBLW  92
06E6:  BNZ   06F0
06E8:  MOVF   FEA,W
06EA:  SUBLW  04
06EC:  BNZ   06F0
06EE:  BSF    x93.6
06F0:  MOVF   FEF,W
06F2:  MOVWF  00
06F4:  BNZ   0706
06F6:  BTFSC  x93.6
06F8:  BRA    0706
06FA:  BTFSC  x93.4
06FC:  BRA    0738
06FE:  BTFSC  x93.3
0700:  BRA    0706
0702:  MOVLW  20
0704:  BRA    071C
0706:  BTFSS  x93.7
0708:  BRA    0716
070A:  MOVLW  2D
070C:  MOVWF  00
070E:  MOVF   FED,W
0710:  BCF    x93.6
0712:  BCF    x93.7
0714:  BRA    071E
0716:  BSF    x93.3
0718:  BCF    x93.4
071A:  MOVLW  30
071C:  ADDWF  00,F
071E:  MOVFF  FEA,48D
0722:  MOVFF  FE9,48C
0726:  MOVFF  00,495
072A:  MOVLB  0
072C:  RCALL  05BE
072E:  MOVFF  48D,FEA
0732:  MOVFF  48C,FE9
0736:  MOVLB  4
0738:  MOVF   FEE,W
073A:  BTFSS  x93.6
073C:  BRA    06E2
073E:  MOVLB  0
0740:  RETURN 0
*
08FE:  MOVLB  4
0900:  MOVF   x93,W
0902:  CLRF   01
0904:  SUBWF  x92,W
0906:  BC    090E
0908:  MOVFF  492,00
090C:  BRA    0926
090E:  CLRF   00
0910:  MOVLW  08
0912:  MOVWF  x94
0914:  RLCF   x92,F
0916:  RLCF   00,F
0918:  MOVF   x93,W
091A:  SUBWF  00,W
091C:  BTFSC  FD8.0
091E:  MOVWF  00
0920:  RLCF   01,F
0922:  DECFSZ x94,F
0924:  BRA    0914
0926:  MOVLB  0
0928:  RETURN 0
092A:  MOVLW  20
092C:  MOVLB  4
092E:  BTFSS  x8D.4
0930:  MOVLW  30
0932:  MOVWF  x8E
0934:  MOVFF  48C,00
0938:  BTFSS  00.7
093A:  BRA    094C
093C:  COMF   00,F
093E:  INCF   00,F
0940:  MOVFF  00,48C
0944:  MOVLW  2D
0946:  MOVWF  x8E
0948:  BSF    x8D.7
094A:  BSF    x8D.0
094C:  MOVF   01,W
094E:  MOVFF  48C,492
0952:  MOVLW  64
0954:  MOVWF  x93
0956:  MOVLB  0
0958:  RCALL  08FE
095A:  MOVFF  00,48C
095E:  MOVLW  30
0960:  ADDWF  01,W
0962:  MOVLB  4
0964:  MOVWF  x8F
0966:  MOVFF  48C,492
096A:  MOVLW  0A
096C:  MOVWF  x93
096E:  MOVLB  0
0970:  RCALL  08FE
0972:  MOVLW  30
0974:  ADDWF  00,W
0976:  MOVLB  4
0978:  MOVWF  x91
097A:  MOVLW  30
097C:  ADDWF  01,W
097E:  MOVWF  x90
0980:  MOVFF  48E,00
0984:  MOVLW  30
0986:  SUBWF  x8F,W
0988:  BZ    0992
098A:  BSF    x8D.1
098C:  BTFSC  x8D.7
098E:  BSF    x8D.2
0990:  BRA    09B6
0992:  MOVFF  48E,48F
0996:  MOVLW  20
0998:  MOVWF  x8E
099A:  MOVLW  30
099C:  SUBWF  x90,W
099E:  BZ    09A8
09A0:  BSF    x8D.0
09A2:  BTFSC  x8D.7
09A4:  BSF    x8D.1
09A6:  BRA    09B6
09A8:  BTFSS  FD8.2
09AA:  BSF    x8D.0
09AC:  BNZ   09B6
09AE:  MOVFF  48F,490
09B2:  MOVLW  20
09B4:  MOVWF  x8F
09B6:  BTFSC  x8D.2
09B8:  BRA    09C4
09BA:  BTFSC  x8D.1
09BC:  BRA    09CC
09BE:  BTFSC  x8D.0
09C0:  BRA    09D4
09C2:  BRA    09DC
09C4:  MOVFF  48E,495
09C8:  MOVLB  0
09CA:  RCALL  05BE
09CC:  MOVFF  48F,495
09D0:  MOVLB  0
09D2:  RCALL  05BE
09D4:  MOVFF  490,495
09D8:  MOVLB  0
09DA:  RCALL  05BE
09DC:  MOVFF  491,495
09E0:  MOVLB  0
09E2:  RCALL  05BE
09E4:  GOTO   0A12 (RETURN)
*
0B70:  MOVLW  8E
0B72:  MOVWF  00
0B74:  MOVFF  48F,01
0B78:  MOVFF  48E,02
0B7C:  CLRF   03
0B7E:  MOVF   01,F
0B80:  BNZ   0B94
0B82:  MOVFF  02,01
0B86:  CLRF   02
0B88:  MOVLW  08
0B8A:  SUBWF  00,F
0B8C:  MOVF   01,F
0B8E:  BNZ   0B94
0B90:  CLRF   00
0B92:  BRA    0BA4
0B94:  BCF    FD8.0
0B96:  BTFSC  01.7
0B98:  BRA    0BA2
0B9A:  RLCF   02,F
0B9C:  RLCF   01,F
0B9E:  DECF   00,F
0BA0:  BRA    0B94
0BA2:  BCF    01.7
0BA4:  RETURN 0
0BA6:  MOVLB  4
0BA8:  MOVF   x8E,W
0BAA:  BTFSC  FD8.2
0BAC:  BRA    0CF8
0BAE:  MOVWF  x9A
0BB0:  MOVF   x92,W
0BB2:  BTFSC  FD8.2
0BB4:  BRA    0CF8
0BB6:  SUBWF  x9A,F
0BB8:  BNC   0BC4
0BBA:  MOVLW  7F
0BBC:  ADDWF  x9A,F
0BBE:  BTFSC  FD8.0
0BC0:  BRA    0CF8
0BC2:  BRA    0BD0
0BC4:  MOVLW  81
0BC6:  SUBWF  x9A,F
0BC8:  BTFSS  FD8.0
0BCA:  BRA    0CF8
0BCC:  BTFSC  FD8.2
0BCE:  BRA    0CF8
0BD0:  MOVFF  49A,00
0BD4:  CLRF   01
0BD6:  CLRF   02
0BD8:  CLRF   03
0BDA:  CLRF   x99
0BDC:  MOVFF  48F,498
0BE0:  BSF    x98.7
0BE2:  MOVFF  490,497
0BE6:  MOVFF  491,496
0BEA:  MOVLW  19
0BEC:  MOVWF  x9A
0BEE:  MOVF   x95,W
0BF0:  SUBWF  x96,F
0BF2:  BC    0C0E
0BF4:  MOVLW  01
0BF6:  SUBWF  x97,F
0BF8:  BC    0C0E
0BFA:  SUBWF  x98,F
0BFC:  BC    0C0E
0BFE:  SUBWF  x99,F
0C00:  BC    0C0E
0C02:  INCF   x99,F
0C04:  INCF   x98,F
0C06:  INCF   x97,F
0C08:  MOVF   x95,W
0C0A:  ADDWF  x96,F
0C0C:  BRA    0C5E
0C0E:  MOVF   x94,W
0C10:  SUBWF  x97,F
0C12:  BC    0C38
0C14:  MOVLW  01
0C16:  SUBWF  x98,F
0C18:  BC    0C38
0C1A:  SUBWF  x99,F
0C1C:  BC    0C38
0C1E:  INCF   x99,F
0C20:  INCF   x98,F
0C22:  MOVF   x94,W
0C24:  ADDWF  x97,F
0C26:  MOVF   x95,W
0C28:  ADDWF  x96,F
0C2A:  BNC   0C5E
0C2C:  INCF   x97,F
0C2E:  BNZ   0C5E
0C30:  INCF   x98,F
0C32:  BNZ   0C5E
0C34:  INCF   x99,F
0C36:  BRA    0C5E
0C38:  MOVF   x93,W
0C3A:  IORLW  80
0C3C:  SUBWF  x98,F
0C3E:  BC    0C5C
0C40:  MOVLW  01
0C42:  SUBWF  x99,F
0C44:  BC    0C5C
0C46:  INCF   x99,F
0C48:  MOVF   x93,W
0C4A:  IORLW  80
0C4C:  ADDWF  x98,F
0C4E:  MOVF   x94,W
0C50:  ADDWF  x97,F
0C52:  BNC   0C26
0C54:  INCF   x98,F
0C56:  BNZ   0C26
0C58:  INCF   x99,F
0C5A:  BRA    0C26
0C5C:  BSF    03.0
0C5E:  DECFSZ x9A,F
0C60:  BRA    0C64
0C62:  BRA    0C7A
0C64:  BCF    FD8.0
0C66:  RLCF   x96,F
0C68:  RLCF   x97,F
0C6A:  RLCF   x98,F
0C6C:  RLCF   x99,F
0C6E:  BCF    FD8.0
0C70:  RLCF   03,F
0C72:  RLCF   02,F
0C74:  RLCF   01,F
0C76:  RLCF   x9B,F
0C78:  BRA    0BEE
0C7A:  BTFSS  x9B.0
0C7C:  BRA    0C8A
0C7E:  BCF    FD8.0
0C80:  RRCF   01,F
0C82:  RRCF   02,F
0C84:  RRCF   03,F
0C86:  RRCF   x9B,F
0C88:  BRA    0C8E
0C8A:  DECF   00,F
0C8C:  BZ    0CF8
0C8E:  BTFSC  x9B.7
0C90:  BRA    0CCE
0C92:  BCF    FD8.0
0C94:  RLCF   x96,F
0C96:  RLCF   x97,F
0C98:  RLCF   x98,F
0C9A:  RLCF   x99,F
0C9C:  MOVF   x95,W
0C9E:  SUBWF  x96,F
0CA0:  BC    0CB0
0CA2:  MOVLW  01
0CA4:  SUBWF  x97,F
0CA6:  BC    0CB0
0CA8:  SUBWF  x98,F
0CAA:  BC    0CB0
0CAC:  SUBWF  x99,F
0CAE:  BNC   0CE4
0CB0:  MOVF   x94,W
0CB2:  SUBWF  x97,F
0CB4:  BC    0CC0
0CB6:  MOVLW  01
0CB8:  SUBWF  x98,F
0CBA:  BC    0CC0
0CBC:  SUBWF  x99,F
0CBE:  BNC   0CE4
0CC0:  MOVF   x93,W
0CC2:  IORLW  80
0CC4:  SUBWF  x98,F
0CC6:  BC    0CCE
0CC8:  MOVLW  01
0CCA:  SUBWF  x99,F
0CCC:  BNC   0CE4
0CCE:  INCF   03,F
0CD0:  BNZ   0CE4
0CD2:  INCF   02,F
0CD4:  BNZ   0CE4
0CD6:  INCF   01,F
0CD8:  BNZ   0CE4
0CDA:  INCF   00,F
0CDC:  BZ    0CF8
0CDE:  RRCF   01,F
0CE0:  RRCF   02,F
0CE2:  RRCF   03,F
0CE4:  MOVFF  48F,49A
0CE8:  MOVF   x93,W
0CEA:  XORWF  x9A,F
0CEC:  BTFSS  x9A.7
0CEE:  BRA    0CF4
0CF0:  BSF    01.7
0CF2:  BRA    0D00
0CF4:  BCF    01.7
0CF6:  BRA    0D00
0CF8:  CLRF   00
0CFA:  CLRF   01
0CFC:  CLRF   02
0CFE:  CLRF   03
0D00:  MOVLB  0
0D02:  RETURN 0
0D04:  MOVLW  8E
0D06:  MOVWF  00
0D08:  MOVLB  4
0D0A:  MOVF   x8C,W
0D0C:  SUBWF  00,F
0D0E:  MOVFF  48D,02
0D12:  MOVFF  48E,01
0D16:  BSF    02.7
0D18:  MOVF   00,F
0D1A:  BZ    0D2E
0D1C:  BCF    FD8.0
0D1E:  MOVF   02,F
0D20:  BNZ   0D26
0D22:  MOVF   01,F
0D24:  BZ    0D2E
0D26:  RRCF   02,F
0D28:  RRCF   01,F
0D2A:  DECFSZ 00,F
0D2C:  BRA    0D1C
0D2E:  BTFSS  x8D.7
0D30:  BRA    0D3C
0D32:  COMF   01,F
0D34:  COMF   02,F
0D36:  INCF   01,F
0D38:  BTFSC  FD8.2
0D3A:  INCF   02,F
0D3C:  MOVLB  0
0D3E:  RETURN 0
....................  
.................... #list 
....................  
.................... #device     adc=10 
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use        delay(clock=20000000) 
*
00E6:  MOVLW  03
00E8:  MOVLB  4
00EA:  SUBWF  x8E,F
00EC:  BNC   0102
00EE:  MOVLW  04
00F0:  MOVWF  FEA
00F2:  MOVLW  8E
00F4:  MOVWF  FE9
00F6:  MOVF   FEF,W
00F8:  BZ    0102
00FA:  BRA    00FE
00FC:  BRA    00FE
00FE:  DECFSZ FEF,F
0100:  BRA    00FC
0102:  MOVLB  0
0104:  RETURN 0
*
04A6:  MOVLW  04
04A8:  MOVWF  FEA
04AA:  MOVLW  91
04AC:  MOVWF  FE9
04AE:  MOVF   FEF,W
04B0:  BZ    04CC
04B2:  MOVLW  06
04B4:  MOVWF  01
04B6:  CLRF   00
04B8:  DECFSZ 00,F
04BA:  BRA    04B8
04BC:  DECFSZ 01,F
04BE:  BRA    04B6
04C0:  MOVLW  7B
04C2:  MOVWF  00
04C4:  DECFSZ 00,F
04C6:  BRA    04C4
04C8:  DECFSZ FEF,F
04CA:  BRA    04B2
04CC:  RETURN 0
.................... #use        i2c(master,slow,sda=pin_b0,scl=pin_b1) 
....................  
.................... //#use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... //nut nhan: 
.................... #define  bt0     pin_b5 
.................... #define  bt1     pin_b4 
.................... #define  bt2     pin_b3 
.................... #define  bt3     pin_b2 
....................  
.................... #define  on      bt0       //dk led don, motor 
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0    //dk led don 
.................... #define  dw      bt1 
.................... #define  clr     bt2 
.................... #define  mod     bt3 
....................  
.................... #define  stop    bt3 
....................  
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
....................  
....................  
.................... #define     trigger      pin_e2 
.................... #define     echo         pin_e1 
.................... //   ic74138_a    pin_b6   //output giai ma 2 sang 4 tich cuc muc 0 
.................... //   ic74138_b    pin_b7   //output giai ma 2 sang 4 tich cuc muc 0 
....................  
.................... //          encoder  pin_c0   //rc0/t13cki 
....................  
.................... //          cb_kc    pin_a2   //ra2/an2 
.................... //          pir      pin_a3   //ra3/an3 
.................... //          cbxung   pin_a4   //ra4/t0cki 
.................... //          ledthu   pin_a4   //ra4/t0cki//sw802 
....................  
.................... //          cb_kcsa_trigger  pin_e2   //re2/sdo  dung chung 
.................... //          cb_kcsa_rcho     pin_e1   //re1 
....................  
.................... //          cb_tcs3200_out    pin_e1   //re1 //cam bien mau tcs3200 
.................... //          cb_tcs3200_s0     b12      //lay tu mbi5026 
.................... //          cb_tcs3200_s1     b13      //lay tu mbi5026 
.................... //          cb_tcs3200_s2     b14      //lay tu mbi5026 
.................... //          cb_tcs3200_s3     b15      //lay tu mbi5026 
....................  
.................... //          cb_power  sw803 
.................... //          cb_gas      ain3_pcf8591t   //re1 
.................... //          cb_quang    ain2_pcf8591t    
.................... //          cb_lm35b    ain1_pcf8591t   //ra1/an1 
.................... //          cb_lm35a    ain0_pcf8591t   //re1/an0 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      enable_573a      pin_d1         //cs0 cua a 
.................... #define      enable_573b      pin_d0         //cs1 cua b 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      ssdo             pin_e2         //chung tat ca 
.................... #define      ssck             pin_e0         //chung tat ca 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_4led7doan    pin_d7         //a - 4 byte 
.................... #define      g_4led7doan      pin_d6         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao 
.................... #define      g_matranled      pin_d6         //b - 3 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_32led        pin_d5         //a - 4 byte 
.................... #define      g_32led          pin_d4         //a - 4 byte 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao 
.................... #define      g_8ledquet       pin_d4         //b - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define      rck_lcd20x4      pin_d3         //a - 2 byte dao 
.................... #define      g_lcd20x4         pin_d2         //a - 2 byte dao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte  
.................... #define      g_buzerelay      pin_d2         //b - 1 byte  
....................  
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi); 
....................  
.................... void xuat_buzzer_relay(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define     chot_2_ic_74573_a_b  output_d(0xfc) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_a; 
.................... #bit g_4a         = tin_hieu_dk_74573_a.6 
.................... #bit g_32a        = tin_hieu_dk_74573_a.4 
.................... #bit g_lcda       = tin_hieu_dk_74573_a.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_32_led_don        g_32a=0; //output_low(g_32led)  
.................... #define     tat_32_led_don       g_32a=1; //output_high(g_32led)  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_4_led_7doan       g_4a=0;  //output_low(g_4led7doan) 
.................... #define     tat_4_led_7doan      g_4a=1;  //output_high(g_4led7doan) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_glcd_lcd           g_lcda=0;   //output_low(g_lcd20x4) 
.................... #define     tat_glcd_lcd          g_lcda=1;   // output_low(g_lcd20x4) 
....................  
.................... unsigned int8 tin_hieu_dk_74573_b;   
.................... #bit g_mtb        = tin_hieu_dk_74573_b.6 
.................... #bit g_8b         = tin_hieu_dk_74573_b.4 
.................... #bit g_rbdcb      = tin_hieu_dk_74573_b.2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define     mo_led_matran        g_mtb=0; //output_low(g_matranled) 
.................... #define     tat_led_matran       g_mtb=1; //output_low(g_matranled) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... #define     mo_8_led_quet        g_8b=0;  //output_low(g_8ledquet) 
.................... #define     tat_8_led_quet       g_8b=1;  //output_low(g_8ledquet) 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     mo_relay_buzzer_dc   g_rbdcb=0;  //output_low(g_buzerelay) 
.................... #define     tat_relay_buzzer_dc  g_rbdcb=1;  //output_low(g_buzerelay) 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 dl_btn=0; 
.................... int1 phim_bt0(unsigned int16 dl) 
.................... {   
....................     if (!input(bt0)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt1(unsigned int16 dl ) 
.................... {   
....................     if (!input(bt1)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt2       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... int1 phim_bt2(unsigned int16 dl ) 
.................... {                                         
....................     if (!input(bt2)) 
....................     {   
....................       dl_btn++; 
....................       delay_ms(1); 
....................       if (dl_btn>= dl) 
....................          { 
....................             dl_btn =0; 
....................             return(1); 
....................          } 
....................       else return(0); 
....................     } 
....................     else    return(0); 
....................                                           
.................... }       
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh kiem tra phim bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... int1 phim_bt3(unsigned int16 dl,  unsigned int8 solan  ) 
.................... {   
....................     if (!input(bt3)) 
....................     {   
....................       dl_btn++; 
....................       if(dl_btn==1) return(1); 
....................       else 
....................       { 
....................          if (dl_btn>= dl) 
....................          dl_btn =solan; 
....................       } 
....................     } 
....................     else    
....................     { 
....................       //dl_btn =0; 
....................       return(0); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int16 rbdc; 
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis 
.................... #bit step_motor_in1     = rbdc.1     
.................... #bit step_motor_in2     = rbdc.2 
.................... #bit step_motor_in3     = rbdc.3 
.................... #bit step_motor_in4     = rbdc.4 
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis 
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900 
....................  
.................... #bit buzzer             = rbdc.8    //1=on,0=off 
.................... #bit triac_1            = rbdc.9    //1=on,0=off 
.................... #bit triac_2            = rbdc.10   //1=on,0=off 
.................... #bit relay_1            = rbdc.11   //0=on,1=off 
.................... #bit relay_2            = rbdc.12   //0=on,1=off 
....................  
.................... //ham 103 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con khoi tao ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... #define     cho_ic_74573_a_goi_du_lieu     output_high(enable_573a) 
.................... #define     chot_ic_74573_a_goi_du_lieu    output_low(enable_573a) 
....................  
.................... #define     cho_ic_74573_b_goi_du_lieu     output_high(enable_573b) 
.................... #define     chot_ic_74573_b_goi_du_lieu    output_low(enable_573b) 
.................... void mo_ic_74573_a_thong_dl(); 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... const unsigned char ma7doan[17]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e,0b01111111}; 
.................... #define     maso0    0xc0 
.................... #define     maso1    0xf9 
.................... #define     maso2    0xa4 
.................... #define     maso3    0xb0 
.................... #define     maso4    0x99 
.................... #define     maso5    0x92 
.................... #define     maso6    0x82 
.................... #define     maso7    0xf8 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 102 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 byte ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1byte(unsigned int8 bytexuat) 
.................... { 
....................    unsigned int8   sb,x;    
....................    #bit bseri  = x.7 
....................    x = bytexuat; 
*
028A:  MOVFF  4A2,4A4
....................    for (sb=0;sb<8;sb++) 
028E:  MOVLB  4
0290:  CLRF   xA3
0292:  MOVF   xA3,W
0294:  SUBLW  07
0296:  BNC   02B4
....................       {                                                  
....................          output_bit(ssdo,bseri);     
0298:  BTFSC  xA4.7
029A:  BRA    02A0
029C:  BCF    F8D.2
029E:  BRA    02A2
02A0:  BSF    F8D.2
02A2:  BCF    F96.2
....................          output_low(ssck); output_high(ssck); 
02A4:  BCF    F96.0
02A6:  BCF    F8D.0
02A8:  BCF    F96.0
02AA:  BSF    F8D.0
....................          x= x<<1;          
02AC:  BCF    FD8.0
02AE:  RLCF   xA4,F
02B0:  INCF   xA3,F
02B2:  BRA    0292
....................      } 
02B4:  MOVLB  0
02B6:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 301 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0) 
.................... {      
....................       xuat_1byte(bld3);           
*
0F9C:  MOVFF  49E,4A2
0FA0:  CALL   028A
....................       xuat_1byte(bld2); 
0FA4:  MOVFF  49F,4A2
0FA8:  CALL   028A
....................       xuat_1byte(bld1);           
0FAC:  MOVFF  4A0,4A2
0FB0:  CALL   028A
....................       xuat_1byte(bld0);             
0FB4:  MOVFF  4A1,4A2
0FB8:  CALL   028A
....................       mo_32_led_don;       
0FBC:  BCF    04.4
....................       mo_ic_74573_a_thong_dl();             
0FBE:  CALL   02B8
....................       output_high(rck_32led);    output_low(rck_32led); 
0FC2:  BCF    F95.5
0FC4:  BSF    F8C.5
0FC6:  BCF    F95.5
0FC8:  BCF    F8C.5
....................       chot_ic_74573_a_goi_du_lieu;       
0FCA:  BCF    F95.1
0FCC:  BCF    F8C.1
0FCE:  GOTO   0FF4 (RETURN)
.................... } 
.................... //ham 302 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0) 
.................... {      
....................      unsigned int8  b3,b2,b1,b0; 
....................      b3 = wld1>>8;  b2 = wld1;  
0FD2:  MOVFF  497,49A
0FD6:  MOVFF  496,49B
....................      b1 = wld0>>8;  b0 = wld0; 
0FDA:  MOVFF  499,49C
0FDE:  MOVFF  498,49D
....................      xuat_32led_don_4byte(b3,b2,b1,b0); 
0FE2:  MOVFF  49A,49E
0FE6:  MOVFF  49B,49F
0FEA:  MOVFF  49C,4A0
0FEE:  MOVFF  49D,4A1
0FF2:  BRA    0F9C
0FF4:  RETURN 0
.................... } 
.................... //ham 303 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 1 double word ra 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_32led_don_1dw(unsigned long long dwld) 
.................... {      
....................      unsigned int16  wd1,wd0; 
....................      wd1 = dwld>>16;  wd0 = dwld; 
0FF6:  MOVFF  490,492
0FFA:  MOVFF  491,493
0FFE:  MOVFF  48F,495
1002:  MOVFF  48E,494
....................      xuat_32led_don_2word(wd1,wd0); 
1006:  MOVFF  493,497
100A:  MOVFF  492,496
100E:  MOVFF  495,499
1012:  MOVFF  494,498
1016:  RCALL  0FD2
1018:  RETURN 0
.................... } 
....................  
.................... //ham 304 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con mo 32 led don sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void mo_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0xffffffff); 
.................... } 
.................... //ham 305 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con tat 32 led don  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_32led_don() 
.................... {         
....................      xuat_32led_don_1dw(0); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(ssdo,bserix);     
....................       output_low(ssck); output_high(ssck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 101 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham khoi tao cac port va ic chot 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................    void set_up_port_ic_chot() 
.................... {      
....................       set_tris_d(0x00);     
*
00C8:  MOVLW  00
00CA:  MOVWF  F95
....................       set_tris_e(0x00); 
00CC:  MOVWF  F96
....................       output_d(0xff); 
00CE:  CLRF   F95
00D0:  SETF   F8C
....................       tin_hieu_dk_74573_a=0xff;   
00D2:  SETF   04
....................       tin_hieu_dk_74573_b=0xff;       
00D4:  SETF   05
....................       chot_ic_74573_a_goi_du_lieu; 
00D6:  BCF    F95.1
00D8:  BCF    F8C.1
....................       chot_ic_74573_b_goi_du_lieu;   
00DA:  BCF    F95.0
00DC:  BCF    F8C.0
....................       rbdc=0; 
00DE:  CLRF   08
00E0:  CLRF   07
00E2:  GOTO   14F6 (RETURN)
.................... } 
.................... //ham 104 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat c�c thieu dieu khien  
.................... //giu nguyen cac trang thai cua 2 module khac 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void mo_ic_74573_a_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
02B8:  CLRF   F95
02BA:  CLRF   F8C
....................       output_bit(g_32led,g_32a); 
02BC:  BTFSC  04.4
02BE:  BRA    02C4
02C0:  BCF    F8C.4
02C2:  BRA    02C6
02C4:  BSF    F8C.4
02C6:  BCF    F95.4
....................       output_bit(g_4led7doan,g_4a); 
02C8:  BTFSC  04.6
02CA:  BRA    02D0
02CC:  BCF    F8C.6
02CE:  BRA    02D2
02D0:  BSF    F8C.6
02D2:  BCF    F95.6
....................       output_bit(g_lcd20x4,g_lcda);   
02D4:  BTFSC  04.2
02D6:  BRA    02DC
02D8:  BCF    F8C.2
02DA:  BRA    02DE
02DC:  BSF    F8C.2
02DE:  BCF    F95.2
....................       cho_ic_74573_a_goi_du_lieu; 
02E0:  BCF    F95.1
02E2:  BSF    F8C.1
02E4:  RETURN 0
.................... } 
.................... void mo_ic_74573_b_thong_dl() 
.................... {      
....................       output_d(0x00); 
*
081C:  CLRF   F95
081E:  CLRF   F8C
....................       output_bit(g_matranled,g_mtb); 
0820:  BTFSC  05.6
0822:  BRA    0828
0824:  BCF    F8C.6
0826:  BRA    082A
0828:  BSF    F8C.6
082A:  BCF    F95.6
....................       output_bit(g_8ledquet,g_8b); 
082C:  BTFSC  05.4
082E:  BRA    0834
0830:  BCF    F8C.4
0832:  BRA    0836
0834:  BSF    F8C.4
0836:  BCF    F95.4
....................       output_bit(g_buzerelay,g_rbdcb);  
0838:  BTFSC  05.2
083A:  BRA    0840
083C:  BCF    F8C.2
083E:  BRA    0842
0840:  BSF    F8C.2
0842:  BCF    F95.2
....................       cho_ic_74573_b_goi_du_lieu; 
0844:  BCF    F95.0
0846:  BSF    F8C.0
0848:  RETURN 0
.................... } 
.................... //ham 401 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740) 
.................... {      
....................       xuat_1byte(bl740);   xuat_1byte(bl741); 
*
02E6:  MOVFF  497,4A2
02EA:  RCALL  028A
02EC:  MOVFF  496,4A2
02F0:  RCALL  028A
....................       xuat_1byte(bl742);   xuat_1byte(bl743); 
02F2:  MOVFF  495,4A2
02F6:  RCALL  028A
02F8:  MOVFF  494,4A2
02FC:  RCALL  028A
....................        
....................       mo_4_led_7doan; 
02FE:  BCF    04.6
....................       mo_ic_74573_a_thong_dl(); 
0300:  RCALL  02B8
....................         
....................       output_low(rck_4led7doan);   output_high(rck_4led7doan);  
0302:  BCF    F95.7
0304:  BCF    F8C.7
0306:  BCF    F95.7
0308:  BSF    F8C.7
....................       chot_ic_74573_a_goi_du_lieu; 
030A:  BCF    F95.1
030C:  BCF    F8C.1
030E:  RETURN 0
.................... } 
.................... //ham 404 
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740); 
.................... } 
.................... //ham 403 
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740); 
.................... } 
.................... //ham 402 
.................... void xuat_4led_7doan_1so(unsigned int bl740) 
.................... {      
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740); 
.................... } 
....................  
.................... //ham 405 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned char donvi4,chuc4,tram4,ngan4; 
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam) 
.................... {          
....................       donvi4 = ma7doan[tam %10];          
0310:  MOVFF  48D,492
0314:  MOVFF  48C,491
0318:  MOVLB  4
031A:  CLRF   x94
031C:  MOVLW  0A
031E:  MOVWF  x93
0320:  MOVLB  0
0322:  RCALL  0244
0324:  MOVFF  00,48E
0328:  MOVLB  4
032A:  MOVFF  03,48F
032E:  MOVFF  03,03
0332:  MOVF   00,W
0334:  MOVLB  0
0336:  RCALL  0004
0338:  MOVWF  09
....................       chuc4  = ma7doan[tam/10%10]; 
033A:  MOVFF  48D,492
033E:  MOVFF  48C,491
0342:  MOVLB  4
0344:  CLRF   x94
0346:  MOVLW  0A
0348:  MOVWF  x93
034A:  MOVLB  0
034C:  RCALL  0244
034E:  MOVFF  02,48F
0352:  MOVFF  01,48E
0356:  MOVFF  02,492
035A:  MOVFF  01,491
035E:  MOVLB  4
0360:  CLRF   x94
0362:  MOVLW  0A
0364:  MOVWF  x93
0366:  MOVLB  0
0368:  RCALL  0244
036A:  MOVFF  00,48E
036E:  MOVLB  4
0370:  MOVFF  03,48F
0374:  MOVFF  03,03
0378:  MOVF   00,W
037A:  MOVLB  0
037C:  RCALL  0004
037E:  MOVWF  0A
....................       tram4  = ma7doan[tam/100%10];  
0380:  MOVFF  48D,492
0384:  MOVFF  48C,491
0388:  MOVLB  4
038A:  CLRF   x94
038C:  MOVLW  64
038E:  MOVWF  x93
0390:  MOVLB  0
0392:  RCALL  0244
0394:  MOVFF  02,48F
0398:  MOVFF  01,48E
039C:  MOVFF  02,492
03A0:  MOVFF  01,491
03A4:  MOVLB  4
03A6:  CLRF   x94
03A8:  MOVLW  0A
03AA:  MOVWF  x93
03AC:  MOVLB  0
03AE:  RCALL  0244
03B0:  MOVFF  00,48E
03B4:  MOVLB  4
03B6:  MOVFF  03,48F
03BA:  MOVFF  03,03
03BE:  MOVF   00,W
03C0:  MOVLB  0
03C2:  RCALL  0004
03C4:  MOVWF  0B
....................       ngan4  = ma7doan[tam/1000%10];        
03C6:  MOVFF  48D,492
03CA:  MOVFF  48C,491
03CE:  MOVLW  03
03D0:  MOVLB  4
03D2:  MOVWF  x94
03D4:  MOVLW  E8
03D6:  MOVWF  x93
03D8:  MOVLB  0
03DA:  RCALL  0244
03DC:  MOVFF  02,48F
03E0:  MOVFF  01,48E
03E4:  MOVFF  02,492
03E8:  MOVFF  01,491
03EC:  MOVLB  4
03EE:  CLRF   x94
03F0:  MOVLW  0A
03F2:  MOVWF  x93
03F4:  MOVLB  0
03F6:  RCALL  0244
03F8:  MOVFF  00,48E
03FC:  MOVLB  4
03FE:  MOVFF  03,48F
0402:  MOVFF  03,03
0406:  MOVF   00,W
0408:  MOVLB  0
040A:  RCALL  0004
040C:  MOVWF  0C
....................       if (ngan4==0xc0) 
040E:  MOVF   0C,W
0410:  SUBLW  C0
0412:  BNZ   0426
....................       { 
....................          ngan4=0xff; 
0414:  SETF   0C
....................          if (tram4==0xc0) 
0416:  MOVF   0B,W
0418:  SUBLW  C0
041A:  BNZ   0426
....................          { 
....................             tram4=0xff; 
041C:  SETF   0B
....................             if (chuc4==0xc0)   chuc4=0xff; 
041E:  MOVF   0A,W
0420:  SUBLW  C0
0422:  BNZ   0426
0424:  SETF   0A
....................          } 
....................       } 
....................       xuat_4led_7doan_4so(ngan4,tram4,chuc4,donvi4);    
0426:  MOVFF  0C,494
042A:  MOVFF  0B,495
042E:  MOVFF  0A,496
0432:  MOVFF  09,497
0436:  RCALL  02E6
0438:  GOTO   150C (RETURN)
.................... } 
.................... unsigned int8 lcddata=0;  
.................... unsigned int8 lcdcontrol=0; 
.................... unsigned int8 glcddata=0; 
.................... unsigned int8 glcdcontrol=0;  
.................... //ham 701 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_glcd_lcd() 
.................... {       
....................     xuat_1byte(glcdcontrol);              
043C:  MOVFF  10,4A2
0440:  RCALL  028A
....................     xuat_1byte(glcddata); 
0442:  MOVFF  0F,4A2
0446:  RCALL  028A
....................     xuat_1byte(lcdcontrol);        
0448:  MOVFF  0E,4A2
044C:  RCALL  028A
....................     xuat_1byte(lcddata);       
044E:  MOVFF  0D,4A2
0452:  RCALL  028A
....................        
....................     mo_glcd_lcd; 
0454:  BCF    04.2
....................     mo_ic_74573_a_thong_dl();             
0456:  RCALL  02B8
....................     output_high(rck_lcd20x4);      
0458:  BCF    F95.3
045A:  BSF    F8C.3
....................     output_low(rck_lcd20x4); 
045C:  BCF    F95.3
045E:  BCF    F8C.3
....................     chot_ic_74573_a_goi_du_lieu; 
0460:  BCF    F95.1
0462:  BCF    F8C.1
0464:  RETURN 0
.................... } 
.................... //ham 702 
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi) 
.................... {      
....................     lcdcontrol = ~lcd_signal; 
0466:  MOVLB  4
0468:  MOVFF  497,0E
046C:  COMF   0E,F
....................     lcddata    = ~lcd_ins_hthi;       
046E:  MOVFF  498,0D
0472:  COMF   0D,F
....................     xuat_glcd_lcd(); 
0474:  MOVLB  0
0476:  RCALL  043C
0478:  RETURN 0
.................... } 
.................... //ham 703 
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     glcdcontrol = ~glcd_signal; 
*
052A:  MOVLB  4
052C:  MOVFF  48F,10
0530:  COMF   10,F
....................     glcddata    = ~glcd_ins_hthi;      
0532:  MOVFF  490,0F
0536:  COMF   0F,F
....................     xuat_glcd_lcd(); 
0538:  MOVLB  0
053A:  RCALL  043C
053C:  RETURN 0
.................... } 
.................... //ham 501 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi) 
.................... {      
....................       xuat_1byte(~ma);   xuat_1byte(~so_hthi); 
*
088A:  MOVLB  4
088C:  MOVFF  492,494
0890:  COMF   x94,F
0892:  MOVFF  494,4A2
0896:  MOVLB  0
0898:  RCALL  028A
089A:  MOVLB  4
089C:  MOVFF  493,494
08A0:  COMF   x94,F
08A2:  MOVFF  494,4A2
08A6:  MOVLB  0
08A8:  RCALL  028A
....................        
....................       mo_8_led_quet; 
08AA:  BCF    05.4
....................       mo_ic_74573_b_thong_dl(); 
08AC:  RCALL  081C
....................        
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
08AE:  BCF    F95.5
08B0:  BSF    F8C.5
08B2:  BCF    F95.5
08B4:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
08B6:  BCF    F95.0
08B8:  BCF    F8C.0
08BA:  GOTO   08C8 (RETURN)
.................... } 
.................... //ham 502 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_8led_7doan_quet_tat_led() 
.................... { 
....................    xuat_8led_7doan_quet_1(0xff,0xff); 
08BE:  MOVLB  4
08C0:  SETF   x92
08C2:  SETF   x93
08C4:  MOVLB  0
08C6:  BRA    088A
08C8:  GOTO   08F8 (RETURN)
.................... } 
.................... //ham 503 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi led theo thu tu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe}; 
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi) 
.................... {          
....................       xuat_1byte(~ (ttledquet[thutuled]));   xuat_1byte(~so_hthi);      
*
084A:  CLRF   03
084C:  MOVLB  4
084E:  MOVF   x93,W
0850:  MOVLB  0
0852:  CALL   0026
0856:  MOVWF  01
0858:  MOVLB  4
085A:  MOVWF  x95
085C:  COMF   x95,F
085E:  MOVFF  495,4A2
0862:  MOVLB  0
0864:  RCALL  028A
0866:  MOVLB  4
0868:  MOVFF  494,495
086C:  COMF   x95,F
086E:  MOVFF  495,4A2
0872:  MOVLB  0
0874:  RCALL  028A
....................       mo_8_led_quet; 
0876:  BCF    05.4
....................       mo_ic_74573_b_thong_dl(); 
0878:  RCALL  081C
....................       output_high(rck_8ledquet); output_low(rck_8ledquet); 
087A:  BCF    F95.5
087C:  BSF    F8C.5
087E:  BCF    F95.5
0880:  BCF    F8C.5
....................       chot_ic_74573_b_goi_du_lieu; 
0882:  BCF    F95.0
0884:  BCF    F8C.0
0886:  GOTO   08EC (RETURN)
.................... } 
.................... //ham 504 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned int8 tt8led=0; 
.................... void hien_thi_8led_7doan_quet() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++) 
....................          if (led_7dq[tt8led]!=0xff) 
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
....................             delay_us(100); 
....................             xuat_8led_7doan_quet_tat_led();            
....................             } 
.................... } 
.................... //ham 505 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void hien_thi_8led_7doan_quet_all() 
.................... {      
....................       for(tt8led=0;tt8led<8;tt8led++)          
*
08CC:  CLRF   19
08CE:  MOVF   19,W
08D0:  SUBLW  07
08D2:  BNC   08FC
....................          {            
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]); 
08D4:  CLRF   03
08D6:  MOVF   19,W
08D8:  ADDLW  11
08DA:  MOVWF  FE9
08DC:  MOVLW  00
08DE:  ADDWFC 03,W
08E0:  MOVWF  FEA
08E2:  MOVFF  FEF,494
08E6:  MOVFF  19,493
08EA:  BRA    084A
....................             delay_us(100); 
08EC:  MOVLW  A6
08EE:  MOVWF  00
08F0:  DECFSZ 00,F
08F2:  BRA    08F0
08F4:  NOP   
....................             xuat_8led_7doan_quet_tat_led();            
08F6:  BRA    08BE
08F8:  INCF   19,F
08FA:  BRA    08CE
....................             } 
08FC:  RETURN 0
.................... } 
....................  
.................... void delay_quet_8led(unsigned int16 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
....................       hien_thi_8led_7doan_quet_all(); 
.................... }  
....................  
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x) 
.................... {      
....................       led_7dq[0]= ma7doan [x %10];     
....................       led_7dq[1]= ma7doan [x/10%10]; 
....................       led_7dq[2]= ma7doan [x/100%10];     
....................       led_7dq[3]= ma7doan [x/1000%10]; 
....................       led_7dq[4]= ma7doan [x/10000%10]; 
....................       if (led_7dq[4]==maso0)  
....................       { 
....................             led_7dq[4]=0xff; 
....................             if (led_7dq[3]==maso0)  
....................             { 
....................                led_7dq[3]=0xff; 
....................                if (led_7dq[2]==maso0)  
....................                { 
....................                   led_7dq[2]=0xff; 
....................                   if (led_7dq[1]==maso0)  
....................                   { 
....................                      led_7dq[1]=0xff; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_2byte(unsigned int16 byte2xuat) 
.................... { 
....................    int8 sbb; 
....................    unsigned int16   xx;   //short  bseri; 
....................    #bit bserix  = xx.15 
....................    xx = byte2xuat; 
....................    for (sbb=0;sbb<16;sbb++) 
....................       {                                                  
....................          output_bit(ssdo,bserix);     
....................          output_low(ssck);          
....................          output_high(ssck); 
....................          xx= xx<<1;          
....................      } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {       
....................       xuat_2byte(macot3); 
....................       xuat_2byte(macot2); 
....................       xuat_2byte(macot1); 
....................       xuat_2byte(mahang); 
....................        
....................       mo_led_matran; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_matranled); output_low(rck_matranled);  
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //chuong trinh con xuat ra led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void tat_matranled() 
.................... {       
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0); 
....................       xuat_2byte(0);            
....................       output_high(rck_matranled);  
....................       output_low(rck_matranled); 
.................... } 
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy) 
.................... { 
....................       int1  btg; 
....................       unsigned int8   bx;    
....................       #bit bit4  = bx.4 
....................       #bit bit5  = bx.5 
....................       #bit bit6  = bx.6 
....................       #bit bit7  = bx.7 
....................       bx=xzy; 
....................       btg=bit4;   bit4=bit7;  bit7=btg; 
....................       btg=bit5;   bit5=bit6;  bit6=btg;       
....................       return(bx);   
.................... } 
.................... //ham 601 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //module dieu khien relay,triac, buzzer, dong co, sim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void xuat_buzzer_relay() 
.................... {      
....................    unsigned int8 rbdc1,rbdc2; 
....................       rbdc1=rbdc; rbdc2=rbdc>>8;       
....................       xuat_1byte(rbdc2);       
....................       xuat_1byte(rbdc1); 
....................       mo_relay_buzzer_dc; 
....................       mo_ic_74573_b_thong_dl(); 
....................        
....................       output_high(rck_buzerelay);   output_low(rck_buzerelay); 
....................       chot_ic_74573_b_goi_du_lieu; 
.................... } 
.................... //ham 602 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_on() 
.................... {     
....................       buzzer=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void buzzer_off() 
.................... {      
....................       buzzer=0; 
....................       xuat_buzzer_relay(); 
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_on() 
.................... {     
....................       relay_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 603 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_off() 
.................... {     
....................       relay_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 604 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_on() 
.................... {     
....................       relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 607 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_2_off() 
.................... {     
....................       relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 608 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_on() 
.................... {     
....................       relay_1=1;  relay_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 609 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void relay_1_relay_2_off() 
.................... {     
....................       relay_1=0;  relay_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 610 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_on() 
.................... {     
....................       triac_1=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 611 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_1_off() 
.................... {     
....................       triac_1=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 612 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_on() 
.................... {     
....................       triac_2=1; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //ham 613 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................       triac_2=0; 
....................       xuat_buzzer_relay();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_KEY4X4_138.c" 
.................... const unsigned char maquetkey[4]= {0x3f,0x7f,0xbf,0xff}; 
.................... unsigned int8  mpt1=0,mpt2=0;   
.................... unsigned int key_nhan() 
.................... {     signed int8 maphim,hang,cot; 
....................       maphim=hang=0xff; 
....................       for(cot=0;cot<4;cot++) 
....................             {    
....................                output_b(maquetkey[cot]); 
....................                if         (!input(pin_b2))      {hang=3;   break;} 
....................                else    if (!input(pin_b3))      {hang=2;   break;} 
....................                else    if (!input(pin_b4))      {hang=1;   break;} 
....................                else    if (!input(pin_b5))      {hang=0;   break;} 
....................             }           
....................          if (hang!=0xff)   maphim   = cot*4 + hang; 
....................          return(maphim); 
.................... } 
.................... unsigned int key_4x4_dw() 
.................... {      
....................       mpt1=key_nhan();          
....................       if (mpt1!=0xff)    
....................       {  delay_ms(1);   
....................          mpt1=key_nhan(); 
....................          do{mpt2=key_nhan();} 
....................          while (mpt2==mpt1); 
....................       }              
....................       return(mpt1); 
.................... } 
....................  
.................... unsigned int key_4x4_up() 
.................... {             
....................       mpt1=key_nhan(); 
....................       if (mpt1!=0xff)    
....................       {   
....................          if (mpt1!=mpt2) 
....................             { 
....................                return(mpt1);  //phim moi 
....................                mpt2=mpt1; 
....................             } 
....................          else 
....................          { 
....................             delay_ms(1); 
....................             mpt1=key_nhan(); 
....................             do 
....................             { 
....................                mpt2=key_nhan(); 
....................                } 
....................             while (mpt2!=mpt1); 
.................... 			mpt2=mpt1; 
....................             return(mpt1);     //thoat vi trung ma phim da nhan 
....................                            
....................          } 
....................       }   
....................       else  
....................       { 
.................... 		 mpt2=mpt1; 
....................          return(mpt1);  //thoat vi khong nhan 
....................           
....................       }       
.................... } 
....................  
....................  
....................  
.................... #include "TV_PICKIT2_SHIFT_32LED_DON.c" 
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0; 
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0; 
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0; 
....................  
.................... unsigned int16 tgdlay=0; 
.................... unsigned int8 dem_led=0;  
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0; 
....................  
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;    
.................... signed ia=1,ja=1;   
.................... void reset_toan_bo_bien() 
.................... {  
....................       ttct_td++;     //chuyen chuong trinh cho tu dong 
*
1036:  INCF   41,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0; 
1038:  CLRF   1F
103A:  CLRF   1E
103C:  CLRF   1D
103E:  CLRF   1C
1040:  CLRF   23
1042:  CLRF   22
1044:  CLRF   21
1046:  MOVLW  01
1048:  MOVWF  20
104A:  MOVLW  80
104C:  MOVWF  27
104E:  CLRF   26
1050:  CLRF   25
1052:  CLRF   24
1054:  CLRF   2B
1056:  CLRF   2A
1058:  CLRF   29
105A:  CLRF   28
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0; 
105C:  MOVWF  2F
105E:  CLRF   2E
1060:  CLRF   31
1062:  MOVLW  01
1064:  MOVWF  30
1066:  CLRF   33
1068:  CLRF   32
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0; 
106A:  MOVLW  80
106C:  MOVWF  37
106E:  CLRF   36
1070:  CLRF   39
1072:  MOVLW  01
1074:  MOVWF  38
1076:  CLRF   3B
1078:  CLRF   3A
....................       zt=zp=0; 
107A:  CLRF   35
107C:  CLRF   34
107E:  MOVFF  35,2D
1082:  MOVFF  34,2C
....................       i32=32;j32=0;i16=16,j16=0; 
1086:  MOVLW  20
1088:  MOVWF  3F
108A:  CLRF   40
108C:  MOVLW  10
108E:  MOVWF  42
1090:  CLRF   43
....................       dem_led=0; 
1092:  CLRF   3E
....................        
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1; 
1094:  CLRF   47
1096:  CLRF   46
1098:  CLRF   45
109A:  MOVLW  01
109C:  MOVWF  44
109E:  CLRF   4B
10A0:  CLRF   4A
10A2:  CLRF   49
10A4:  MOVWF  48
10A6:  SETF   4F
10A8:  SETF   4E
10AA:  SETF   4D
10AC:  MOVLW  FE
10AE:  MOVWF  4C
10B0:  MOVLW  01
10B2:  MOVWF  5C
10B4:  MOVWF  5D
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff; 
10B6:  MOVLW  80
10B8:  MOVWF  53
10BA:  CLRF   52
10BC:  CLRF   51
10BE:  CLRF   50
10C0:  MOVWF  57
10C2:  CLRF   56
10C4:  CLRF   55
10C6:  CLRF   54
10C8:  MOVLW  7F
10CA:  MOVWF  5B
10CC:  SETF   5A
10CE:  SETF   59
10D0:  SETF   58
....................      tgdlay = 0; 
10D2:  CLRF   3D
10D4:  CLRF   3C
10D6:  RETURN 0
.................... }  
....................  
.................... void tang_dem_led_delay_1(unsigned int8 dl) 
.................... {  
....................       unsigned int8 i; 
....................       for (i=0; i<dl;i++) 
*
10F2:  MOVLB  4
10F4:  CLRF   x91
10F6:  MOVF   x90,W
10F8:  SUBWF  x91,W
10FA:  BC    1108
....................       hien_thi_8led_7doan_quet_all(); 
10FC:  MOVLB  0
10FE:  CALL   08CC
1102:  MOVLB  4
1104:  INCF   x91,F
1106:  BRA    10F6
....................       dem_led++; 
1108:  INCF   3E,F
110A:  MOVLB  0
110C:  GOTO   112A (RETURN)
.................... }  
....................  
.................... void tang_dem_led_delay_0(unsigned int8 dl) 
.................... {  
....................       if (dl>0)      delay_ms(dl);  
*
10D8:  MOVLB  4
10DA:  MOVF   x90,F
10DC:  BZ    10EA
10DE:  MOVFF  490,491
10E2:  MOVLB  0
10E4:  CALL   04A6
10E8:  MOVLB  4
....................       dem_led++; 
10EA:  INCF   3E,F
10EC:  MOVLB  0
10EE:  GOTO   112A (RETURN)
.................... }  
....................  
.................... void delay_chon(unsigned int8 dl,chondelay) 
.................... {     
....................    if (!chondelay)   tang_dem_led_delay_0(dl); 
*
1110:  MOVLB  4
1112:  MOVF   x8F,F
1114:  BNZ   1122
1116:  MOVFF  48E,490
111A:  MOVLB  0
111C:  BRA    10D8
111E:  MOVLB  0
1120:  BRA    112A
....................    else              tang_dem_led_delay_1(dl); 
1122:  MOVFF  48E,490
1126:  MOVLB  0
1128:  BRA    10F2
112A:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          zb = (zb << 1); 
....................          y = xb|zb;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          yb = yb>>1; 
....................          xb = xb>>1; 
....................          zb = yb; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(ia<33) 
....................    { 
....................       if(ja>0) 
....................       { 
....................          za = (za >> 1); 
....................          y = xa|za;         
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          ja--; 
....................       } 
....................       else  
....................       { 
....................          ia++; 
....................          ja=ia;       
....................          ya = ya<<1; 
....................          xa = xa <<1; 
....................          za = ya; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: chop tat  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void dao_dl_32bit_va_xuat() 
.................... { 
....................    y=~y; 
*
101A:  COMF   1C,F
101C:  COMF   1D,F
101E:  COMF   1E,F
1020:  COMF   1F,F
....................    xuat_32led_don_1dw(y);  
1022:  MOVFF  1F,491
1026:  MOVFF  1E,490
102A:  MOVFF  1D,48F
102E:  MOVFF  1C,48E
1032:  RCALL  0FF6
1034:  RETURN 0
.................... } 
.................... void sang_tat_32led(unsigned int8 dl,chondelay) 
.................... {         
....................       if (tgdlay==1)          xuat_32led_don_1dw(y);  
*
112C:  DECFSZ 3C,W
112E:  BRA    1148
1130:  MOVF   3D,F
1132:  BNZ   1148
1134:  MOVFF  1F,491
1138:  MOVFF  1E,490
113C:  MOVFF  1D,48F
1140:  MOVFF  1C,48E
1144:  RCALL  0FF6
1146:  BRA    117E
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat(); 
1148:  MOVF   3C,W
114A:  SUBLW  32
114C:  BNZ   1156
114E:  MOVF   3D,F
1150:  BNZ   1156
1152:  RCALL  101A
1154:  BRA    117E
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();           
1156:  MOVF   3C,W
1158:  SUBLW  64
115A:  BNZ   1164
115C:  MOVF   3D,F
115E:  BNZ   1164
1160:  RCALL  101A
1162:  BRA    117E
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                  
1164:  MOVF   3C,W
1166:  SUBLW  96
1168:  BNZ   1172
116A:  MOVF   3D,F
116C:  BNZ   1172
116E:  RCALL  101A
1170:  BRA    117E
....................       else if (tgdlay==200)   
1172:  MOVF   3C,W
1174:  SUBLW  C8
1176:  BNZ   117E
1178:  MOVF   3D,F
117A:  BNZ   117E
....................       { 
.................... //!         ttct_td++;   y=0;        tgdlay=0; 
....................             reset_toan_bo_bien(); 
117C:  RCALL  1036
....................       } 
....................       tgdlay++; 
117E:  INCF   3C,F
1180:  BTFSC  FD8.2
1182:  INCF   3D,F
....................       delay_chon(dl,chondelay); 
1184:  MOVFF  48C,48E
1188:  MOVFF  48D,48F
118C:  RCALL  1110
118E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
1190:  MOVF   3E,W
1192:  SUBLW  0F
1194:  BNC   11DE
....................    {   
....................       xuat_32led_don_2word(zp,zt);         
1196:  MOVFF  35,497
119A:  MOVFF  34,496
119E:  MOVFF  2D,499
11A2:  MOVFF  2C,498
11A6:  RCALL  0FD2
....................       zp= (zp<<1)+1;  
11A8:  BCF    FD8.0
11AA:  RLCF   34,W
11AC:  MOVLB  4
11AE:  MOVWF  x8E
11B0:  RLCF   35,W
11B2:  MOVWF  x8F
11B4:  MOVLW  01
11B6:  ADDWF  x8E,W
11B8:  MOVWF  34
11BA:  MOVLW  00
11BC:  ADDWFC x8F,W
11BE:  MOVWF  35
....................       zt= (zt>>1)+0x8000; 
11C0:  BCF    FD8.0
11C2:  RRCF   2D,W
11C4:  MOVWF  x8F
11C6:  RRCF   2C,W
11C8:  MOVWF  2C
11CA:  MOVLW  80
11CC:  ADDWF  x8F,W
11CE:  MOVWF  2D
....................       delay_chon(dl,chondelay); 
11D0:  MOVFF  48C,48E
11D4:  MOVFF  48D,48F
11D8:  MOVLB  0
11DA:  RCALL  1110
....................    } 
11DC:  BRA    1210
....................    else  if (dem_led<32) 
11DE:  MOVF   3E,W
11E0:  SUBLW  1F
11E2:  BNC   120E
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
11E4:  MOVFF  35,497
11E8:  MOVFF  34,496
11EC:  MOVFF  2D,499
11F0:  MOVFF  2C,498
11F4:  RCALL  0FD2
....................       zp= (zp<<1);  
11F6:  BCF    FD8.0
11F8:  RLCF   34,F
11FA:  RLCF   35,F
....................       zt= (zt>>1); 
11FC:  BCF    FD8.0
11FE:  RRCF   2D,F
1200:  RRCF   2C,F
....................       delay_chon(dl,chondelay); 
1202:  MOVFF  48C,48E
1206:  MOVFF  48D,48F
120A:  RCALL  1110
....................    } 
120C:  BRA    1210
....................    else reset_toan_bo_bien(); 
120E:  RCALL  1036
1210:  RETURN 0
....................  
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trong ra 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zp,zt);  
....................       zp= (zp>>1)+0x8000;  
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1);  
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
*
1318:  MOVF   3E,W
131A:  SUBLW  0F
131C:  BNC   1350
....................    {    
....................       xuat_32led_don_2word(zp,zp); 
131E:  MOVFF  35,497
1322:  MOVFF  34,496
1326:  MOVFF  35,499
132A:  MOVFF  34,498
132E:  RCALL  0FD2
....................       zp= (zp>>1)+0x8000; 
1330:  BCF    FD8.0
1332:  RRCF   35,W
1334:  MOVLB  4
1336:  MOVWF  x8F
1338:  RRCF   34,W
133A:  MOVWF  34
133C:  MOVLW  80
133E:  ADDWF  x8F,W
1340:  MOVWF  35
....................       delay_chon(dl,chondelay); 
1342:  MOVFF  48C,48E
1346:  MOVFF  48D,48F
134A:  MOVLB  0
134C:  RCALL  1110
....................    } 
134E:  BRA    137C
....................    else  if (dem_led<32) 
1350:  MOVF   3E,W
1352:  SUBLW  1F
1354:  BNC   137A
....................    {   
....................       xuat_32led_don_2word(zp,zp); 
1356:  MOVFF  35,497
135A:  MOVFF  34,496
135E:  MOVFF  35,499
1362:  MOVFF  34,498
1366:  RCALL  0FD2
....................       zp= (zp>>1); 
1368:  BCF    FD8.0
136A:  RRCF   35,F
136C:  RRCF   34,F
....................       delay_chon(dl,chondelay); 
136E:  MOVFF  48C,48E
1372:  MOVFF  48D,48F
1376:  RCALL  1110
....................     } 
1378:  BRA    137C
....................    else reset_toan_bo_bien(); 
137A:  RCALL  1036
137C:  RETURN 0
....................        
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay) 
.................... {   
....................    if (dem_led<16) 
....................    {    
....................       xuat_32led_don_2word(zt,zt);   
....................       zt= (zt<<1)+1; 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<32) 
....................    {   
....................       xuat_32led_don_2word(zt,zt); 
....................       zt= (zt<<1); 
....................       delay_chon(dl,chondelay); 
....................     } 
....................    else reset_toan_bo_bien(); 
....................          
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led<32) 
*
1294:  MOVF   3E,W
1296:  SUBLW  1F
1298:  BNC   12E6
....................    {   
....................       xuat_32led_don_1dw(y); 
129A:  MOVFF  1F,491
129E:  MOVFF  1E,490
12A2:  MOVFF  1D,48F
12A6:  MOVFF  1C,48E
12AA:  RCALL  0FF6
....................       y= (y<<1)+1; 
12AC:  BCF    FD8.0
12AE:  RLCF   1C,W
12B0:  MOVLB  4
12B2:  MOVWF  x8F
12B4:  RLCF   1D,W
12B6:  MOVWF  x90
12B8:  RLCF   1E,W
12BA:  MOVWF  x91
12BC:  RLCF   1F,W
12BE:  MOVWF  x92
12C0:  MOVLW  01
12C2:  ADDWF  x8F,W
12C4:  MOVWF  1C
12C6:  MOVLW  00
12C8:  ADDWFC x90,W
12CA:  MOVWF  1D
12CC:  MOVLW  00
12CE:  ADDWFC x91,W
12D0:  MOVWF  1E
12D2:  MOVLW  00
12D4:  ADDWFC x92,W
12D6:  MOVWF  1F
....................       delay_chon(dl,chondelay); 
12D8:  MOVFF  48C,48E
12DC:  MOVFF  48D,48F
12E0:  MOVLB  0
12E2:  RCALL  1110
....................    } 
12E4:  BRA    1316
....................    else  if (dem_led<64) 
12E6:  MOVF   3E,W
12E8:  SUBLW  3F
12EA:  BNC   1314
....................    {   
....................       xuat_32led_don_1dw(y);    
12EC:  MOVFF  1F,491
12F0:  MOVFF  1E,490
12F4:  MOVFF  1D,48F
12F8:  MOVFF  1C,48E
12FC:  RCALL  0FF6
....................       y= (y<<1);  
12FE:  BCF    FD8.0
1300:  RLCF   1C,F
1302:  RLCF   1D,F
1304:  RLCF   1E,F
1306:  RLCF   1F,F
....................       delay_chon(dl,chondelay); 
1308:  MOVFF  48C,48E
130C:  MOVFF  48D,48F
1310:  RCALL  1110
....................    }  
1312:  BRA    1316
....................    else reset_toan_bo_bien(); 
1314:  RCALL  1036
1316:  RETURN 0
....................  
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang dan roi tat dan tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay) 
.................... {            
....................       if (dem_led<32) 
*
137E:  MOVF   3E,W
1380:  SUBLW  1F
1382:  BNC   13C6
....................       {   
....................          xuat_32led_don_1dw(y); 
1384:  MOVFF  1F,491
1388:  MOVFF  1E,490
138C:  MOVFF  1D,48F
1390:  MOVFF  1C,48E
1394:  RCALL  0FF6
....................          y= (y>>1)+0x80000000;  
1396:  BCF    FD8.0
1398:  RRCF   1F,W
139A:  MOVLB  4
139C:  MOVWF  x92
139E:  RRCF   1E,W
13A0:  MOVWF  x91
13A2:  RRCF   1D,W
13A4:  MOVWF  x90
13A6:  RRCF   1C,W
13A8:  MOVWF  1C
13AA:  MOVFF  490,1D
13AE:  MOVFF  491,1E
13B2:  MOVLW  80
13B4:  ADDWF  x92,W
13B6:  MOVWF  1F
....................          delay_chon(dl,chondelay);       
13B8:  MOVFF  48C,48E
13BC:  MOVFF  48D,48F
13C0:  MOVLB  0
13C2:  RCALL  1110
....................       } 
13C4:  BRA    13F6
....................       else 
....................       if (dem_led<64) 
13C6:  MOVF   3E,W
13C8:  SUBLW  3F
13CA:  BNC   13F4
....................       {   
....................          xuat_32led_don_1dw(y);  
13CC:  MOVFF  1F,491
13D0:  MOVFF  1E,490
13D4:  MOVFF  1D,48F
13D8:  MOVFF  1C,48E
13DC:  RCALL  0FF6
....................          y= (y>>1); 
13DE:  BCF    FD8.0
13E0:  RRCF   1F,F
13E2:  RRCF   1E,F
13E4:  RRCF   1D,F
13E6:  RRCF   1C,F
....................          delay_chon(dl,chondelay); 
13E8:  MOVFF  48C,48E
13EC:  MOVFF  48D,48F
13F0:  RCALL  1110
....................       }  
13F2:  BRA    13F6
....................       else reset_toan_bo_bien(); 
13F4:  RCALL  1036
13F6:  GOTO   1776 (RETURN)
....................      
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=1; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y<<1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y<<1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else  reset_toan_bo_bien(); 
.................... }     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: diem sang di chueyn tu trai sang phai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay) 
.................... {         
....................    if (dem_led==0) 
....................    {   
....................       y=0x80000000; 
....................       xuat_32led_don_1dw(y); 
....................       y= (y>>1); 
....................       delay_chon(dl,chondelay); 
....................    } 
....................    else  if (dem_led<33) 
....................    {   
....................       xuat_32led_don_1dw(y);    
....................       y= (y>>1);  
....................       delay_chon(dl,chondelay); 
....................    }  
....................    else reset_toan_bo_bien(); 
....................  
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
*
1212:  BTFSC  3F.7
1214:  BRA    1290
1216:  MOVF   3F,W
1218:  SUBLW  00
121A:  BC    1290
....................    { 
....................       if(j32<i32) 
121C:  MOVF   40,W
121E:  XORLW  80
1220:  MOVWF  00
1222:  MOVF   3F,W
1224:  XORLW  80
1226:  SUBWF  00,W
1228:  BC    126A
....................       { 
....................          y = y_codinh|yp_chay; 
122A:  MOVF   28,W
122C:  IORWF  20,W
122E:  MOVWF  1C
1230:  MOVF   29,W
1232:  IORWF  21,W
1234:  MOVWF  1D
1236:  MOVF   2A,W
1238:  IORWF  22,W
123A:  MOVWF  1E
123C:  MOVF   2B,W
123E:  IORWF  23,W
1240:  MOVWF  1F
....................          xuat_32led_don_1dw(y); 
1242:  MOVFF  1F,491
1246:  MOVFF  1E,490
124A:  MOVFF  1D,48F
124E:  MOVFF  1C,48E
1252:  RCALL  0FF6
....................          delay_chon(dl,chondelay);        
1254:  MOVFF  48C,48E
1258:  MOVFF  48D,48F
125C:  RCALL  1110
....................          yp_chay = yp_chay <<1; 
125E:  BCF    FD8.0
1260:  RLCF   20,F
1262:  RLCF   21,F
1264:  RLCF   22,F
1266:  RLCF   23,F
....................          j32++; 
1268:  INCF   40,F
....................       } 
....................       if (j32==i32)  
126A:  MOVF   3F,W
126C:  SUBWF  40,W
126E:  BNZ   128E
....................       { 
....................          i32--; 
1270:  DECF   3F,F
....................          j32=0;          
1272:  CLRF   40
....................          y_codinh=y; 
1274:  MOVFF  1F,2B
1278:  MOVFF  1E,2A
127C:  MOVFF  1D,29
1280:  MOVFF  1C,28
....................          yp_chay = 1; 
1284:  CLRF   23
1286:  CLRF   22
1288:  CLRF   21
128A:  MOVLW  01
128C:  MOVWF  20
....................       } 
....................    } 
128E:  BRA    1292
....................    else reset_toan_bo_bien(); 
1290:  RCALL  1036
1292:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  phai sang trai 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i32>0) 
....................    { 
....................       if(j32<i32) 
....................       { 
....................          y = y_codinh|yt_chay; 
....................          xuat_32led_don_1dw(y); 
....................          delay_chon(dl,chondelay); 
....................          yt_chay = yt_chay >>1; 
....................          j32++; 
....................       } 
....................       if (j32==i32)  
....................       { 
....................          i32--; 
....................          j32=0;          
....................          y_codinh=y; 
....................          yt_chay = 0x80000000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_p; 
....................          zt = zt_codinh|zt_chay_t; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................  
....................          zp_chay_p = zp_chay_p <<1;          
....................          zt_chay_t = zt_chay_t >>1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;  zp_codinh=zp;          
....................          zp_chay_p = 1;   zt_chay_t = 0x8000; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
....................  
.................... }    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //32 led: sang don  tu ngoai vao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay) 
.................... {        
....................    if(i16>0) 
....................    { 
....................       if(j16<i16) 
....................       { 
....................          zp = zp_codinh|zp_chay_t; 
....................          zt = zt_codinh|zt_chay_p; 
....................          xuat_32led_don_2word(zt,zp); 
....................          delay_chon(dl,chondelay); 
....................          zp_chay_t = zp_chay_t >>1;          
....................          zt_chay_p = zt_chay_p <<1; 
....................          j16++; 
....................       } 
....................       if (j16==i16)  
....................       { 
....................          i16--; 
....................          j16=0;          
....................          zt_codinh=zt;   
....................          zp_codinh=zp; 
....................          zp_chay_t = 0x8000;   zt_chay_p = 1; 
....................       } 
....................    } 
....................    else reset_toan_bo_bien(); 
.................... }    
....................  
.................... #include "TV_PICKIT2_SHIFT_LCD.c" 
.................... unsigned int8 lcd_control;   
.................... #bit lcd_p = lcd_control.3 
.................... #bit lcd_rs = lcd_control.2 
.................... #bit lcd_rw = lcd_control.1 
.................... #bit lcd_e  = lcd_control.0 
....................  
.................... #define lcd_function_set       0x38 
.................... #define lcd_display_control    0x0c 
.................... #define lcd_clear_display      0x01 
.................... #define lcd_entry_mode         0x06 
.................... #define lcd_shift_left         0x18 
.................... #define lcd_shift_right        0x1c 
....................  
.................... #define lcd_addr_line1         0x80 
.................... #define lcd_addr_line2         0xc0 
.................... #define lcd_addr_line3         0x94 
.................... #define lcd_addr_line4         0xd4 
....................  
.................... void lcd_xuat_8bit(int8 lcd_data_x) 
.................... { 
....................       lcd_e=1; xuat_lcd20x4(lcd_control,lcd_data_x);      
*
047A:  BSF    5E.0
047C:  MOVFF  5E,497
0480:  MOVFF  496,498
0484:  RCALL  0466
....................       lcd_e=0; xuat_lcd20x4(lcd_control,lcd_data_x);  
0486:  BCF    5E.0
0488:  MOVFF  5E,497
048C:  MOVFF  496,498
0490:  RCALL  0466
0492:  RETURN 0
.................... } 
.................... void lcd_command(int8 lcd_data_x)    
....................   { 
....................       lcd_rs = 0; 
0494:  BCF    5E.2
....................       lcd_xuat_8bit(lcd_data_x); 
0496:  MOVFF  48C,496
049A:  RCALL  047A
....................       delay_us(20); 
049C:  MOVLW  21
049E:  MOVWF  00
04A0:  DECFSZ 00,F
04A2:  BRA    04A0
04A4:  RETURN 0
....................   } 
.................... void lcd_data(int8 lcd_data_x)        
....................   { 
....................       lcd_rs = 1;      
*
05BE:  BSF    5E.2
....................       lcd_xuat_8bit(lcd_data_x); 
05C0:  MOVFF  495,496
05C4:  RCALL  047A
....................       delay_us(20); 
05C6:  MOVLW  21
05C8:  MOVWF  00
05CA:  DECFSZ 00,F
05CC:  BRA    05CA
05CE:  RETURN 0
....................   } 
....................    
.................... void setup_lcd () 
.................... {                      
....................          lcd_e  = 0;  
*
04CE:  BCF    5E.0
....................          lcd_rw = 0;  
04D0:  BCF    5E.1
....................          lcd_rs = 1;  
04D2:  BSF    5E.2
....................          lcd_p =0; 
04D4:  BCF    5E.3
....................          lcd_command(lcd_function_set);          
04D6:  MOVLW  38
04D8:  MOVLB  4
04DA:  MOVWF  x8C
04DC:  MOVLB  0
04DE:  RCALL  0494
....................          delay_us(40); 
04E0:  MOVLW  42
04E2:  MOVWF  00
04E4:  DECFSZ 00,F
04E6:  BRA    04E4
04E8:  NOP   
....................          lcd_command(lcd_display_control);    
04EA:  MOVLW  0C
04EC:  MOVLB  4
04EE:  MOVWF  x8C
04F0:  MOVLB  0
04F2:  RCALL  0494
....................          delay_us(40); 
04F4:  MOVLW  42
04F6:  MOVWF  00
04F8:  DECFSZ 00,F
04FA:  BRA    04F8
04FC:  NOP   
....................          lcd_command(lcd_clear_display);       
04FE:  MOVLW  01
0500:  MOVLB  4
0502:  MOVWF  x8C
0504:  MOVLB  0
0506:  RCALL  0494
....................          delay_ms(2); 
0508:  MOVLW  02
050A:  MOVLB  4
050C:  MOVWF  x91
050E:  MOVLB  0
0510:  RCALL  04A6
....................          lcd_command(lcd_entry_mode);        
0512:  MOVLW  06
0514:  MOVLB  4
0516:  MOVWF  x8C
0518:  MOVLB  0
051A:  RCALL  0494
....................          delay_us(40);                 
051C:  MOVLW  42
051E:  MOVWF  00
0520:  DECFSZ 00,F
0522:  BRA    0520
0524:  NOP   
0526:  GOTO   1510 (RETURN)
.................... } 
....................  
.................... const unsigned char lcd_so_x[11][6] ={ 
....................                   0,1,2,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // so 9 
....................                    
.................... const unsigned char lcd_so_xx[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,5,3,3,               // so 2 
....................                   6,6,2,3,3,4,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,4,               // so 5 
....................                   0,6,6,5,3,4,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,5,3,4,               // so 8 
....................                   0,6,2,3,3,4};             // so 9                   
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 5 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7 
....................     
.................... void lcd_goto_xy(signed int8 x, signed int8 y) 
.................... {  
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void xxx() 
.................... {  
....................    signed int8 x; 
....................    x= lcd_so_x[0][0]; 
....................    x= lcd_ma_8doan[0]; 
.................... } 
....................  
.................... #include "TV_PICKIT2_SHIFT_GLCD128X64.c" 
.................... unsigned int8 glcd_control;   
.................... #bit glcd_p    = glcd_control.5 
.................... #bit glcd_rs   = glcd_control.4 
.................... #bit glcd_rw   = glcd_control.3 
.................... #bit glcd_e    = glcd_control.2 
.................... #bit glcd_cs2  = glcd_control.1 
.................... #bit glcd_cs1  = glcd_control.0 
....................  
.................... //#define glcd_function_set       0x30 
.................... #define glcd_text_mode          0x30 
.................... #define glcd_graphic_mode       0x36  
....................  
.................... #define glcd_clear_display      0x01 
.................... #define glcd_cursor_display     0x0c 
.................... #define glcd_entry_mode         0x06 
....................  
....................  
.................... #define glcd_addr_line1         0x80 
.................... #define glcd_addr_line2         0x90 
.................... #define glcd_addr_line3         0x88 
.................... #define glcd_addr_line4         0x98 
....................  
.................... void glcd_xuat_8bit(int8 glcd_data1) 
.................... { 
....................       glcd_e=1; xuat_glcd128x64(glcd_control,glcd_data1);      
*
053E:  BSF    5F.2
0540:  MOVFF  5F,48F
0544:  MOVFF  48E,490
0548:  RCALL  052A
....................       glcd_e=0; xuat_glcd128x64(glcd_control,glcd_data1);  
054A:  BCF    5F.2
054C:  MOVFF  5F,48F
0550:  MOVFF  48E,490
0554:  RCALL  052A
0556:  GOTO   0562 (RETURN)
.................... } 
....................  
.................... void glcd_command(int8 glcd_data2)    
....................   { 
....................       glcd_rs = 0; 
055A:  BCF    5F.4
....................       glcd_xuat_8bit(glcd_data2);       
055C:  MOVFF  48D,48E
0560:  BRA    053E
0562:  RETURN 0
....................   } 
.................... void glcd_data(int8 glcd_data3)        
....................   { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(glcd_data3);      
....................   } 
....................    
....................   void glcd_data_x(int8 glcd_data3) 
.................... { 
....................       glcd_rs = 1;      
....................       glcd_xuat_8bit(0xa1); 
....................       glcd_xuat_8bit(0x40);   
.................... } 
.................... void setup_glcd (int8 glcd_function_set_mode) 
.................... {                      
....................          glcd_cs1 = 1; 
0564:  BSF    5F.0
....................          glcd_cs2 = 1; 
0566:  BSF    5F.1
....................          glcd_e  = 0; 
0568:  BCF    5F.2
....................          glcd_rw = 0;           
056A:  BCF    5F.3
....................          glcd_p =0;          
056C:  BCF    5F.5
....................          glcd_command(glcd_function_set_mode);          
056E:  MOVFF  48C,48D
0572:  RCALL  055A
....................          delay_us(10); 
0574:  MOVLW  10
0576:  MOVWF  00
0578:  DECFSZ 00,F
057A:  BRA    0578
057C:  NOP   
....................          glcd_command(glcd_cursor_display);        
057E:  MOVLW  0C
0580:  MOVLB  4
0582:  MOVWF  x8D
0584:  MOVLB  0
0586:  RCALL  055A
....................          delay_us(10);     
0588:  MOVLW  10
058A:  MOVWF  00
058C:  DECFSZ 00,F
058E:  BRA    058C
0590:  NOP   
....................          glcd_command(glcd_clear_display);       
0592:  MOVLW  01
0594:  MOVLB  4
0596:  MOVWF  x8D
0598:  MOVLB  0
059A:  RCALL  055A
....................          delay_ms(2); 
059C:  MOVLW  02
059E:  MOVLB  4
05A0:  MOVWF  x91
05A2:  MOVLB  0
05A4:  RCALL  04A6
....................          glcd_command(glcd_entry_mode);       
05A6:  MOVLW  06
05A8:  MOVLB  4
05AA:  MOVWF  x8D
05AC:  MOVLB  0
05AE:  RCALL  055A
....................          delay_us(10);                           
05B0:  MOVLW  10
05B2:  MOVWF  00
05B4:  DECFSZ 00,F
05B6:  BRA    05B4
05B8:  NOP   
05BA:  GOTO   151C (RETURN)
.................... } 
....................  
.................... #define glcd_ngang     16 //256 pixel 
.................... #define glcd_doc       32 //32 hang 
.................... #define glcd_width     128 //danh cho thu vien graphic.c 
.................... int8 doc, ngang; 
....................  
.................... typedef union  
.................... {  
....................   unsigned int16 word;  
....................   unsigned int8 nbyte[2];  
.................... } dots;  
....................  
.................... typedef struct  
.................... {  
....................   int1 refresh;  
....................   dots pixel[glcd_doc][glcd_ngang];     
....................   } gd_ram;     
....................  
.................... gd_ram gdram_vdk;  
....................  
....................  
.................... void glcd_mau_nen(int1 glcd_color)  
.................... {   
....................   int16 d;  
....................   if(glcd_color)  d=0xffff; else d=0; 
....................   for (doc=0; doc < glcd_doc; doc++)  
....................   {  
....................     for (ngang=0; ngang < glcd_ngang; ngang++)  
....................     {  
....................       gdram_vdk.pixel[doc][ngang].word = d;  
....................     }  
....................   }  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
.................... void glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b;  
....................   if(y>31){x += 128; y-= 32;};  
....................   doc = y;  
....................   ngang = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (gdram_vdk.pixel[doc][ngang].word, b);  
....................   else bit_clear (gdram_vdk.pixel[doc][ngang].word, b);  
....................   gdram_vdk.refresh = true;  
.................... }  
....................  
....................  
.................... void gdram_vdk_to_gdram_glcd_all()  
.................... {  
....................   if (gdram_vdk.refresh)  
....................   {  
....................     for (doc = 0; doc <glcd_doc; doc++)  
....................     {  
....................       glcd_command( 0x80 | doc);   // set vertical address.  
....................       glcd_command( 0x80 | 0);   // set horizontal address.  
....................  
....................       for (ngang=0; ngang <glcd_ngang; ngang++)  
....................       {  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[1]);   // write high byte.  
....................         glcd_data( gdram_vdk.pixel[doc][ngang].nbyte[0]);   // write low byte.  
....................       }  
....................     }  
....................     gdram_vdk.refresh = false;  
....................   }  
.................... }  
....................  
.................... void gdram_vdk_to_gdram_glcd_area (int8 x,int8 y,int8 rong, int8 cao) 
.................... { 
....................   int8 hesox,hesoy;  
....................   if (gdram_vdk.refresh)  
....................   {  
....................       if((x/16)!=(x + rong)/16) 
....................             rong=((rong+15)/16)+1; 
....................       else rong=((rong+15)/16);  
....................        
....................       x = x/16; 
....................       for (doc = y; doc <(y+cao); doc++)  
....................       {  
....................          if(doc>31) 
....................             {   
....................                hesox = 8+x; 
....................                hesoy = doc-32; 
....................                } 
....................          else {hesox = x; hesoy = doc;} 
....................          glcd_command( 0x80 |hesoy);    
....................          glcd_command( 0x80 |hesox);   
....................        
....................          for (ngang=hesox; ngang <(hesox+rong); ngang++)  
....................          {  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[1]);   // write high byte.  
....................             glcd_data( gdram_vdk.pixel[hesoy][ngang].nbyte[0]);   // write low byte.  
....................          }  
....................        }  
....................     gdram_vdk.refresh = false;  
....................   }       
.................... } 
....................  
....................  
.................... //!const unsigned char logo_dhspkttp []= { 0x00,0x01,0x2e,0x00,0x39,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x01,0x02,0x0c, 
.................... //!0x00,0x00,0x00,0x01,0x82,0x0c,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00, 
.................... //!0x80,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x3f,0xc0,0x00,0x00, 
.................... //!0x00,0x70,0x70,0x70,0x70,0x00,0x00,0x38,0xc8,0x18,0xe0,0x00,0x00,0x18,0xd8,0x18, 
.................... //!0xc0,0x00,0x00,0x01,0xb0,0x0c,0x00,0x00,0x00,0x01,0xa0,0x0c,0x00,0x00,0x00,0x01, 
.................... //!0x60,0x0c,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00, 
.................... //!0x00,0x31,0x00,0x04,0x00,0x00,0x00,0x79,0x80,0x0c,0xf0,0x00,0x00,0x71,0x80,0x0c, 
.................... //!0x70,0x00,0x00,0x01,0x80,0x0c,0x00,0x00,0x00,0x00,0xc0,0x18,0x00,0x00,0x00,0x00, 
.................... //!0xc0,0x18,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00, 
.................... //!0x00,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x30,0x60,0x00,0x00,0x00,0x00,0x30,0x60, 
.................... //!0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00, 
.................... //!0x3f,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00, 
.................... //!0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00,0x39,0xe0,0x00,0x00,0x00,0x00,0x07,0xe0, 
.................... //!0x00,0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,0x00,0x3e,0x60,0x00,0x00,0x00,0x00, 
.................... //!0x3d,0xe0,0x00,0x00,0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00, 
.................... //!0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
.................... //!0x00,0x00,0x00,0x00,0x00,0x00,}; 
.................... //! 
....................  
.................... const unsigned char logo_dhspkttp [] = {255,245,151,153,144,123,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,195,125,217,209,229,118,137,248,255,255,255,255,255,255,255,255,254,251,248,247,248,252,255,255,255,255,255 
.................... ,240,141, 82, 73,164,238,255,117,225,255,255,255,255,246,221,192,165,146,133,126,124,128,136,149,171,198,227,250 
.................... ,153,106,111,133,149,159,141,131,171,255,255,233,178,126, 94, 83, 84, 74, 82, 77, 82, 73, 73, 81, 75, 82, 99,135 
.................... ,216,117,147,142,181,186,135, 74,228,255,194,112, 76, 72, 72, 78,181,146,166,138,191,173,105,184,139, 69, 73, 71 
.................... ,244,130,135,210,146,218,128, 99,252,198, 94, 70, 72, 73, 72, 76,117,135,116,119,114,152,119,104,138, 82, 71, 74 
.................... ,255,124,184,174,188,197, 82,107,214,147, 71, 77,181,120,149,128,151,148,129,147,122,151,145,127,148,141,152,171 
.................... ,211, 64, 63,116,116, 68, 93,109,184,169, 72,115,184,212,214, 88,163,171,185,141,138,177,122,216,200, 99,215,228 
.................... ,128,171,163, 86,103, 85,121, 95,170,239,135,119, 78,139,141,130,128,133,109,145,105,133,137,100,124,136,120,137 
.................... ,201,109,220, 70,180,147,195,120,236,255,241,173,111, 76, 67, 68, 69, 70, 71, 69, 72, 70, 71, 70, 68, 69, 69, 80 
.................... ,255,185,143,116,187,153,109,211,255,255,255,255,237,196,154,123,103, 91, 85, 82, 82, 83, 86, 93,106,128,162,205 
.................... ,255,217, 53, 65, 80, 68,231,255,255,255,254,255,255,255,255,245,231,217,205,198,196,199,207,219,234,248,255,255 
.................... ,255,217,172,198,197, 58,178,255,255,253,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
.................... ,255,255,255,255,255,240,241,255,192,189,230,227,253,235,246,240,250,251,253,244,234,252,253,224,229,219,243,228 
.................... ,255,255,255,255,255,255,255,255,182,177,173,172,220,177,165,155,168,190,219,170,170,207,205,163,167,177,224,177 
.................... ,255,255,255,255,255,255,255,255,244,245,244,243,248,245,236,242,234,231,251,243,243,248,247,246,243,244,252,244 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,190,241,255,255 
.................... , 80,126,211,255 
.................... , 73, 73,109,222 
.................... ,142,106, 73,174 
.................... ,211, 80, 83,193 
.................... ,144,114,153,246 
.................... ,117,189,248,255 
.................... ,243,255,255,255 
.................... ,255,255,255,255 
.................... ,255,255,255,255 
.................... ,245,242,250,252 
.................... ,161,158,169,207 
.................... ,234,245,227,2412 
.................... }; 
....................  
....................  
.................... /*const unsigned char logo_dhspkttp [] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x30, 0x00, 0x7e, 0x00, 
.................... 0x00, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0x80, 
.................... 0x03, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xc0, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xe0, 
.................... 0x07, 0xc0, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x17, 0xf4, 0x00, 0x01, 0xf0, 
.................... 0x0f, 0x80, 0x00, 0x1d, 0x98, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x11, 0x8c, 0x00, 0x00, 0xf8, 
.................... 0x1f, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7c, 0x3e, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7c, 
.................... 0x3e, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1c, 0x3e, 0x3c, 0x43, 0x00, 0x31, 0x84, 0x00, 0xc3, 0x3e, 
.................... 0x7c, 0x0c, 0x00, 0x11, 0x8c, 0x00, 0x38, 0x1e, 0x7c, 0x31, 0x00, 0x1d, 0x98, 0x00, 0x86, 0x1f, 
.................... 0x78, 0xc6, 0x00, 0x1f, 0xfc, 0x00, 0x63, 0x1f, 0x78, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x0c, 0x1f, 
.................... 0xf8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xc7, 0x0f, 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8f, 
.................... 0xf8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0c, 0x0f, 0xf8, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x8f, 
.................... 0xf9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x30, 0xcf, 0xf8, 0x38, 0xf8, 0x00, 0x00, 0x1f, 0x9e, 0x0f, 
.................... 0xf8, 0xe3, 0xfe, 0x00, 0x00, 0x7f, 0xe3, 0x8f, 0xf9, 0x9f, 0xff, 0xc0, 0x03, 0xff, 0xf9, 0xcf, 
.................... 0x78, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0x78, 0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x1f, 
.................... 0x7c, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x1f, 0x7c, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x1e, 
.................... 0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x3e, 0x01, 0xcf, 0xe0, 0x07, 0xf3, 0x80, 0x3e, 
.................... 0x3e, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x7c, 0x1f, 0x01, 0xff, 0xe0, 0x03, 0xff, 0xc0, 0x7c, 
.................... 0x1f, 0x01, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0xf8, 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0xf8, 
.................... 0x0f, 0x83, 0xff, 0xc0, 0x01, 0xff, 0xc1, 0xf0, 0x07, 0xc3, 0xff, 0x80, 0x01, 0xff, 0xe3, 0xf0, 
.................... 0x03, 0xe3, 0xff, 0x80, 0x01, 0xff, 0xe7, 0xe0, 0x03, 0xf7, 0xff, 0x80, 0x00, 0xff, 0xef, 0xc0, 
.................... 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 
.................... 0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 
.................... 0x00, 0x1f, 0xff, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
.................... 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x1f, 0xff, 0x80, 0x00, 
.................... 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
.................... 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00 
.................... };*/ 
....................  
....................  
.................... void glcd_xuat_anh(int width,int height,int x,int y)  
.................... {  
....................    unsigned int i=0, j=0, k=0;  
....................    unsigned int16 count=0;  
....................    for(j=0;j<height;j++)  
....................       {     
....................          for(;i<width;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                glcd_pixel(i+x,j+y,bit_test(logo_dhspkttp[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
.................... }  
....................  
.................... #include "TV_PICKIT2_SHIFT_DS18B20.c" 
.................... #define     touch_pin pin_a5 
.................... #include    <touch.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
*
0A16:  BCF    F92.5
0A18:  BCF    F92.5
0A1A:  BCF    F89.5
....................    delay_us(14); 
0A1C:  MOVLW  17
0A1E:  MOVWF  00
0A20:  DECFSZ 00,F
0A22:  BRA    0A20
....................    TOUCH_PIN_FLOAT(); 
0A24:  BSF    F92.5
....................    delay_us(5); 
0A26:  MOVLW  08
0A28:  MOVWF  00
0A2A:  DECFSZ 00,F
0A2C:  BRA    0A2A
....................    data = TOUCH_PIN_READ(); 
0A2E:  MOVLB  4
0A30:  BCF    x8E.0
0A32:  BTFSC  F80.5
0A34:  BSF    x8E.0
....................    delay_us(100); 
0A36:  MOVLW  A6
0A38:  MOVWF  00
0A3A:  DECFSZ 00,F
0A3C:  BRA    0A3A
0A3E:  NOP   
....................  
....................    return data; 
0A40:  MOVLW  00
0A42:  BTFSC  x8E.0
0A44:  MOVLW  01
0A46:  MOVWF  01
0A48:  MOVLB  0
0A4A:  GOTO   0A5E (RETURN)
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
0A4E:  MOVLW  01
0A50:  MOVLB  4
0A52:  MOVWF  x8C
0A54:  MOVF   x8C,W
0A56:  SUBLW  08
0A58:  BNC   0A70
....................       shift_right(&data, 1, touch_read_bit()); 
0A5A:  MOVLB  0
0A5C:  BRA    0A16
0A5E:  MOVF   01,F
0A60:  BNZ   0A66
0A62:  BCF    FD8.0
0A64:  BRA    0A68
0A66:  BSF    FD8.0
0A68:  MOVLB  4
0A6A:  RRCF   x8D,F
0A6C:  INCF   x8C,F
0A6E:  BRA    0A54
....................  
....................    return data; 
0A70:  MOVFF  48D,01
0A74:  MOVLB  0
0A76:  RETURN 0
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
*
0158:  BCF    F92.5
015A:  BCF    F92.5
015C:  BCF    F89.5
....................    delay_us(10); 
015E:  MOVLW  10
0160:  MOVWF  00
0162:  DECFSZ 00,F
0164:  BRA    0162
0166:  NOP   
....................    if(data) 
0168:  MOVLB  4
016A:  MOVF   x8F,F
016C:  BZ    018A
....................    { 
....................       TOUCH_PIN_HIGH(); 
016E:  BCF    F92.5
0170:  BCF    F92.5
0172:  BSF    F89.5
....................       delay_us(10); 
0174:  MOVLW  10
0176:  MOVWF  00
0178:  DECFSZ 00,F
017A:  BRA    0178
017C:  NOP   
....................       if(!TOUCH_PIN_READ()) 
017E:  BTFSC  F80.5
0180:  BRA    0188
....................          return FALSE; 
0182:  MOVLW  00
0184:  MOVWF  01
0186:  BRA    01BE
....................    } 
0188:  BRA    01A4
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
018A:  BCF    F92.5
018C:  BCF    F92.5
018E:  BCF    F89.5
....................       delay_us(10); 
0190:  MOVLW  10
0192:  MOVWF  00
0194:  DECFSZ 00,F
0196:  BRA    0194
0198:  NOP   
....................       if(TOUCH_PIN_READ()) 
019A:  BTFSS  F80.5
019C:  BRA    01A4
....................          return FALSE; 
019E:  MOVLW  00
01A0:  MOVWF  01
01A2:  BRA    01BE
....................    } 
....................    delay_us(50); 
01A4:  MOVLW  53
01A6:  MOVWF  00
01A8:  DECFSZ 00,F
01AA:  BRA    01A8
....................    TOUCH_PIN_HIGH(); 
01AC:  BCF    F92.5
01AE:  BCF    F92.5
01B0:  BSF    F89.5
....................    delay_us(50); 
01B2:  MOVLW  53
01B4:  MOVWF  00
01B6:  DECFSZ 00,F
01B8:  BRA    01B6
....................    return TRUE; 
01BA:  MOVLW  01
01BC:  MOVWF  01
01BE:  MOVLB  0
01C0:  GOTO   01E2 (RETURN)
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
01C4:  MOVLW  01
01C6:  MOVLB  4
01C8:  MOVWF  x8D
01CA:  MOVF   x8D,W
01CC:  SUBLW  08
01CE:  BNC   01F2
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
01D0:  BCF    FD8.0
01D2:  RRCF   x8C,F
01D4:  MOVLW  00
01D6:  BTFSC  FD8.0
01D8:  MOVLW  01
01DA:  MOVWF  x8E
01DC:  MOVWF  x8F
01DE:  MOVLB  0
01E0:  BRA    0158
01E2:  MOVF   01,F
01E4:  BNZ   01EC
....................          return FALSE; 
01E6:  MOVLW  00
01E8:  MOVWF  01
01EA:  BRA    01F8
01EC:  MOVLB  4
01EE:  INCF   x8D,F
01F0:  BRA    01CA
....................  
....................    return TRUE; 
01F2:  MOVLW  01
01F4:  MOVWF  01
01F6:  MOVLB  0
01F8:  RETURN 0
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
*
0106:  BCF    F92.5
0108:  BCF    F92.5
010A:  BCF    F89.5
....................    delay_us(500); 
010C:  MOVLW  02
010E:  MOVLB  4
0110:  MOVWF  x8D
0112:  MOVLW  F9
0114:  MOVWF  x8E
0116:  MOVLB  0
0118:  RCALL  00E6
011A:  MOVLB  4
011C:  DECFSZ x8D,F
011E:  BRA    0112
....................    TOUCH_PIN_FLOAT(); 
0120:  BSF    F92.5
....................    delay_us(5); 
0122:  MOVLW  08
0124:  MOVWF  00
0126:  DECFSZ 00,F
0128:  BRA    0126
....................  
....................    if(!TOUCH_PIN_READ()) 
012A:  BTFSC  F80.5
012C:  BRA    0134
....................       return FALSE; 
012E:  MOVLW  00
0130:  MOVWF  01
0132:  BRA    0154
....................  
....................    delay_us(65); 
0134:  MOVLW  6C
0136:  MOVWF  00
0138:  DECFSZ 00,F
013A:  BRA    0138
....................    present = !TOUCH_PIN_READ(); 
013C:  BCF    x8C.0
013E:  BTFSS  F80.5
0140:  BSF    x8C.0
....................    delay_us(240); 
0142:  MOVLW  F0
0144:  MOVWF  x8E
0146:  MOVLB  0
0148:  RCALL  00E6
....................    return present; 
014A:  MOVLW  00
014C:  MOVLB  4
014E:  BTFSC  x8C.0
0150:  MOVLW  01
0152:  MOVWF  01
0154:  MOVLB  0
0156:  RETURN 0
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define       skip_rom              0xcc 
.................... #define       convert_t             0x44 
.................... #define       read_scratchpad       0xbe 
.................... #define       write_scratchpad      0x4e 
.................... #define       copy_scratchpad       0x48     
.................... unsigned int8     ds18al, ds18ah, ds18a_tam; 
.................... unsigned int16    ds18a; 
.................... void  khoi_tao_ds18b20() 
.................... {                          
....................       touch_present(); 
*
01FA:  RCALL  0106
....................       touch_write_byte(skip_rom);       
01FC:  MOVLW  CC
01FE:  MOVLB  4
0200:  MOVWF  x8C
0202:  MOVLB  0
0204:  RCALL  01C4
....................       touch_write_byte(write_scratchpad);     
0206:  MOVLW  4E
0208:  MOVLB  4
020A:  MOVWF  x8C
020C:  MOVLB  0
020E:  RCALL  01C4
....................       touch_write_byte(0x0);       // ghi 2 byte rong 
0210:  MOVLB  4
0212:  CLRF   x8C
0214:  MOVLB  0
0216:  RCALL  01C4
....................       touch_write_byte(0x0);       // 
0218:  MOVLB  4
021A:  CLRF   x8C
021C:  MOVLB  0
021E:  RCALL  01C4
....................       touch_write_byte(0x1f);      //cau hinh do phan giai 9 bit 
0220:  MOVLW  1F
0222:  MOVLB  4
0224:  MOVWF  x8C
0226:  MOVLB  0
0228:  RCALL  01C4
....................  
....................       touch_present(); 
022A:  RCALL  0106
....................       touch_write_byte(skip_rom);       
022C:  MOVLW  CC
022E:  MOVLB  4
0230:  MOVWF  x8C
0232:  MOVLB  0
0234:  RCALL  01C4
....................       touch_write_byte(copy_scratchpad);  
0236:  MOVLW  48
0238:  MOVLB  4
023A:  MOVWF  x8C
023C:  MOVLB  0
023E:  RCALL  01C4
0240:  GOTO   14FE (RETURN)
.................... } 
.................... void  doc_giatri_ds18b20() 
.................... {  
....................       touch_write_byte(skip_rom); 
*
0A78:  MOVLW  CC
0A7A:  MOVLB  4
0A7C:  MOVWF  x8C
0A7E:  MOVLB  0
0A80:  CALL   01C4
....................       touch_write_byte (convert_t);    
0A84:  MOVLW  44
0A86:  MOVLB  4
0A88:  MOVWF  x8C
0A8A:  MOVLB  0
0A8C:  CALL   01C4
....................       touch_present(); 
0A90:  CALL   0106
....................       touch_write_byte(skip_rom); 
0A94:  MOVLW  CC
0A96:  MOVLB  4
0A98:  MOVWF  x8C
0A9A:  MOVLB  0
0A9C:  CALL   01C4
....................       touch_write_byte(read_scratchpad);   
0AA0:  MOVLW  BE
0AA2:  MOVLB  4
0AA4:  MOVWF  x8C
0AA6:  MOVLB  0
0AA8:  CALL   01C4
....................       ds18al = touch_read_byte(); 
0AAC:  RCALL  0A4E
0AAE:  MOVFF  01,463
....................       ds18ah = touch_read_byte();       
0AB2:  RCALL  0A4E
0AB4:  MOVFF  01,464
....................       ds18a   =  make16(ds18ah,ds18al);         
0AB8:  MOVFF  464,467
0ABC:  MOVFF  463,466
0AC0:  GOTO   0ACE (RETURN)
.................... } 
....................              
....................  
....................  
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... const unsigned char hang2[] = {0x11,0xE,0,0,0,0,0,0x1F,0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0x1F,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1F}; 
....................  
.................... unsigned int8 you = 33; 
.................... signed int8 giay,bdn,phut,gio; 
.................... int8 dem = 0; 
.................... int16 lm35a = 0,lm35b = 0; 
.................... int1 ttqn = 0; 
.................... signed int8 max = 100,D,C,E; 
.................... int8 maxT = 40; 
.................... unsigned int8 count = 0,countT = 0,temp; 
.................... unsigned int8 donvi = 0, j; 
.................... unsigned int16 kqadc; 
.................... float k_cach, clk_cach, kcs; 
....................  
.................... /*#int_timer1 
.................... void interrupt_timer1(){ 
....................    bdn++; 
....................    set_timer1(3036); //3036 
.................... }*/ 
....................  
....................  
.................... void BaoChay(){ 
....................    if (ds18a > 35){ 
....................       triac_2_off(); 
....................       xuat_4led_7doan_4so(ma7doan[3],ma7doan[5],ma7doan[temp/10],ma7doan[temp%10]); 
....................       you = 35; 
....................    } 
....................    if (ds18a <= 33){ 
....................       triac_2_on(); 
....................       you = 33; 
....................       xuat_4led_7doan_4so(ma7doan[3],ma7doan[3],ma7doan[temp/10],ma7doan[temp%10]); 
....................    } 
.................... } 
....................  
.................... void LCD_SO_LON(signed int8 lcd_so,x1,y1){ 
....................    lcd_goto_xy(x1,y1); 
....................    for (int i = 0; i<6;i++){ 
....................       if(i==3) lcd_goto_xy(x1+1,y1); 
....................       lcd_data(lcd_so_x[lcd_so][i]); 
....................    } 
.................... } 
....................  
.................... void giai_ma(){ 
....................    led_7dq[0] = ma7doan[giay%10]; 
*
0742:  MOVFF  469,48C
0746:  MOVLW  0A
0748:  MOVLB  4
074A:  MOVWF  x8D
074C:  MOVLB  0
074E:  RCALL  05D0
0750:  CLRF   03
0752:  MOVF   00,W
0754:  RCALL  0004
0756:  MOVWF  11
....................    led_7dq[1] = ma7doan[giay/10]; 
0758:  MOVFF  469,48C
075C:  MOVLW  0A
075E:  MOVLB  4
0760:  MOVWF  x8D
0762:  MOVLB  0
0764:  RCALL  05D0
0766:  CLRF   03
0768:  MOVF   01,W
076A:  RCALL  0004
076C:  MOVWF  12
....................    led_7dq[3] = ma7doan[phut%10]; 
076E:  MOVFF  46B,48C
0772:  MOVLW  0A
0774:  MOVLB  4
0776:  MOVWF  x8D
0778:  MOVLB  0
077A:  RCALL  05D0
077C:  CLRF   03
077E:  MOVF   00,W
0780:  RCALL  0004
0782:  MOVWF  14
....................    led_7dq[4] = ma7doan[phut/10]; 
0784:  MOVFF  46B,48C
0788:  MOVLW  0A
078A:  MOVLB  4
078C:  MOVWF  x8D
078E:  MOVLB  0
0790:  RCALL  05D0
0792:  CLRF   03
0794:  MOVF   01,W
0796:  RCALL  0004
0798:  MOVWF  15
....................    led_7dq[6] = ma7doan[gio%10]; 
079A:  MOVFF  46C,48C
079E:  MOVLW  0A
07A0:  MOVLB  4
07A2:  MOVWF  x8D
07A4:  MOVLB  0
07A6:  RCALL  05D0
07A8:  CLRF   03
07AA:  MOVF   00,W
07AC:  RCALL  0004
07AE:  MOVWF  17
....................    led_7dq[7] = ma7doan[gio/10]; 
07B0:  MOVFF  46C,48C
07B4:  MOVLW  0A
07B6:  MOVLB  4
07B8:  MOVWF  x8D
07BA:  MOVLB  0
07BC:  RCALL  05D0
07BE:  CLRF   03
07C0:  MOVF   01,W
07C2:  RCALL  0004
07C4:  MOVWF  18
....................    lcd_command(lcd_addr_line1); 
07C6:  MOVLW  80
07C8:  MOVLB  4
07CA:  MOVWF  x8C
07CC:  MOVLB  0
07CE:  RCALL  0494
....................    printf(lcd_data,"NHIET DO LM35B: %ld",lm35a); 
07D0:  MOVLW  8E
07D2:  MOVWF  FF6
07D4:  MOVLW  00
07D6:  MOVWF  FF7
07D8:  MOVLW  10
07DA:  MOVLB  4
07DC:  MOVWF  x8C
07DE:  MOVLB  0
07E0:  RCALL  061C
07E2:  MOVLW  10
07E4:  MOVWF  FE9
07E6:  MOVFF  46F,48D
07EA:  MOVFF  46E,48C
07EE:  RCALL  0644
....................    lcd_command(lcd_addr_line2); 
07F0:  MOVLW  C0
07F2:  MOVLB  4
07F4:  MOVWF  x8C
07F6:  MOVLB  0
07F8:  RCALL  0494
....................    printf(lcd_data,"NHIET DO LM35A: %ld",lm35b); 
07FA:  MOVLW  A2
07FC:  MOVWF  FF6
07FE:  MOVLW  00
0800:  MOVWF  FF7
0802:  MOVLW  10
0804:  MOVLB  4
0806:  MOVWF  x8C
0808:  MOVLB  0
080A:  RCALL  061C
080C:  MOVLW  10
080E:  MOVWF  FE9
0810:  MOVFF  471,48D
0814:  MOVFF  470,48C
0818:  RCALL  0644
081A:  RETURN 0
.................... } 
....................  
.................... /*void LCD_DISPLAY_COUNTER(){ 
....................    unsigned int8 DM = (unsigned int8)kcs; 
....................    D = DM/100; 
....................    C = DM/10%10; 
....................    E = DM%10; 
....................    LCD_SO_LON(D,2,0); 
....................    LCD_SO_LON(C,2,3); 
....................    LCD_SO_LON(E,2,7); 
.................... }*/ 
....................  
.................... void LCD_DISPLAY_COUNTER(){ 
....................    lcd_command(lcd_addr_line3); 
*
09E8:  MOVLW  94
09EA:  MOVLB  4
09EC:  MOVWF  x8C
09EE:  MOVLB  0
09F0:  RCALL  0494
....................    printf(lcd_data,"DEM SAN PHAM: %d",count); 
09F2:  MOVLW  B6
09F4:  MOVWF  FF6
09F6:  MOVLW  00
09F8:  MOVWF  FF7
09FA:  MOVLW  0E
09FC:  MOVLB  4
09FE:  MOVWF  x8C
0A00:  MOVLB  0
0A02:  RCALL  061C
0A04:  MOVFF  478,48C
0A08:  MOVLW  18
0A0A:  MOVLB  4
0A0C:  MOVWF  x8D
0A0E:  MOVLB  0
0A10:  BRA    092A
0A12:  GOTO   15BA (RETURN)
.................... } 
....................  
.................... void read_temp(){ 
....................    set_adc_channel(0);  
*
0D40:  MOVLW  00
0D42:  MOVWF  01
0D44:  MOVF   FC2,W
0D46:  ANDLW  C3
0D48:  IORWF  01,W
0D4A:  MOVWF  FC2
....................    lm35a = read_adc()/2.046; 
0D4C:  BSF    FC2.1
0D4E:  BTFSC  FC2.1
0D50:  BRA    0D4E
0D52:  MOVFF  FC4,48D
0D56:  MOVFF  FC3,48C
0D5A:  MOVFF  FC4,48F
0D5E:  MOVFF  FC3,48E
0D62:  MOVLB  0
0D64:  RCALL  0B70
0D66:  MOVFF  03,491
0D6A:  MOVFF  02,490
0D6E:  MOVFF  01,48F
0D72:  MOVFF  00,48E
0D76:  MOVLW  AA
0D78:  MOVLB  4
0D7A:  MOVWF  x95
0D7C:  MOVLW  F1
0D7E:  MOVWF  x94
0D80:  MOVLW  02
0D82:  MOVWF  x93
0D84:  MOVLW  80
0D86:  MOVWF  x92
0D88:  MOVLB  0
0D8A:  RCALL  0BA6
0D8C:  MOVFF  03,48F
0D90:  MOVFF  02,48E
0D94:  MOVFF  01,48D
0D98:  MOVFF  00,48C
0D9C:  RCALL  0D04
0D9E:  MOVFF  02,46F
0DA2:  MOVFF  01,46E
....................    set_adc_channel(1); 
0DA6:  MOVLW  04
0DA8:  MOVWF  01
0DAA:  MOVF   FC2,W
0DAC:  ANDLW  C3
0DAE:  IORWF  01,W
0DB0:  MOVWF  FC2
....................    lm35b = read_adc()/2.046; 
0DB2:  BSF    FC2.1
0DB4:  BTFSC  FC2.1
0DB6:  BRA    0DB4
0DB8:  MOVFF  FC4,48D
0DBC:  MOVFF  FC3,48C
0DC0:  MOVFF  FC4,48F
0DC4:  MOVFF  FC3,48E
0DC8:  MOVLB  0
0DCA:  RCALL  0B70
0DCC:  MOVFF  03,491
0DD0:  MOVFF  02,490
0DD4:  MOVFF  01,48F
0DD8:  MOVFF  00,48E
0DDC:  MOVLW  AA
0DDE:  MOVLB  4
0DE0:  MOVWF  x95
0DE2:  MOVLW  F1
0DE4:  MOVWF  x94
0DE6:  MOVLW  02
0DE8:  MOVWF  x93
0DEA:  MOVLW  80
0DEC:  MOVWF  x92
0DEE:  MOVLB  0
0DF0:  RCALL  0BA6
0DF2:  MOVFF  03,48F
0DF6:  MOVFF  02,48E
0DFA:  MOVFF  01,48D
0DFE:  MOVFF  00,48C
0E02:  RCALL  0D04
0E04:  MOVFF  02,471
0E08:  MOVFF  01,470
0E0C:  GOTO   165A (RETURN)
.................... } 
....................  
.................... void phim_up() { 
....................    if (!input(up)) { 
0E10:  BSF    F93.5
0E12:  BTFSC  F81.5
0E14:  BRA    0ED2
....................       delay_ms(5); 
0E16:  MOVLW  05
0E18:  MOVLB  4
0E1A:  MOVWF  x91
0E1C:  MOVLB  0
0E1E:  CALL   04A6
....................       if (!input(up)) 
0E22:  BSF    F93.5
0E24:  BTFSC  F81.5
0E26:  BRA    0ED2
....................       { 
....................          maxT++; 
0E28:  MOVLB  4
0E2A:  INCF   x77,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
0E2C:  MOVFF  477,492
0E30:  MOVLW  0A
0E32:  MOVWF  x93
0E34:  MOVLB  0
0E36:  RCALL  08FE
0E38:  CLRF   03
0E3A:  MOVF   01,W
0E3C:  CALL   0004
0E40:  MOVLB  4
0E42:  MOVWF  x8C
0E44:  MOVFF  477,492
0E48:  MOVLW  0A
0E4A:  MOVWF  x93
0E4C:  MOVLB  0
0E4E:  RCALL  08FE
0E50:  CLRF   03
0E52:  MOVF   00,W
0E54:  CALL   0004
0E58:  MOVLB  4
0E5A:  MOVWF  x8D
0E5C:  MOVFF  46F,492
0E60:  MOVFF  46E,491
0E64:  CLRF   x94
0E66:  MOVLW  0A
0E68:  MOVWF  x93
0E6A:  MOVLB  0
0E6C:  CALL   0244
0E70:  MOVFF  02,48F
0E74:  MOVFF  01,48E
0E78:  MOVFF  02,03
0E7C:  MOVLB  4
0E7E:  MOVF   01,W
0E80:  MOVLB  0
0E82:  CALL   0004
0E86:  MOVLB  4
0E88:  MOVWF  x90
0E8A:  MOVFF  46F,492
0E8E:  MOVFF  46E,491
0E92:  CLRF   x94
0E94:  MOVLW  0A
0E96:  MOVWF  x93
0E98:  MOVLB  0
0E9A:  CALL   0244
0E9E:  MOVFF  00,491
0EA2:  MOVLB  4
0EA4:  MOVFF  03,492
0EA8:  MOVFF  03,03
0EAC:  MOVF   00,W
0EAE:  MOVLB  0
0EB0:  CALL   0004
0EB4:  MOVLB  4
0EB6:  MOVWF  x93
0EB8:  MOVFF  48C,494
0EBC:  MOVFF  48D,495
0EC0:  MOVFF  490,496
0EC4:  MOVWF  x97
0EC6:  MOVLB  0
0EC8:  CALL   02E6
....................          while(!input(up)); 
0ECC:  BSF    F93.5
0ECE:  BTFSS  F81.5
0ED0:  BRA    0ECC
....................       } 
....................    } 
0ED2:  GOTO   165E (RETURN)
.................... } 
.................... void phim_dw() { 
....................    if (!input(dw)) { 
0ED6:  BSF    F93.4
0ED8:  BTFSC  F81.4
0EDA:  BRA    0F98
....................       delay_ms(5); 
0EDC:  MOVLW  05
0EDE:  MOVLB  4
0EE0:  MOVWF  x91
0EE2:  MOVLB  0
0EE4:  CALL   04A6
....................       if (!input(dw)) 
0EE8:  BSF    F93.4
0EEA:  BTFSC  F81.4
0EEC:  BRA    0F98
....................       { 
....................          maxT--; 
0EEE:  MOVLB  4
0EF0:  DECF   x77,F
....................          xuat_4led_7doan_4so(ma7doan[maxT/10],ma7doan[maxT%10],ma7doan[lm35a/10],ma7doan[lm35a%10]); 
0EF2:  MOVFF  477,492
0EF6:  MOVLW  0A
0EF8:  MOVWF  x93
0EFA:  MOVLB  0
0EFC:  RCALL  08FE
0EFE:  CLRF   03
0F00:  MOVF   01,W
0F02:  CALL   0004
0F06:  MOVLB  4
0F08:  MOVWF  x8C
0F0A:  MOVFF  477,492
0F0E:  MOVLW  0A
0F10:  MOVWF  x93
0F12:  MOVLB  0
0F14:  RCALL  08FE
0F16:  CLRF   03
0F18:  MOVF   00,W
0F1A:  CALL   0004
0F1E:  MOVLB  4
0F20:  MOVWF  x8D
0F22:  MOVFF  46F,492
0F26:  MOVFF  46E,491
0F2A:  CLRF   x94
0F2C:  MOVLW  0A
0F2E:  MOVWF  x93
0F30:  MOVLB  0
0F32:  CALL   0244
0F36:  MOVFF  02,48F
0F3A:  MOVFF  01,48E
0F3E:  MOVFF  02,03
0F42:  MOVLB  4
0F44:  MOVF   01,W
0F46:  MOVLB  0
0F48:  CALL   0004
0F4C:  MOVLB  4
0F4E:  MOVWF  x90
0F50:  MOVFF  46F,492
0F54:  MOVFF  46E,491
0F58:  CLRF   x94
0F5A:  MOVLW  0A
0F5C:  MOVWF  x93
0F5E:  MOVLB  0
0F60:  CALL   0244
0F64:  MOVFF  00,491
0F68:  MOVLB  4
0F6A:  MOVFF  03,492
0F6E:  MOVFF  03,03
0F72:  MOVF   00,W
0F74:  MOVLB  0
0F76:  CALL   0004
0F7A:  MOVLB  4
0F7C:  MOVWF  x93
0F7E:  MOVFF  48C,494
0F82:  MOVFF  48D,495
0F86:  MOVFF  490,496
0F8A:  MOVWF  x97
0F8C:  MOVLB  0
0F8E:  CALL   02E6
....................          while (!input(dw)); 
0F92:  BSF    F93.4
0F94:  BTFSS  F81.4
0F96:  BRA    0F92
....................       } 
....................    } 
0F98:  GOTO   1660 (RETURN)
.................... } 
....................  
.................... void dispDistance(float tam){ 
....................  
.................... } 
....................  
.................... void readSR_04() { 
....................    set_timer1(0); 
....................    delay_ms(10); 
....................    output_high(trigger); 
....................    delay_ms(15); 
....................    output_low(trigger); 
....................  
....................    while (!(input(echo))); 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_4); 
....................  
....................    while(input(echo)); 
....................    kcs = get_timer1(); 
....................    set_timer1(T1_DISABLED); 
....................    set_timer1(0); 
....................    kcs = kcs*0.8; 
....................    kcs = (kcs/58); 
....................  
....................    dispDistance(kcs); 
.................... } 
....................  
.................... void readGP2D12() { 
....................    set_adc_channel(2); 
....................    kqadc = 0; 
....................    for (j = 0; j<30; j++){ 
....................       kqadc = kqadc + read_adc(); 
....................       delay_quet_8led(1); 
....................    } 
....................    kqadc = kqadc /30; 
....................    k_cach = pow(4277/kqadc,1.106); 
....................    if (k_cach >80) k_cach = 80; 
.................... } 
....................  
.................... void readDS() { 
....................       if(touch_present()) {doc_giatri_ds18b20();} 
*
0AC4:  CALL   0106
0AC8:  MOVF   01,F
0ACA:  BTFSS  FD8.2
0ACC:  BRA    0A78
....................       if (ds18al != ds18a_tam) { 
0ACE:  MOVLB  4
0AD0:  MOVF   x65,W
0AD2:  SUBWF  x63,W
0AD4:  BZ    0B6A
....................          ds18a_tam = ds18al; 
0AD6:  MOVFF  463,465
....................          ds18a = ds18a>>4; 
0ADA:  RRCF   x67,F
0ADC:  RRCF   x66,F
0ADE:  RRCF   x67,F
0AE0:  RRCF   x66,F
0AE2:  RRCF   x67,F
0AE4:  RRCF   x66,F
0AE6:  RRCF   x67,F
0AE8:  RRCF   x66,F
0AEA:  MOVLW  0F
0AEC:  ANDWF  x67,F
....................          ds18a = ds18a & 0x0ff; 
0AEE:  CLRF   x67
....................          temp = ds18a; 
0AF0:  MOVFF  466,47A
....................          xuat_4led_7doan_4so(ma7doan[temp/10],ma7doan[temp%10],ma7doan[count/10],ma7doan[count%10]); 
0AF4:  MOVFF  47A,492
0AF8:  MOVLW  0A
0AFA:  MOVWF  x93
0AFC:  MOVLB  0
0AFE:  RCALL  08FE
0B00:  CLRF   03
0B02:  MOVF   01,W
0B04:  CALL   0004
0B08:  MOVLB  4
0B0A:  MOVWF  x8C
0B0C:  MOVFF  47A,492
0B10:  MOVLW  0A
0B12:  MOVWF  x93
0B14:  MOVLB  0
0B16:  RCALL  08FE
0B18:  CLRF   03
0B1A:  MOVF   00,W
0B1C:  CALL   0004
0B20:  MOVLB  4
0B22:  MOVWF  x8D
0B24:  MOVFF  478,492
0B28:  MOVLW  0A
0B2A:  MOVWF  x93
0B2C:  MOVLB  0
0B2E:  RCALL  08FE
0B30:  CLRF   03
0B32:  MOVF   01,W
0B34:  CALL   0004
0B38:  MOVLB  4
0B3A:  MOVWF  x8E
0B3C:  MOVFF  478,492
0B40:  MOVLW  0A
0B42:  MOVWF  x93
0B44:  MOVLB  0
0B46:  RCALL  08FE
0B48:  CLRF   03
0B4A:  MOVF   00,W
0B4C:  CALL   0004
0B50:  MOVLB  4
0B52:  MOVWF  x8F
0B54:  MOVFF  48C,494
0B58:  MOVFF  48D,495
0B5C:  MOVFF  48E,496
0B60:  MOVWF  x97
0B62:  MOVLB  0
0B64:  CALL   02E6
0B68:  MOVLB  4
....................       } 
0B6A:  MOVLB  0
0B6C:  GOTO   1656 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
13FA:  CLRF   FF8
13FC:  BCF    FD0.7
13FE:  BSF    F93.1
1400:  BSF    F93.0
1402:  MOVLW  31
1404:  MOVWF  FC8
1406:  MOVLW  28
1408:  MOVWF  FC6
140A:  BSF    FC7.7
140C:  BCF    FC7.6
140E:  CLRF   06
1410:  CLRF   0D
1412:  CLRF   0E
1414:  CLRF   0F
1416:  CLRF   10
1418:  CLRF   19
141A:  CLRF   1A
141C:  CLRF   1B
141E:  CLRF   1F
1420:  CLRF   1E
1422:  CLRF   1D
1424:  CLRF   1C
1426:  CLRF   23
1428:  CLRF   22
142A:  CLRF   21
142C:  MOVLW  01
142E:  MOVWF  20
1430:  MOVLW  80
1432:  MOVWF  27
1434:  CLRF   26
1436:  CLRF   25
1438:  CLRF   24
143A:  CLRF   2B
143C:  CLRF   2A
143E:  CLRF   29
1440:  CLRF   28
1442:  MOVWF  2F
1444:  CLRF   2E
1446:  CLRF   31
1448:  MOVLW  01
144A:  MOVWF  30
144C:  CLRF   33
144E:  CLRF   32
1450:  MOVLW  80
1452:  MOVWF  37
1454:  CLRF   36
1456:  CLRF   39
1458:  MOVLW  01
145A:  MOVWF  38
145C:  CLRF   3B
145E:  CLRF   3A
1460:  CLRF   3D
1462:  CLRF   3C
1464:  CLRF   3E
1466:  MOVLW  20
1468:  MOVWF  3F
146A:  CLRF   40
146C:  MOVLW  01
146E:  MOVWF  41
1470:  MOVLW  10
1472:  MOVWF  42
1474:  CLRF   43
1476:  CLRF   47
1478:  CLRF   46
147A:  CLRF   45
147C:  MOVLW  01
147E:  MOVWF  44
1480:  CLRF   4B
1482:  CLRF   4A
1484:  CLRF   49
1486:  MOVWF  48
1488:  SETF   4F
148A:  SETF   4E
148C:  SETF   4D
148E:  MOVLW  FE
1490:  MOVWF  4C
1492:  MOVLW  80
1494:  MOVWF  53
1496:  CLRF   52
1498:  CLRF   51
149A:  CLRF   50
149C:  MOVWF  57
149E:  CLRF   56
14A0:  CLRF   55
14A2:  CLRF   54
14A4:  MOVLW  7F
14A6:  MOVWF  5B
14A8:  SETF   5A
14AA:  SETF   59
14AC:  SETF   58
14AE:  MOVLW  01
14B0:  MOVWF  5C
14B2:  MOVWF  5D
14B4:  MOVLW  21
14B6:  MOVLB  4
14B8:  MOVWF  x68
14BA:  CLRF   x6D
14BC:  CLRF   x6F
14BE:  CLRF   x6E
14C0:  CLRF   x71
14C2:  CLRF   x70
14C4:  BCF    x72.0
14C6:  MOVLW  64
14C8:  MOVWF  x73
14CA:  MOVLW  28
14CC:  MOVWF  x77
14CE:  CLRF   x78
14D0:  CLRF   x79
14D2:  CLRF   x7B
14D4:  MOVF   FC1,W
14D6:  ANDLW  C0
14D8:  IORLW  0F
14DA:  MOVWF  FC1
14DC:  MOVLW  07
14DE:  MOVWF  FB4
14E0:  SETF   11
14E2:  SETF   12
14E4:  SETF   13
14E6:  SETF   14
14E8:  SETF   15
14EA:  SETF   16
14EC:  SETF   17
14EE:  SETF   18
.................... { 
....................    set_up_port_ic_chot(); 
14F0:  MOVLB  0
14F2:  GOTO   00C8
....................    set_tris_b(0x3c); 
14F6:  MOVLW  3C
14F8:  MOVWF  F93
....................    khoi_tao_ds18b20(); 
14FA:  GOTO   01FA
....................    ds18a_tam = 0; 
14FE:  MOVLB  4
1500:  CLRF   x65
....................    xuat_4led_7doan_giaima_xoa_so0(0); 
1502:  CLRF   x8D
1504:  CLRF   x8C
1506:  MOVLB  0
1508:  GOTO   0310
....................    setup_lcd(); 
150C:  GOTO   04CE
....................    setup_glcd(glcd_graphic_mode); 
1510:  MOVLW  36
1512:  MOVLB  4
1514:  MOVWF  x8C
1516:  MOVLB  0
1518:  GOTO   0564
....................  
....................  
....................  
....................    lcd_command(0x40); 
151C:  MOVLW  40
151E:  MOVLB  4
1520:  MOVWF  x8C
1522:  MOVLB  0
1524:  CALL   0494
....................    for (int i = 0; i<64;i++){ 
1528:  MOVLB  4
152A:  CLRF   x8B
152C:  MOVF   x8B,W
152E:  SUBLW  3F
1530:  BNC   154E
....................       lcd_data(lcd_ma_8doan[i]); 
1532:  CLRF   03
1534:  MOVF   x8B,W
1536:  MOVLB  0
1538:  CALL   003E
153C:  MOVLB  4
153E:  MOVWF  x8C
1540:  MOVWF  x95
1542:  MOVLB  0
1544:  CALL   05BE
1548:  MOVLB  4
154A:  INCF   x8B,F
154C:  BRA    152C
....................    } 
....................  
....................  
....................    setup_adc(ADC_CLOCK_DIV_32); 
154E:  MOVF   FC0,W
1550:  ANDLW  C0
1552:  IORLW  02
1554:  MOVWF  FC0
1556:  BSF    FC0.7
1558:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN2|VSS_VDD); 
155A:  MOVF   FC1,W
155C:  ANDLW  C0
155E:  IORLW  0C
1560:  MOVWF  FC1
....................    set_adc_channel(2); 
1562:  MOVLW  08
1564:  MOVWF  01
1566:  MOVF   FC2,W
1568:  ANDLW  C3
156A:  IORWF  01,W
156C:  MOVWF  FC2
....................    setup_timer_0(T0_EXT_L_TO_H|T0_DIV_1); 
156E:  MOVLW  A8
1570:  MOVWF  FD5
....................    set_timer0(0);    
1572:  CLRF   FD7
1574:  CLRF   FD6
....................    setup_timer_1(T1_DISABLED); 
1576:  CLRF   FCD
....................    //set_timer1(3036); // 3036 
....................    enable_interrupts(GLOBAL); 
1578:  MOVLW  C0
157A:  IORWF  FF2,F
....................    enable_interrupts(INT_TIMER1); 
157C:  BSF    F9D.0
....................  
....................  
....................    giay = 0; 
157E:  CLRF   x69
....................    bdn = 0; 
1580:  CLRF   x6A
....................    phut = 29; 
1582:  MOVLW  1D
1584:  MOVWF  x6B
....................    gio = 15; 
1586:  MOVLW  0F
1588:  MOVWF  x6C
....................    giai_ma(); 
158A:  MOVLB  0
158C:  CALL   0742
....................    while(TRUE) 
....................    { 
....................       if (bdn<10) { 
1590:  MOVLB  4
1592:  BTFSC  x6A.7
1594:  BRA    159E
1596:  MOVF   x6A,W
1598:  SUBLW  09
159A:  BTFSS  FD8.0
159C:  BRA    179E
....................          hien_thi_8led_7doan_quet_all();      
159E:  MOVLB  0
15A0:  CALL   08CC
....................          count = get_timer0(); 
15A4:  MOVF   FD6,W
15A6:  MOVLB  4
15A8:  MOVWF  x78
....................          if (count != countT) { 
15AA:  MOVF   x79,W
15AC:  SUBWF  x78,W
15AE:  BZ    1650
....................             countT = count; 
15B0:  MOVFF  478,479
....................             LCD_DISPLAY_COUNTER(); 
15B4:  MOVLB  0
15B6:  GOTO   09E8
....................             xuat_4led_7doan_4so(ma7doan[temp/10],ma7doan[temp%10],ma7doan[count/10],ma7doan[count%10]);          
15BA:  MOVFF  47A,492
15BE:  MOVLW  0A
15C0:  MOVLB  4
15C2:  MOVWF  x93
15C4:  MOVLB  0
15C6:  CALL   08FE
15CA:  CLRF   03
15CC:  MOVF   01,W
15CE:  CALL   0004
15D2:  MOVLB  4
15D4:  MOVWF  x8C
15D6:  MOVFF  47A,492
15DA:  MOVLW  0A
15DC:  MOVWF  x93
15DE:  MOVLB  0
15E0:  CALL   08FE
15E4:  CLRF   03
15E6:  MOVF   00,W
15E8:  CALL   0004
15EC:  MOVLB  4
15EE:  MOVWF  x8D
15F0:  MOVFF  478,492
15F4:  MOVLW  0A
15F6:  MOVWF  x93
15F8:  MOVLB  0
15FA:  CALL   08FE
15FE:  CLRF   03
1600:  MOVF   01,W
1602:  CALL   0004
1606:  MOVLB  4
1608:  MOVWF  x8E
160A:  MOVFF  478,492
160E:  MOVLW  0A
1610:  MOVWF  x93
1612:  MOVLB  0
1614:  CALL   08FE
1618:  CLRF   03
161A:  MOVF   00,W
161C:  CALL   0004
1620:  MOVLB  4
1622:  MOVWF  x8F
1624:  MOVFF  48C,494
1628:  MOVFF  48D,495
162C:  MOVFF  48E,496
1630:  MOVWF  x97
1632:  MOVLB  0
1634:  CALL   02E6
....................             if (count >= max+1) {set_timer0(1);}    
1638:  MOVLW  01
163A:  MOVLB  4
163C:  ADDWF  x73,W
163E:  MOVWF  00
1640:  BTFSC  FE8.7
1642:  BRA    164A
1644:  MOVF   00,W
1646:  SUBWF  x78,W
1648:  BNC   1650
164A:  CLRF   FD7
164C:  MOVLW  01
164E:  MOVWF  FD6
....................          } 
....................          //readGP2D12(); 
....................          //readSR_04(); 
....................          readDS(); 
1650:  MOVLB  0
1652:  GOTO   0AC4
....................          read_temp(); 
1656:  GOTO   0D40
....................          //BaoChay(); 
....................          phim_up(); 
165A:  GOTO   0E10
....................          phim_dw(); 
165E:  BRA    0ED6
....................          if(ttct_td==1) sang_tat_32led(5,1); 
1660:  DECFSZ 41,W
1662:  BRA    1672
1664:  MOVLW  05
1666:  MOVLB  4
1668:  MOVWF  x8C
166A:  MOVLW  01
166C:  MOVWF  x8D
166E:  MOVLB  0
1670:  RCALL  112C
....................          if(ttct_td==2) sang_tat_dan_ngoai_vao_32led(5,1); 
1672:  MOVF   41,W
1674:  SUBLW  02
1676:  BNZ   1686
1678:  MOVLW  05
167A:  MOVLB  4
167C:  MOVWF  x8C
167E:  MOVLW  01
1680:  MOVWF  x8D
1682:  MOVLB  0
1684:  RCALL  1190
....................          if(ttct_td==3) sang_don_pst_32led(5,1); 
1686:  MOVF   41,W
1688:  SUBLW  03
168A:  BNZ   169A
168C:  MOVLW  05
168E:  MOVLB  4
1690:  MOVWF  x8C
1692:  MOVLW  01
1694:  MOVWF  x8D
1696:  MOVLB  0
1698:  RCALL  1212
....................          if(ttct_td==4) sang_tat_dan_pst_32led(5,1); 
169A:  MOVF   41,W
169C:  SUBLW  04
169E:  BNZ   16AE
16A0:  MOVLW  05
16A2:  MOVLB  4
16A4:  MOVWF  x8C
16A6:  MOVLW  01
16A8:  MOVWF  x8D
16AA:  MOVLB  0
16AC:  RCALL  1294
....................          if(ttct_td==5) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
16AE:  MOVF   41,W
16B0:  SUBLW  05
16B2:  BNZ   16C2
16B4:  MOVLW  05
16B6:  MOVLB  4
16B8:  MOVWF  x8C
16BA:  MOVLW  01
16BC:  MOVWF  x8D
16BE:  MOVLB  0
16C0:  RCALL  1318
....................          if(ttct_td==6) sang_don_pst_32led(5,1); 
16C2:  MOVF   41,W
16C4:  SUBLW  06
16C6:  BNZ   16D6
16C8:  MOVLW  05
16CA:  MOVLB  4
16CC:  MOVWF  x8C
16CE:  MOVLW  01
16D0:  MOVWF  x8D
16D2:  MOVLB  0
16D4:  RCALL  1212
....................          if(ttct_td==7) sang_don_pst_32led(5,1); 
16D6:  MOVF   41,W
16D8:  SUBLW  07
16DA:  BNZ   16EA
16DC:  MOVLW  05
16DE:  MOVLB  4
16E0:  MOVWF  x8C
16E2:  MOVLW  01
16E4:  MOVWF  x8D
16E6:  MOVLB  0
16E8:  RCALL  1212
....................          if(ttct_td==8) sang_tat_32led(5,1); 
16EA:  MOVF   41,W
16EC:  SUBLW  08
16EE:  BNZ   16FE
16F0:  MOVLW  05
16F2:  MOVLB  4
16F4:  MOVWF  x8C
16F6:  MOVLW  01
16F8:  MOVWF  x8D
16FA:  MOVLB  0
16FC:  RCALL  112C
....................          if(ttct_td==9) sang_tat_dan_ngoai_vao_32led(5,1); 
16FE:  MOVF   41,W
1700:  SUBLW  09
1702:  BNZ   1712
1704:  MOVLW  05
1706:  MOVLB  4
1708:  MOVWF  x8C
170A:  MOVLW  01
170C:  MOVWF  x8D
170E:  MOVLB  0
1710:  RCALL  1190
....................          if(ttct_td==10) sang_don_pst_32led(5,1); 
1712:  MOVF   41,W
1714:  SUBLW  0A
1716:  BNZ   1726
1718:  MOVLW  05
171A:  MOVLB  4
171C:  MOVWF  x8C
171E:  MOVLW  01
1720:  MOVWF  x8D
1722:  MOVLB  0
1724:  RCALL  1212
....................          if(ttct_td==11) sang_tat_dan_pst_32led(5,1); 
1726:  MOVF   41,W
1728:  SUBLW  0B
172A:  BNZ   173A
172C:  MOVLW  05
172E:  MOVLB  4
1730:  MOVWF  x8C
1732:  MOVLW  01
1734:  MOVWF  x8D
1736:  MOVLB  0
1738:  RCALL  1294
....................          if(ttct_td==12) sang_tat_dan_phai_sang_trai_2x16led(5,1); 
173A:  MOVF   41,W
173C:  SUBLW  0C
173E:  BNZ   174E
1740:  MOVLW  05
1742:  MOVLB  4
1744:  MOVWF  x8C
1746:  MOVLW  01
1748:  MOVWF  x8D
174A:  MOVLB  0
174C:  RCALL  1318
....................          if(ttct_td==13) sang_tat_dan_pst_32led(5,1); 
174E:  MOVF   41,W
1750:  SUBLW  0D
1752:  BNZ   1762
1754:  MOVLW  05
1756:  MOVLB  4
1758:  MOVWF  x8C
175A:  MOVLW  01
175C:  MOVWF  x8D
175E:  MOVLB  0
1760:  RCALL  1294
....................          if(ttct_td==14) sang_tat_dan_tsp_32led(5,1); 
1762:  MOVF   41,W
1764:  SUBLW  0E
1766:  BNZ   1776
1768:  MOVLW  05
176A:  MOVLB  4
176C:  MOVWF  x8C
176E:  MOVLW  01
1770:  MOVWF  x8D
1772:  MOVLB  0
1774:  BRA    137E
....................          if(ttct_td==15) sang_don_pst_32led(5,1); 
1776:  MOVF   41,W
1778:  SUBLW  0F
177A:  BNZ   178A
177C:  MOVLW  05
177E:  MOVLB  4
1780:  MOVWF  x8C
1782:  MOVLW  01
1784:  MOVWF  x8D
1786:  MOVLB  0
1788:  RCALL  1212
....................          if(ttct_td>15) ttct_td =1; 
178A:  BTFSC  41.7
178C:  BRA    1798
178E:  MOVF   41,W
1790:  SUBLW  0F
1792:  BC    1798
1794:  MOVLW  01
1796:  MOVWF  41
....................          bdn++;       
1798:  MOVLB  4
179A:  INCF   x6A,F
....................       } 
179C:  BRA    17C8
....................       else  
....................       { 
....................          bdn = bdn -10; 
179E:  MOVLW  0A
17A0:  SUBWF  x6A,F
....................          giay++;  
17A2:  INCF   x69,F
....................  
....................             if (giay==60) { giay = 0; phut++; 
17A4:  MOVF   x69,W
17A6:  SUBLW  3C
17A8:  BNZ   17C0
17AA:  CLRF   x69
17AC:  INCF   x6B,F
....................                if (phut == 60) { phut = 0; gio++;  
17AE:  MOVF   x6B,W
17B0:  SUBLW  3C
17B2:  BNZ   17C0
17B4:  CLRF   x6B
17B6:  INCF   x6C,F
....................                   if (gio == 24) gio = 0; 
17B8:  MOVF   x6C,W
17BA:  SUBLW  18
17BC:  BNZ   17C0
17BE:  CLRF   x6C
....................                }  
....................             } 
....................          giai_ma(); 
17C0:  MOVLB  0
17C2:  CALL   0742
17C6:  MOVLB  4
....................       } 
17C8:  BRA    1592
....................    }            
.................... } 
....................  
17CA:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
